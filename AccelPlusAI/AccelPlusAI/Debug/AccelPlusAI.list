
AccelPlusAI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000785c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  080079fc  080079fc  000179fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e58  08007e58  00020108  2**0
                  CONTENTS
  4 .ARM          00000008  08007e58  08007e58  00017e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e60  08007e60  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e60  08007e60  00017e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e64  08007e64  00017e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08007e68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  20000108  08007f70  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  20000368  08007f70  00020368  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025a8e  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f74  00000000  00000000  00045bc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001b10  00000000  00000000  00048b40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019f8  00000000  00000000  0004a650  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018bf5  00000000  00000000  0004c048  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000102c8  00000000  00000000  00064c3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00093055  00000000  00000000  00074f05  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00107f5a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c28  00000000  00000000  00107fd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000108 	.word	0x20000108
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080079e4 	.word	0x080079e4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000010c 	.word	0x2000010c
 80001dc:	080079e4 	.word	0x080079e4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <LSM6DSO_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_RegisterBusIO(LSM6DSO_Object_t *pObj, LSM6DSO_IO_t *pIO)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800058a:	2300      	movs	r3, #0
 800058c:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d103      	bne.n	800059c <LSM6DSO_RegisterBusIO+0x1c>
  {
    ret = LSM6DSO_ERROR;
 8000594:	f04f 33ff 	mov.w	r3, #4294967295
 8000598:	60fb      	str	r3, [r7, #12]
 800059a:	e04d      	b.n	8000638 <LSM6DSO_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	681a      	ldr	r2, [r3, #0]
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	685a      	ldr	r2, [r3, #4]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 80005ac:	683b      	ldr	r3, [r7, #0]
 80005ae:	689a      	ldr	r2, [r3, #8]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	7b1a      	ldrb	r2, [r3, #12]
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	691a      	ldr	r2, [r3, #16]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80005c4:	683b      	ldr	r3, [r7, #0]
 80005c6:	695a      	ldr	r2, [r3, #20]
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 80005cc:	683b      	ldr	r3, [r7, #0]
 80005ce:	699a      	ldr	r2, [r3, #24]
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a1b      	ldr	r2, [pc, #108]	; (8000644 <LSM6DSO_RegisterBusIO+0xc4>)
 80005d8:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	4a1a      	ldr	r2, [pc, #104]	; (8000648 <LSM6DSO_RegisterBusIO+0xc8>)
 80005de:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d103      	bne.n	80005f6 <LSM6DSO_RegisterBusIO+0x76>
    {
      ret = LSM6DSO_ERROR;
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295
 80005f2:	60fb      	str	r3, [r7, #12]
 80005f4:	e020      	b.n	8000638 <LSM6DSO_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSO_OK)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4798      	blx	r3
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d003      	beq.n	800060a <LSM6DSO_RegisterBusIO+0x8a>
    {
      ret = LSM6DSO_ERROR;
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	e016      	b.n	8000638 <LSM6DSO_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSO_SPI_3WIRES_BUS) /* SPI 3-Wires */
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	689b      	ldr	r3, [r3, #8]
 800060e:	2b02      	cmp	r3, #2
 8000610:	d112      	bne.n	8000638 <LSM6DSO_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000618:	2b00      	cmp	r3, #0
 800061a:	d10d      	bne.n	8000638 <LSM6DSO_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 800061c:	230c      	movs	r3, #12
 800061e:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSO_Write_Reg(pObj, LSM6DSO_CTRL3_C, data) != LSM6DSO_OK)
 8000620:	7afb      	ldrb	r3, [r7, #11]
 8000622:	461a      	mov	r2, r3
 8000624:	2112      	movs	r1, #18
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f000 ff71 	bl	800150e <LSM6DSO_Write_Reg>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d002      	beq.n	8000638 <LSM6DSO_RegisterBusIO+0xb8>
          {
            ret = LSM6DSO_ERROR;
 8000632:	f04f 33ff 	mov.w	r3, #4294967295
 8000636:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 8000638:	68fb      	ldr	r3, [r7, #12]
}
 800063a:	4618      	mov	r0, r3
 800063c:	3710      	adds	r7, #16
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	08001aad 	.word	0x08001aad
 8000648:	08001ae3 	.word	0x08001ae3

0800064c <LSM6DSO_Init>:
 * @brief  Initialize the LSM6DSO sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_Init(LSM6DSO_Object_t *pObj)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
  /* Disable I3C */
  if (lsm6dso_i3c_disable_set(&(pObj->Ctx), LSM6DSO_I3C_DISABLE) != LSM6DSO_OK)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	331c      	adds	r3, #28
 8000658:	2180      	movs	r1, #128	; 0x80
 800065a:	4618      	mov	r0, r3
 800065c:	f001 ff37 	bl	80024ce <lsm6dso_i3c_disable_set>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d002      	beq.n	800066c <LSM6DSO_Init+0x20>
  {
    return LSM6DSO_ERROR;
 8000666:	f04f 33ff 	mov.w	r3, #4294967295
 800066a:	e060      	b.n	800072e <LSM6DSO_Init+0xe2>
  }

  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dso_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	331c      	adds	r3, #28
 8000670:	2101      	movs	r1, #1
 8000672:	4618      	mov	r0, r3
 8000674:	f001 feb9 	bl	80023ea <lsm6dso_auto_increment_set>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d002      	beq.n	8000684 <LSM6DSO_Init+0x38>
  {
    return LSM6DSO_ERROR;
 800067e:	f04f 33ff 	mov.w	r3, #4294967295
 8000682:	e054      	b.n	800072e <LSM6DSO_Init+0xe2>
  }

  /* Enable BDU */
  if (lsm6dso_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSO_OK)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	331c      	adds	r3, #28
 8000688:	2101      	movs	r1, #1
 800068a:	4618      	mov	r0, r3
 800068c:	f001 fdfc 	bl	8002288 <lsm6dso_block_data_update_set>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d002      	beq.n	800069c <LSM6DSO_Init+0x50>
  {
    return LSM6DSO_ERROR;
 8000696:	f04f 33ff 	mov.w	r3, #4294967295
 800069a:	e048      	b.n	800072e <LSM6DSO_Init+0xe2>
  }

  /* FIFO mode selection */
  if (lsm6dso_fifo_mode_set(&(pObj->Ctx), LSM6DSO_BYPASS_MODE) != LSM6DSO_OK)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	331c      	adds	r3, #28
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f001 ff59 	bl	800255a <lsm6dso_fifo_mode_set>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d002      	beq.n	80006b4 <LSM6DSO_Init+0x68>
  {
    return LSM6DSO_ERROR;
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295
 80006b2:	e03c      	b.n	800072e <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_104Hz;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	2204      	movs	r2, #4
 80006b8:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	331c      	adds	r3, #28
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f001 fab6 	bl	8001c34 <lsm6dso_xl_data_rate_set>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d002      	beq.n	80006d4 <LSM6DSO_Init+0x88>
  {
    return LSM6DSO_ERROR;
 80006ce:	f04f 33ff 	mov.w	r3, #4294967295
 80006d2:	e02c      	b.n	800072e <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), LSM6DSO_2g) != LSM6DSO_OK)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	331c      	adds	r3, #28
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 fa4c 	bl	8001b78 <lsm6dso_xl_full_scale_set>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d002      	beq.n	80006ec <LSM6DSO_Init+0xa0>
  {
    return LSM6DSO_ERROR;
 80006e6:	f04f 33ff 	mov.w	r3, #4294967295
 80006ea:	e020      	b.n	800072e <LSM6DSO_Init+0xe2>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSO_GY_ODR_104Hz;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2204      	movs	r2, #4
 80006f0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	331c      	adds	r3, #28
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 fc66 	bl	8001fcc <lsm6dso_gy_data_rate_set>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d002      	beq.n	800070c <LSM6DSO_Init+0xc0>
  {
    return LSM6DSO_ERROR;
 8000706:	f04f 33ff 	mov.w	r3, #4294967295
 800070a:	e010      	b.n	800072e <LSM6DSO_Init+0xe2>
  }

  /* Full scale selection. */
  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), LSM6DSO_2000dps) != LSM6DSO_OK)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	331c      	adds	r3, #28
 8000710:	2106      	movs	r1, #6
 8000712:	4618      	mov	r0, r3
 8000714:	f001 fbf2 	bl	8001efc <lsm6dso_gy_full_scale_set>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d002      	beq.n	8000724 <LSM6DSO_Init+0xd8>
  {
    return LSM6DSO_ERROR;
 800071e:	f04f 33ff 	mov.w	r3, #4294967295
 8000722:	e004      	b.n	800072e <LSM6DSO_Init+0xe2>
  }

  pObj->is_initialized = 1;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2201      	movs	r2, #1
 8000728:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 800072c:	2300      	movs	r3, #0
}
 800072e:	4618      	mov	r0, r3
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}

08000736 <LSM6DSO_DeInit>:
 * @brief  Deinitialize the LSM6DSO sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_DeInit(LSM6DSO_Object_t *pObj)
{
 8000736:	b580      	push	{r7, lr}
 8000738:	b082      	sub	sp, #8
 800073a:	af00      	add	r7, sp, #0
 800073c:	6078      	str	r0, [r7, #4]
  /* Disable the component */
  if (LSM6DSO_ACC_Disable(pObj) != LSM6DSO_OK)
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f000 f888 	bl	8000854 <LSM6DSO_ACC_Disable>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d002      	beq.n	8000750 <LSM6DSO_DeInit+0x1a>
  {
    return LSM6DSO_ERROR;
 800074a:	f04f 33ff 	mov.w	r3, #4294967295
 800074e:	e015      	b.n	800077c <LSM6DSO_DeInit+0x46>
  }

  if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8000750:	6878      	ldr	r0, [r7, #4]
 8000752:	f000 fc2c 	bl	8000fae <LSM6DSO_GYRO_Disable>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d002      	beq.n	8000762 <LSM6DSO_DeInit+0x2c>
  {
    return LSM6DSO_ERROR;
 800075c:	f04f 33ff 	mov.w	r3, #4294967295
 8000760:	e00c      	b.n	800077c <LSM6DSO_DeInit+0x46>
  }

  /* Reset output data rate. */
  pObj->acc_odr = LSM6DSO_XL_ODR_OFF;
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	2200      	movs	r2, #0
 8000766:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  pObj->gyro_odr = LSM6DSO_GY_ODR_OFF;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2200      	movs	r2, #0
 800076e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  pObj->is_initialized = 0;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2200      	movs	r2, #0
 8000776:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSO_OK;
 800077a:	2300      	movs	r3, #0
}
 800077c:	4618      	mov	r0, r3
 800077e:	3708      	adds	r7, #8
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <LSM6DSO_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ReadID(LSM6DSO_Object_t *pObj, uint8_t *Id)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	6039      	str	r1, [r7, #0]
  if (lsm6dso_device_id_get(&(pObj->Ctx), Id) != LSM6DSO_OK)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	331c      	adds	r3, #28
 8000792:	6839      	ldr	r1, [r7, #0]
 8000794:	4618      	mov	r0, r3
 8000796:	f001 fe17 	bl	80023c8 <lsm6dso_device_id_get>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d002      	beq.n	80007a6 <LSM6DSO_ReadID+0x22>
  {
    return LSM6DSO_ERROR;
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
 80007a4:	e000      	b.n	80007a8 <LSM6DSO_ReadID+0x24>
  }

  return LSM6DSO_OK;
 80007a6:	2300      	movs	r3, #0
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <LSM6DSO_GetCapabilities>:
 * @param  pObj Component object pointer
 * @param  Capabilities pointer to LSM6DSO sensor capabilities
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GetCapabilities(LSM6DSO_Object_t *pObj, LSM6DSO_Capabilities_t *Capabilities)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  (void)(pObj);

  Capabilities->Acc          = 1;
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	2201      	movs	r2, #1
 80007be:	701a      	strb	r2, [r3, #0]
  Capabilities->Gyro         = 1;
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	2201      	movs	r2, #1
 80007c4:	705a      	strb	r2, [r3, #1]
  Capabilities->Magneto      = 0;
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	2200      	movs	r2, #0
 80007ca:	709a      	strb	r2, [r3, #2]
  Capabilities->LowPower     = 0;
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	2200      	movs	r2, #0
 80007d0:	70da      	strb	r2, [r3, #3]
  Capabilities->GyroMaxFS    = 2000;
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80007d8:	605a      	str	r2, [r3, #4]
  Capabilities->AccMaxFS     = 16;
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	2210      	movs	r2, #16
 80007de:	609a      	str	r2, [r3, #8]
  Capabilities->MagMaxFS     = 0;
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  Capabilities->GyroMaxOdr   = 6660.0f;
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	4a07      	ldr	r2, [pc, #28]	; (8000808 <LSM6DSO_GetCapabilities+0x58>)
 80007ea:	611a      	str	r2, [r3, #16]
  Capabilities->AccMaxOdr    = 6660.0f;
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	4a06      	ldr	r2, [pc, #24]	; (8000808 <LSM6DSO_GetCapabilities+0x58>)
 80007f0:	615a      	str	r2, [r3, #20]
  Capabilities->MagMaxOdr    = 0.0f;
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	f04f 0200 	mov.w	r2, #0
 80007f8:	619a      	str	r2, [r3, #24]
  return LSM6DSO_OK;
 80007fa:	2300      	movs	r3, #0
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000806:	4770      	bx	lr
 8000808:	45d02000 	.word	0x45d02000

0800080c <LSM6DSO_ACC_Enable>:
 * @brief  Enable the LSM6DSO accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_Enable(LSM6DSO_Object_t *pObj)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800081a:	2b01      	cmp	r3, #1
 800081c:	d101      	bne.n	8000822 <LSM6DSO_ACC_Enable+0x16>
  {
    return LSM6DSO_OK;
 800081e:	2300      	movs	r3, #0
 8000820:	e014      	b.n	800084c <LSM6DSO_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSO_OK)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	f103 021c 	add.w	r2, r3, #28
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800082e:	4619      	mov	r1, r3
 8000830:	4610      	mov	r0, r2
 8000832:	f001 f9ff 	bl	8001c34 <lsm6dso_xl_data_rate_set>
 8000836:	4603      	mov	r3, r0
 8000838:	2b00      	cmp	r3, #0
 800083a:	d002      	beq.n	8000842 <LSM6DSO_ACC_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 800083c:	f04f 33ff 	mov.w	r3, #4294967295
 8000840:	e004      	b.n	800084c <LSM6DSO_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	2201      	movs	r2, #1
 8000846:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 800084a:	2300      	movs	r3, #0
}
 800084c:	4618      	mov	r0, r3
 800084e:	3708      	adds	r7, #8
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}

08000854 <LSM6DSO_ACC_Disable>:
 * @brief  Disable the LSM6DSO accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_Disable(LSM6DSO_Object_t *pObj)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->acc_is_enabled == 0U)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000862:	2b00      	cmp	r3, #0
 8000864:	d101      	bne.n	800086a <LSM6DSO_ACC_Disable+0x16>
  {
    return LSM6DSO_OK;
 8000866:	2300      	movs	r3, #0
 8000868:	e01f      	b.n	80008aa <LSM6DSO_ACC_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSO_OK)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f103 021c 	add.w	r2, r3, #28
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	332b      	adds	r3, #43	; 0x2b
 8000874:	4619      	mov	r1, r3
 8000876:	4610      	mov	r0, r2
 8000878:	f001 fad8 	bl	8001e2c <lsm6dso_xl_data_rate_get>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d002      	beq.n	8000888 <LSM6DSO_ACC_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8000882:	f04f 33ff 	mov.w	r3, #4294967295
 8000886:	e010      	b.n	80008aa <LSM6DSO_ACC_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	331c      	adds	r3, #28
 800088c:	2100      	movs	r1, #0
 800088e:	4618      	mov	r0, r3
 8000890:	f001 f9d0 	bl	8001c34 <lsm6dso_xl_data_rate_set>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d002      	beq.n	80008a0 <LSM6DSO_ACC_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 800089a:	f04f 33ff 	mov.w	r3, #4294967295
 800089e:	e004      	b.n	80008aa <LSM6DSO_ACC_Disable+0x56>
  }

  pObj->acc_is_enabled = 0;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2200      	movs	r2, #0
 80008a4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSO_OK;
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <LSM6DSO_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
 80008bc:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	331c      	adds	r3, #28
 80008c6:	f107 020b 	add.w	r2, r7, #11
 80008ca:	4611      	mov	r1, r2
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 f979 	bl	8001bc4 <lsm6dso_xl_full_scale_get>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d002      	beq.n	80008de <LSM6DSO_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 80008d8:	f04f 33ff 	mov.w	r3, #4294967295
 80008dc:	e023      	b.n	8000926 <LSM6DSO_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 80008de:	7afb      	ldrb	r3, [r7, #11]
 80008e0:	2b03      	cmp	r3, #3
 80008e2:	d81b      	bhi.n	800091c <LSM6DSO_ACC_GetSensitivity+0x68>
 80008e4:	a201      	add	r2, pc, #4	; (adr r2, 80008ec <LSM6DSO_ACC_GetSensitivity+0x38>)
 80008e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ea:	bf00      	nop
 80008ec:	080008fd 	.word	0x080008fd
 80008f0:	08000915 	.word	0x08000915
 80008f4:	08000905 	.word	0x08000905
 80008f8:	0800090d 	.word	0x0800090d
  {
    case LSM6DSO_2g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_2G;
 80008fc:	683b      	ldr	r3, [r7, #0]
 80008fe:	4a0c      	ldr	r2, [pc, #48]	; (8000930 <LSM6DSO_ACC_GetSensitivity+0x7c>)
 8000900:	601a      	str	r2, [r3, #0]
      break;
 8000902:	e00f      	b.n	8000924 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_4g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_4G;
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	4a0b      	ldr	r2, [pc, #44]	; (8000934 <LSM6DSO_ACC_GetSensitivity+0x80>)
 8000908:	601a      	str	r2, [r3, #0]
      break;
 800090a:	e00b      	b.n	8000924 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_8g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_8G;
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	4a0a      	ldr	r2, [pc, #40]	; (8000938 <LSM6DSO_ACC_GetSensitivity+0x84>)
 8000910:	601a      	str	r2, [r3, #0]
      break;
 8000912:	e007      	b.n	8000924 <LSM6DSO_ACC_GetSensitivity+0x70>

    case LSM6DSO_16g:
      *Sensitivity = LSM6DSO_ACC_SENSITIVITY_FS_16G;
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	4a09      	ldr	r2, [pc, #36]	; (800093c <LSM6DSO_ACC_GetSensitivity+0x88>)
 8000918:	601a      	str	r2, [r3, #0]
      break;
 800091a:	e003      	b.n	8000924 <LSM6DSO_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSO_ERROR;
 800091c:	f04f 33ff 	mov.w	r3, #4294967295
 8000920:	60fb      	str	r3, [r7, #12]
      break;
 8000922:	bf00      	nop
  }

  return ret;
 8000924:	68fb      	ldr	r3, [r7, #12]
}
 8000926:	4618      	mov	r0, r3
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	3d79db23 	.word	0x3d79db23
 8000934:	3df9db23 	.word	0x3df9db23
 8000938:	3e79db23 	.word	0x3e79db23
 800093c:	3ef9db23 	.word	0x3ef9db23

08000940 <LSM6DSO_ACC_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b084      	sub	sp, #16
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_xl_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	331c      	adds	r3, #28
 8000952:	f107 020b 	add.w	r2, r7, #11
 8000956:	4611      	mov	r1, r2
 8000958:	4618      	mov	r0, r3
 800095a:	f001 fa67 	bl	8001e2c <lsm6dso_xl_data_rate_get>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d002      	beq.n	800096a <LSM6DSO_ACC_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 8000964:	f04f 33ff 	mov.w	r3, #4294967295
 8000968:	e054      	b.n	8000a14 <LSM6DSO_ACC_GetOutputDataRate+0xd4>
  }

  switch (odr_low_level)
 800096a:	7afb      	ldrb	r3, [r7, #11]
 800096c:	2b0b      	cmp	r3, #11
 800096e:	d84c      	bhi.n	8000a0a <LSM6DSO_ACC_GetOutputDataRate+0xca>
 8000970:	a201      	add	r2, pc, #4	; (adr r2, 8000978 <LSM6DSO_ACC_GetOutputDataRate+0x38>)
 8000972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000976:	bf00      	nop
 8000978:	080009a9 	.word	0x080009a9
 800097c:	080009bb 	.word	0x080009bb
 8000980:	080009c3 	.word	0x080009c3
 8000984:	080009cb 	.word	0x080009cb
 8000988:	080009d3 	.word	0x080009d3
 800098c:	080009db 	.word	0x080009db
 8000990:	080009e3 	.word	0x080009e3
 8000994:	080009eb 	.word	0x080009eb
 8000998:	080009f3 	.word	0x080009f3
 800099c:	080009fb 	.word	0x080009fb
 80009a0:	08000a03 	.word	0x08000a03
 80009a4:	080009b3 	.word	0x080009b3
  {
    case LSM6DSO_XL_ODR_OFF:
      *Odr = 0.0f;
 80009a8:	683b      	ldr	r3, [r7, #0]
 80009aa:	f04f 0200 	mov.w	r2, #0
 80009ae:	601a      	str	r2, [r3, #0]
      break;
 80009b0:	e02f      	b.n	8000a12 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1Hz6:
      *Odr = 1.6f;
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	4a19      	ldr	r2, [pc, #100]	; (8000a1c <LSM6DSO_ACC_GetOutputDataRate+0xdc>)
 80009b6:	601a      	str	r2, [r3, #0]
      break;
 80009b8:	e02b      	b.n	8000a12 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_12Hz5:
      *Odr = 12.5f;
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	4a18      	ldr	r2, [pc, #96]	; (8000a20 <LSM6DSO_ACC_GetOutputDataRate+0xe0>)
 80009be:	601a      	str	r2, [r3, #0]
      break;
 80009c0:	e027      	b.n	8000a12 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_26Hz:
      *Odr = 26.0f;
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	4a17      	ldr	r2, [pc, #92]	; (8000a24 <LSM6DSO_ACC_GetOutputDataRate+0xe4>)
 80009c6:	601a      	str	r2, [r3, #0]
      break;
 80009c8:	e023      	b.n	8000a12 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_52Hz:
      *Odr = 52.0f;
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	4a16      	ldr	r2, [pc, #88]	; (8000a28 <LSM6DSO_ACC_GetOutputDataRate+0xe8>)
 80009ce:	601a      	str	r2, [r3, #0]
      break;
 80009d0:	e01f      	b.n	8000a12 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_104Hz:
      *Odr = 104.0f;
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	4a15      	ldr	r2, [pc, #84]	; (8000a2c <LSM6DSO_ACC_GetOutputDataRate+0xec>)
 80009d6:	601a      	str	r2, [r3, #0]
      break;
 80009d8:	e01b      	b.n	8000a12 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_208Hz:
      *Odr = 208.0f;
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	4a14      	ldr	r2, [pc, #80]	; (8000a30 <LSM6DSO_ACC_GetOutputDataRate+0xf0>)
 80009de:	601a      	str	r2, [r3, #0]
      break;
 80009e0:	e017      	b.n	8000a12 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_417Hz:
      *Odr = 417.0f;
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	4a13      	ldr	r2, [pc, #76]	; (8000a34 <LSM6DSO_ACC_GetOutputDataRate+0xf4>)
 80009e6:	601a      	str	r2, [r3, #0]
      break;
 80009e8:	e013      	b.n	8000a12 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_833Hz:
      *Odr = 833.0f;
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	4a12      	ldr	r2, [pc, #72]	; (8000a38 <LSM6DSO_ACC_GetOutputDataRate+0xf8>)
 80009ee:	601a      	str	r2, [r3, #0]
      break;
 80009f0:	e00f      	b.n	8000a12 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_1667Hz:
      *Odr = 1667.0f;
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	4a11      	ldr	r2, [pc, #68]	; (8000a3c <LSM6DSO_ACC_GetOutputDataRate+0xfc>)
 80009f6:	601a      	str	r2, [r3, #0]
      break;
 80009f8:	e00b      	b.n	8000a12 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_3333Hz:
      *Odr = 3333.0f;
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	4a10      	ldr	r2, [pc, #64]	; (8000a40 <LSM6DSO_ACC_GetOutputDataRate+0x100>)
 80009fe:	601a      	str	r2, [r3, #0]
      break;
 8000a00:	e007      	b.n	8000a12 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    case LSM6DSO_XL_ODR_6667Hz:
      *Odr = 6667.0f;
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	4a0f      	ldr	r2, [pc, #60]	; (8000a44 <LSM6DSO_ACC_GetOutputDataRate+0x104>)
 8000a06:	601a      	str	r2, [r3, #0]
      break;
 8000a08:	e003      	b.n	8000a12 <LSM6DSO_ACC_GetOutputDataRate+0xd2>

    default:
      ret = LSM6DSO_ERROR;
 8000a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0e:	60fb      	str	r3, [r7, #12]
      break;
 8000a10:	bf00      	nop
  }

  return ret;
 8000a12:	68fb      	ldr	r3, [r7, #12]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	3fcccccd 	.word	0x3fcccccd
 8000a20:	41480000 	.word	0x41480000
 8000a24:	41d00000 	.word	0x41d00000
 8000a28:	42500000 	.word	0x42500000
 8000a2c:	42d00000 	.word	0x42d00000
 8000a30:	43500000 	.word	0x43500000
 8000a34:	43d08000 	.word	0x43d08000
 8000a38:	44504000 	.word	0x44504000
 8000a3c:	44d06000 	.word	0x44d06000
 8000a40:	45505000 	.word	0x45505000
 8000a44:	45d05800 	.word	0x45d05800

08000a48 <LSM6DSO_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_ACC_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_ACC_HIGH_PERFORMANCE_MODE);
 8000a54:	2100      	movs	r1, #0
 8000a56:	ed97 0a00 	vldr	s0, [r7]
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	f000 f806 	bl	8000a6c <LSM6DSO_ACC_SetOutputDataRate_With_Mode>
 8000a60:	4603      	mov	r3, r0
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <LSM6DSO_ACC_SetOutputDataRate_With_Mode>:
 * @param  Mode the accelerometer operating mode
 * @note   This function switches off the gyroscope if Ultra Low Power Mode is set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_ACC_Operating_Mode_t Mode)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08c      	sub	sp, #48	; 0x30
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	60f8      	str	r0, [r7, #12]
 8000a74:	ed87 0a02 	vstr	s0, [r7, #8]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  float_t newOdr = Odr;
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	62bb      	str	r3, [r7, #40]	; 0x28
  
  switch (Mode)
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	2b01      	cmp	r3, #1
 8000a88:	d079      	beq.n	8000b7e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x112>
 8000a8a:	2b02      	cmp	r3, #2
 8000a8c:	f000 80e5 	beq.w	8000c5a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1ee>
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	f040 815e 	bne.w	8000d52 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e6>
    {
      /* We must uncheck Low Power and Ultra Low Power bits if they are enabled */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	f103 001c 	add.w	r0, r3, #28
 8000a9c:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	2114      	movs	r1, #20
 8000aa4:	f001 f838 	bl	8001b18 <lsm6dso_read_reg>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d002      	beq.n	8000ab4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x48>
      {
        return LSM6DSO_ERROR;
 8000aae:	f04f 33ff 	mov.w	r3, #4294967295
 8000ab2:	e16c      	b.n	8000d8e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val1.xl_ulp_en != 0U)
 8000ab4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ab8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d025      	beq.n	8000b0e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa2>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000ac8:	2b01      	cmp	r3, #1
 8000aca:	d10b      	bne.n	8000ae4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x78>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	331c      	adds	r3, #28
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f001 f8ae 	bl	8001c34 <lsm6dso_xl_data_rate_set>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d002      	beq.n	8000ae4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x78>
          {
            return LSM6DSO_ERROR;
 8000ade:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae2:	e154      	b.n	8000d8e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
          }
        }

        val1.xl_ulp_en = 0;
 8000ae4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000ae8:	f36f 13c7 	bfc	r3, #7, #1
 8000aec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	f103 001c 	add.w	r0, r3, #28
 8000af6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000afa:	2301      	movs	r3, #1
 8000afc:	2114      	movs	r1, #20
 8000afe:	f001 f823 	bl	8001b48 <lsm6dso_write_reg>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d002      	beq.n	8000b0e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xa2>
        {
          return LSM6DSO_ERROR;
 8000b08:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0c:	e13f      	b.n	8000d8e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	f103 001c 	add.w	r0, r3, #28
 8000b14:	f107 0220 	add.w	r2, r7, #32
 8000b18:	2301      	movs	r3, #1
 8000b1a:	2115      	movs	r1, #21
 8000b1c:	f000 fffc 	bl	8001b18 <lsm6dso_read_reg>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d002      	beq.n	8000b2c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xc0>
      {
        return LSM6DSO_ERROR;
 8000b26:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2a:	e130      	b.n	8000d8e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val2.xl_hm_mode != 0U)
 8000b2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b30:	f003 0310 	and.w	r3, r3, #16
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d014      	beq.n	8000b64 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xf8>
      {
        val2.xl_hm_mode = 0U;
 8000b3a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b3e:	f36f 1304 	bfc	r3, #4, #1
 8000b42:	f887 3020 	strb.w	r3, [r7, #32]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	f103 001c 	add.w	r0, r3, #28
 8000b4c:	f107 0220 	add.w	r2, r7, #32
 8000b50:	2301      	movs	r3, #1
 8000b52:	2115      	movs	r1, #21
 8000b54:	f000 fff8 	bl	8001b48 <lsm6dso_write_reg>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d002      	beq.n	8000b64 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0xf8>
        {
          return LSM6DSO_ERROR;
 8000b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b62:	e114      	b.n	8000d8e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      /* ODR should be at least 12.5Hz */
      if (newOdr < 12.5f)
 8000b64:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000b68:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8000b6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b74:	d400      	bmi.n	8000b78 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x10c>
      {
        newOdr = 12.5f;
      }
      break;
 8000b76:	e0f0      	b.n	8000d5a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
        newOdr = 12.5f;
 8000b78:	4b87      	ldr	r3, [pc, #540]	; (8000d98 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x32c>)
 8000b7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b7c:	e0ed      	b.n	8000d5a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
      /* We must uncheck Ultra Low Power bit if it is enabled */
      /* and check the Low Power bit if it is unchecked       */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f103 001c 	add.w	r0, r3, #28
 8000b84:	f107 021c 	add.w	r2, r7, #28
 8000b88:	2301      	movs	r3, #1
 8000b8a:	2114      	movs	r1, #20
 8000b8c:	f000 ffc4 	bl	8001b18 <lsm6dso_read_reg>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d002      	beq.n	8000b9c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x130>
      {
        return LSM6DSO_ERROR;
 8000b96:	f04f 33ff 	mov.w	r3, #4294967295
 8000b9a:	e0f8      	b.n	8000d8e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val1.xl_ulp_en != 0U)
 8000b9c:	7f3b      	ldrb	r3, [r7, #28]
 8000b9e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d023      	beq.n	8000bf0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x184>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d10b      	bne.n	8000bca <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x15e>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	331c      	adds	r3, #28
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f001 f83b 	bl	8001c34 <lsm6dso_xl_data_rate_set>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d002      	beq.n	8000bca <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x15e>
          {
            return LSM6DSO_ERROR;
 8000bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc8:	e0e1      	b.n	8000d8e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
          }
        }

        val1.xl_ulp_en = 0;
 8000bca:	7f3b      	ldrb	r3, [r7, #28]
 8000bcc:	f36f 13c7 	bfc	r3, #7, #1
 8000bd0:	773b      	strb	r3, [r7, #28]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f103 001c 	add.w	r0, r3, #28
 8000bd8:	f107 021c 	add.w	r2, r7, #28
 8000bdc:	2301      	movs	r3, #1
 8000bde:	2114      	movs	r1, #20
 8000be0:	f000 ffb2 	bl	8001b48 <lsm6dso_write_reg>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d002      	beq.n	8000bf0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x184>
        {
          return LSM6DSO_ERROR;
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
 8000bee:	e0ce      	b.n	8000d8e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f103 001c 	add.w	r0, r3, #28
 8000bf6:	f107 0218 	add.w	r2, r7, #24
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	2115      	movs	r1, #21
 8000bfe:	f000 ff8b 	bl	8001b18 <lsm6dso_read_reg>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d002      	beq.n	8000c0e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1a2>
      {
        return LSM6DSO_ERROR;
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0c:	e0bf      	b.n	8000d8e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val2.xl_hm_mode == 0U)
 8000c0e:	7e3b      	ldrb	r3, [r7, #24]
 8000c10:	f003 0310 	and.w	r3, r3, #16
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d112      	bne.n	8000c40 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1d4>
      {
        val2.xl_hm_mode = 1U;
 8000c1a:	7e3b      	ldrb	r3, [r7, #24]
 8000c1c:	f043 0310 	orr.w	r3, r3, #16
 8000c20:	763b      	strb	r3, [r7, #24]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f103 001c 	add.w	r0, r3, #28
 8000c28:	f107 0218 	add.w	r2, r7, #24
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	2115      	movs	r1, #21
 8000c30:	f000 ff8a 	bl	8001b48 <lsm6dso_write_reg>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d002      	beq.n	8000c40 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1d4>
        {
          return LSM6DSO_ERROR;
 8000c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3e:	e0a6      	b.n	8000d8e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8000c40:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000c44:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8000d9c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>
 8000c48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c50:	dc00      	bgt.n	8000c54 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x1e8>
      {
        newOdr = 208.0f;
      }
      break;
 8000c52:	e082      	b.n	8000d5a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
        newOdr = 208.0f;
 8000c54:	4b52      	ldr	r3, [pc, #328]	; (8000da0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>)
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c58:	e07f      	b.n	8000d5a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
      /* and check the Ultra Low Power bit if it is unchecked             */
      /* We must switch off gyro otherwise Ultra Low Power does not work  */
      lsm6dso_ctrl5_c_t val1;
      lsm6dso_ctrl6_c_t val2;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	f103 001c 	add.w	r0, r3, #28
 8000c60:	f107 0210 	add.w	r2, r7, #16
 8000c64:	2301      	movs	r3, #1
 8000c66:	2115      	movs	r1, #21
 8000c68:	f000 ff56 	bl	8001b18 <lsm6dso_read_reg>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d002      	beq.n	8000c78 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x20c>
      {
        return LSM6DSO_ERROR;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295
 8000c76:	e08a      	b.n	8000d8e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val2.xl_hm_mode != 0U)
 8000c78:	7c3b      	ldrb	r3, [r7, #16]
 8000c7a:	f003 0310 	and.w	r3, r3, #16
 8000c7e:	b2db      	uxtb	r3, r3
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d012      	beq.n	8000caa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x23e>
      {
        val2.xl_hm_mode = 0U;
 8000c84:	7c3b      	ldrb	r3, [r7, #16]
 8000c86:	f36f 1304 	bfc	r3, #4, #1
 8000c8a:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL6_C, (uint8_t *)&val2, 1) != LSM6DSO_OK)
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f103 001c 	add.w	r0, r3, #28
 8000c92:	f107 0210 	add.w	r2, r7, #16
 8000c96:	2301      	movs	r3, #1
 8000c98:	2115      	movs	r1, #21
 8000c9a:	f000 ff55 	bl	8001b48 <lsm6dso_write_reg>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d002      	beq.n	8000caa <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x23e>
        {
          return LSM6DSO_ERROR;
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca8:	e071      	b.n	8000d8e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      /* Disable Gyro */
      if (pObj->gyro_is_enabled == 1U)
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d108      	bne.n	8000cc6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x25a>
      {
        if (LSM6DSO_GYRO_Disable(pObj) != LSM6DSO_OK)
 8000cb4:	68f8      	ldr	r0, [r7, #12]
 8000cb6:	f000 f97a 	bl	8000fae <LSM6DSO_GYRO_Disable>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d002      	beq.n	8000cc6 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x25a>
        {
          return LSM6DSO_ERROR;
 8000cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc4:	e063      	b.n	8000d8e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	f103 001c 	add.w	r0, r3, #28
 8000ccc:	f107 0214 	add.w	r2, r7, #20
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	2114      	movs	r1, #20
 8000cd4:	f000 ff20 	bl	8001b18 <lsm6dso_read_reg>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d002      	beq.n	8000ce4 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x278>
      {
        return LSM6DSO_ERROR;
 8000cde:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce2:	e054      	b.n	8000d8e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
      }

      if (val1.xl_ulp_en == 0U)
 8000ce4:	7d3b      	ldrb	r3, [r7, #20]
 8000ce6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d123      	bne.n	8000d38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2cc>
      {
        /* Power off the accelerometer */
        if (pObj->acc_is_enabled == 1U)
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d10b      	bne.n	8000d12 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2a6>
        {
          if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), LSM6DSO_XL_ODR_OFF) != LSM6DSO_OK)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	331c      	adds	r3, #28
 8000cfe:	2100      	movs	r1, #0
 8000d00:	4618      	mov	r0, r3
 8000d02:	f000 ff97 	bl	8001c34 <lsm6dso_xl_data_rate_set>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d002      	beq.n	8000d12 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2a6>
          {
            return LSM6DSO_ERROR;
 8000d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000d10:	e03d      	b.n	8000d8e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
          }
        }

        val1.xl_ulp_en = 1U;
 8000d12:	7d3b      	ldrb	r3, [r7, #20]
 8000d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d18:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL5_C, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f103 001c 	add.w	r0, r3, #28
 8000d20:	f107 0214 	add.w	r2, r7, #20
 8000d24:	2301      	movs	r3, #1
 8000d26:	2114      	movs	r1, #20
 8000d28:	f000 ff0e 	bl	8001b48 <lsm6dso_write_reg>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d002      	beq.n	8000d38 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2cc>
        {
          return LSM6DSO_ERROR;
 8000d32:	f04f 33ff 	mov.w	r3, #4294967295
 8000d36:	e02a      	b.n	8000d8e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8000d38:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8000d3c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000d9c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x330>
 8000d40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d48:	dc00      	bgt.n	8000d4c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2e0>
      {
        newOdr = 208.0f;
      }
      break;
 8000d4a:	e006      	b.n	8000d5a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
        newOdr = 208.0f;
 8000d4c:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x334>)
 8000d4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d50:	e003      	b.n	8000d5a <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2ee>
    }
    default:
      ret = LSM6DSO_ERROR;
 8000d52:	f04f 33ff 	mov.w	r3, #4294967295
 8000d56:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8000d58:	bf00      	nop
  }

  if(ret == LSM6DSO_ERROR)
 8000d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d60:	d102      	bne.n	8000d68 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x2fc>
  {
    return LSM6DSO_ERROR;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295
 8000d66:	e012      	b.n	8000d8e <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x322>
  }

  if (pObj->acc_is_enabled == 1U)
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d106      	bne.n	8000d80 <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x314>
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Enabled(pObj, newOdr);
 8000d72:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8000d76:	68f8      	ldr	r0, [r7, #12]
 8000d78:	f000 fc62 	bl	8001640 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>
 8000d7c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8000d7e:	e005      	b.n	8000d8c <LSM6DSO_ACC_SetOutputDataRate_With_Mode+0x320>
  }
  else
  {
    ret = LSM6DSO_ACC_SetOutputDataRate_When_Disabled(pObj, newOdr);
 8000d80:	ed97 0a0a 	vldr	s0, [r7, #40]	; 0x28
 8000d84:	68f8      	ldr	r0, [r7, #12]
 8000d86:	f000 fcf3 	bl	8001770 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>
 8000d8a:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  return ret;
 8000d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3730      	adds	r7, #48	; 0x30
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
 8000d96:	bf00      	nop
 8000d98:	41480000 	.word	0x41480000
 8000d9c:	43500000 	.word	0x43500000
 8000da0:	43500000 	.word	0x43500000

08000da4 <LSM6DSO_ACC_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetFullScale(LSM6DSO_Object_t *pObj, int32_t *FullScale)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_xl_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	331c      	adds	r3, #28
 8000db6:	f107 020b 	add.w	r2, r7, #11
 8000dba:	4611      	mov	r1, r2
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f000 ff01 	bl	8001bc4 <lsm6dso_xl_full_scale_get>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d002      	beq.n	8000dce <LSM6DSO_ACC_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 8000dc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dcc:	e023      	b.n	8000e16 <LSM6DSO_ACC_GetFullScale+0x72>
  }

  switch (fs_low_level)
 8000dce:	7afb      	ldrb	r3, [r7, #11]
 8000dd0:	2b03      	cmp	r3, #3
 8000dd2:	d81b      	bhi.n	8000e0c <LSM6DSO_ACC_GetFullScale+0x68>
 8000dd4:	a201      	add	r2, pc, #4	; (adr r2, 8000ddc <LSM6DSO_ACC_GetFullScale+0x38>)
 8000dd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dda:	bf00      	nop
 8000ddc:	08000ded 	.word	0x08000ded
 8000de0:	08000e05 	.word	0x08000e05
 8000de4:	08000df5 	.word	0x08000df5
 8000de8:	08000dfd 	.word	0x08000dfd
  {
    case LSM6DSO_2g:
      *FullScale =  2;
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	2202      	movs	r2, #2
 8000df0:	601a      	str	r2, [r3, #0]
      break;
 8000df2:	e00f      	b.n	8000e14 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_4g:
      *FullScale =  4;
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	2204      	movs	r2, #4
 8000df8:	601a      	str	r2, [r3, #0]
      break;
 8000dfa:	e00b      	b.n	8000e14 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_8g:
      *FullScale =  8;
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	2208      	movs	r2, #8
 8000e00:	601a      	str	r2, [r3, #0]
      break;
 8000e02:	e007      	b.n	8000e14 <LSM6DSO_ACC_GetFullScale+0x70>

    case LSM6DSO_16g:
      *FullScale = 16;
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	2210      	movs	r2, #16
 8000e08:	601a      	str	r2, [r3, #0]
      break;
 8000e0a:	e003      	b.n	8000e14 <LSM6DSO_ACC_GetFullScale+0x70>

    default:
      ret = LSM6DSO_ERROR;
 8000e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e10:	60fb      	str	r3, [r7, #12]
      break;
 8000e12:	bf00      	nop
  }

  return ret;
 8000e14:	68fb      	ldr	r3, [r7, #12]
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3710      	adds	r7, #16
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop

08000e20 <LSM6DSO_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
 8000e28:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
           : (FullScale <= 4) ? LSM6DSO_4g
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	2b02      	cmp	r3, #2
 8000e2e:	dd0b      	ble.n	8000e48 <LSM6DSO_ACC_SetFullScale+0x28>
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	dd06      	ble.n	8000e44 <LSM6DSO_ACC_SetFullScale+0x24>
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	2b08      	cmp	r3, #8
 8000e3a:	dc01      	bgt.n	8000e40 <LSM6DSO_ACC_SetFullScale+0x20>
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	e004      	b.n	8000e4a <LSM6DSO_ACC_SetFullScale+0x2a>
 8000e40:	2301      	movs	r3, #1
 8000e42:	e002      	b.n	8000e4a <LSM6DSO_ACC_SetFullScale+0x2a>
 8000e44:	2302      	movs	r3, #2
 8000e46:	e000      	b.n	8000e4a <LSM6DSO_ACC_SetFullScale+0x2a>
 8000e48:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSO_2g
 8000e4a:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSO_8g
           :                    LSM6DSO_16g;

  if (lsm6dso_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	331c      	adds	r3, #28
 8000e50:	7bfa      	ldrb	r2, [r7, #15]
 8000e52:	4611      	mov	r1, r2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f000 fe8f 	bl	8001b78 <lsm6dso_xl_full_scale_set>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d002      	beq.n	8000e66 <LSM6DSO_ACC_SetFullScale+0x46>
  {
    return LSM6DSO_ERROR;
 8000e60:	f04f 33ff 	mov.w	r3, #4294967295
 8000e64:	e000      	b.n	8000e68 <LSM6DSO_ACC_SetFullScale+0x48>
  }

  return LSM6DSO_OK;
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <LSM6DSO_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	331c      	adds	r3, #28
 8000e7e:	f107 0208 	add.w	r2, r7, #8
 8000e82:	4611      	mov	r1, r2
 8000e84:	4618      	mov	r0, r3
 8000e86:	f001 fa68 	bl	800235a <lsm6dso_acceleration_raw_get>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d002      	beq.n	8000e96 <LSM6DSO_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 8000e90:	f04f 33ff 	mov.w	r3, #4294967295
 8000e94:	e00c      	b.n	8000eb0 <LSM6DSO_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8000e96:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8000e9e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8000ea6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8000eae:	2300      	movs	r3, #0
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <LSM6DSO_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *Acceleration)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b086      	sub	sp, #24
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity = 0.0f;
 8000ec2:	f04f 0300 	mov.w	r3, #0
 8000ec6:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dso_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	331c      	adds	r3, #28
 8000ecc:	f107 0210 	add.w	r2, r7, #16
 8000ed0:	4611      	mov	r1, r2
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f001 fa41 	bl	800235a <lsm6dso_acceleration_raw_get>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d002      	beq.n	8000ee4 <LSM6DSO_ACC_GetAxes+0x2c>
  {
    return LSM6DSO_ERROR;
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee2:	e03c      	b.n	8000f5e <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	4619      	mov	r1, r3
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff fce2 	bl	80008b4 <LSM6DSO_ACC_GetSensitivity>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d002      	beq.n	8000efc <LSM6DSO_ACC_GetAxes+0x44>
  {
    return LSM6DSO_ERROR;
 8000ef6:	f04f 33ff 	mov.w	r3, #4294967295
 8000efa:	e030      	b.n	8000f5e <LSM6DSO_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8000efc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000f00:	ee07 3a90 	vmov	s15, r3
 8000f04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f08:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f14:	ee17 2a90 	vmov	r2, s15
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8000f1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000f20:	ee07 3a90 	vmov	s15, r3
 8000f24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f28:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f34:	ee17 2a90 	vmov	r2, s15
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 8000f3c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f40:	ee07 3a90 	vmov	s15, r3
 8000f44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f48:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f54:	ee17 2a90 	vmov	r2, s15
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <LSM6DSO_GYRO_Enable>:
 * @brief  Enable the LSM6DSO gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_Enable(LSM6DSO_Object_t *pObj)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b082      	sub	sp, #8
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->gyro_is_enabled == 1U)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d101      	bne.n	8000f7c <LSM6DSO_GYRO_Enable+0x16>
  {
    return LSM6DSO_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e014      	b.n	8000fa6 <LSM6DSO_GYRO_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSO_OK)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f103 021c 	add.w	r2, r3, #28
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4610      	mov	r0, r2
 8000f8c:	f001 f81e 	bl	8001fcc <lsm6dso_gy_data_rate_set>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d002      	beq.n	8000f9c <LSM6DSO_GYRO_Enable+0x36>
  {
    return LSM6DSO_ERROR;
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9a:	e004      	b.n	8000fa6 <LSM6DSO_GYRO_Enable+0x40>
  }

  pObj->gyro_is_enabled = 1;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <LSM6DSO_GYRO_Disable>:
 * @brief  Disable the LSM6DSO gyroscope sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_Disable(LSM6DSO_Object_t *pObj)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
  /* Check if the component is already disabled */
  if (pObj->gyro_is_enabled == 0U)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d101      	bne.n	8000fc4 <LSM6DSO_GYRO_Disable+0x16>
  {
    return LSM6DSO_OK;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	e01f      	b.n	8001004 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSO_OK)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f103 021c 	add.w	r2, r3, #28
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	332c      	adds	r3, #44	; 0x2c
 8000fce:	4619      	mov	r1, r3
 8000fd0:	4610      	mov	r0, r2
 8000fd2:	f001 f8f7 	bl	80021c4 <lsm6dso_gy_data_rate_get>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d002      	beq.n	8000fe2 <LSM6DSO_GYRO_Disable+0x34>
  {
    return LSM6DSO_ERROR;
 8000fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe0:	e010      	b.n	8001004 <LSM6DSO_GYRO_Disable+0x56>
  }

  /* Output data rate selection - power down. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), LSM6DSO_GY_ODR_OFF) != LSM6DSO_OK)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	331c      	adds	r3, #28
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f000 ffef 	bl	8001fcc <lsm6dso_gy_data_rate_set>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d002      	beq.n	8000ffa <LSM6DSO_GYRO_Disable+0x4c>
  {
    return LSM6DSO_ERROR;
 8000ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff8:	e004      	b.n	8001004 <LSM6DSO_GYRO_Disable+0x56>
  }

  pObj->gyro_is_enabled = 0;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return LSM6DSO_OK;
 8001002:	2300      	movs	r3, #0
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <LSM6DSO_GYRO_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetSensitivity(LSM6DSO_Object_t *pObj, float_t *Sensitivity)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSO_OK)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	331c      	adds	r3, #28
 800101e:	f107 020b 	add.w	r2, r7, #11
 8001022:	4611      	mov	r1, r2
 8001024:	4618      	mov	r0, r3
 8001026:	f000 ff8f 	bl	8001f48 <lsm6dso_gy_full_scale_get>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d002      	beq.n	8001036 <LSM6DSO_GYRO_GetSensitivity+0x2a>
  {
    return LSM6DSO_ERROR;
 8001030:	f04f 33ff 	mov.w	r3, #4294967295
 8001034:	e02d      	b.n	8001092 <LSM6DSO_GYRO_GetSensitivity+0x86>
  }

  /* Store the sensitivity based on actual full scale. */
  switch (full_scale)
 8001036:	7afb      	ldrb	r3, [r7, #11]
 8001038:	2b06      	cmp	r3, #6
 800103a:	d825      	bhi.n	8001088 <LSM6DSO_GYRO_GetSensitivity+0x7c>
 800103c:	a201      	add	r2, pc, #4	; (adr r2, 8001044 <LSM6DSO_GYRO_GetSensitivity+0x38>)
 800103e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001042:	bf00      	nop
 8001044:	08001069 	.word	0x08001069
 8001048:	08001061 	.word	0x08001061
 800104c:	08001071 	.word	0x08001071
 8001050:	08001089 	.word	0x08001089
 8001054:	08001079 	.word	0x08001079
 8001058:	08001089 	.word	0x08001089
 800105c:	08001081 	.word	0x08001081
  {
    case LSM6DSO_125dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_125DPS;
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	4a0e      	ldr	r2, [pc, #56]	; (800109c <LSM6DSO_GYRO_GetSensitivity+0x90>)
 8001064:	601a      	str	r2, [r3, #0]
      break;
 8001066:	e013      	b.n	8001090 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_250dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_250DPS;
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	4a0d      	ldr	r2, [pc, #52]	; (80010a0 <LSM6DSO_GYRO_GetSensitivity+0x94>)
 800106c:	601a      	str	r2, [r3, #0]
      break;
 800106e:	e00f      	b.n	8001090 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_500dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_500DPS;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	4a0c      	ldr	r2, [pc, #48]	; (80010a4 <LSM6DSO_GYRO_GetSensitivity+0x98>)
 8001074:	601a      	str	r2, [r3, #0]
      break;
 8001076:	e00b      	b.n	8001090 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_1000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_1000DPS;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	4a0b      	ldr	r2, [pc, #44]	; (80010a8 <LSM6DSO_GYRO_GetSensitivity+0x9c>)
 800107c:	601a      	str	r2, [r3, #0]
      break;
 800107e:	e007      	b.n	8001090 <LSM6DSO_GYRO_GetSensitivity+0x84>

    case LSM6DSO_2000dps:
      *Sensitivity = LSM6DSO_GYRO_SENSITIVITY_FS_2000DPS;
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	4a0a      	ldr	r2, [pc, #40]	; (80010ac <LSM6DSO_GYRO_GetSensitivity+0xa0>)
 8001084:	601a      	str	r2, [r3, #0]
      break;
 8001086:	e003      	b.n	8001090 <LSM6DSO_GYRO_GetSensitivity+0x84>

    default:
      ret = LSM6DSO_ERROR;
 8001088:	f04f 33ff 	mov.w	r3, #4294967295
 800108c:	60fb      	str	r3, [r7, #12]
      break;
 800108e:	bf00      	nop
  }

  return ret;
 8001090:	68fb      	ldr	r3, [r7, #12]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	408c0000 	.word	0x408c0000
 80010a0:	410c0000 	.word	0x410c0000
 80010a4:	418c0000 	.word	0x418c0000
 80010a8:	420c0000 	.word	0x420c0000
 80010ac:	428c0000 	.word	0x428c0000

080010b0 <LSM6DSO_GYRO_GetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr pointer where the output data rate is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetOutputDataRate(LSM6DSO_Object_t *pObj, float_t *Odr)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
 80010b8:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
  lsm6dso_odr_g_t odr_low_level;

  /* Get current output data rate. */
  if (lsm6dso_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSO_OK)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	331c      	adds	r3, #28
 80010c2:	f107 020b 	add.w	r2, r7, #11
 80010c6:	4611      	mov	r1, r2
 80010c8:	4618      	mov	r0, r3
 80010ca:	f001 f87b 	bl	80021c4 <lsm6dso_gy_data_rate_get>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d002      	beq.n	80010da <LSM6DSO_GYRO_GetOutputDataRate+0x2a>
  {
    return LSM6DSO_ERROR;
 80010d4:	f04f 33ff 	mov.w	r3, #4294967295
 80010d8:	e04e      	b.n	8001178 <LSM6DSO_GYRO_GetOutputDataRate+0xc8>
  }

  switch (odr_low_level)
 80010da:	7afb      	ldrb	r3, [r7, #11]
 80010dc:	2b0a      	cmp	r3, #10
 80010de:	d846      	bhi.n	800116e <LSM6DSO_GYRO_GetOutputDataRate+0xbe>
 80010e0:	a201      	add	r2, pc, #4	; (adr r2, 80010e8 <LSM6DSO_GYRO_GetOutputDataRate+0x38>)
 80010e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e6:	bf00      	nop
 80010e8:	08001115 	.word	0x08001115
 80010ec:	0800111f 	.word	0x0800111f
 80010f0:	08001127 	.word	0x08001127
 80010f4:	0800112f 	.word	0x0800112f
 80010f8:	08001137 	.word	0x08001137
 80010fc:	0800113f 	.word	0x0800113f
 8001100:	08001147 	.word	0x08001147
 8001104:	0800114f 	.word	0x0800114f
 8001108:	08001157 	.word	0x08001157
 800110c:	0800115f 	.word	0x0800115f
 8001110:	08001167 	.word	0x08001167
  {
    case LSM6DSO_GY_ODR_OFF:
      *Odr = 0.0f;
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	f04f 0200 	mov.w	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
      break;
 800111c:	e02b      	b.n	8001176 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_12Hz5:
      *Odr = 12.5f;
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	4a17      	ldr	r2, [pc, #92]	; (8001180 <LSM6DSO_GYRO_GetOutputDataRate+0xd0>)
 8001122:	601a      	str	r2, [r3, #0]
      break;
 8001124:	e027      	b.n	8001176 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_26Hz:
      *Odr = 26.0f;
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	4a16      	ldr	r2, [pc, #88]	; (8001184 <LSM6DSO_GYRO_GetOutputDataRate+0xd4>)
 800112a:	601a      	str	r2, [r3, #0]
      break;
 800112c:	e023      	b.n	8001176 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_52Hz:
      *Odr = 52.0f;
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	4a15      	ldr	r2, [pc, #84]	; (8001188 <LSM6DSO_GYRO_GetOutputDataRate+0xd8>)
 8001132:	601a      	str	r2, [r3, #0]
      break;
 8001134:	e01f      	b.n	8001176 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_104Hz:
      *Odr = 104.0f;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	4a14      	ldr	r2, [pc, #80]	; (800118c <LSM6DSO_GYRO_GetOutputDataRate+0xdc>)
 800113a:	601a      	str	r2, [r3, #0]
      break;
 800113c:	e01b      	b.n	8001176 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_208Hz:
      *Odr = 208.0f;
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	4a13      	ldr	r2, [pc, #76]	; (8001190 <LSM6DSO_GYRO_GetOutputDataRate+0xe0>)
 8001142:	601a      	str	r2, [r3, #0]
      break;
 8001144:	e017      	b.n	8001176 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_417Hz:
      *Odr = 417.0f;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	4a12      	ldr	r2, [pc, #72]	; (8001194 <LSM6DSO_GYRO_GetOutputDataRate+0xe4>)
 800114a:	601a      	str	r2, [r3, #0]
      break;
 800114c:	e013      	b.n	8001176 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_833Hz:
      *Odr = 833.0f;
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	4a11      	ldr	r2, [pc, #68]	; (8001198 <LSM6DSO_GYRO_GetOutputDataRate+0xe8>)
 8001152:	601a      	str	r2, [r3, #0]
      break;
 8001154:	e00f      	b.n	8001176 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_1667Hz:
      *Odr = 1667.0f;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	4a10      	ldr	r2, [pc, #64]	; (800119c <LSM6DSO_GYRO_GetOutputDataRate+0xec>)
 800115a:	601a      	str	r2, [r3, #0]
      break;
 800115c:	e00b      	b.n	8001176 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_3333Hz:
      *Odr = 3333.0f;
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	4a0f      	ldr	r2, [pc, #60]	; (80011a0 <LSM6DSO_GYRO_GetOutputDataRate+0xf0>)
 8001162:	601a      	str	r2, [r3, #0]
      break;
 8001164:	e007      	b.n	8001176 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    case LSM6DSO_GY_ODR_6667Hz:
      *Odr = 6667.0f;
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	4a0e      	ldr	r2, [pc, #56]	; (80011a4 <LSM6DSO_GYRO_GetOutputDataRate+0xf4>)
 800116a:	601a      	str	r2, [r3, #0]
      break;
 800116c:	e003      	b.n	8001176 <LSM6DSO_GYRO_GetOutputDataRate+0xc6>

    default:
      ret = LSM6DSO_ERROR;
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	60fb      	str	r3, [r7, #12]
      break;
 8001174:	bf00      	nop
  }

  return ret;
 8001176:	68fb      	ldr	r3, [r7, #12]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	41480000 	.word	0x41480000
 8001184:	41d00000 	.word	0x41d00000
 8001188:	42500000 	.word	0x42500000
 800118c:	42d00000 	.word	0x42d00000
 8001190:	43500000 	.word	0x43500000
 8001194:	43d08000 	.word	0x43d08000
 8001198:	44504000 	.word	0x44504000
 800119c:	44d06000 	.word	0x44d06000
 80011a0:	45505000 	.word	0x45505000
 80011a4:	45d05800 	.word	0x45d05800

080011a8 <LSM6DSO_GYRO_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetOutputDataRate(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	ed87 0a00 	vstr	s0, [r7]
  return LSM6DSO_GYRO_SetOutputDataRate_With_Mode(pObj, Odr, LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE);
 80011b4:	2100      	movs	r1, #0
 80011b6:	ed97 0a00 	vldr	s0, [r7]
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 f806 	bl	80011cc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>
 80011c0:	4603      	mov	r3, r0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <LSM6DSO_GYRO_SetOutputDataRate_With_Mode>:
 * @param  Odr the output data rate value to be set
 * @param  Mode the gyroscope operating mode
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetOutputDataRate_With_Mode(LSM6DSO_Object_t *pObj, float_t Odr, LSM6DSO_GYRO_Operating_Mode_t Mode)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	ed87 0a02 	vstr	s0, [r7, #8]
 80011d8:	460b      	mov	r3, r1
 80011da:	71fb      	strb	r3, [r7, #7]
  int32_t ret = LSM6DSO_OK;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
  float_t newOdr = Odr;
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	61bb      	str	r3, [r7, #24]

  switch (Mode)
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x24>
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d028      	beq.n	8001240 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x74>
 80011ee:	e05c      	b.n	80012aa <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xde>
    case LSM6DSO_GYRO_HIGH_PERFORMANCE_MODE:
    {
      /* We must uncheck Low Power bit if it is enabled */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	f103 001c 	add.w	r0, r3, #28
 80011f6:	f107 0214 	add.w	r2, r7, #20
 80011fa:	2301      	movs	r3, #1
 80011fc:	2116      	movs	r1, #22
 80011fe:	f000 fc8b 	bl	8001b18 <lsm6dso_read_reg>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d002      	beq.n	800120e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x42>
      {
        return LSM6DSO_ERROR;
 8001208:	f04f 33ff 	mov.w	r3, #4294967295
 800120c:	e06c      	b.n	80012e8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode != 0U)
 800120e:	7d3b      	ldrb	r3, [r7, #20]
 8001210:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001214:	b2db      	uxtb	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d04b      	beq.n	80012b2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
      {
        val1.g_hm_mode = 0U;
 800121a:	7d3b      	ldrb	r3, [r7, #20]
 800121c:	f36f 13c7 	bfc	r3, #7, #1
 8001220:	753b      	strb	r3, [r7, #20]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f103 001c 	add.w	r0, r3, #28
 8001228:	f107 0214 	add.w	r2, r7, #20
 800122c:	2301      	movs	r3, #1
 800122e:	2116      	movs	r1, #22
 8001230:	f000 fc8a 	bl	8001b48 <lsm6dso_write_reg>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d03b      	beq.n	80012b2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe6>
        {
          return LSM6DSO_ERROR;
 800123a:	f04f 33ff 	mov.w	r3, #4294967295
 800123e:	e053      	b.n	80012e8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
    case LSM6DSO_GYRO_LOW_POWER_NORMAL_MODE:
    {
      /* We must check the Low Power bit if it is unchecked */
      lsm6dso_ctrl7_g_t val1;

      if (lsm6dso_read_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f103 001c 	add.w	r0, r3, #28
 8001246:	f107 0210 	add.w	r2, r7, #16
 800124a:	2301      	movs	r3, #1
 800124c:	2116      	movs	r1, #22
 800124e:	f000 fc63 	bl	8001b18 <lsm6dso_read_reg>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d002      	beq.n	800125e <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x92>
      {
        return LSM6DSO_ERROR;
 8001258:	f04f 33ff 	mov.w	r3, #4294967295
 800125c:	e044      	b.n	80012e8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
      }

      if (val1.g_hm_mode == 0U)
 800125e:	7c3b      	ldrb	r3, [r7, #16]
 8001260:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2b00      	cmp	r3, #0
 8001268:	d112      	bne.n	8001290 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
      {
        val1.g_hm_mode = 1U;
 800126a:	7c3b      	ldrb	r3, [r7, #16]
 800126c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001270:	743b      	strb	r3, [r7, #16]
        if (lsm6dso_write_reg(&(pObj->Ctx), LSM6DSO_CTRL7_G, (uint8_t *)&val1, 1) != LSM6DSO_OK)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f103 001c 	add.w	r0, r3, #28
 8001278:	f107 0210 	add.w	r2, r7, #16
 800127c:	2301      	movs	r3, #1
 800127e:	2116      	movs	r1, #22
 8001280:	f000 fc62 	bl	8001b48 <lsm6dso_write_reg>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d002      	beq.n	8001290 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xc4>
        {
          return LSM6DSO_ERROR;
 800128a:	f04f 33ff 	mov.w	r3, #4294967295
 800128e:	e02b      	b.n	80012e8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
        }
      }

      /* Now we need to limit the ODR to 208 Hz if it is higher */
      if (newOdr > 208.0f)
 8001290:	edd7 7a06 	vldr	s15, [r7, #24]
 8001294:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80012f0 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x124>
 8001298:	eef4 7ac7 	vcmpe.f32	s15, s14
 800129c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a0:	dc00      	bgt.n	80012a4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xd8>
      {
        newOdr = 208.0f;
      }
      break;
 80012a2:	e007      	b.n	80012b4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
        newOdr = 208.0f;
 80012a4:	4b13      	ldr	r3, [pc, #76]	; (80012f4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x128>)
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	e004      	b.n	80012b4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
    }
    default:
      ret = LSM6DSO_ERROR;
 80012aa:	f04f 33ff 	mov.w	r3, #4294967295
 80012ae:	61fb      	str	r3, [r7, #28]
      break;
 80012b0:	e000      	b.n	80012b4 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xe8>
      break;
 80012b2:	bf00      	nop
  }

  if (ret == LSM6DSO_ERROR)
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012ba:	d102      	bne.n	80012c2 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0xf6>
  {
    return LSM6DSO_ERROR;
 80012bc:	f04f 33ff 	mov.w	r3, #4294967295
 80012c0:	e012      	b.n	80012e8 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11c>
  }

  if (pObj->gyro_is_enabled == 1U)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d106      	bne.n	80012da <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x10e>
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(pObj, newOdr);
 80012cc:	ed97 0a06 	vldr	s0, [r7, #24]
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	f000 fadd 	bl	8001890 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>
 80012d6:	61f8      	str	r0, [r7, #28]
 80012d8:	e005      	b.n	80012e6 <LSM6DSO_GYRO_SetOutputDataRate_With_Mode+0x11a>
  }
  else
  {
    ret = LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(pObj, newOdr);
 80012da:	ed97 0a06 	vldr	s0, [r7, #24]
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 fb62 	bl	80019a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>
 80012e4:	61f8      	str	r0, [r7, #28]
  }

  return ret;
 80012e6:	69fb      	ldr	r3, [r7, #28]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3720      	adds	r7, #32
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	43500000 	.word	0x43500000
 80012f4:	43500000 	.word	0x43500000

080012f8 <LSM6DSO_GYRO_GetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale pointer where the full scale is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetFullScale(LSM6DSO_Object_t *pObj, int32_t  *FullScale)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b084      	sub	sp, #16
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSO_OK;
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
  lsm6dso_fs_g_t fs_low_level;

  /* Read actual full scale selection from sensor. */
  if (lsm6dso_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSO_OK)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	331c      	adds	r3, #28
 800130a:	f107 020b 	add.w	r2, r7, #11
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f000 fe19 	bl	8001f48 <lsm6dso_gy_full_scale_get>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <LSM6DSO_GYRO_GetFullScale+0x2a>
  {
    return LSM6DSO_ERROR;
 800131c:	f04f 33ff 	mov.w	r3, #4294967295
 8001320:	e030      	b.n	8001384 <LSM6DSO_GYRO_GetFullScale+0x8c>
  }

  switch (fs_low_level)
 8001322:	7afb      	ldrb	r3, [r7, #11]
 8001324:	2b06      	cmp	r3, #6
 8001326:	d828      	bhi.n	800137a <LSM6DSO_GYRO_GetFullScale+0x82>
 8001328:	a201      	add	r2, pc, #4	; (adr r2, 8001330 <LSM6DSO_GYRO_GetFullScale+0x38>)
 800132a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132e:	bf00      	nop
 8001330:	08001355 	.word	0x08001355
 8001334:	0800134d 	.word	0x0800134d
 8001338:	0800135d 	.word	0x0800135d
 800133c:	0800137b 	.word	0x0800137b
 8001340:	08001367 	.word	0x08001367
 8001344:	0800137b 	.word	0x0800137b
 8001348:	08001371 	.word	0x08001371
  {
    case LSM6DSO_125dps:
      *FullScale =  125;
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	227d      	movs	r2, #125	; 0x7d
 8001350:	601a      	str	r2, [r3, #0]
      break;
 8001352:	e016      	b.n	8001382 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_250dps:
      *FullScale =  250;
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	22fa      	movs	r2, #250	; 0xfa
 8001358:	601a      	str	r2, [r3, #0]
      break;
 800135a:	e012      	b.n	8001382 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_500dps:
      *FullScale =  500;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001362:	601a      	str	r2, [r3, #0]
      break;
 8001364:	e00d      	b.n	8001382 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_1000dps:
      *FullScale = 1000;
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800136c:	601a      	str	r2, [r3, #0]
      break;
 800136e:	e008      	b.n	8001382 <LSM6DSO_GYRO_GetFullScale+0x8a>

    case LSM6DSO_2000dps:
      *FullScale = 2000;
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001376:	601a      	str	r2, [r3, #0]
      break;
 8001378:	e003      	b.n	8001382 <LSM6DSO_GYRO_GetFullScale+0x8a>

    default:
      ret = LSM6DSO_ERROR;
 800137a:	f04f 33ff 	mov.w	r3, #4294967295
 800137e:	60fb      	str	r3, [r7, #12]
      break;
 8001380:	bf00      	nop
  }

  return ret;
 8001382:	68fb      	ldr	r3, [r7, #12]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <LSM6DSO_GYRO_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_SetFullScale(LSM6DSO_Object_t *pObj, int32_t FullScale)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  lsm6dso_fs_g_t new_fs;

  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
           : (FullScale <= 250)  ? LSM6DSO_250dps
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	2b7d      	cmp	r3, #125	; 0x7d
 800139a:	dd12      	ble.n	80013c2 <LSM6DSO_GYRO_SetFullScale+0x36>
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	2bfa      	cmp	r3, #250	; 0xfa
 80013a0:	dd0d      	ble.n	80013be <LSM6DSO_GYRO_SetFullScale+0x32>
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013a8:	dd07      	ble.n	80013ba <LSM6DSO_GYRO_SetFullScale+0x2e>
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013b0:	dc01      	bgt.n	80013b6 <LSM6DSO_GYRO_SetFullScale+0x2a>
 80013b2:	2304      	movs	r3, #4
 80013b4:	e006      	b.n	80013c4 <LSM6DSO_GYRO_SetFullScale+0x38>
 80013b6:	2306      	movs	r3, #6
 80013b8:	e004      	b.n	80013c4 <LSM6DSO_GYRO_SetFullScale+0x38>
 80013ba:	2302      	movs	r3, #2
 80013bc:	e002      	b.n	80013c4 <LSM6DSO_GYRO_SetFullScale+0x38>
 80013be:	2300      	movs	r3, #0
 80013c0:	e000      	b.n	80013c4 <LSM6DSO_GYRO_SetFullScale+0x38>
 80013c2:	2301      	movs	r3, #1
  new_fs = (FullScale <= 125)  ? LSM6DSO_125dps
 80013c4:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 500)  ? LSM6DSO_500dps
           : (FullScale <= 1000) ? LSM6DSO_1000dps
           :                       LSM6DSO_2000dps;

  if (lsm6dso_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSO_OK)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	331c      	adds	r3, #28
 80013ca:	7bfa      	ldrb	r2, [r7, #15]
 80013cc:	4611      	mov	r1, r2
 80013ce:	4618      	mov	r0, r3
 80013d0:	f000 fd94 	bl	8001efc <lsm6dso_gy_full_scale_set>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d002      	beq.n	80013e0 <LSM6DSO_GYRO_SetFullScale+0x54>
  {
    return LSM6DSO_ERROR;
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	e000      	b.n	80013e2 <LSM6DSO_GYRO_SetFullScale+0x56>
  }

  return LSM6DSO_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <LSM6DSO_GYRO_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetAxesRaw(LSM6DSO_Object_t *pObj, LSM6DSO_AxesRaw_t *Value)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b084      	sub	sp, #16
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	331c      	adds	r3, #28
 80013f8:	f107 0208 	add.w	r2, r7, #8
 80013fc:	4611      	mov	r1, r2
 80013fe:	4618      	mov	r0, r3
 8001400:	f000 ff9a 	bl	8002338 <lsm6dso_angular_rate_raw_get>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d002      	beq.n	8001410 <LSM6DSO_GYRO_GetAxesRaw+0x26>
  {
    return LSM6DSO_ERROR;
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
 800140e:	e00c      	b.n	800142a <LSM6DSO_GYRO_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8001410:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8001418:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8001420:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	809a      	strh	r2, [r3, #4]

  return LSM6DSO_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <LSM6DSO_GYRO_GetAxes>:
 * @param  pObj the device pObj
 * @param  AngularRate pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_GetAxes(LSM6DSO_Object_t *pObj, LSM6DSO_Axes_t *AngularRate)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b086      	sub	sp, #24
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
 800143a:	6039      	str	r1, [r7, #0]
  lsm6dso_axis3bit16_t data_raw;
  float_t sensitivity;

  /* Read raw data values. */
  if (lsm6dso_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSO_OK)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	331c      	adds	r3, #28
 8001440:	f107 0210 	add.w	r2, r7, #16
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f000 ff76 	bl	8002338 <lsm6dso_angular_rate_raw_get>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d002      	beq.n	8001458 <LSM6DSO_GYRO_GetAxes+0x26>
  {
    return LSM6DSO_ERROR;
 8001452:	f04f 33ff 	mov.w	r3, #4294967295
 8001456:	e03c      	b.n	80014d2 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Get LSM6DSO actual sensitivity. */
  if (LSM6DSO_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSO_OK)
 8001458:	f107 030c 	add.w	r3, r7, #12
 800145c:	4619      	mov	r1, r3
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff fdd4 	bl	800100c <LSM6DSO_GYRO_GetSensitivity>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d002      	beq.n	8001470 <LSM6DSO_GYRO_GetAxes+0x3e>
  {
    return LSM6DSO_ERROR;
 800146a:	f04f 33ff 	mov.w	r3, #4294967295
 800146e:	e030      	b.n	80014d2 <LSM6DSO_GYRO_GetAxes+0xa0>
  }

  /* Calculate the data. */
  AngularRate->x = (int32_t)((float_t)((float_t)data_raw.i16bit[0] * sensitivity));
 8001470:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001474:	ee07 3a90 	vmov	s15, r3
 8001478:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800147c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001480:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001484:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001488:	ee17 2a90 	vmov	r2, s15
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	601a      	str	r2, [r3, #0]
  AngularRate->y = (int32_t)((float_t)((float_t)data_raw.i16bit[1] * sensitivity));
 8001490:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800149c:	edd7 7a03 	vldr	s15, [r7, #12]
 80014a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014a8:	ee17 2a90 	vmov	r2, s15
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	605a      	str	r2, [r3, #4]
  AngularRate->z = (int32_t)((float_t)((float_t)data_raw.i16bit[2] * sensitivity));
 80014b0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014b4:	ee07 3a90 	vmov	s15, r3
 80014b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80014c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014c8:	ee17 2a90 	vmov	r2, s15
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	609a      	str	r2, [r3, #8]

  return LSM6DSO_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <LSM6DSO_Read_Reg>:
 * @param  Reg address to be read
 * @param  Data pointer where the value is written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_Read_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t *Data)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b084      	sub	sp, #16
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	460b      	mov	r3, r1
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	72fb      	strb	r3, [r7, #11]
  if (lsm6dso_read_reg(&(pObj->Ctx), Reg, Data, 1) != LSM6DSO_OK)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f103 001c 	add.w	r0, r3, #28
 80014ee:	7af9      	ldrb	r1, [r7, #11]
 80014f0:	2301      	movs	r3, #1
 80014f2:	687a      	ldr	r2, [r7, #4]
 80014f4:	f000 fb10 	bl	8001b18 <lsm6dso_read_reg>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d002      	beq.n	8001504 <LSM6DSO_Read_Reg+0x2a>
  {
    return LSM6DSO_ERROR;
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001502:	e000      	b.n	8001506 <LSM6DSO_Read_Reg+0x2c>
  }

  return LSM6DSO_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3710      	adds	r7, #16
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <LSM6DSO_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_Write_Reg(LSM6DSO_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
 8001516:	460b      	mov	r3, r1
 8001518:	70fb      	strb	r3, [r7, #3]
 800151a:	4613      	mov	r3, r2
 800151c:	70bb      	strb	r3, [r7, #2]
  if (lsm6dso_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSO_OK)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f103 001c 	add.w	r0, r3, #28
 8001524:	1cba      	adds	r2, r7, #2
 8001526:	78f9      	ldrb	r1, [r7, #3]
 8001528:	2301      	movs	r3, #1
 800152a:	f000 fb0d 	bl	8001b48 <lsm6dso_write_reg>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d002      	beq.n	800153a <LSM6DSO_Write_Reg+0x2c>
  {
    return LSM6DSO_ERROR;
 8001534:	f04f 33ff 	mov.w	r3, #4294967295
 8001538:	e000      	b.n	800153c <LSM6DSO_Write_Reg+0x2e>
  }

  return LSM6DSO_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}

08001544 <LSM6DSO_ACC_Get_DRDY_Status>:
 * @param  pObj the device pObj
 * @param  Status the status of data ready bit
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_Get_DRDY_Status(LSM6DSO_Object_t *pObj, uint8_t *Status)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	6039      	str	r1, [r7, #0]
  if (lsm6dso_xl_flag_data_ready_get(&(pObj->Ctx), Status) != LSM6DSO_OK)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	331c      	adds	r3, #28
 8001552:	6839      	ldr	r1, [r7, #0]
 8001554:	4618      	mov	r0, r3
 8001556:	f000 febd 	bl	80022d4 <lsm6dso_xl_flag_data_ready_get>
 800155a:	4603      	mov	r3, r0
 800155c:	2b00      	cmp	r3, #0
 800155e:	d002      	beq.n	8001566 <LSM6DSO_ACC_Get_DRDY_Status+0x22>
  {
    return LSM6DSO_ERROR;
 8001560:	f04f 33ff 	mov.w	r3, #4294967295
 8001564:	e000      	b.n	8001568 <LSM6DSO_ACC_Get_DRDY_Status+0x24>
  }

  return LSM6DSO_OK;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <LSM6DSO_ACC_Set_SelfTest>:
 * @param  pObj the device pObj
 * @param  val the value of st_xl in reg CTRL5_C
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_ACC_Set_SelfTest(LSM6DSO_Object_t *pObj, uint8_t val)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	70fb      	strb	r3, [r7, #3]
  lsm6dso_st_xl_t reg;

  reg = (val == 0U)  ? LSM6DSO_XL_ST_DISABLE
        : (val == 1U)  ? LSM6DSO_XL_ST_POSITIVE
 800157c:	78fb      	ldrb	r3, [r7, #3]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00b      	beq.n	800159a <LSM6DSO_ACC_Set_SelfTest+0x2a>
 8001582:	78fb      	ldrb	r3, [r7, #3]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d006      	beq.n	8001596 <LSM6DSO_ACC_Set_SelfTest+0x26>
 8001588:	78fb      	ldrb	r3, [r7, #3]
 800158a:	2b02      	cmp	r3, #2
 800158c:	d101      	bne.n	8001592 <LSM6DSO_ACC_Set_SelfTest+0x22>
 800158e:	2302      	movs	r3, #2
 8001590:	e004      	b.n	800159c <LSM6DSO_ACC_Set_SelfTest+0x2c>
 8001592:	2300      	movs	r3, #0
 8001594:	e002      	b.n	800159c <LSM6DSO_ACC_Set_SelfTest+0x2c>
 8001596:	2301      	movs	r3, #1
 8001598:	e000      	b.n	800159c <LSM6DSO_ACC_Set_SelfTest+0x2c>
 800159a:	2300      	movs	r3, #0
  reg = (val == 0U)  ? LSM6DSO_XL_ST_DISABLE
 800159c:	73fb      	strb	r3, [r7, #15]
        : (val == 2U)  ? LSM6DSO_XL_ST_NEGATIVE
        :                LSM6DSO_XL_ST_DISABLE;

  if (lsm6dso_xl_self_test_set(&(pObj->Ctx), reg) != LSM6DSO_OK)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	331c      	adds	r3, #28
 80015a2:	7bfa      	ldrb	r2, [r7, #15]
 80015a4:	4611      	mov	r1, r2
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 ff45 	bl	8002436 <lsm6dso_xl_self_test_set>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d002      	beq.n	80015b8 <LSM6DSO_ACC_Set_SelfTest+0x48>
  {
    return LSM6DSO_ERROR;
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	e000      	b.n	80015ba <LSM6DSO_ACC_Set_SelfTest+0x4a>
  }

  return LSM6DSO_OK;
 80015b8:	2300      	movs	r3, #0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3710      	adds	r7, #16
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <LSM6DSO_GYRO_Get_DRDY_Status>:
 * @param  pObj the device pObj
 * @param  Status the status of data ready bit
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_Get_DRDY_Status(LSM6DSO_Object_t *pObj, uint8_t *Status)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
 80015ca:	6039      	str	r1, [r7, #0]
  if (lsm6dso_gy_flag_data_ready_get(&(pObj->Ctx), Status) != LSM6DSO_OK)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	331c      	adds	r3, #28
 80015d0:	6839      	ldr	r1, [r7, #0]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 fe97 	bl	8002306 <lsm6dso_gy_flag_data_ready_get>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d002      	beq.n	80015e4 <LSM6DSO_GYRO_Get_DRDY_Status+0x22>
  {
    return LSM6DSO_ERROR;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295
 80015e2:	e000      	b.n	80015e6 <LSM6DSO_GYRO_Get_DRDY_Status+0x24>
  }

  return LSM6DSO_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <LSM6DSO_GYRO_Set_SelfTest>:
 * @param  pObj the device pObj
 * @param  val the value of st_xl in reg CTRL5_C
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSO_GYRO_Set_SelfTest(LSM6DSO_Object_t *pObj, uint8_t val)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b084      	sub	sp, #16
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	460b      	mov	r3, r1
 80015f8:	70fb      	strb	r3, [r7, #3]
  lsm6dso_st_g_t reg;

  reg = (val == 0U)  ? LSM6DSO_GY_ST_DISABLE
        : (val == 1U)  ? LSM6DSO_GY_ST_POSITIVE
 80015fa:	78fb      	ldrb	r3, [r7, #3]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d00b      	beq.n	8001618 <LSM6DSO_GYRO_Set_SelfTest+0x2a>
 8001600:	78fb      	ldrb	r3, [r7, #3]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d006      	beq.n	8001614 <LSM6DSO_GYRO_Set_SelfTest+0x26>
 8001606:	78fb      	ldrb	r3, [r7, #3]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d101      	bne.n	8001610 <LSM6DSO_GYRO_Set_SelfTest+0x22>
 800160c:	2303      	movs	r3, #3
 800160e:	e004      	b.n	800161a <LSM6DSO_GYRO_Set_SelfTest+0x2c>
 8001610:	2300      	movs	r3, #0
 8001612:	e002      	b.n	800161a <LSM6DSO_GYRO_Set_SelfTest+0x2c>
 8001614:	2301      	movs	r3, #1
 8001616:	e000      	b.n	800161a <LSM6DSO_GYRO_Set_SelfTest+0x2c>
 8001618:	2300      	movs	r3, #0
  reg = (val == 0U)  ? LSM6DSO_GY_ST_DISABLE
 800161a:	73fb      	strb	r3, [r7, #15]
        : (val == 2U)  ? LSM6DSO_GY_ST_NEGATIVE
        :                LSM6DSO_GY_ST_DISABLE;


  if (lsm6dso_gy_self_test_set(&(pObj->Ctx), reg) != LSM6DSO_OK)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	331c      	adds	r3, #28
 8001620:	7bfa      	ldrb	r2, [r7, #15]
 8001622:	4611      	mov	r1, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f000 ff2c 	bl	8002482 <lsm6dso_gy_self_test_set>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d002      	beq.n	8001636 <LSM6DSO_GYRO_Set_SelfTest+0x48>
  {
    return LSM6DSO_ERROR;
 8001630:	f04f 33ff 	mov.w	r3, #4294967295
 8001634:	e000      	b.n	8001638 <LSM6DSO_GYRO_Set_SelfTest+0x4a>
  }

  return LSM6DSO_OK;
 8001636:	2300      	movs	r3, #0
}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}

08001640 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_xl_t new_odr;

  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
          : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 800164c:	edd7 7a00 	vldr	s15, [r7]
 8001650:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001750 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x110>
 8001654:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165c:	d801      	bhi.n	8001662 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x22>
 800165e:	230b      	movs	r3, #11
 8001660:	e063      	b.n	800172a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8001662:	edd7 7a00 	vldr	s15, [r7]
 8001666:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800166a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800166e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001672:	d801      	bhi.n	8001678 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x38>
 8001674:	2301      	movs	r3, #1
 8001676:	e058      	b.n	800172a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8001678:	edd7 7a00 	vldr	s15, [r7]
 800167c:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8001680:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001688:	d801      	bhi.n	800168e <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x4e>
 800168a:	2302      	movs	r3, #2
 800168c:	e04d      	b.n	800172a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 800168e:	edd7 7a00 	vldr	s15, [r7]
 8001692:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001754 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x114>
 8001696:	eef4 7ac7 	vcmpe.f32	s15, s14
 800169a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169e:	d801      	bhi.n	80016a4 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x64>
 80016a0:	2303      	movs	r3, #3
 80016a2:	e042      	b.n	800172a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80016a4:	edd7 7a00 	vldr	s15, [r7]
 80016a8:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001758 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x118>
 80016ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b4:	d801      	bhi.n	80016ba <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x7a>
 80016b6:	2304      	movs	r3, #4
 80016b8:	e037      	b.n	800172a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80016ba:	edd7 7a00 	vldr	s15, [r7]
 80016be:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800175c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x11c>
 80016c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ca:	d801      	bhi.n	80016d0 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x90>
 80016cc:	2305      	movs	r3, #5
 80016ce:	e02c      	b.n	800172a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80016d0:	edd7 7a00 	vldr	s15, [r7]
 80016d4:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001760 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x120>
 80016d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e0:	d801      	bhi.n	80016e6 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xa6>
 80016e2:	2306      	movs	r3, #6
 80016e4:	e021      	b.n	800172a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80016e6:	edd7 7a00 	vldr	s15, [r7]
 80016ea:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001764 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x124>
 80016ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f6:	d801      	bhi.n	80016fc <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xbc>
 80016f8:	2307      	movs	r3, #7
 80016fa:	e016      	b.n	800172a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 80016fc:	edd7 7a00 	vldr	s15, [r7]
 8001700:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001768 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x128>
 8001704:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800170c:	d801      	bhi.n	8001712 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xd2>
 800170e:	2308      	movs	r3, #8
 8001710:	e00b      	b.n	800172a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8001712:	edd7 7a00 	vldr	s15, [r7]
 8001716:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800176c <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x12c>
 800171a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800171e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001722:	d801      	bhi.n	8001728 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xe8>
 8001724:	2309      	movs	r3, #9
 8001726:	e000      	b.n	800172a <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0xea>
 8001728:	230a      	movs	r3, #10
  new_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800172a:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
          : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
          :                    LSM6DSO_XL_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	331c      	adds	r3, #28
 8001730:	7bfa      	ldrb	r2, [r7, #15]
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f000 fa7d 	bl	8001c34 <lsm6dso_xl_data_rate_set>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d002      	beq.n	8001746 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x106>
  {
    return LSM6DSO_ERROR;
 8001740:	f04f 33ff 	mov.w	r3, #4294967295
 8001744:	e000      	b.n	8001748 <LSM6DSO_ACC_SetOutputDataRate_When_Enabled+0x108>
  }

  return LSM6DSO_OK;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3710      	adds	r7, #16
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	3fcccccd 	.word	0x3fcccccd
 8001754:	42500000 	.word	0x42500000
 8001758:	42d00000 	.word	0x42d00000
 800175c:	43500000 	.word	0x43500000
 8001760:	43d08000 	.word	0x43d08000
 8001764:	44504000 	.word	0x44504000
 8001768:	44d06000 	.word	0x44d06000
 800176c:	45505000 	.word	0x45505000

08001770 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_ACC_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
                : (Odr <=   12.5f) ? LSM6DSO_XL_ODR_12Hz5
 800177c:	edd7 7a00 	vldr	s15, [r7]
 8001780:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8001870 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x100>
 8001784:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800178c:	d801      	bhi.n	8001792 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x22>
 800178e:	230b      	movs	r3, #11
 8001790:	e063      	b.n	800185a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8001792:	edd7 7a00 	vldr	s15, [r7]
 8001796:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 800179a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800179e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a2:	d801      	bhi.n	80017a8 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x38>
 80017a4:	2301      	movs	r3, #1
 80017a6:	e058      	b.n	800185a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80017a8:	edd7 7a00 	vldr	s15, [r7]
 80017ac:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80017b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b8:	d801      	bhi.n	80017be <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x4e>
 80017ba:	2302      	movs	r3, #2
 80017bc:	e04d      	b.n	800185a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80017be:	edd7 7a00 	vldr	s15, [r7]
 80017c2:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8001874 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x104>
 80017c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ce:	d801      	bhi.n	80017d4 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x64>
 80017d0:	2303      	movs	r3, #3
 80017d2:	e042      	b.n	800185a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80017d4:	edd7 7a00 	vldr	s15, [r7]
 80017d8:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001878 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x108>
 80017dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e4:	d801      	bhi.n	80017ea <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x7a>
 80017e6:	2304      	movs	r3, #4
 80017e8:	e037      	b.n	800185a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 80017ea:	edd7 7a00 	vldr	s15, [r7]
 80017ee:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800187c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x10c>
 80017f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017fa:	d801      	bhi.n	8001800 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x90>
 80017fc:	2305      	movs	r3, #5
 80017fe:	e02c      	b.n	800185a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8001800:	edd7 7a00 	vldr	s15, [r7]
 8001804:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001880 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x110>
 8001808:	eef4 7ac7 	vcmpe.f32	s15, s14
 800180c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001810:	d801      	bhi.n	8001816 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8001812:	2306      	movs	r3, #6
 8001814:	e021      	b.n	800185a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8001816:	edd7 7a00 	vldr	s15, [r7]
 800181a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001884 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x114>
 800181e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001826:	d801      	bhi.n	800182c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8001828:	2307      	movs	r3, #7
 800182a:	e016      	b.n	800185a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 800182c:	edd7 7a00 	vldr	s15, [r7]
 8001830:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8001888 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x118>
 8001834:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800183c:	d801      	bhi.n	8001842 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xd2>
 800183e:	2308      	movs	r3, #8
 8001840:	e00b      	b.n	800185a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8001842:	edd7 7a00 	vldr	s15, [r7]
 8001846:	ed9f 7a11 	vldr	s14, [pc, #68]	; 800188c <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0x11c>
 800184a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800184e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001852:	d801      	bhi.n	8001858 <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8001854:	2309      	movs	r3, #9
 8001856:	e000      	b.n	800185a <LSM6DSO_ACC_SetOutputDataRate_When_Disabled+0xea>
 8001858:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=    1.6f) ? LSM6DSO_XL_ODR_1Hz6
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSO_XL_ODR_833Hz
                : (Odr <= 1667.0f) ? LSM6DSO_XL_ODR_1667Hz
                : (Odr <= 3333.0f) ? LSM6DSO_XL_ODR_3333Hz
                :                    LSM6DSO_XL_ODR_6667Hz;

  return LSM6DSO_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	370c      	adds	r7, #12
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	3fcccccd 	.word	0x3fcccccd
 8001874:	42500000 	.word	0x42500000
 8001878:	42d00000 	.word	0x42d00000
 800187c:	43500000 	.word	0x43500000
 8001880:	43d08000 	.word	0x43d08000
 8001884:	44504000 	.word	0x44504000
 8001888:	44d06000 	.word	0x44d06000
 800188c:	45505000 	.word	0x45505000

08001890 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Enabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	ed87 0a00 	vstr	s0, [r7]
  lsm6dso_odr_g_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 800189c:	edd7 7a00 	vldr	s15, [r7]
 80018a0:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80018a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ac:	d801      	bhi.n	80018b2 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x22>
 80018ae:	2301      	movs	r3, #1
 80018b0:	e058      	b.n	8001964 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80018b2:	edd7 7a00 	vldr	s15, [r7]
 80018b6:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80018ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c2:	d801      	bhi.n	80018c8 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x38>
 80018c4:	2302      	movs	r3, #2
 80018c6:	e04d      	b.n	8001964 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80018c8:	edd7 7a00 	vldr	s15, [r7]
 80018cc:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800198c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xfc>
 80018d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d8:	d801      	bhi.n	80018de <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x4e>
 80018da:	2303      	movs	r3, #3
 80018dc:	e042      	b.n	8001964 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80018de:	edd7 7a00 	vldr	s15, [r7]
 80018e2:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001990 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x100>
 80018e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ee:	d801      	bhi.n	80018f4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x64>
 80018f0:	2304      	movs	r3, #4
 80018f2:	e037      	b.n	8001964 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 80018f4:	edd7 7a00 	vldr	s15, [r7]
 80018f8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001994 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x104>
 80018fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001904:	d801      	bhi.n	800190a <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x7a>
 8001906:	2305      	movs	r3, #5
 8001908:	e02c      	b.n	8001964 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800190a:	edd7 7a00 	vldr	s15, [r7]
 800190e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001998 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x108>
 8001912:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800191a:	d801      	bhi.n	8001920 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x90>
 800191c:	2306      	movs	r3, #6
 800191e:	e021      	b.n	8001964 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8001920:	edd7 7a00 	vldr	s15, [r7]
 8001924:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800199c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x10c>
 8001928:	eef4 7ac7 	vcmpe.f32	s15, s14
 800192c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001930:	d801      	bhi.n	8001936 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xa6>
 8001932:	2307      	movs	r3, #7
 8001934:	e016      	b.n	8001964 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8001936:	edd7 7a00 	vldr	s15, [r7]
 800193a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80019a0 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x110>
 800193e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001946:	d801      	bhi.n	800194c <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xbc>
 8001948:	2308      	movs	r3, #8
 800194a:	e00b      	b.n	8001964 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 800194c:	edd7 7a00 	vldr	s15, [r7]
 8001950:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80019a4 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0x114>
 8001954:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800195c:	d801      	bhi.n	8001962 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd2>
 800195e:	2309      	movs	r3, #9
 8001960:	e000      	b.n	8001964 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xd4>
 8001962:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8001964:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
          : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
          :                    LSM6DSO_GY_ODR_6667Hz;

  /* Output data rate selection. */
  if (lsm6dso_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSO_OK)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	331c      	adds	r3, #28
 800196a:	7bfa      	ldrb	r2, [r7, #15]
 800196c:	4611      	mov	r1, r2
 800196e:	4618      	mov	r0, r3
 8001970:	f000 fb2c 	bl	8001fcc <lsm6dso_gy_data_rate_set>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d002      	beq.n	8001980 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSO_ERROR;
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
 800197e:	e000      	b.n	8001982 <LSM6DSO_GYRO_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSO_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	42500000 	.word	0x42500000
 8001990:	42d00000 	.word	0x42d00000
 8001994:	43500000 	.word	0x43500000
 8001998:	43d08000 	.word	0x43d08000
 800199c:	44504000 	.word	0x44504000
 80019a0:	44d06000 	.word	0x44d06000
 80019a4:	45505000 	.word	0x45505000

080019a8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSO_GYRO_SetOutputDataRate_When_Disabled(LSM6DSO_Object_t *pObj, float_t Odr)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b083      	sub	sp, #12
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	ed87 0a00 	vstr	s0, [r7]
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
                 : (Odr <=   26.0f) ? LSM6DSO_GY_ODR_26Hz
 80019b4:	edd7 7a00 	vldr	s15, [r7]
 80019b8:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 80019bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c4:	d801      	bhi.n	80019ca <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x22>
 80019c6:	2301      	movs	r3, #1
 80019c8:	e058      	b.n	8001a7c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80019ca:	edd7 7a00 	vldr	s15, [r7]
 80019ce:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 80019d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019da:	d801      	bhi.n	80019e0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x38>
 80019dc:	2302      	movs	r3, #2
 80019de:	e04d      	b.n	8001a7c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80019e0:	edd7 7a00 	vldr	s15, [r7]
 80019e4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001a90 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xe8>
 80019e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019f0:	d801      	bhi.n	80019f6 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x4e>
 80019f2:	2303      	movs	r3, #3
 80019f4:	e042      	b.n	8001a7c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 80019f6:	edd7 7a00 	vldr	s15, [r7]
 80019fa:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001a94 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xec>
 80019fe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a06:	d801      	bhi.n	8001a0c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x64>
 8001a08:	2304      	movs	r3, #4
 8001a0a:	e037      	b.n	8001a7c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8001a0c:	edd7 7a00 	vldr	s15, [r7]
 8001a10:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001a98 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf0>
 8001a14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a1c:	d801      	bhi.n	8001a22 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x7a>
 8001a1e:	2305      	movs	r3, #5
 8001a20:	e02c      	b.n	8001a7c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8001a22:	edd7 7a00 	vldr	s15, [r7]
 8001a26:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001a9c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf4>
 8001a2a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a32:	d801      	bhi.n	8001a38 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x90>
 8001a34:	2306      	movs	r3, #6
 8001a36:	e021      	b.n	8001a7c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8001a38:	edd7 7a00 	vldr	s15, [r7]
 8001a3c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001aa0 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xf8>
 8001a40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a48:	d801      	bhi.n	8001a4e <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xa6>
 8001a4a:	2307      	movs	r3, #7
 8001a4c:	e016      	b.n	8001a7c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8001a4e:	edd7 7a00 	vldr	s15, [r7]
 8001a52:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001aa4 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xfc>
 8001a56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5e:	d801      	bhi.n	8001a64 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xbc>
 8001a60:	2308      	movs	r3, #8
 8001a62:	e00b      	b.n	8001a7c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8001a64:	edd7 7a00 	vldr	s15, [r7]
 8001a68:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001aa8 <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0x100>
 8001a6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a74:	d801      	bhi.n	8001a7a <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd2>
 8001a76:	2309      	movs	r3, #9
 8001a78:	e000      	b.n	8001a7c <LSM6DSO_GYRO_SetOutputDataRate_When_Disabled+0xd4>
 8001a7a:	230a      	movs	r3, #10
  pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSO_GY_ODR_12Hz5
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	f882 302c 	strb.w	r3, [r2, #44]	; 0x2c
                 : (Odr <=  833.0f) ? LSM6DSO_GY_ODR_833Hz
                 : (Odr <= 1667.0f) ? LSM6DSO_GY_ODR_1667Hz
                 : (Odr <= 3333.0f) ? LSM6DSO_GY_ODR_3333Hz
                 :                    LSM6DSO_GY_ODR_6667Hz;

  return LSM6DSO_OK;
 8001a82:	2300      	movs	r3, #0
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	370c      	adds	r7, #12
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	42500000 	.word	0x42500000
 8001a94:	42d00000 	.word	0x42d00000
 8001a98:	43500000 	.word	0x43500000
 8001a9c:	43d08000 	.word	0x43d08000
 8001aa0:	44504000 	.word	0x44504000
 8001aa4:	44d06000 	.word	0x44d06000
 8001aa8:	45505000 	.word	0x45505000

08001aac <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001aac:	b590      	push	{r4, r7, lr}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	460b      	mov	r3, r1
 8001aba:	72fb      	strb	r3, [r7, #11]
 8001abc:	4613      	mov	r3, r2
 8001abe:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	695c      	ldr	r4, [r3, #20]
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	7b1b      	ldrb	r3, [r3, #12]
 8001acc:	b298      	uxth	r0, r3
 8001ace:	7afb      	ldrb	r3, [r7, #11]
 8001ad0:	b299      	uxth	r1, r3
 8001ad2:	893b      	ldrh	r3, [r7, #8]
 8001ad4:	687a      	ldr	r2, [r7, #4]
 8001ad6:	47a0      	blx	r4
 8001ad8:	4603      	mov	r3, r0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	371c      	adds	r7, #28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd90      	pop	{r4, r7, pc}

08001ae2 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001ae2:	b590      	push	{r4, r7, lr}
 8001ae4:	b087      	sub	sp, #28
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	607a      	str	r2, [r7, #4]
 8001aec:	461a      	mov	r2, r3
 8001aee:	460b      	mov	r3, r1
 8001af0:	72fb      	strb	r3, [r7, #11]
 8001af2:	4613      	mov	r3, r2
 8001af4:	813b      	strh	r3, [r7, #8]
  LSM6DSO_Object_t *pObj = (LSM6DSO_Object_t *)Handle;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	691c      	ldr	r4, [r3, #16]
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	7b1b      	ldrb	r3, [r3, #12]
 8001b02:	b298      	uxth	r0, r3
 8001b04:	7afb      	ldrb	r3, [r7, #11]
 8001b06:	b299      	uxth	r1, r3
 8001b08:	893b      	ldrh	r3, [r7, #8]
 8001b0a:	687a      	ldr	r2, [r7, #4]
 8001b0c:	47a0      	blx	r4
 8001b0e:	4603      	mov	r3, r0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	371c      	adds	r7, #28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd90      	pop	{r4, r7, pc}

08001b18 <lsm6dso_read_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_read_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                         uint16_t len)
{
 8001b18:	b590      	push	{r4, r7, lr}
 8001b1a:	b087      	sub	sp, #28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	607a      	str	r2, [r7, #4]
 8001b22:	461a      	mov	r2, r3
 8001b24:	460b      	mov	r3, r1
 8001b26:	72fb      	strb	r3, [r7, #11]
 8001b28:	4613      	mov	r3, r2
 8001b2a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	685c      	ldr	r4, [r3, #4]
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6898      	ldr	r0, [r3, #8]
 8001b34:	893b      	ldrh	r3, [r7, #8]
 8001b36:	7af9      	ldrb	r1, [r7, #11]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	47a0      	blx	r4
 8001b3c:	6178      	str	r0, [r7, #20]
  return ret;
 8001b3e:	697b      	ldr	r3, [r7, #20]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	371c      	adds	r7, #28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd90      	pop	{r4, r7, pc}

08001b48 <lsm6dso_write_reg>:
  * @retval          interface status (MANDATORY: return 0 -> no Error)
  *
  */
int32_t lsm6dso_write_reg(stmdev_ctx_t* ctx, uint8_t reg, uint8_t* data,
                          uint16_t len)
{
 8001b48:	b590      	push	{r4, r7, lr}
 8001b4a:	b087      	sub	sp, #28
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	607a      	str	r2, [r7, #4]
 8001b52:	461a      	mov	r2, r3
 8001b54:	460b      	mov	r3, r1
 8001b56:	72fb      	strb	r3, [r7, #11]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681c      	ldr	r4, [r3, #0]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6898      	ldr	r0, [r3, #8]
 8001b64:	893b      	ldrh	r3, [r7, #8]
 8001b66:	7af9      	ldrb	r1, [r7, #11]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	47a0      	blx	r4
 8001b6c:	6178      	str	r0, [r7, #20]
  return ret;
 8001b6e:	697b      	ldr	r3, [r7, #20]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	371c      	adds	r7, #28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd90      	pop	{r4, r7, pc}

08001b78 <lsm6dso_xl_full_scale_set>:
  * @param  val      change the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dso_fs_xl_t val)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	460b      	mov	r3, r1
 8001b82:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8001b84:	f107 0208 	add.w	r2, r7, #8
 8001b88:	2301      	movs	r3, #1
 8001b8a:	2110      	movs	r1, #16
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff ffc3 	bl	8001b18 <lsm6dso_read_reg>
 8001b92:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d10f      	bne.n	8001bba <lsm6dso_xl_full_scale_set+0x42>
    reg.fs_xl = (uint8_t) val;
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	f003 0303 	and.w	r3, r3, #3
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	7a3b      	ldrb	r3, [r7, #8]
 8001ba4:	f362 0383 	bfi	r3, r2, #2, #2
 8001ba8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8001baa:	f107 0208 	add.w	r2, r7, #8
 8001bae:	2301      	movs	r3, #1
 8001bb0:	2110      	movs	r1, #16
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ffc8 	bl	8001b48 <lsm6dso_write_reg>
 8001bb8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8001bba:	68fb      	ldr	r3, [r7, #12]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <lsm6dso_xl_full_scale_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of fs_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_full_scale_get(stmdev_ctx_t *ctx, lsm6dso_fs_xl_t *val)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8001bce:	f107 0208 	add.w	r2, r7, #8
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	2110      	movs	r1, #16
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f7ff ff9e 	bl	8001b18 <lsm6dso_read_reg>
 8001bdc:	60f8      	str	r0, [r7, #12]
  switch (reg.fs_xl) {
 8001bde:	7a3b      	ldrb	r3, [r7, #8]
 8001be0:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d81a      	bhi.n	8001c20 <lsm6dso_xl_full_scale_get+0x5c>
 8001bea:	a201      	add	r2, pc, #4	; (adr r2, 8001bf0 <lsm6dso_xl_full_scale_get+0x2c>)
 8001bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf0:	08001c01 	.word	0x08001c01
 8001bf4:	08001c09 	.word	0x08001c09
 8001bf8:	08001c11 	.word	0x08001c11
 8001bfc:	08001c19 	.word	0x08001c19
    case LSM6DSO_2g:
      *val = LSM6DSO_2g;
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	2200      	movs	r2, #0
 8001c04:	701a      	strb	r2, [r3, #0]
      break;
 8001c06:	e00f      	b.n	8001c28 <lsm6dso_xl_full_scale_get+0x64>
    case LSM6DSO_16g:
      *val = LSM6DSO_16g;
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	701a      	strb	r2, [r3, #0]
      break;
 8001c0e:	e00b      	b.n	8001c28 <lsm6dso_xl_full_scale_get+0x64>
    case LSM6DSO_4g:
      *val = LSM6DSO_4g;
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	2202      	movs	r2, #2
 8001c14:	701a      	strb	r2, [r3, #0]
      break;
 8001c16:	e007      	b.n	8001c28 <lsm6dso_xl_full_scale_get+0x64>
    case LSM6DSO_8g:
      *val = LSM6DSO_8g;
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	701a      	strb	r2, [r3, #0]
      break;
 8001c1e:	e003      	b.n	8001c28 <lsm6dso_xl_full_scale_get+0x64>
    default:
      *val = LSM6DSO_2g;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	2200      	movs	r2, #0
 8001c24:	701a      	strb	r2, [r3, #0]
      break;
 8001c26:	bf00      	nop
  }

  return ret;
 8001c28:	68fb      	ldr	r3, [r7, #12]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop

08001c34 <lsm6dso_xl_data_rate_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_data_rate_set(stmdev_ctx_t *ctx, lsm6dso_odr_xl_t val)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_xl_t odr_xl =  val;
 8001c40:	78fb      	ldrb	r3, [r7, #3]
 8001c42:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8001c44:	f107 030c 	add.w	r3, r7, #12
 8001c48:	4619      	mov	r1, r3
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 fcab 	bl	80025a6 <lsm6dso_fsm_enable_get>
 8001c50:	6138      	str	r0, [r7, #16]
  if (ret == 0) {
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f040 80c4 	bne.w	8001de2 <lsm6dso_xl_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8001c5a:	7b3b      	ldrb	r3, [r7, #12]
 8001c5c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001c60:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8001c62:	7b3b      	ldrb	r3, [r7, #12]
 8001c64:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001c68:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8001c6e:	7b3b      	ldrb	r3, [r7, #12]
 8001c70:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001c74:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8001c76:	4313      	orrs	r3, r2
 8001c78:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8001c7a:	7b3b      	ldrb	r3, [r7, #12]
 8001c7c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001c80:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8001c82:	4313      	orrs	r3, r2
 8001c84:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8001c86:	7b3b      	ldrb	r3, [r7, #12]
 8001c88:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001c8c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8001c92:	7b3b      	ldrb	r3, [r7, #12]
 8001c94:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001c98:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8001c9e:	7b3b      	ldrb	r3, [r7, #12]
 8001ca0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001ca4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8001caa:	7b3b      	ldrb	r3, [r7, #12]
 8001cac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001cb0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8001cb6:	7b7b      	ldrb	r3, [r7, #13]
 8001cb8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001cbc:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8001cc2:	7b7b      	ldrb	r3, [r7, #13]
 8001cc4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001cc8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8001cce:	7b7b      	ldrb	r3, [r7, #13]
 8001cd0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8001cd4:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8001cda:	7b7b      	ldrb	r3, [r7, #13]
 8001cdc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001ce0:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8001ce6:	7b7b      	ldrb	r3, [r7, #13]
 8001ce8:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001cec:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8001cf2:	7b7b      	ldrb	r3, [r7, #13]
 8001cf4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001cf8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8001cfe:	7b7b      	ldrb	r3, [r7, #13]
 8001d00:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001d04:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 8001d06:	4313      	orrs	r3, r2
 8001d08:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ){
 8001d0a:	7b7b      	ldrb	r3, [r7, #13]
 8001d0c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001d10:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8001d12:	4313      	orrs	r3, r2
 8001d14:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d163      	bne.n	8001de2 <lsm6dso_xl_data_rate_set+0x1ae>

      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 8001d1a:	f107 030b 	add.w	r3, r7, #11
 8001d1e:	4619      	mov	r1, r3
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 fc61 	bl	80025e8 <lsm6dso_fsm_data_rate_get>
 8001d26:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d159      	bne.n	8001de2 <lsm6dso_xl_data_rate_set+0x1ae>
        switch (fsm_odr) {
 8001d2e:	7afb      	ldrb	r3, [r7, #11]
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	d853      	bhi.n	8001ddc <lsm6dso_xl_data_rate_set+0x1a8>
 8001d34:	a201      	add	r2, pc, #4	; (adr r2, 8001d3c <lsm6dso_xl_data_rate_set+0x108>)
 8001d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d3a:	bf00      	nop
 8001d3c:	08001d4d 	.word	0x08001d4d
 8001d40:	08001d5f 	.word	0x08001d5f
 8001d44:	08001d7d 	.word	0x08001d7d
 8001d48:	08001da7 	.word	0x08001da7
          case LSM6DSO_ODR_FSM_12Hz5:

            if (val == LSM6DSO_XL_ODR_OFF){
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d102      	bne.n	8001d58 <lsm6dso_xl_data_rate_set+0x124>
              odr_xl = LSM6DSO_XL_ODR_12Hz5;
 8001d52:	2301      	movs	r3, #1
 8001d54:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_xl = val;
            }
            break;
 8001d56:	e045      	b.n	8001de4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001d58:	78fb      	ldrb	r3, [r7, #3]
 8001d5a:	75fb      	strb	r3, [r7, #23]
            break;
 8001d5c:	e042      	b.n	8001de4 <lsm6dso_xl_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_26Hz:

            if (val == LSM6DSO_XL_ODR_OFF){
 8001d5e:	78fb      	ldrb	r3, [r7, #3]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d102      	bne.n	8001d6a <lsm6dso_xl_data_rate_set+0x136>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8001d64:	2302      	movs	r3, #2
 8001d66:	75fb      	strb	r3, [r7, #23]
              odr_xl = LSM6DSO_XL_ODR_26Hz;

            } else {
              odr_xl = val;
            }
            break;
 8001d68:	e03c      	b.n	8001de4 <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_12Hz5){
 8001d6a:	78fb      	ldrb	r3, [r7, #3]
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	d102      	bne.n	8001d76 <lsm6dso_xl_data_rate_set+0x142>
              odr_xl = LSM6DSO_XL_ODR_26Hz;
 8001d70:	2302      	movs	r3, #2
 8001d72:	75fb      	strb	r3, [r7, #23]
            break;
 8001d74:	e036      	b.n	8001de4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001d76:	78fb      	ldrb	r3, [r7, #3]
 8001d78:	75fb      	strb	r3, [r7, #23]
            break;
 8001d7a:	e033      	b.n	8001de4 <lsm6dso_xl_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_52Hz:

            if (val == LSM6DSO_XL_ODR_OFF){
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d102      	bne.n	8001d88 <lsm6dso_xl_data_rate_set+0x154>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8001d82:	2303      	movs	r3, #3
 8001d84:	75fb      	strb	r3, [r7, #23]
              odr_xl = LSM6DSO_XL_ODR_52Hz;

            } else {
              odr_xl = val;
            }
            break;
 8001d86:	e02d      	b.n	8001de4 <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_12Hz5){
 8001d88:	78fb      	ldrb	r3, [r7, #3]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d102      	bne.n	8001d94 <lsm6dso_xl_data_rate_set+0x160>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	75fb      	strb	r3, [r7, #23]
            break;
 8001d92:	e027      	b.n	8001de4 <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_26Hz){
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d102      	bne.n	8001da0 <lsm6dso_xl_data_rate_set+0x16c>
              odr_xl = LSM6DSO_XL_ODR_52Hz;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	75fb      	strb	r3, [r7, #23]
            break;
 8001d9e:	e021      	b.n	8001de4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	75fb      	strb	r3, [r7, #23]
            break;
 8001da4:	e01e      	b.n	8001de4 <lsm6dso_xl_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_104Hz:

            if (val == LSM6DSO_XL_ODR_OFF){
 8001da6:	78fb      	ldrb	r3, [r7, #3]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d102      	bne.n	8001db2 <lsm6dso_xl_data_rate_set+0x17e>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8001dac:	2304      	movs	r3, #4
 8001dae:	75fb      	strb	r3, [r7, #23]
              odr_xl = LSM6DSO_XL_ODR_104Hz;

            } else {
              odr_xl = val;
            }
            break;
 8001db0:	e018      	b.n	8001de4 <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_12Hz5){
 8001db2:	78fb      	ldrb	r3, [r7, #3]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d102      	bne.n	8001dbe <lsm6dso_xl_data_rate_set+0x18a>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8001db8:	2304      	movs	r3, #4
 8001dba:	75fb      	strb	r3, [r7, #23]
            break;
 8001dbc:	e012      	b.n	8001de4 <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_26Hz){
 8001dbe:	78fb      	ldrb	r3, [r7, #3]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d102      	bne.n	8001dca <lsm6dso_xl_data_rate_set+0x196>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8001dc4:	2304      	movs	r3, #4
 8001dc6:	75fb      	strb	r3, [r7, #23]
            break;
 8001dc8:	e00c      	b.n	8001de4 <lsm6dso_xl_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_XL_ODR_52Hz){
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	2b03      	cmp	r3, #3
 8001dce:	d102      	bne.n	8001dd6 <lsm6dso_xl_data_rate_set+0x1a2>
              odr_xl = LSM6DSO_XL_ODR_104Hz;
 8001dd0:	2304      	movs	r3, #4
 8001dd2:	75fb      	strb	r3, [r7, #23]
            break;
 8001dd4:	e006      	b.n	8001de4 <lsm6dso_xl_data_rate_set+0x1b0>
              odr_xl = val;
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	75fb      	strb	r3, [r7, #23]
            break;
 8001dda:	e003      	b.n	8001de4 <lsm6dso_xl_data_rate_set+0x1b0>
          default:
            odr_xl = val;
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	75fb      	strb	r3, [r7, #23]
            break;
 8001de0:	e000      	b.n	8001de4 <lsm6dso_xl_data_rate_set+0x1b0>
        }
      }
 8001de2:	bf00      	nop
    }
  }
  if (ret == 0) {
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d107      	bne.n	8001dfa <lsm6dso_xl_data_rate_set+0x1c6>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8001dea:	f107 0208 	add.w	r2, r7, #8
 8001dee:	2301      	movs	r3, #1
 8001df0:	2110      	movs	r1, #16
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7ff fe90 	bl	8001b18 <lsm6dso_read_reg>
 8001df8:	6138      	str	r0, [r7, #16]
  }
  if (ret == 0) {
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d10f      	bne.n	8001e20 <lsm6dso_xl_data_rate_set+0x1ec>
    reg.odr_xl = (uint8_t) odr_xl;
 8001e00:	7dfb      	ldrb	r3, [r7, #23]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	7a3b      	ldrb	r3, [r7, #8]
 8001e0a:	f362 1307 	bfi	r3, r2, #4, #4
 8001e0e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8001e10:	f107 0208 	add.w	r2, r7, #8
 8001e14:	2301      	movs	r3, #1
 8001e16:	2110      	movs	r1, #16
 8001e18:	6878      	ldr	r0, [r7, #4]
 8001e1a:	f7ff fe95 	bl	8001b48 <lsm6dso_write_reg>
 8001e1e:	6138      	str	r0, [r7, #16]
  }
  return ret;
 8001e20:	693b      	ldr	r3, [r7, #16]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop

08001e2c <lsm6dso_xl_data_rate_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of odr_xl in reg CTRL1_XL
  *
  */
int32_t lsm6dso_xl_data_rate_get(stmdev_ctx_t *ctx, lsm6dso_odr_xl_t *val)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl1_xl_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL1_XL, (uint8_t*)&reg, 1);
 8001e36:	f107 0208 	add.w	r2, r7, #8
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	2110      	movs	r1, #16
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7ff fe6a 	bl	8001b18 <lsm6dso_read_reg>
 8001e44:	60f8      	str	r0, [r7, #12]

  switch (reg.odr_xl) {
 8001e46:	7a3b      	ldrb	r3, [r7, #8]
 8001e48:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b0b      	cmp	r3, #11
 8001e50:	d84a      	bhi.n	8001ee8 <lsm6dso_xl_data_rate_get+0xbc>
 8001e52:	a201      	add	r2, pc, #4	; (adr r2, 8001e58 <lsm6dso_xl_data_rate_get+0x2c>)
 8001e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e58:	08001e89 	.word	0x08001e89
 8001e5c:	08001e91 	.word	0x08001e91
 8001e60:	08001e99 	.word	0x08001e99
 8001e64:	08001ea1 	.word	0x08001ea1
 8001e68:	08001ea9 	.word	0x08001ea9
 8001e6c:	08001eb1 	.word	0x08001eb1
 8001e70:	08001eb9 	.word	0x08001eb9
 8001e74:	08001ec1 	.word	0x08001ec1
 8001e78:	08001ec9 	.word	0x08001ec9
 8001e7c:	08001ed1 	.word	0x08001ed1
 8001e80:	08001ed9 	.word	0x08001ed9
 8001e84:	08001ee1 	.word	0x08001ee1
    case LSM6DSO_XL_ODR_OFF:
      *val = LSM6DSO_XL_ODR_OFF;
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
      break;
 8001e8e:	e02f      	b.n	8001ef0 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_12Hz5:
      *val = LSM6DSO_XL_ODR_12Hz5;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	2201      	movs	r2, #1
 8001e94:	701a      	strb	r2, [r3, #0]
      break;
 8001e96:	e02b      	b.n	8001ef0 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_26Hz:
      *val = LSM6DSO_XL_ODR_26Hz;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	701a      	strb	r2, [r3, #0]
      break;
 8001e9e:	e027      	b.n	8001ef0 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_52Hz:
      *val = LSM6DSO_XL_ODR_52Hz;
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	701a      	strb	r2, [r3, #0]
      break;
 8001ea6:	e023      	b.n	8001ef0 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_104Hz:
      *val = LSM6DSO_XL_ODR_104Hz;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	2204      	movs	r2, #4
 8001eac:	701a      	strb	r2, [r3, #0]
      break;
 8001eae:	e01f      	b.n	8001ef0 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_208Hz:
      *val = LSM6DSO_XL_ODR_208Hz;
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	2205      	movs	r2, #5
 8001eb4:	701a      	strb	r2, [r3, #0]
      break;
 8001eb6:	e01b      	b.n	8001ef0 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_417Hz:
      *val = LSM6DSO_XL_ODR_417Hz;
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	2206      	movs	r2, #6
 8001ebc:	701a      	strb	r2, [r3, #0]
      break;
 8001ebe:	e017      	b.n	8001ef0 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_833Hz:
      *val = LSM6DSO_XL_ODR_833Hz;
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	2207      	movs	r2, #7
 8001ec4:	701a      	strb	r2, [r3, #0]
      break;
 8001ec6:	e013      	b.n	8001ef0 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_1667Hz:
      *val = LSM6DSO_XL_ODR_1667Hz;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2208      	movs	r2, #8
 8001ecc:	701a      	strb	r2, [r3, #0]
      break;
 8001ece:	e00f      	b.n	8001ef0 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_3333Hz:
      *val = LSM6DSO_XL_ODR_3333Hz;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	2209      	movs	r2, #9
 8001ed4:	701a      	strb	r2, [r3, #0]
      break;
 8001ed6:	e00b      	b.n	8001ef0 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_6667Hz:
      *val = LSM6DSO_XL_ODR_6667Hz;
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	220a      	movs	r2, #10
 8001edc:	701a      	strb	r2, [r3, #0]
      break;
 8001ede:	e007      	b.n	8001ef0 <lsm6dso_xl_data_rate_get+0xc4>
    case LSM6DSO_XL_ODR_1Hz6:
      *val = LSM6DSO_XL_ODR_1Hz6;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	220b      	movs	r2, #11
 8001ee4:	701a      	strb	r2, [r3, #0]
      break;
 8001ee6:	e003      	b.n	8001ef0 <lsm6dso_xl_data_rate_get+0xc4>
    default:
      *val = LSM6DSO_XL_ODR_OFF;
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	2200      	movs	r2, #0
 8001eec:	701a      	strb	r2, [r3, #0]
      break;
 8001eee:	bf00      	nop
  }
  return ret;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop

08001efc <lsm6dso_gy_full_scale_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_full_scale_set(stmdev_ctx_t *ctx, lsm6dso_fs_g_t val)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	460b      	mov	r3, r1
 8001f06:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8001f08:	f107 0208 	add.w	r2, r7, #8
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	2111      	movs	r1, #17
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff fe01 	bl	8001b18 <lsm6dso_read_reg>
 8001f16:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10f      	bne.n	8001f3e <lsm6dso_gy_full_scale_set+0x42>
    reg.fs_g = (uint8_t) val;
 8001f1e:	78fb      	ldrb	r3, [r7, #3]
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	7a3b      	ldrb	r3, [r7, #8]
 8001f28:	f362 0343 	bfi	r3, r2, #1, #3
 8001f2c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8001f2e:	f107 0208 	add.w	r2, r7, #8
 8001f32:	2301      	movs	r3, #1
 8001f34:	2111      	movs	r1, #17
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7ff fe06 	bl	8001b48 <lsm6dso_write_reg>
 8001f3c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3710      	adds	r7, #16
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <lsm6dso_gy_full_scale_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of fs_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_full_scale_get(stmdev_ctx_t *ctx, lsm6dso_fs_g_t *val)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8001f52:	f107 0208 	add.w	r2, r7, #8
 8001f56:	2301      	movs	r3, #1
 8001f58:	2111      	movs	r1, #17
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f7ff fddc 	bl	8001b18 <lsm6dso_read_reg>
 8001f60:	60f8      	str	r0, [r7, #12]
  switch (reg.fs_g) {
 8001f62:	7a3b      	ldrb	r3, [r7, #8]
 8001f64:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b06      	cmp	r3, #6
 8001f6c:	d824      	bhi.n	8001fb8 <lsm6dso_gy_full_scale_get+0x70>
 8001f6e:	a201      	add	r2, pc, #4	; (adr r2, 8001f74 <lsm6dso_gy_full_scale_get+0x2c>)
 8001f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f74:	08001f91 	.word	0x08001f91
 8001f78:	08001f99 	.word	0x08001f99
 8001f7c:	08001fa1 	.word	0x08001fa1
 8001f80:	08001fb9 	.word	0x08001fb9
 8001f84:	08001fa9 	.word	0x08001fa9
 8001f88:	08001fb9 	.word	0x08001fb9
 8001f8c:	08001fb1 	.word	0x08001fb1
    case LSM6DSO_250dps:
      *val = LSM6DSO_250dps;
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	2200      	movs	r2, #0
 8001f94:	701a      	strb	r2, [r3, #0]
      break;
 8001f96:	e013      	b.n	8001fc0 <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_125dps:
      *val = LSM6DSO_125dps;
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	701a      	strb	r2, [r3, #0]
      break;
 8001f9e:	e00f      	b.n	8001fc0 <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_500dps:
      *val = LSM6DSO_500dps;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	2202      	movs	r2, #2
 8001fa4:	701a      	strb	r2, [r3, #0]
      break;
 8001fa6:	e00b      	b.n	8001fc0 <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_1000dps:
      *val = LSM6DSO_1000dps;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	2204      	movs	r2, #4
 8001fac:	701a      	strb	r2, [r3, #0]
      break;
 8001fae:	e007      	b.n	8001fc0 <lsm6dso_gy_full_scale_get+0x78>
    case LSM6DSO_2000dps:
      *val = LSM6DSO_2000dps;
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	2206      	movs	r2, #6
 8001fb4:	701a      	strb	r2, [r3, #0]
      break;
 8001fb6:	e003      	b.n	8001fc0 <lsm6dso_gy_full_scale_get+0x78>
    default:
      *val = LSM6DSO_250dps;
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	2200      	movs	r2, #0
 8001fbc:	701a      	strb	r2, [r3, #0]
      break;
 8001fbe:	bf00      	nop
  }

  return ret;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3710      	adds	r7, #16
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop

08001fcc <lsm6dso_gy_data_rate_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_data_rate_set(stmdev_ctx_t *ctx, lsm6dso_odr_g_t val)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	70fb      	strb	r3, [r7, #3]
  lsm6dso_odr_g_t odr_gy =  val;
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	75fb      	strb	r3, [r7, #23]
  lsm6dso_fsm_odr_t fsm_odr;
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  /* Check the Finite State Machine data rate constraints */
  ret =  lsm6dso_fsm_enable_get(ctx, &fsm_enable);
 8001fdc:	f107 030c 	add.w	r3, r7, #12
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 fadf 	bl	80025a6 <lsm6dso_fsm_enable_get>
 8001fe8:	6138      	str	r0, [r7, #16]
  if (ret == 0) {
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f040 80c4 	bne.w	800217a <lsm6dso_gy_data_rate_set+0x1ae>
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8001ff2:	7b3b      	ldrb	r3, [r7, #12]
 8001ff4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001ff8:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 8001ffa:	7b3b      	ldrb	r3, [r7, #12]
 8001ffc:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002000:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 8002002:	4313      	orrs	r3, r2
 8002004:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 8002006:	7b3b      	ldrb	r3, [r7, #12]
 8002008:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800200c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm2_en  |
 800200e:	4313      	orrs	r3, r2
 8002010:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8002012:	7b3b      	ldrb	r3, [r7, #12]
 8002014:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002018:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm3_en  |
 800201a:	4313      	orrs	r3, r2
 800201c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 800201e:	7b3b      	ldrb	r3, [r7, #12]
 8002020:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002024:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm4_en  |
 8002026:	4313      	orrs	r3, r2
 8002028:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 800202a:	7b3b      	ldrb	r3, [r7, #12]
 800202c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002030:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm5_en  |
 8002032:	4313      	orrs	r3, r2
 8002034:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 8002036:	7b3b      	ldrb	r3, [r7, #12]
 8002038:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800203c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm6_en  |
 800203e:	4313      	orrs	r3, r2
 8002040:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8002042:	7b3b      	ldrb	r3, [r7, #12]
 8002044:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002048:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm7_en  |
 800204a:	4313      	orrs	r3, r2
 800204c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 800204e:	7b7b      	ldrb	r3, [r7, #13]
 8002050:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002054:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_a.fsm8_en  |
 8002056:	4313      	orrs	r3, r2
 8002058:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800205a:	7b7b      	ldrb	r3, [r7, #13]
 800205c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002060:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm9_en  |
 8002062:	4313      	orrs	r3, r2
 8002064:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 8002066:	7b7b      	ldrb	r3, [r7, #13]
 8002068:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800206c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm10_en |
 800206e:	4313      	orrs	r3, r2
 8002070:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8002072:	7b7b      	ldrb	r3, [r7, #13]
 8002074:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002078:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm11_en |
 800207a:	4313      	orrs	r3, r2
 800207c:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 800207e:	7b7b      	ldrb	r3, [r7, #13]
 8002080:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002084:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm12_en |
 8002086:	4313      	orrs	r3, r2
 8002088:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800208a:	7b7b      	ldrb	r3, [r7, #13]
 800208c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8002090:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm13_en |
 8002092:	4313      	orrs	r3, r2
 8002094:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 8002096:	7b7b      	ldrb	r3, [r7, #13]
 8002098:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800209c:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm14_en |
 800209e:	4313      	orrs	r3, r2
 80020a0:	b2da      	uxtb	r2, r3
          fsm_enable.fsm_enable_b.fsm16_en ) == PROPERTY_ENABLE ){
 80020a2:	7b7b      	ldrb	r3, [r7, #13]
 80020a4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80020a8:	b2db      	uxtb	r3, r3
          fsm_enable.fsm_enable_b.fsm15_en |
 80020aa:	4313      	orrs	r3, r2
 80020ac:	b2db      	uxtb	r3, r3
    if ( (fsm_enable.fsm_enable_a.fsm1_en  |
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d163      	bne.n	800217a <lsm6dso_gy_data_rate_set+0x1ae>

      ret =  lsm6dso_fsm_data_rate_get(ctx, &fsm_odr);
 80020b2:	f107 030b 	add.w	r3, r7, #11
 80020b6:	4619      	mov	r1, r3
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 fa95 	bl	80025e8 <lsm6dso_fsm_data_rate_get>
 80020be:	6138      	str	r0, [r7, #16]
      if (ret == 0) {
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d159      	bne.n	800217a <lsm6dso_gy_data_rate_set+0x1ae>
        switch (fsm_odr) {
 80020c6:	7afb      	ldrb	r3, [r7, #11]
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	d853      	bhi.n	8002174 <lsm6dso_gy_data_rate_set+0x1a8>
 80020cc:	a201      	add	r2, pc, #4	; (adr r2, 80020d4 <lsm6dso_gy_data_rate_set+0x108>)
 80020ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020d2:	bf00      	nop
 80020d4:	080020e5 	.word	0x080020e5
 80020d8:	080020f7 	.word	0x080020f7
 80020dc:	08002115 	.word	0x08002115
 80020e0:	0800213f 	.word	0x0800213f
          case LSM6DSO_ODR_FSM_12Hz5:

            if (val == LSM6DSO_GY_ODR_OFF){
 80020e4:	78fb      	ldrb	r3, [r7, #3]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d102      	bne.n	80020f0 <lsm6dso_gy_data_rate_set+0x124>
              odr_gy = LSM6DSO_GY_ODR_12Hz5;
 80020ea:	2301      	movs	r3, #1
 80020ec:	75fb      	strb	r3, [r7, #23]

            } else {
              odr_gy = val;
            }
            break;
 80020ee:	e045      	b.n	800217c <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 80020f0:	78fb      	ldrb	r3, [r7, #3]
 80020f2:	75fb      	strb	r3, [r7, #23]
            break;
 80020f4:	e042      	b.n	800217c <lsm6dso_gy_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_26Hz:

            if (val == LSM6DSO_GY_ODR_OFF){
 80020f6:	78fb      	ldrb	r3, [r7, #3]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d102      	bne.n	8002102 <lsm6dso_gy_data_rate_set+0x136>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 80020fc:	2302      	movs	r3, #2
 80020fe:	75fb      	strb	r3, [r7, #23]
              odr_gy = LSM6DSO_GY_ODR_26Hz;

            } else {
              odr_gy = val;
            }
            break;
 8002100:	e03c      	b.n	800217c <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_12Hz5){
 8002102:	78fb      	ldrb	r3, [r7, #3]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d102      	bne.n	800210e <lsm6dso_gy_data_rate_set+0x142>
              odr_gy = LSM6DSO_GY_ODR_26Hz;
 8002108:	2302      	movs	r3, #2
 800210a:	75fb      	strb	r3, [r7, #23]
            break;
 800210c:	e036      	b.n	800217c <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800210e:	78fb      	ldrb	r3, [r7, #3]
 8002110:	75fb      	strb	r3, [r7, #23]
            break;
 8002112:	e033      	b.n	800217c <lsm6dso_gy_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_52Hz:

            if (val == LSM6DSO_GY_ODR_OFF){
 8002114:	78fb      	ldrb	r3, [r7, #3]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d102      	bne.n	8002120 <lsm6dso_gy_data_rate_set+0x154>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 800211a:	2303      	movs	r3, #3
 800211c:	75fb      	strb	r3, [r7, #23]
              odr_gy = LSM6DSO_GY_ODR_52Hz;

            } else {
              odr_gy = val;
            }
            break;
 800211e:	e02d      	b.n	800217c <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_12Hz5){
 8002120:	78fb      	ldrb	r3, [r7, #3]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d102      	bne.n	800212c <lsm6dso_gy_data_rate_set+0x160>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8002126:	2303      	movs	r3, #3
 8002128:	75fb      	strb	r3, [r7, #23]
            break;
 800212a:	e027      	b.n	800217c <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_26Hz){
 800212c:	78fb      	ldrb	r3, [r7, #3]
 800212e:	2b02      	cmp	r3, #2
 8002130:	d102      	bne.n	8002138 <lsm6dso_gy_data_rate_set+0x16c>
              odr_gy = LSM6DSO_GY_ODR_52Hz;
 8002132:	2303      	movs	r3, #3
 8002134:	75fb      	strb	r3, [r7, #23]
            break;
 8002136:	e021      	b.n	800217c <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 8002138:	78fb      	ldrb	r3, [r7, #3]
 800213a:	75fb      	strb	r3, [r7, #23]
            break;
 800213c:	e01e      	b.n	800217c <lsm6dso_gy_data_rate_set+0x1b0>
          case LSM6DSO_ODR_FSM_104Hz:

            if (val == LSM6DSO_GY_ODR_OFF){
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d102      	bne.n	800214a <lsm6dso_gy_data_rate_set+0x17e>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8002144:	2304      	movs	r3, #4
 8002146:	75fb      	strb	r3, [r7, #23]
              odr_gy = LSM6DSO_GY_ODR_104Hz;

            } else {
              odr_gy = val;
            }
            break;
 8002148:	e018      	b.n	800217c <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_12Hz5){
 800214a:	78fb      	ldrb	r3, [r7, #3]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d102      	bne.n	8002156 <lsm6dso_gy_data_rate_set+0x18a>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8002150:	2304      	movs	r3, #4
 8002152:	75fb      	strb	r3, [r7, #23]
            break;
 8002154:	e012      	b.n	800217c <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_26Hz){
 8002156:	78fb      	ldrb	r3, [r7, #3]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d102      	bne.n	8002162 <lsm6dso_gy_data_rate_set+0x196>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 800215c:	2304      	movs	r3, #4
 800215e:	75fb      	strb	r3, [r7, #23]
            break;
 8002160:	e00c      	b.n	800217c <lsm6dso_gy_data_rate_set+0x1b0>
            } else if (val == LSM6DSO_GY_ODR_52Hz){
 8002162:	78fb      	ldrb	r3, [r7, #3]
 8002164:	2b03      	cmp	r3, #3
 8002166:	d102      	bne.n	800216e <lsm6dso_gy_data_rate_set+0x1a2>
              odr_gy = LSM6DSO_GY_ODR_104Hz;
 8002168:	2304      	movs	r3, #4
 800216a:	75fb      	strb	r3, [r7, #23]
            break;
 800216c:	e006      	b.n	800217c <lsm6dso_gy_data_rate_set+0x1b0>
              odr_gy = val;
 800216e:	78fb      	ldrb	r3, [r7, #3]
 8002170:	75fb      	strb	r3, [r7, #23]
            break;
 8002172:	e003      	b.n	800217c <lsm6dso_gy_data_rate_set+0x1b0>
          default:
            odr_gy = val;
 8002174:	78fb      	ldrb	r3, [r7, #3]
 8002176:	75fb      	strb	r3, [r7, #23]
            break;
 8002178:	e000      	b.n	800217c <lsm6dso_gy_data_rate_set+0x1b0>
        }
      }
 800217a:	bf00      	nop
    }
  }

  if (ret == 0) {
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d107      	bne.n	8002192 <lsm6dso_gy_data_rate_set+0x1c6>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 8002182:	f107 0208 	add.w	r2, r7, #8
 8002186:	2301      	movs	r3, #1
 8002188:	2111      	movs	r1, #17
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff fcc4 	bl	8001b18 <lsm6dso_read_reg>
 8002190:	6138      	str	r0, [r7, #16]
  }
  if (ret == 0) {
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d10f      	bne.n	80021b8 <lsm6dso_gy_data_rate_set+0x1ec>
    reg.odr_g = (uint8_t) odr_gy;
 8002198:	7dfb      	ldrb	r3, [r7, #23]
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	7a3b      	ldrb	r3, [r7, #8]
 80021a2:	f362 1307 	bfi	r3, r2, #4, #4
 80021a6:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 80021a8:	f107 0208 	add.w	r2, r7, #8
 80021ac:	2301      	movs	r3, #1
 80021ae:	2111      	movs	r1, #17
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f7ff fcc9 	bl	8001b48 <lsm6dso_write_reg>
 80021b6:	6138      	str	r0, [r7, #16]
  }

  return ret;
 80021b8:	693b      	ldr	r3, [r7, #16]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop

080021c4 <lsm6dso_gy_data_rate_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of odr_g in reg CTRL2_G
  *
  */
int32_t lsm6dso_gy_data_rate_get(stmdev_ctx_t *ctx, lsm6dso_odr_g_t *val)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b084      	sub	sp, #16
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  lsm6dso_ctrl2_g_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL2_G, (uint8_t*)&reg, 1);
 80021ce:	f107 0208 	add.w	r2, r7, #8
 80021d2:	2301      	movs	r3, #1
 80021d4:	2111      	movs	r1, #17
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f7ff fc9e 	bl	8001b18 <lsm6dso_read_reg>
 80021dc:	60f8      	str	r0, [r7, #12]
  switch (reg.odr_g) {
 80021de:	7a3b      	ldrb	r3, [r7, #8]
 80021e0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b0a      	cmp	r3, #10
 80021e8:	d844      	bhi.n	8002274 <lsm6dso_gy_data_rate_get+0xb0>
 80021ea:	a201      	add	r2, pc, #4	; (adr r2, 80021f0 <lsm6dso_gy_data_rate_get+0x2c>)
 80021ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f0:	0800221d 	.word	0x0800221d
 80021f4:	08002225 	.word	0x08002225
 80021f8:	0800222d 	.word	0x0800222d
 80021fc:	08002235 	.word	0x08002235
 8002200:	0800223d 	.word	0x0800223d
 8002204:	08002245 	.word	0x08002245
 8002208:	0800224d 	.word	0x0800224d
 800220c:	08002255 	.word	0x08002255
 8002210:	0800225d 	.word	0x0800225d
 8002214:	08002265 	.word	0x08002265
 8002218:	0800226d 	.word	0x0800226d
    case LSM6DSO_GY_ODR_OFF:
      *val = LSM6DSO_GY_ODR_OFF;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	2200      	movs	r2, #0
 8002220:	701a      	strb	r2, [r3, #0]
      break;
 8002222:	e02b      	b.n	800227c <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_12Hz5:
      *val = LSM6DSO_GY_ODR_12Hz5;
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	2201      	movs	r2, #1
 8002228:	701a      	strb	r2, [r3, #0]
      break;
 800222a:	e027      	b.n	800227c <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_26Hz:
      *val = LSM6DSO_GY_ODR_26Hz;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2202      	movs	r2, #2
 8002230:	701a      	strb	r2, [r3, #0]
      break;
 8002232:	e023      	b.n	800227c <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_52Hz:
      *val = LSM6DSO_GY_ODR_52Hz;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	2203      	movs	r2, #3
 8002238:	701a      	strb	r2, [r3, #0]
      break;
 800223a:	e01f      	b.n	800227c <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_104Hz:
      *val = LSM6DSO_GY_ODR_104Hz;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	2204      	movs	r2, #4
 8002240:	701a      	strb	r2, [r3, #0]
      break;
 8002242:	e01b      	b.n	800227c <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_208Hz:
      *val = LSM6DSO_GY_ODR_208Hz;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	2205      	movs	r2, #5
 8002248:	701a      	strb	r2, [r3, #0]
      break;
 800224a:	e017      	b.n	800227c <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_417Hz:
      *val = LSM6DSO_GY_ODR_417Hz;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	2206      	movs	r2, #6
 8002250:	701a      	strb	r2, [r3, #0]
      break;
 8002252:	e013      	b.n	800227c <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_833Hz:
      *val = LSM6DSO_GY_ODR_833Hz;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	2207      	movs	r2, #7
 8002258:	701a      	strb	r2, [r3, #0]
      break;
 800225a:	e00f      	b.n	800227c <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_1667Hz:
      *val = LSM6DSO_GY_ODR_1667Hz;
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	2208      	movs	r2, #8
 8002260:	701a      	strb	r2, [r3, #0]
      break;
 8002262:	e00b      	b.n	800227c <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_3333Hz:
      *val = LSM6DSO_GY_ODR_3333Hz;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	2209      	movs	r2, #9
 8002268:	701a      	strb	r2, [r3, #0]
      break;
 800226a:	e007      	b.n	800227c <lsm6dso_gy_data_rate_get+0xb8>
    case LSM6DSO_GY_ODR_6667Hz:
      *val = LSM6DSO_GY_ODR_6667Hz;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	220a      	movs	r2, #10
 8002270:	701a      	strb	r2, [r3, #0]
      break;
 8002272:	e003      	b.n	800227c <lsm6dso_gy_data_rate_get+0xb8>
    default:
      *val = LSM6DSO_GY_ODR_OFF;
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
      break;
 800227a:	bf00      	nop
  }
  return ret;
 800227c:	68fb      	ldr	r3, [r7, #12]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop

08002288 <lsm6dso_block_data_update_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of bdu in reg CTRL3_C
  *
  */
int32_t lsm6dso_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 8002294:	f107 0208 	add.w	r2, r7, #8
 8002298:	2301      	movs	r3, #1
 800229a:	2112      	movs	r1, #18
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff fc3b 	bl	8001b18 <lsm6dso_read_reg>
 80022a2:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10f      	bne.n	80022ca <lsm6dso_block_data_update_set+0x42>
    reg.bdu = val;
 80022aa:	78fb      	ldrb	r3, [r7, #3]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	7a3b      	ldrb	r3, [r7, #8]
 80022b4:	f362 1386 	bfi	r3, r2, #6, #1
 80022b8:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 80022ba:	f107 0208 	add.w	r2, r7, #8
 80022be:	2301      	movs	r3, #1
 80022c0:	2112      	movs	r1, #18
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff fc40 	bl	8001b48 <lsm6dso_write_reg>
 80022c8:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80022ca:	68fb      	ldr	r3, [r7, #12]
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <lsm6dso_xl_flag_data_ready_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of xlda in reg STATUS_REG
  *
  */
int32_t lsm6dso_xl_flag_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t*)&reg, 1);
 80022de:	f107 0208 	add.w	r2, r7, #8
 80022e2:	2301      	movs	r3, #1
 80022e4:	211e      	movs	r1, #30
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff fc16 	bl	8001b18 <lsm6dso_read_reg>
 80022ec:	60f8      	str	r0, [r7, #12]
  *val = reg.xlda;
 80022ee:	7a3b      	ldrb	r3, [r7, #8]
 80022f0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	461a      	mov	r2, r3
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	701a      	strb	r2, [r3, #0]

  return ret;
 80022fc:	68fb      	ldr	r3, [r7, #12]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <lsm6dso_gy_flag_data_ready_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of gda in reg STATUS_REG
  *
  */
int32_t lsm6dso_gy_flag_data_ready_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b084      	sub	sp, #16
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
 800230e:	6039      	str	r1, [r7, #0]
  lsm6dso_status_reg_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_STATUS_REG, (uint8_t*)&reg, 1);
 8002310:	f107 0208 	add.w	r2, r7, #8
 8002314:	2301      	movs	r3, #1
 8002316:	211e      	movs	r1, #30
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff fbfd 	bl	8001b18 <lsm6dso_read_reg>
 800231e:	60f8      	str	r0, [r7, #12]
  *val = reg.gda;
 8002320:	7a3b      	ldrb	r3, [r7, #8]
 8002322:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002326:	b2db      	uxtb	r3, r3
 8002328:	461a      	mov	r2, r3
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	701a      	strb	r2, [r3, #0]

  return ret;
 800232e:	68fb      	ldr	r3, [r7, #12]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <lsm6dso_angular_rate_raw_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_angular_rate_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b084      	sub	sp, #16
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_G, buff, 6);
 8002342:	2306      	movs	r3, #6
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	2122      	movs	r1, #34	; 0x22
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff fbe5 	bl	8001b18 <lsm6dso_read_reg>
 800234e:	60f8      	str	r0, [r7, #12]
  return ret;
 8002350:	68fb      	ldr	r3, [r7, #12]
}
 8002352:	4618      	mov	r0, r3
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <lsm6dso_acceleration_raw_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_acceleration_raw_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800235a:	b580      	push	{r7, lr}
 800235c:	b084      	sub	sp, #16
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_OUTX_L_A, buff, 6);
 8002364:	2306      	movs	r3, #6
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	2128      	movs	r1, #40	; 0x28
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff fbd4 	bl	8001b18 <lsm6dso_read_reg>
 8002370:	60f8      	str	r0, [r7, #12]
  return ret;
 8002372:	68fb      	ldr	r3, [r7, #12]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <lsm6dso_mem_bank_set>:
  * @param  val      change the values of reg_access in
  *                               reg FUNC_CFG_ACCESS
  *
  */
int32_t lsm6dso_mem_bank_set(stmdev_ctx_t *ctx, lsm6dso_reg_access_t val)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	70fb      	strb	r3, [r7, #3]
  lsm6dso_func_cfg_access_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t*)&reg, 1);
 8002388:	f107 0208 	add.w	r2, r7, #8
 800238c:	2301      	movs	r3, #1
 800238e:	2101      	movs	r1, #1
 8002390:	6878      	ldr	r0, [r7, #4]
 8002392:	f7ff fbc1 	bl	8001b18 <lsm6dso_read_reg>
 8002396:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d10f      	bne.n	80023be <lsm6dso_mem_bank_set+0x42>
    reg.reg_access = (uint8_t)val;
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	f003 0303 	and.w	r3, r3, #3
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	7a3b      	ldrb	r3, [r7, #8]
 80023a8:	f362 1387 	bfi	r3, r2, #6, #2
 80023ac:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FUNC_CFG_ACCESS, (uint8_t*)&reg, 1);
 80023ae:	f107 0208 	add.w	r2, r7, #8
 80023b2:	2301      	movs	r3, #1
 80023b4:	2101      	movs	r1, #1
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f7ff fbc6 	bl	8001b48 <lsm6dso_write_reg>
 80023bc:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80023be:	68fb      	ldr	r3, [r7, #12]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <lsm6dso_device_id_get>:
  * @param  ctx      read / write interface definitions
  * @param  buff     buffer that stores data read
  *
  */
int32_t lsm6dso_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dso_read_reg(ctx, LSM6DSO_WHO_AM_I, buff, 1);
 80023d2:	2301      	movs	r3, #1
 80023d4:	683a      	ldr	r2, [r7, #0]
 80023d6:	210f      	movs	r1, #15
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f7ff fb9d 	bl	8001b18 <lsm6dso_read_reg>
 80023de:	60f8      	str	r0, [r7, #12]
  return ret;
 80023e0:	68fb      	ldr	r3, [r7, #12]
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3710      	adds	r7, #16
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <lsm6dso_auto_increment_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of if_inc in reg CTRL3_C
  *
  */
int32_t lsm6dso_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b084      	sub	sp, #16
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	6078      	str	r0, [r7, #4]
 80023f2:	460b      	mov	r3, r1
 80023f4:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl3_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 80023f6:	f107 0208 	add.w	r2, r7, #8
 80023fa:	2301      	movs	r3, #1
 80023fc:	2112      	movs	r1, #18
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f7ff fb8a 	bl	8001b18 <lsm6dso_read_reg>
 8002404:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10f      	bne.n	800242c <lsm6dso_auto_increment_set+0x42>
    reg.if_inc = val;
 800240c:	78fb      	ldrb	r3, [r7, #3]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	b2da      	uxtb	r2, r3
 8002414:	7a3b      	ldrb	r3, [r7, #8]
 8002416:	f362 0382 	bfi	r3, r2, #2, #1
 800241a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL3_C, (uint8_t*)&reg, 1);
 800241c:	f107 0208 	add.w	r2, r7, #8
 8002420:	2301      	movs	r3, #1
 8002422:	2112      	movs	r1, #18
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f7ff fb8f 	bl	8001b48 <lsm6dso_write_reg>
 800242a:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800242c:	68fb      	ldr	r3, [r7, #12]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <lsm6dso_xl_self_test_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of st_xl in reg CTRL5_C
  *
  */
int32_t lsm6dso_xl_self_test_set(stmdev_ctx_t *ctx, lsm6dso_st_xl_t val)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b084      	sub	sp, #16
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	460b      	mov	r3, r1
 8002440:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl5_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL5_C, (uint8_t*)&reg, 1);
 8002442:	f107 0208 	add.w	r2, r7, #8
 8002446:	2301      	movs	r3, #1
 8002448:	2114      	movs	r1, #20
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff fb64 	bl	8001b18 <lsm6dso_read_reg>
 8002450:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d10f      	bne.n	8002478 <lsm6dso_xl_self_test_set+0x42>
    reg.st_xl = (uint8_t)val;
 8002458:	78fb      	ldrb	r3, [r7, #3]
 800245a:	f003 0303 	and.w	r3, r3, #3
 800245e:	b2da      	uxtb	r2, r3
 8002460:	7a3b      	ldrb	r3, [r7, #8]
 8002462:	f362 0301 	bfi	r3, r2, #0, #2
 8002466:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL5_C, (uint8_t*)&reg, 1);
 8002468:	f107 0208 	add.w	r2, r7, #8
 800246c:	2301      	movs	r3, #1
 800246e:	2114      	movs	r1, #20
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f7ff fb69 	bl	8001b48 <lsm6dso_write_reg>
 8002476:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 8002478:	68fb      	ldr	r3, [r7, #12]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <lsm6dso_gy_self_test_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of st_g in reg CTRL5_C
  *
  */
int32_t lsm6dso_gy_self_test_set(stmdev_ctx_t *ctx, lsm6dso_st_g_t val)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b084      	sub	sp, #16
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	460b      	mov	r3, r1
 800248c:	70fb      	strb	r3, [r7, #3]
  lsm6dso_ctrl5_c_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL5_C, (uint8_t*)&reg, 1);
 800248e:	f107 0208 	add.w	r2, r7, #8
 8002492:	2301      	movs	r3, #1
 8002494:	2114      	movs	r1, #20
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f7ff fb3e 	bl	8001b18 <lsm6dso_read_reg>
 800249c:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10f      	bne.n	80024c4 <lsm6dso_gy_self_test_set+0x42>
    reg.st_g = (uint8_t)val;
 80024a4:	78fb      	ldrb	r3, [r7, #3]
 80024a6:	f003 0303 	and.w	r3, r3, #3
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	7a3b      	ldrb	r3, [r7, #8]
 80024ae:	f362 0383 	bfi	r3, r2, #2, #2
 80024b2:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL5_C, (uint8_t*)&reg, 1);
 80024b4:	f107 0208 	add.w	r2, r7, #8
 80024b8:	2301      	movs	r3, #1
 80024ba:	2114      	movs	r1, #20
 80024bc:	6878      	ldr	r0, [r7, #4]
 80024be:	f7ff fb43 	bl	8001b48 <lsm6dso_write_reg>
 80024c2:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80024c4:	68fb      	ldr	r3, [r7, #12]
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}

080024ce <lsm6dso_i3c_disable_set>:
  * @param  val      change the values of i3c_disable
  *                                    in reg CTRL9_XL
  *
  */
int32_t lsm6dso_i3c_disable_set(stmdev_ctx_t *ctx, lsm6dso_i3c_disable_t val)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	b086      	sub	sp, #24
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	460b      	mov	r3, r1
 80024d8:	70fb      	strb	r3, [r7, #3]
  lsm6dso_i3c_bus_avb_t i3c_bus_avb;
  lsm6dso_ctrl9_xl_t ctrl9_xl;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
 80024da:	f107 020c 	add.w	r2, r7, #12
 80024de:	2301      	movs	r3, #1
 80024e0:	2118      	movs	r1, #24
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff fb18 	bl	8001b18 <lsm6dso_read_reg>
 80024e8:	6178      	str	r0, [r7, #20]
  if (ret == 0) {
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d111      	bne.n	8002514 <lsm6dso_i3c_disable_set+0x46>
    ctrl9_xl.i3c_disable = ((uint8_t)val & 0x80U) >> 7;
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	09db      	lsrs	r3, r3, #7
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	7b3b      	ldrb	r3, [r7, #12]
 80024fe:	f362 0341 	bfi	r3, r2, #1, #1
 8002502:	733b      	strb	r3, [r7, #12]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
 8002504:	f107 020c 	add.w	r2, r7, #12
 8002508:	2301      	movs	r3, #1
 800250a:	2118      	movs	r1, #24
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f7ff fb1b 	bl	8001b48 <lsm6dso_write_reg>
 8002512:	6178      	str	r0, [r7, #20]
  }
  if (ret == 0) {
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d107      	bne.n	800252a <lsm6dso_i3c_disable_set+0x5c>

    ret = lsm6dso_read_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 800251a:	f107 0210 	add.w	r2, r7, #16
 800251e:	2301      	movs	r3, #1
 8002520:	2162      	movs	r1, #98	; 0x62
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f7ff faf8 	bl	8001b18 <lsm6dso_read_reg>
 8002528:	6178      	str	r0, [r7, #20]
                           (uint8_t*)&i3c_bus_avb, 1);
  }
  if (ret == 0) {
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10f      	bne.n	8002550 <lsm6dso_i3c_disable_set+0x82>
    i3c_bus_avb.i3c_bus_avb_sel = (uint8_t)val & 0x03U;
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	b2da      	uxtb	r2, r3
 8002538:	7c3b      	ldrb	r3, [r7, #16]
 800253a:	f362 03c4 	bfi	r3, r2, #3, #2
 800253e:	743b      	strb	r3, [r7, #16]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_I3C_BUS_AVB,
 8002540:	f107 0210 	add.w	r2, r7, #16
 8002544:	2301      	movs	r3, #1
 8002546:	2162      	movs	r1, #98	; 0x62
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7ff fafd 	bl	8001b48 <lsm6dso_write_reg>
 800254e:	6178      	str	r0, [r7, #20]
                            (uint8_t*)&i3c_bus_avb, 1);
  }

  return ret;
 8002550:	697b      	ldr	r3, [r7, #20]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <lsm6dso_fifo_mode_set>:
  * @param  ctx      read / write interface definitions
  * @param  val      change the values of fifo_mode in reg FIFO_CTRL4
  *
  */
int32_t lsm6dso_fifo_mode_set(stmdev_ctx_t *ctx, lsm6dso_fifo_mode_t val)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b084      	sub	sp, #16
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	460b      	mov	r3, r1
 8002564:	70fb      	strb	r3, [r7, #3]
  lsm6dso_fifo_ctrl4_t reg;
  int32_t ret;

  ret = lsm6dso_read_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t*)&reg, 1);
 8002566:	f107 0208 	add.w	r2, r7, #8
 800256a:	2301      	movs	r3, #1
 800256c:	210a      	movs	r1, #10
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f7ff fad2 	bl	8001b18 <lsm6dso_read_reg>
 8002574:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10f      	bne.n	800259c <lsm6dso_fifo_mode_set+0x42>
    reg.fifo_mode = (uint8_t)val;
 800257c:	78fb      	ldrb	r3, [r7, #3]
 800257e:	f003 0307 	and.w	r3, r3, #7
 8002582:	b2da      	uxtb	r2, r3
 8002584:	7a3b      	ldrb	r3, [r7, #8]
 8002586:	f362 0302 	bfi	r3, r2, #0, #3
 800258a:	723b      	strb	r3, [r7, #8]
    ret = lsm6dso_write_reg(ctx, LSM6DSO_FIFO_CTRL4, (uint8_t*)&reg, 1);
 800258c:	f107 0208 	add.w	r2, r7, #8
 8002590:	2301      	movs	r3, #1
 8002592:	210a      	movs	r1, #10
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f7ff fad7 	bl	8001b48 <lsm6dso_write_reg>
 800259a:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 800259c:	68fb      	ldr	r3, [r7, #12]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}

080025a6 <lsm6dso_fsm_enable_get>:
  * @param  val      union of registers from FSM_ENABLE_A to FSM_ENABLE_B
  *
  */
int32_t lsm6dso_fsm_enable_get(stmdev_ctx_t *ctx,
                               lsm6dso_emb_fsm_enable_t *val)
{
 80025a6:	b580      	push	{r7, lr}
 80025a8:	b084      	sub	sp, #16
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80025b0:	2102      	movs	r1, #2
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7ff fee2 	bl	800237c <lsm6dso_mem_bank_set>
 80025b8:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d106      	bne.n	80025ce <lsm6dso_fsm_enable_get+0x28>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_FSM_ENABLE_A, (uint8_t*) val, 2);
 80025c0:	2302      	movs	r3, #2
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	2146      	movs	r1, #70	; 0x46
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff faa6 	bl	8001b18 <lsm6dso_read_reg>
 80025cc:	60f8      	str	r0, [r7, #12]
  }
  if (ret == 0) {
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d104      	bne.n	80025de <lsm6dso_fsm_enable_get+0x38>
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 80025d4:	2100      	movs	r1, #0
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff fed0 	bl	800237c <lsm6dso_mem_bank_set>
 80025dc:	60f8      	str	r0, [r7, #12]
  }
  return ret;
 80025de:	68fb      	ldr	r3, [r7, #12]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <lsm6dso_fsm_data_rate_get>:
  * @param  ctx      read / write interface definitions
  * @param  val      Get the values of fsm_odr in reg EMB_FUNC_ODR_CFG_B
  *
  */
int32_t lsm6dso_fsm_data_rate_get(stmdev_ctx_t *ctx, lsm6dso_fsm_odr_t *val)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  lsm6dso_emb_func_odr_cfg_b_t reg;
  int32_t ret;

  ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_EMBEDDED_FUNC_BANK);
 80025f2:	2102      	movs	r1, #2
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f7ff fec1 	bl	800237c <lsm6dso_mem_bank_set>
 80025fa:	60f8      	str	r0, [r7, #12]
  if (ret == 0) {
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d107      	bne.n	8002612 <lsm6dso_fsm_data_rate_get+0x2a>
    ret = lsm6dso_read_reg(ctx, LSM6DSO_EMB_FUNC_ODR_CFG_B,
 8002602:	f107 0208 	add.w	r2, r7, #8
 8002606:	2301      	movs	r3, #1
 8002608:	215f      	movs	r1, #95	; 0x5f
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff fa84 	bl	8001b18 <lsm6dso_read_reg>
 8002610:	60f8      	str	r0, [r7, #12]
                           (uint8_t*)&reg, 1);
  }
  if (ret == 0) {
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d12a      	bne.n	800266e <lsm6dso_fsm_data_rate_get+0x86>
    switch (reg.fsm_odr) {
 8002618:	7a3b      	ldrb	r3, [r7, #8]
 800261a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b03      	cmp	r3, #3
 8002622:	d81b      	bhi.n	800265c <lsm6dso_fsm_data_rate_get+0x74>
 8002624:	a201      	add	r2, pc, #4	; (adr r2, 800262c <lsm6dso_fsm_data_rate_get+0x44>)
 8002626:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800262a:	bf00      	nop
 800262c:	0800263d 	.word	0x0800263d
 8002630:	08002645 	.word	0x08002645
 8002634:	0800264d 	.word	0x0800264d
 8002638:	08002655 	.word	0x08002655
      case LSM6DSO_ODR_FSM_12Hz5:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	2200      	movs	r2, #0
 8002640:	701a      	strb	r2, [r3, #0]
        break;
 8002642:	e00f      	b.n	8002664 <lsm6dso_fsm_data_rate_get+0x7c>
      case LSM6DSO_ODR_FSM_26Hz:
        *val = LSM6DSO_ODR_FSM_26Hz;
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	2201      	movs	r2, #1
 8002648:	701a      	strb	r2, [r3, #0]
        break;
 800264a:	e00b      	b.n	8002664 <lsm6dso_fsm_data_rate_get+0x7c>
      case LSM6DSO_ODR_FSM_52Hz:
        *val = LSM6DSO_ODR_FSM_52Hz;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	2202      	movs	r2, #2
 8002650:	701a      	strb	r2, [r3, #0]
        break;
 8002652:	e007      	b.n	8002664 <lsm6dso_fsm_data_rate_get+0x7c>
      case LSM6DSO_ODR_FSM_104Hz:
        *val = LSM6DSO_ODR_FSM_104Hz;
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	2203      	movs	r2, #3
 8002658:	701a      	strb	r2, [r3, #0]
        break;
 800265a:	e003      	b.n	8002664 <lsm6dso_fsm_data_rate_get+0x7c>
      default:
        *val = LSM6DSO_ODR_FSM_12Hz5;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	2200      	movs	r2, #0
 8002660:	701a      	strb	r2, [r3, #0]
        break;
 8002662:	bf00      	nop
    }
    ret = lsm6dso_mem_bank_set(ctx, LSM6DSO_USER_BANK);
 8002664:	2100      	movs	r1, #0
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f7ff fe88 	bl	800237c <lsm6dso_mem_bank_set>
 800266c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800266e:	68fb      	ldr	r3, [r7, #12]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <BSP_LED_Init>:
 *              This parameter can be one of the following values:
 *              @arg  LED2, LED4, ...
 * @retval HAL status
 */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
  static const BSP_LED_GPIO_Init LedGpioInit[LEDn] = {LED_USER_GPIO_Init};
  LedGpioInit[Led]();
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	4a04      	ldr	r2, [pc, #16]	; (8002698 <BSP_LED_Init+0x20>)
 8002686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800268a:	4798      	blx	r3
  return BSP_ERROR_NONE;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	08007d94 	.word	0x08007d94

0800269c <BSP_LED_On>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_SET);
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	4a06      	ldr	r2, [pc, #24]	; (80026c4 <BSP_LED_On+0x28>)
 80026aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ae:	2120      	movs	r1, #32
 80026b0:	2201      	movs	r2, #1
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 fe44 	bl	8003340 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	20000058 	.word	0x20000058

080026c8 <BSP_LED_Off>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	4a06      	ldr	r2, [pc, #24]	; (80026f0 <BSP_LED_Off+0x28>)
 80026d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026da:	2120      	movs	r1, #32
 80026dc:	2200      	movs	r2, #0
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 fe2e 	bl	8003340 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80026e4:	2300      	movs	r3, #0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	20000058 	.word	0x20000058

080026f4 <LED_USER_GPIO_Init>:
}
/**
  * @brief
  * @retval None
  */
static void LED_USER_GPIO_Init(void) {
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b088      	sub	sp, #32
 80026f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	4b1c      	ldr	r3, [pc, #112]	; (8002770 <LED_USER_GPIO_Init+0x7c>)
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	4a1b      	ldr	r2, [pc, #108]	; (8002770 <LED_USER_GPIO_Init+0x7c>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	6313      	str	r3, [r2, #48]	; 0x30
 800270a:	4b19      	ldr	r3, [pc, #100]	; (8002770 <LED_USER_GPIO_Init+0x7c>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002716:	f107 030c 	add.w	r3, r7, #12
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
 800271e:	605a      	str	r2, [r3, #4]
 8002720:	609a      	str	r2, [r3, #8]
 8002722:	60da      	str	r2, [r3, #12]
 8002724:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002726:	2300      	movs	r3, #0
 8002728:	607b      	str	r3, [r7, #4]
 800272a:	4b11      	ldr	r3, [pc, #68]	; (8002770 <LED_USER_GPIO_Init+0x7c>)
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	4a10      	ldr	r2, [pc, #64]	; (8002770 <LED_USER_GPIO_Init+0x7c>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	6313      	str	r3, [r2, #48]	; 0x30
 8002736:	4b0e      	ldr	r3, [pc, #56]	; (8002770 <LED_USER_GPIO_Init+0x7c>)
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	607b      	str	r3, [r7, #4]
 8002740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUS_BSP_LED_GPIO_PORT, BUS_BSP_LED_GPIO_PIN, GPIO_PIN_RESET);
 8002742:	2200      	movs	r2, #0
 8002744:	2120      	movs	r1, #32
 8002746:	480b      	ldr	r0, [pc, #44]	; (8002774 <LED_USER_GPIO_Init+0x80>)
 8002748:	f000 fdfa 	bl	8003340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_LED_GPIO_PIN;
 800274c:	2320      	movs	r3, #32
 800274e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002750:	2301      	movs	r3, #1
 8002752:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002754:	2300      	movs	r3, #0
 8002756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002758:	2300      	movs	r3, #0
 800275a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUS_BSP_LED_GPIO_PORT, &GPIO_InitStruct);
 800275c:	f107 030c 	add.w	r3, r7, #12
 8002760:	4619      	mov	r1, r3
 8002762:	4804      	ldr	r0, [pc, #16]	; (8002774 <LED_USER_GPIO_Init+0x80>)
 8002764:	f000 fb70 	bl	8002e48 <HAL_GPIO_Init>

}
 8002768:	bf00      	nop
 800276a:	3720      	adds	r7, #32
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40023800 	.word	0x40023800
 8002774:	40020000 	.word	0x40020000

08002778 <BSP_PB_Init>:
  *                    @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                            with interrupt generation capability
  * @retval BSP status
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	4603      	mov	r3, r0
 8002780:	460a      	mov	r2, r1
 8002782:	71fb      	strb	r3, [r7, #7]
 8002784:	4613      	mov	r3, r2
 8002786:	71bb      	strb	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8002788:	2300      	movs	r3, #0
 800278a:	60fb      	str	r3, [r7, #12]
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  static const BSP_BUTTON_GPIO_Init ButtonGpioInit[BUTTONn] = {BUTTON_USER_GPIO_Init};

  ButtonGpioInit[Button]();
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	4a1f      	ldr	r2, [pc, #124]	; (800280c <BSP_PB_Init+0x94>)
 8002790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002794:	4798      	blx	r3

  if (ButtonMode == BUTTON_MODE_EXTI)
 8002796:	79bb      	ldrb	r3, [r7, #6]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d131      	bne.n	8002800 <BSP_PB_Init+0x88>
  {
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 800279c:	79fb      	ldrb	r3, [r7, #7]
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	4a1b      	ldr	r2, [pc, #108]	; (8002810 <BSP_PB_Init+0x98>)
 80027a2:	1898      	adds	r0, r3, r2
 80027a4:	79fb      	ldrb	r3, [r7, #7]
 80027a6:	4a1b      	ldr	r2, [pc, #108]	; (8002814 <BSP_PB_Init+0x9c>)
 80027a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ac:	4619      	mov	r1, r3
 80027ae:	f000 fb36 	bl	8002e1e <HAL_EXTI_GetHandle>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <BSP_PB_Init+0x48>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80027b8:	f06f 0303 	mvn.w	r3, #3
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	e01f      	b.n	8002800 <BSP_PB_Init+0x88>
    }
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	00db      	lsls	r3, r3, #3
 80027c4:	4a12      	ldr	r2, [pc, #72]	; (8002810 <BSP_PB_Init+0x98>)
 80027c6:	1898      	adds	r0, r3, r2
 80027c8:	79fb      	ldrb	r3, [r7, #7]
 80027ca:	4a13      	ldr	r2, [pc, #76]	; (8002818 <BSP_PB_Init+0xa0>)
 80027cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027d0:	461a      	mov	r2, r3
 80027d2:	2100      	movs	r1, #0
 80027d4:	f000 fb09 	bl	8002dea <HAL_EXTI_RegisterCallback>
 80027d8:	4603      	mov	r3, r0
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d003      	beq.n	80027e6 <BSP_PB_Init+0x6e>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80027de:	f06f 0303 	mvn.w	r3, #3
 80027e2:	60fb      	str	r3, [r7, #12]
 80027e4:	e00c      	b.n	8002800 <BSP_PB_Init+0x88>
    }
	else
    {
      /* Enable and set Button EXTI Interrupt to the lowest priority */
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80027e6:	2028      	movs	r0, #40	; 0x28
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	4a0c      	ldr	r2, [pc, #48]	; (800281c <BSP_PB_Init+0xa4>)
 80027ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027f0:	2200      	movs	r2, #0
 80027f2:	4619      	mov	r1, r3
 80027f4:	f000 faa7 	bl	8002d46 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80027f8:	2328      	movs	r3, #40	; 0x28
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 fabf 	bl	8002d7e <HAL_NVIC_EnableIRQ>
    }
  }

  return ret;
 8002800:	68fb      	ldr	r3, [r7, #12]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	08007d98 	.word	0x08007d98
 8002810:	20000060 	.word	0x20000060
 8002814:	08007d9c 	.word	0x08007d9c
 8002818:	08007da0 	.word	0x08007da0
 800281c:	08007da4 	.word	0x08007da4

08002820 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	4603      	mov	r3, r0
 8002828:	71fb      	strb	r3, [r7, #7]
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 800282a:	79fb      	ldrb	r3, [r7, #7]
 800282c:	4a09      	ldr	r2, [pc, #36]	; (8002854 <BSP_PB_GetState+0x34>)
 800282e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002832:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002836:	4611      	mov	r1, r2
 8002838:	4618      	mov	r0, r3
 800283a:	f000 fd69 	bl	8003310 <HAL_GPIO_ReadPin>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	bf0c      	ite	eq
 8002844:	2301      	moveq	r3, #1
 8002846:	2300      	movne	r3, #0
 8002848:	b2db      	uxtb	r3, r3
}
 800284a:	4618      	mov	r0, r3
 800284c:	3708      	adds	r7, #8
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	2000005c 	.word	0x2000005c

08002858 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800285c:	2000      	movs	r0, #0
 800285e:	f002 fef5 	bl	800564c <BSP_PB_Callback>
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <BUTTON_USER_GPIO_Init>:

/**
  * @brief
  * @retval None
  */
static void BUTTON_USER_GPIO_Init(void) {
 8002868:	b580      	push	{r7, lr}
 800286a:	b088      	sub	sp, #32
 800286c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	4b19      	ldr	r3, [pc, #100]	; (80028d8 <BUTTON_USER_GPIO_Init+0x70>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	4a18      	ldr	r2, [pc, #96]	; (80028d8 <BUTTON_USER_GPIO_Init+0x70>)
 8002878:	f043 0304 	orr.w	r3, r3, #4
 800287c:	6313      	str	r3, [r2, #48]	; 0x30
 800287e:	4b16      	ldr	r3, [pc, #88]	; (80028d8 <BUTTON_USER_GPIO_Init+0x70>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	68bb      	ldr	r3, [r7, #8]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288a:	f107 030c 	add.w	r3, r7, #12
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	605a      	str	r2, [r3, #4]
 8002894:	609a      	str	r2, [r3, #8]
 8002896:	60da      	str	r2, [r3, #12]
 8002898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	607b      	str	r3, [r7, #4]
 800289e:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <BUTTON_USER_GPIO_Init+0x70>)
 80028a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a2:	4a0d      	ldr	r2, [pc, #52]	; (80028d8 <BUTTON_USER_GPIO_Init+0x70>)
 80028a4:	f043 0304 	orr.w	r3, r3, #4
 80028a8:	6313      	str	r3, [r2, #48]	; 0x30
 80028aa:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <BUTTON_USER_GPIO_Init+0x70>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	f003 0304 	and.w	r3, r3, #4
 80028b2:	607b      	str	r3, [r7, #4]
 80028b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PTPIN */
  GPIO_InitStruct.Pin = BUS_BSP_BUTTON_GPIO_PIN;
 80028b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028bc:	4b07      	ldr	r3, [pc, #28]	; (80028dc <BUTTON_USER_GPIO_Init+0x74>)
 80028be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUS_BSP_BUTTON_GPIO_PORT, &GPIO_InitStruct);
 80028c4:	f107 030c 	add.w	r3, r7, #12
 80028c8:	4619      	mov	r1, r3
 80028ca:	4805      	ldr	r0, [pc, #20]	; (80028e0 <BUTTON_USER_GPIO_Init+0x78>)
 80028cc:	f000 fabc 	bl	8002e48 <HAL_GPIO_Init>

}
 80028d0:	bf00      	nop
 80028d2:	3720      	adds	r7, #32
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40023800 	.word	0x40023800
 80028dc:	10110000 	.word	0x10110000
 80028e0:	40020800 	.word	0x40020800

080028e4 <BSP_COM_Init>:
 * @param  UART_Init: Pointer to a UART_HandleTypeDef structure that contains the
 *                    configuration information for the specified USART peripheral.
 * @retval BSP error code
 */
int32_t BSP_COM_Init(COM_TypeDef COM)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	4603      	mov	r3, r0
 80028ec:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 80028f2:	79fb      	ldrb	r3, [r7, #7]
 80028f4:	2b01      	cmp	r3, #1
 80028f6:	d903      	bls.n	8002900 <BSP_COM_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80028f8:	f06f 0301 	mvn.w	r3, #1
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	e01c      	b.n	800293a <BSP_COM_Init+0x56>
  }
  else
  {
     hcom_uart[COM].Instance = COM_USART[COM];
 8002900:	79fa      	ldrb	r2, [r7, #7]
 8002902:	79fb      	ldrb	r3, [r7, #7]
 8002904:	490f      	ldr	r1, [pc, #60]	; (8002944 <BSP_COM_Init+0x60>)
 8002906:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800290a:	490f      	ldr	r1, [pc, #60]	; (8002948 <BSP_COM_Init+0x64>)
 800290c:	019b      	lsls	r3, r3, #6
 800290e:	440b      	add	r3, r1
 8002910:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0U)
    /* Init the UART Msp */
    USART2_MspInit(&hcom_uart[COM]);
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	019b      	lsls	r3, r3, #6
 8002916:	4a0c      	ldr	r2, [pc, #48]	; (8002948 <BSP_COM_Init+0x64>)
 8002918:	4413      	add	r3, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f000 f85c 	bl	80029d8 <USART2_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if (MX_USART2_UART_Init(&hcom_uart[COM]))
 8002920:	79fb      	ldrb	r3, [r7, #7]
 8002922:	019b      	lsls	r3, r3, #6
 8002924:	4a08      	ldr	r2, [pc, #32]	; (8002948 <BSP_COM_Init+0x64>)
 8002926:	4413      	add	r3, r2
 8002928:	4618      	mov	r0, r3
 800292a:	f000 f80f 	bl	800294c <MX_USART2_UART_Init>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <BSP_COM_Init+0x56>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002934:	f06f 0303 	mvn.w	r3, #3
 8002938:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800293a:	68fb      	ldr	r3, [r7, #12]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	20000068 	.word	0x20000068
 8002948:	20000280 	.word	0x20000280

0800294c <MX_USART2_UART_Init>:
 */

/* USART2 init function */

__weak HAL_StatusTypeDef MX_USART2_UART_Init(UART_HandleTypeDef* huart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	73fb      	strb	r3, [r7, #15]
  huart->Instance = USART2;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	4a12      	ldr	r2, [pc, #72]	; (80029a4 <MX_USART2_UART_Init+0x58>)
 800295c:	601a      	str	r2, [r3, #0]
  huart->Init.BaudRate = 115200;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002964:	605a      	str	r2, [r3, #4]
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	609a      	str	r2, [r3, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2200      	movs	r2, #0
 8002970:	60da      	str	r2, [r3, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	611a      	str	r2, [r3, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	220c      	movs	r2, #12
 800297c:	615a      	str	r2, [r3, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	619a      	str	r2, [r3, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(huart) != HAL_OK)
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f002 f966 	bl	8004c5c <HAL_UART_Init>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d001      	beq.n	800299a <MX_USART2_UART_Init+0x4e>
  {
    ret = HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800299a:	7bfb      	ldrb	r3, [r7, #15]
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40004400 	.word	0x40004400

080029a8 <__io_putchar>:
#ifdef __GNUC__
 int __io_putchar (int ch)
#else
 int fputc (int ch, FILE *f)
#endif /* __GNUC__ */
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  (void)HAL_UART_Transmit(&hcom_uart[COM_ActiveLogPort], (uint8_t *)&ch, 1, COM_POLL_TIMEOUT);
 80029b0:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <__io_putchar+0x28>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	019b      	lsls	r3, r3, #6
 80029b6:	4a07      	ldr	r2, [pc, #28]	; (80029d4 <__io_putchar+0x2c>)
 80029b8:	1898      	adds	r0, r3, r2
 80029ba:	1d39      	adds	r1, r7, #4
 80029bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029c0:	2201      	movs	r2, #1
 80029c2:	f002 f9a2 	bl	8004d0a <HAL_UART_Transmit>
  return ch;
 80029c6:	687b      	ldr	r3, [r7, #4]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}
 80029d0:	20000124 	.word	0x20000124
 80029d4:	20000280 	.word	0x20000280

080029d8 <USART2_MspInit>:
 * @param  huart USART2 handle
 * @retval None
 */

static void USART2_MspInit(UART_HandleTypeDef* uartHandle)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08a      	sub	sp, #40	; 0x28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART2_CLK_ENABLE();
 80029e0:	2300      	movs	r3, #0
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	4b1e      	ldr	r3, [pc, #120]	; (8002a60 <USART2_MspInit+0x88>)
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	4a1d      	ldr	r2, [pc, #116]	; (8002a60 <USART2_MspInit+0x88>)
 80029ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ee:	6413      	str	r3, [r2, #64]	; 0x40
 80029f0:	4b1b      	ldr	r3, [pc, #108]	; (8002a60 <USART2_MspInit+0x88>)
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f8:	613b      	str	r3, [r7, #16]
 80029fa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	4b17      	ldr	r3, [pc, #92]	; (8002a60 <USART2_MspInit+0x88>)
 8002a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a04:	4a16      	ldr	r2, [pc, #88]	; (8002a60 <USART2_MspInit+0x88>)
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a0c:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <USART2_MspInit+0x88>)
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = BUS_USART2_TX_GPIO_PIN;
 8002a18:	2304      	movs	r3, #4
 8002a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a24:	2303      	movs	r3, #3
 8002a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_TX_GPIO_AF;
 8002a28:	2307      	movs	r3, #7
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_TX_GPIO_PORT, &GPIO_InitStruct);
 8002a2c:	f107 0314 	add.w	r3, r7, #20
 8002a30:	4619      	mov	r1, r3
 8002a32:	480c      	ldr	r0, [pc, #48]	; (8002a64 <USART2_MspInit+0x8c>)
 8002a34:	f000 fa08 	bl	8002e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_USART2_RX_GPIO_PIN;
 8002a38:	2308      	movs	r3, #8
 8002a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a44:	2303      	movs	r3, #3
 8002a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_USART2_RX_GPIO_AF;
 8002a48:	2307      	movs	r3, #7
 8002a4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_USART2_RX_GPIO_PORT, &GPIO_InitStruct);
 8002a4c:	f107 0314 	add.w	r3, r7, #20
 8002a50:	4619      	mov	r1, r3
 8002a52:	4804      	ldr	r0, [pc, #16]	; (8002a64 <USART2_MspInit+0x8c>)
 8002a54:	f000 f9f8 	bl	8002e48 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
}
 8002a58:	bf00      	nop
 8002a5a:	3728      	adds	r7, #40	; 0x28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}
 8002a60:	40023800 	.word	0x40023800
 8002a64:	40020000 	.word	0x40020000

08002a68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a6c:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <HAL_Init+0x40>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a0d      	ldr	r2, [pc, #52]	; (8002aa8 <HAL_Init+0x40>)
 8002a72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_Init+0x40>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a0a      	ldr	r2, [pc, #40]	; (8002aa8 <HAL_Init+0x40>)
 8002a7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a84:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <HAL_Init+0x40>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a07      	ldr	r2, [pc, #28]	; (8002aa8 <HAL_Init+0x40>)
 8002a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a90:	2003      	movs	r0, #3
 8002a92:	f000 f94d 	bl	8002d30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a96:	2000      	movs	r0, #0
 8002a98:	f000 f808 	bl	8002aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a9c:	f003 fbf6 	bl	800628c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	40023c00 	.word	0x40023c00

08002aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ab4:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <HAL_InitTick+0x54>)
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4b12      	ldr	r3, [pc, #72]	; (8002b04 <HAL_InitTick+0x58>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	4619      	mov	r1, r3
 8002abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 f965 	bl	8002d9a <HAL_SYSTICK_Config>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e00e      	b.n	8002af8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b0f      	cmp	r3, #15
 8002ade:	d80a      	bhi.n	8002af6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ae8:	f000 f92d 	bl	8002d46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002aec:	4a06      	ldr	r2, [pc, #24]	; (8002b08 <HAL_InitTick+0x5c>)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
 8002af4:	e000      	b.n	8002af8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3708      	adds	r7, #8
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	200000a0 	.word	0x200000a0
 8002b04:	20000070 	.word	0x20000070
 8002b08:	2000006c 	.word	0x2000006c

08002b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <HAL_IncTick+0x20>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	461a      	mov	r2, r3
 8002b16:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <HAL_IncTick+0x24>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	4a04      	ldr	r2, [pc, #16]	; (8002b30 <HAL_IncTick+0x24>)
 8002b1e:	6013      	str	r3, [r2, #0]
}
 8002b20:	bf00      	nop
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	20000070 	.word	0x20000070
 8002b30:	200002c0 	.word	0x200002c0

08002b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  return uwTick;
 8002b38:	4b03      	ldr	r3, [pc, #12]	; (8002b48 <HAL_GetTick+0x14>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	200002c0 	.word	0x200002c0

08002b4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b54:	f7ff ffee 	bl	8002b34 <HAL_GetTick>
 8002b58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b64:	d005      	beq.n	8002b72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b66:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <HAL_Delay+0x40>)
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	4413      	add	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b72:	bf00      	nop
 8002b74:	f7ff ffde 	bl	8002b34 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d8f7      	bhi.n	8002b74 <HAL_Delay+0x28>
  {
  }
}
 8002b84:	bf00      	nop
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	20000070 	.word	0x20000070

08002b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	; (8002bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002bac:	4013      	ands	r3, r2
 8002bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bc2:	4a04      	ldr	r2, [pc, #16]	; (8002bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	60d3      	str	r3, [r2, #12]
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bdc:	4b04      	ldr	r3, [pc, #16]	; (8002bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	0a1b      	lsrs	r3, r3, #8
 8002be2:	f003 0307 	and.w	r3, r3, #7
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	db0b      	blt.n	8002c1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	f003 021f 	and.w	r2, r3, #31
 8002c0c:	4907      	ldr	r1, [pc, #28]	; (8002c2c <__NVIC_EnableIRQ+0x38>)
 8002c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	2001      	movs	r0, #1
 8002c16:	fa00 f202 	lsl.w	r2, r0, r2
 8002c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	e000e100 	.word	0xe000e100

08002c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	6039      	str	r1, [r7, #0]
 8002c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	db0a      	blt.n	8002c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	490c      	ldr	r1, [pc, #48]	; (8002c7c <__NVIC_SetPriority+0x4c>)
 8002c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4e:	0112      	lsls	r2, r2, #4
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	440b      	add	r3, r1
 8002c54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c58:	e00a      	b.n	8002c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	4908      	ldr	r1, [pc, #32]	; (8002c80 <__NVIC_SetPriority+0x50>)
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	3b04      	subs	r3, #4
 8002c68:	0112      	lsls	r2, r2, #4
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	761a      	strb	r2, [r3, #24]
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	e000e100 	.word	0xe000e100
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b089      	sub	sp, #36	; 0x24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f1c3 0307 	rsb	r3, r3, #7
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	bf28      	it	cs
 8002ca2:	2304      	movcs	r3, #4
 8002ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3304      	adds	r3, #4
 8002caa:	2b06      	cmp	r3, #6
 8002cac:	d902      	bls.n	8002cb4 <NVIC_EncodePriority+0x30>
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	3b03      	subs	r3, #3
 8002cb2:	e000      	b.n	8002cb6 <NVIC_EncodePriority+0x32>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	43da      	mvns	r2, r3
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd6:	43d9      	mvns	r1, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cdc:	4313      	orrs	r3, r2
         );
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3724      	adds	r7, #36	; 0x24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
	...

08002cec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3b01      	subs	r3, #1
 8002cf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cfc:	d301      	bcc.n	8002d02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e00f      	b.n	8002d22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d02:	4a0a      	ldr	r2, [pc, #40]	; (8002d2c <SysTick_Config+0x40>)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3b01      	subs	r3, #1
 8002d08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d0a:	210f      	movs	r1, #15
 8002d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d10:	f7ff ff8e 	bl	8002c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d14:	4b05      	ldr	r3, [pc, #20]	; (8002d2c <SysTick_Config+0x40>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d1a:	4b04      	ldr	r3, [pc, #16]	; (8002d2c <SysTick_Config+0x40>)
 8002d1c:	2207      	movs	r2, #7
 8002d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3708      	adds	r7, #8
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	e000e010 	.word	0xe000e010

08002d30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f7ff ff29 	bl	8002b90 <__NVIC_SetPriorityGrouping>
}
 8002d3e:	bf00      	nop
 8002d40:	3708      	adds	r7, #8
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b086      	sub	sp, #24
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	60b9      	str	r1, [r7, #8]
 8002d50:	607a      	str	r2, [r7, #4]
 8002d52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d58:	f7ff ff3e 	bl	8002bd8 <__NVIC_GetPriorityGrouping>
 8002d5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	68b9      	ldr	r1, [r7, #8]
 8002d62:	6978      	ldr	r0, [r7, #20]
 8002d64:	f7ff ff8e 	bl	8002c84 <NVIC_EncodePriority>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d6e:	4611      	mov	r1, r2
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff ff5d 	bl	8002c30 <__NVIC_SetPriority>
}
 8002d76:	bf00      	nop
 8002d78:	3718      	adds	r7, #24
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b082      	sub	sp, #8
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	4603      	mov	r3, r0
 8002d86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff ff31 	bl	8002bf4 <__NVIC_EnableIRQ>
}
 8002d92:	bf00      	nop
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}

08002d9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7ff ffa2 	bl	8002cec <SysTick_Config>
 8002da8:	4603      	mov	r3, r0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3708      	adds	r7, #8
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b082      	sub	sp, #8
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d101      	bne.n	8002dc4 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	e00e      	b.n	8002de2 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	795b      	ldrb	r3, [r3, #5]
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d105      	bne.n	8002dda <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f003 fa81 	bl	80062dc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8002dea:	b480      	push	{r7}
 8002dec:	b087      	sub	sp, #28
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	60f8      	str	r0, [r7, #12]
 8002df2:	460b      	mov	r3, r1
 8002df4:	607a      	str	r2, [r7, #4]
 8002df6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	75fb      	strb	r3, [r7, #23]

  switch (CallbackID)
 8002dfc:	7afb      	ldrb	r3, [r7, #11]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d103      	bne.n	8002e0a <HAL_EXTI_RegisterCallback+0x20>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	605a      	str	r2, [r3, #4]
      break;
 8002e08:	e002      	b.n	8002e10 <HAL_EXTI_RegisterCallback+0x26>

    default:
      status = HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	75fb      	strb	r3, [r7, #23]
      break;
 8002e0e:	bf00      	nop
  }

  return status;
 8002e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	371c      	adds	r7, #28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
 8002e26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e003      	b.n	8002e3a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	683a      	ldr	r2, [r7, #0]
 8002e36:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8002e38:	2300      	movs	r3, #0
  }
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
	...

08002e48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b089      	sub	sp, #36	; 0x24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61fb      	str	r3, [r7, #28]
 8002e62:	e159      	b.n	8003118 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e64:	2201      	movs	r2, #1
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	697a      	ldr	r2, [r7, #20]
 8002e74:	4013      	ands	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e78:	693a      	ldr	r2, [r7, #16]
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	f040 8148 	bne.w	8003112 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d00b      	beq.n	8002ea2 <HAL_GPIO_Init+0x5a>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d007      	beq.n	8002ea2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e96:	2b11      	cmp	r3, #17
 8002e98:	d003      	beq.n	8002ea2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b12      	cmp	r3, #18
 8002ea0:	d130      	bne.n	8002f04 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	2203      	movs	r2, #3
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ed8:	2201      	movs	r2, #1
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43db      	mvns	r3, r3
 8002ee2:	69ba      	ldr	r2, [r7, #24]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	091b      	lsrs	r3, r3, #4
 8002eee:	f003 0201 	and.w	r2, r3, #1
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	2203      	movs	r2, #3
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d003      	beq.n	8002f44 <HAL_GPIO_Init+0xfc>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b12      	cmp	r3, #18
 8002f42:	d123      	bne.n	8002f8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	08da      	lsrs	r2, r3, #3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3208      	adds	r2, #8
 8002f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	f003 0307 	and.w	r3, r3, #7
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	220f      	movs	r2, #15
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	43db      	mvns	r3, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	4013      	ands	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	691a      	ldr	r2, [r3, #16]
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	fa02 f303 	lsl.w	r3, r2, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	08da      	lsrs	r2, r3, #3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3208      	adds	r2, #8
 8002f86:	69b9      	ldr	r1, [r7, #24]
 8002f88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	2203      	movs	r2, #3
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 0203 	and.w	r2, r3, #3
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 80a2 	beq.w	8003112 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fce:	2300      	movs	r3, #0
 8002fd0:	60fb      	str	r3, [r7, #12]
 8002fd2:	4b56      	ldr	r3, [pc, #344]	; (800312c <HAL_GPIO_Init+0x2e4>)
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	4a55      	ldr	r2, [pc, #340]	; (800312c <HAL_GPIO_Init+0x2e4>)
 8002fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8002fde:	4b53      	ldr	r3, [pc, #332]	; (800312c <HAL_GPIO_Init+0x2e4>)
 8002fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fe6:	60fb      	str	r3, [r7, #12]
 8002fe8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fea:	4a51      	ldr	r2, [pc, #324]	; (8003130 <HAL_GPIO_Init+0x2e8>)
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	089b      	lsrs	r3, r3, #2
 8002ff0:	3302      	adds	r3, #2
 8002ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	220f      	movs	r2, #15
 8003002:	fa02 f303 	lsl.w	r3, r2, r3
 8003006:	43db      	mvns	r3, r3
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	4013      	ands	r3, r2
 800300c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a48      	ldr	r2, [pc, #288]	; (8003134 <HAL_GPIO_Init+0x2ec>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d019      	beq.n	800304a <HAL_GPIO_Init+0x202>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a47      	ldr	r2, [pc, #284]	; (8003138 <HAL_GPIO_Init+0x2f0>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d013      	beq.n	8003046 <HAL_GPIO_Init+0x1fe>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4a46      	ldr	r2, [pc, #280]	; (800313c <HAL_GPIO_Init+0x2f4>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d00d      	beq.n	8003042 <HAL_GPIO_Init+0x1fa>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	4a45      	ldr	r2, [pc, #276]	; (8003140 <HAL_GPIO_Init+0x2f8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d007      	beq.n	800303e <HAL_GPIO_Init+0x1f6>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	4a44      	ldr	r2, [pc, #272]	; (8003144 <HAL_GPIO_Init+0x2fc>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d101      	bne.n	800303a <HAL_GPIO_Init+0x1f2>
 8003036:	2304      	movs	r3, #4
 8003038:	e008      	b.n	800304c <HAL_GPIO_Init+0x204>
 800303a:	2307      	movs	r3, #7
 800303c:	e006      	b.n	800304c <HAL_GPIO_Init+0x204>
 800303e:	2303      	movs	r3, #3
 8003040:	e004      	b.n	800304c <HAL_GPIO_Init+0x204>
 8003042:	2302      	movs	r3, #2
 8003044:	e002      	b.n	800304c <HAL_GPIO_Init+0x204>
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <HAL_GPIO_Init+0x204>
 800304a:	2300      	movs	r3, #0
 800304c:	69fa      	ldr	r2, [r7, #28]
 800304e:	f002 0203 	and.w	r2, r2, #3
 8003052:	0092      	lsls	r2, r2, #2
 8003054:	4093      	lsls	r3, r2
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800305c:	4934      	ldr	r1, [pc, #208]	; (8003130 <HAL_GPIO_Init+0x2e8>)
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	089b      	lsrs	r3, r3, #2
 8003062:	3302      	adds	r3, #2
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800306a:	4b37      	ldr	r3, [pc, #220]	; (8003148 <HAL_GPIO_Init+0x300>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	43db      	mvns	r3, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4013      	ands	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800308e:	4a2e      	ldr	r2, [pc, #184]	; (8003148 <HAL_GPIO_Init+0x300>)
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003094:	4b2c      	ldr	r3, [pc, #176]	; (8003148 <HAL_GPIO_Init+0x300>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030b8:	4a23      	ldr	r2, [pc, #140]	; (8003148 <HAL_GPIO_Init+0x300>)
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030be:	4b22      	ldr	r3, [pc, #136]	; (8003148 <HAL_GPIO_Init+0x300>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	43db      	mvns	r3, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4013      	ands	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030e2:	4a19      	ldr	r2, [pc, #100]	; (8003148 <HAL_GPIO_Init+0x300>)
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030e8:	4b17      	ldr	r3, [pc, #92]	; (8003148 <HAL_GPIO_Init+0x300>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800310c:	4a0e      	ldr	r2, [pc, #56]	; (8003148 <HAL_GPIO_Init+0x300>)
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	3301      	adds	r3, #1
 8003116:	61fb      	str	r3, [r7, #28]
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	2b0f      	cmp	r3, #15
 800311c:	f67f aea2 	bls.w	8002e64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003120:	bf00      	nop
 8003122:	3724      	adds	r7, #36	; 0x24
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	40023800 	.word	0x40023800
 8003130:	40013800 	.word	0x40013800
 8003134:	40020000 	.word	0x40020000
 8003138:	40020400 	.word	0x40020400
 800313c:	40020800 	.word	0x40020800
 8003140:	40020c00 	.word	0x40020c00
 8003144:	40021000 	.word	0x40021000
 8003148:	40013c00 	.word	0x40013c00

0800314c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003156:	2300      	movs	r3, #0
 8003158:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800315a:	2300      	movs	r3, #0
 800315c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800315e:	2300      	movs	r3, #0
 8003160:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	e0bb      	b.n	80032e0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003168:	2201      	movs	r2, #1
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	4013      	ands	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	429a      	cmp	r2, r3
 8003180:	f040 80ab 	bne.w	80032da <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003184:	4a5b      	ldr	r2, [pc, #364]	; (80032f4 <HAL_GPIO_DeInit+0x1a8>)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	089b      	lsrs	r3, r3, #2
 800318a:	3302      	adds	r3, #2
 800318c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003190:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f003 0303 	and.w	r3, r3, #3
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	220f      	movs	r2, #15
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	4013      	ands	r3, r2
 80031a4:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a53      	ldr	r2, [pc, #332]	; (80032f8 <HAL_GPIO_DeInit+0x1ac>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d019      	beq.n	80031e2 <HAL_GPIO_DeInit+0x96>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a52      	ldr	r2, [pc, #328]	; (80032fc <HAL_GPIO_DeInit+0x1b0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d013      	beq.n	80031de <HAL_GPIO_DeInit+0x92>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a51      	ldr	r2, [pc, #324]	; (8003300 <HAL_GPIO_DeInit+0x1b4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d00d      	beq.n	80031da <HAL_GPIO_DeInit+0x8e>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a50      	ldr	r2, [pc, #320]	; (8003304 <HAL_GPIO_DeInit+0x1b8>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d007      	beq.n	80031d6 <HAL_GPIO_DeInit+0x8a>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a4f      	ldr	r2, [pc, #316]	; (8003308 <HAL_GPIO_DeInit+0x1bc>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d101      	bne.n	80031d2 <HAL_GPIO_DeInit+0x86>
 80031ce:	2304      	movs	r3, #4
 80031d0:	e008      	b.n	80031e4 <HAL_GPIO_DeInit+0x98>
 80031d2:	2307      	movs	r3, #7
 80031d4:	e006      	b.n	80031e4 <HAL_GPIO_DeInit+0x98>
 80031d6:	2303      	movs	r3, #3
 80031d8:	e004      	b.n	80031e4 <HAL_GPIO_DeInit+0x98>
 80031da:	2302      	movs	r3, #2
 80031dc:	e002      	b.n	80031e4 <HAL_GPIO_DeInit+0x98>
 80031de:	2301      	movs	r3, #1
 80031e0:	e000      	b.n	80031e4 <HAL_GPIO_DeInit+0x98>
 80031e2:	2300      	movs	r3, #0
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	f002 0203 	and.w	r2, r2, #3
 80031ea:	0092      	lsls	r2, r2, #2
 80031ec:	4093      	lsls	r3, r2
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d132      	bne.n	800325a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80031f4:	4b45      	ldr	r3, [pc, #276]	; (800330c <HAL_GPIO_DeInit+0x1c0>)
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	43db      	mvns	r3, r3
 80031fc:	4943      	ldr	r1, [pc, #268]	; (800330c <HAL_GPIO_DeInit+0x1c0>)
 80031fe:	4013      	ands	r3, r2
 8003200:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003202:	4b42      	ldr	r3, [pc, #264]	; (800330c <HAL_GPIO_DeInit+0x1c0>)
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	43db      	mvns	r3, r3
 800320a:	4940      	ldr	r1, [pc, #256]	; (800330c <HAL_GPIO_DeInit+0x1c0>)
 800320c:	4013      	ands	r3, r2
 800320e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003210:	4b3e      	ldr	r3, [pc, #248]	; (800330c <HAL_GPIO_DeInit+0x1c0>)
 8003212:	689a      	ldr	r2, [r3, #8]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	43db      	mvns	r3, r3
 8003218:	493c      	ldr	r1, [pc, #240]	; (800330c <HAL_GPIO_DeInit+0x1c0>)
 800321a:	4013      	ands	r3, r2
 800321c:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800321e:	4b3b      	ldr	r3, [pc, #236]	; (800330c <HAL_GPIO_DeInit+0x1c0>)
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	43db      	mvns	r3, r3
 8003226:	4939      	ldr	r1, [pc, #228]	; (800330c <HAL_GPIO_DeInit+0x1c0>)
 8003228:	4013      	ands	r3, r2
 800322a:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	220f      	movs	r2, #15
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800323c:	4a2d      	ldr	r2, [pc, #180]	; (80032f4 <HAL_GPIO_DeInit+0x1a8>)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	089b      	lsrs	r3, r3, #2
 8003242:	3302      	adds	r3, #2
 8003244:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	43da      	mvns	r2, r3
 800324c:	4829      	ldr	r0, [pc, #164]	; (80032f4 <HAL_GPIO_DeInit+0x1a8>)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	089b      	lsrs	r3, r3, #2
 8003252:	400a      	ands	r2, r1
 8003254:	3302      	adds	r3, #2
 8003256:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	2103      	movs	r1, #3
 8003264:	fa01 f303 	lsl.w	r3, r1, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	401a      	ands	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	08da      	lsrs	r2, r3, #3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3208      	adds	r2, #8
 8003278:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	220f      	movs	r2, #15
 8003286:	fa02 f303 	lsl.w	r3, r2, r3
 800328a:	43db      	mvns	r3, r3
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	08d2      	lsrs	r2, r2, #3
 8003290:	4019      	ands	r1, r3
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	3208      	adds	r2, #8
 8003296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	2103      	movs	r1, #3
 80032a4:	fa01 f303 	lsl.w	r3, r1, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	401a      	ands	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	2101      	movs	r1, #1
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	fa01 f303 	lsl.w	r3, r1, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	401a      	ands	r2, r3
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	2103      	movs	r1, #3
 80032ce:	fa01 f303 	lsl.w	r3, r1, r3
 80032d2:	43db      	mvns	r3, r3
 80032d4:	401a      	ands	r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	3301      	adds	r3, #1
 80032de:	617b      	str	r3, [r7, #20]
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2b0f      	cmp	r3, #15
 80032e4:	f67f af40 	bls.w	8003168 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80032e8:	bf00      	nop
 80032ea:	371c      	adds	r7, #28
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	40013800 	.word	0x40013800
 80032f8:	40020000 	.word	0x40020000
 80032fc:	40020400 	.word	0x40020400
 8003300:	40020800 	.word	0x40020800
 8003304:	40020c00 	.word	0x40020c00
 8003308:	40021000 	.word	0x40021000
 800330c:	40013c00 	.word	0x40013c00

08003310 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	460b      	mov	r3, r1
 800331a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	691a      	ldr	r2, [r3, #16]
 8003320:	887b      	ldrh	r3, [r7, #2]
 8003322:	4013      	ands	r3, r2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d002      	beq.n	800332e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
 800332c:	e001      	b.n	8003332 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800332e:	2300      	movs	r3, #0
 8003330:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003332:	7bfb      	ldrb	r3, [r7, #15]
}
 8003334:	4618      	mov	r0, r3
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	807b      	strh	r3, [r7, #2]
 800334c:	4613      	mov	r3, r2
 800334e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003350:	787b      	ldrb	r3, [r7, #1]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003356:	887a      	ldrh	r2, [r7, #2]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800335c:	e003      	b.n	8003366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800335e:	887b      	ldrh	r3, [r7, #2]
 8003360:	041a      	lsls	r2, r3, #16
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	619a      	str	r2, [r3, #24]
}
 8003366:	bf00      	nop
 8003368:	370c      	adds	r7, #12
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
	...

08003374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e11f      	b.n	80035c6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800338c:	b2db      	uxtb	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d106      	bne.n	80033a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f951 	bl	8003642 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2224      	movs	r2, #36	; 0x24
 80033a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0201 	bic.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033d8:	f001 fc18 	bl	8004c0c <HAL_RCC_GetPCLK1Freq>
 80033dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	4a7b      	ldr	r2, [pc, #492]	; (80035d0 <HAL_I2C_Init+0x25c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d807      	bhi.n	80033f8 <HAL_I2C_Init+0x84>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	4a7a      	ldr	r2, [pc, #488]	; (80035d4 <HAL_I2C_Init+0x260>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	bf94      	ite	ls
 80033f0:	2301      	movls	r3, #1
 80033f2:	2300      	movhi	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	e006      	b.n	8003406 <HAL_I2C_Init+0x92>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4a77      	ldr	r2, [pc, #476]	; (80035d8 <HAL_I2C_Init+0x264>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	bf94      	ite	ls
 8003400:	2301      	movls	r3, #1
 8003402:	2300      	movhi	r3, #0
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d001      	beq.n	800340e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e0db      	b.n	80035c6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	4a72      	ldr	r2, [pc, #456]	; (80035dc <HAL_I2C_Init+0x268>)
 8003412:	fba2 2303 	umull	r2, r3, r2, r3
 8003416:	0c9b      	lsrs	r3, r3, #18
 8003418:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	430a      	orrs	r2, r1
 800342c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6a1b      	ldr	r3, [r3, #32]
 8003434:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	4a64      	ldr	r2, [pc, #400]	; (80035d0 <HAL_I2C_Init+0x25c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d802      	bhi.n	8003448 <HAL_I2C_Init+0xd4>
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	3301      	adds	r3, #1
 8003446:	e009      	b.n	800345c <HAL_I2C_Init+0xe8>
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800344e:	fb02 f303 	mul.w	r3, r2, r3
 8003452:	4a63      	ldr	r2, [pc, #396]	; (80035e0 <HAL_I2C_Init+0x26c>)
 8003454:	fba2 2303 	umull	r2, r3, r2, r3
 8003458:	099b      	lsrs	r3, r3, #6
 800345a:	3301      	adds	r3, #1
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	6812      	ldr	r2, [r2, #0]
 8003460:	430b      	orrs	r3, r1
 8003462:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	69db      	ldr	r3, [r3, #28]
 800346a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800346e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	4956      	ldr	r1, [pc, #344]	; (80035d0 <HAL_I2C_Init+0x25c>)
 8003478:	428b      	cmp	r3, r1
 800347a:	d80d      	bhi.n	8003498 <HAL_I2C_Init+0x124>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	1e59      	subs	r1, r3, #1
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	005b      	lsls	r3, r3, #1
 8003486:	fbb1 f3f3 	udiv	r3, r1, r3
 800348a:	3301      	adds	r3, #1
 800348c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003490:	2b04      	cmp	r3, #4
 8003492:	bf38      	it	cc
 8003494:	2304      	movcc	r3, #4
 8003496:	e04f      	b.n	8003538 <HAL_I2C_Init+0x1c4>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d111      	bne.n	80034c4 <HAL_I2C_Init+0x150>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1e58      	subs	r0, r3, #1
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6859      	ldr	r1, [r3, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	440b      	add	r3, r1
 80034ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80034b2:	3301      	adds	r3, #1
 80034b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf0c      	ite	eq
 80034bc:	2301      	moveq	r3, #1
 80034be:	2300      	movne	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	e012      	b.n	80034ea <HAL_I2C_Init+0x176>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	1e58      	subs	r0, r3, #1
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6859      	ldr	r1, [r3, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	0099      	lsls	r1, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034da:	3301      	adds	r3, #1
 80034dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	bf0c      	ite	eq
 80034e4:	2301      	moveq	r3, #1
 80034e6:	2300      	movne	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_I2C_Init+0x17e>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e022      	b.n	8003538 <HAL_I2C_Init+0x1c4>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10e      	bne.n	8003518 <HAL_I2C_Init+0x1a4>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1e58      	subs	r0, r3, #1
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6859      	ldr	r1, [r3, #4]
 8003502:	460b      	mov	r3, r1
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	440b      	add	r3, r1
 8003508:	fbb0 f3f3 	udiv	r3, r0, r3
 800350c:	3301      	adds	r3, #1
 800350e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003516:	e00f      	b.n	8003538 <HAL_I2C_Init+0x1c4>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	1e58      	subs	r0, r3, #1
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6859      	ldr	r1, [r3, #4]
 8003520:	460b      	mov	r3, r1
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	0099      	lsls	r1, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	fbb0 f3f3 	udiv	r3, r0, r3
 800352e:	3301      	adds	r3, #1
 8003530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003534:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	6809      	ldr	r1, [r1, #0]
 800353c:	4313      	orrs	r3, r2
 800353e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69da      	ldr	r2, [r3, #28]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003566:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6911      	ldr	r1, [r2, #16]
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	68d2      	ldr	r2, [r2, #12]
 8003572:	4311      	orrs	r1, r2
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6812      	ldr	r2, [r2, #0]
 8003578:	430b      	orrs	r3, r1
 800357a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695a      	ldr	r2, [r3, #20]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0201 	orr.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2220      	movs	r2, #32
 80035b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	000186a0 	.word	0x000186a0
 80035d4:	001e847f 	.word	0x001e847f
 80035d8:	003d08ff 	.word	0x003d08ff
 80035dc:	431bde83 	.word	0x431bde83
 80035e0:	10624dd3 	.word	0x10624dd3

080035e4 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e021      	b.n	800363a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2224      	movs	r2, #36	; 0x24
 80035fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0201 	bic.w	r2, r2, #1
 800360c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f821 	bl	8003656 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2200      	movs	r2, #0
 8003626:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
	...

0800366c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af02      	add	r7, sp, #8
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	4608      	mov	r0, r1
 8003676:	4611      	mov	r1, r2
 8003678:	461a      	mov	r2, r3
 800367a:	4603      	mov	r3, r0
 800367c:	817b      	strh	r3, [r7, #10]
 800367e:	460b      	mov	r3, r1
 8003680:	813b      	strh	r3, [r7, #8]
 8003682:	4613      	mov	r3, r2
 8003684:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003686:	f7ff fa55 	bl	8002b34 <HAL_GetTick>
 800368a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b20      	cmp	r3, #32
 8003696:	f040 80d9 	bne.w	800384c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	2319      	movs	r3, #25
 80036a0:	2201      	movs	r2, #1
 80036a2:	496d      	ldr	r1, [pc, #436]	; (8003858 <HAL_I2C_Mem_Write+0x1ec>)
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f000 fc99 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80036b0:	2302      	movs	r3, #2
 80036b2:	e0cc      	b.n	800384e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d101      	bne.n	80036c2 <HAL_I2C_Mem_Write+0x56>
 80036be:	2302      	movs	r3, #2
 80036c0:	e0c5      	b.n	800384e <HAL_I2C_Mem_Write+0x1e2>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b01      	cmp	r3, #1
 80036d6:	d007      	beq.n	80036e8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0201 	orr.w	r2, r2, #1
 80036e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681a      	ldr	r2, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2221      	movs	r2, #33	; 0x21
 80036fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2240      	movs	r2, #64	; 0x40
 8003704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	2200      	movs	r2, #0
 800370c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a3a      	ldr	r2, [r7, #32]
 8003712:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003718:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	4a4d      	ldr	r2, [pc, #308]	; (800385c <HAL_I2C_Mem_Write+0x1f0>)
 8003728:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800372a:	88f8      	ldrh	r0, [r7, #6]
 800372c:	893a      	ldrh	r2, [r7, #8]
 800372e:	8979      	ldrh	r1, [r7, #10]
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	9301      	str	r3, [sp, #4]
 8003734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003736:	9300      	str	r3, [sp, #0]
 8003738:	4603      	mov	r3, r0
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 fad0 	bl	8003ce0 <I2C_RequestMemoryWrite>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d052      	beq.n	80037ec <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e081      	b.n	800384e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 fd1a 	bl	8004188 <I2C_WaitOnTXEFlagUntilTimeout>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00d      	beq.n	8003776 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	2b04      	cmp	r3, #4
 8003760:	d107      	bne.n	8003772 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003770:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e06b      	b.n	800384e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	781a      	ldrb	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	1c5a      	adds	r2, r3, #1
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003790:	3b01      	subs	r3, #1
 8003792:	b29a      	uxth	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	3b01      	subs	r3, #1
 80037a0:	b29a      	uxth	r2, r3
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d11b      	bne.n	80037ec <HAL_I2C_Mem_Write+0x180>
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d017      	beq.n	80037ec <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	781a      	ldrb	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037cc:	1c5a      	adds	r2, r3, #1
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29a      	uxth	r2, r3
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29a      	uxth	r2, r3
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1aa      	bne.n	800374a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 fd06 	bl	800420a <I2C_WaitOnBTFFlagUntilTimeout>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d00d      	beq.n	8003820 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	2b04      	cmp	r3, #4
 800380a:	d107      	bne.n	800381c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800381a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e016      	b.n	800384e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800382e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	2220      	movs	r2, #32
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003848:	2300      	movs	r3, #0
 800384a:	e000      	b.n	800384e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800384c:	2302      	movs	r3, #2
  }
}
 800384e:	4618      	mov	r0, r3
 8003850:	3718      	adds	r7, #24
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	00100002 	.word	0x00100002
 800385c:	ffff0000 	.word	0xffff0000

08003860 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b08c      	sub	sp, #48	; 0x30
 8003864:	af02      	add	r7, sp, #8
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	4608      	mov	r0, r1
 800386a:	4611      	mov	r1, r2
 800386c:	461a      	mov	r2, r3
 800386e:	4603      	mov	r3, r0
 8003870:	817b      	strh	r3, [r7, #10]
 8003872:	460b      	mov	r3, r1
 8003874:	813b      	strh	r3, [r7, #8]
 8003876:	4613      	mov	r3, r2
 8003878:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800387a:	f7ff f95b 	bl	8002b34 <HAL_GetTick>
 800387e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b20      	cmp	r3, #32
 800388a:	f040 8208 	bne.w	8003c9e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800388e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	2319      	movs	r3, #25
 8003894:	2201      	movs	r2, #1
 8003896:	497b      	ldr	r1, [pc, #492]	; (8003a84 <HAL_I2C_Mem_Read+0x224>)
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 fb9f 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80038a4:	2302      	movs	r3, #2
 80038a6:	e1fb      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <HAL_I2C_Mem_Read+0x56>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e1f4      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x440>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d007      	beq.n	80038dc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0201 	orr.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2222      	movs	r2, #34	; 0x22
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2240      	movs	r2, #64	; 0x40
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003906:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800390c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4a5b      	ldr	r2, [pc, #364]	; (8003a88 <HAL_I2C_Mem_Read+0x228>)
 800391c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800391e:	88f8      	ldrh	r0, [r7, #6]
 8003920:	893a      	ldrh	r2, [r7, #8]
 8003922:	8979      	ldrh	r1, [r7, #10]
 8003924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003926:	9301      	str	r3, [sp, #4]
 8003928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	4603      	mov	r3, r0
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 fa6c 	bl	8003e0c <I2C_RequestMemoryRead>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e1b0      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003942:	2b00      	cmp	r3, #0
 8003944:	d113      	bne.n	800396e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003946:	2300      	movs	r3, #0
 8003948:	623b      	str	r3, [r7, #32]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	623b      	str	r3, [r7, #32]
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	623b      	str	r3, [r7, #32]
 800395a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	e184      	b.n	8003c78 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003972:	2b01      	cmp	r3, #1
 8003974:	d11b      	bne.n	80039ae <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003984:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003986:	2300      	movs	r3, #0
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	695b      	ldr	r3, [r3, #20]
 8003990:	61fb      	str	r3, [r7, #28]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	61fb      	str	r3, [r7, #28]
 800399a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039aa:	601a      	str	r2, [r3, #0]
 80039ac:	e164      	b.n	8003c78 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d11b      	bne.n	80039ee <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039c4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039d6:	2300      	movs	r3, #0
 80039d8:	61bb      	str	r3, [r7, #24]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	695b      	ldr	r3, [r3, #20]
 80039e0:	61bb      	str	r3, [r7, #24]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	699b      	ldr	r3, [r3, #24]
 80039e8:	61bb      	str	r3, [r7, #24]
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	e144      	b.n	8003c78 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ee:	2300      	movs	r3, #0
 80039f0:	617b      	str	r3, [r7, #20]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	695b      	ldr	r3, [r3, #20]
 80039f8:	617b      	str	r3, [r7, #20]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003a04:	e138      	b.n	8003c78 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a0a:	2b03      	cmp	r3, #3
 8003a0c:	f200 80f1 	bhi.w	8003bf2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d123      	bne.n	8003a60 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003a1c:	68f8      	ldr	r0, [r7, #12]
 8003a1e:	f000 fc35 	bl	800428c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e139      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a5e:	e10b      	b.n	8003c78 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d14e      	bne.n	8003b06 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a6e:	2200      	movs	r2, #0
 8003a70:	4906      	ldr	r1, [pc, #24]	; (8003a8c <HAL_I2C_Mem_Read+0x22c>)
 8003a72:	68f8      	ldr	r0, [r7, #12]
 8003a74:	f000 fab2 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d008      	beq.n	8003a90 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e10e      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x440>
 8003a82:	bf00      	nop
 8003a84:	00100002 	.word	0x00100002
 8003a88:	ffff0000 	.word	0xffff0000
 8003a8c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a9e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	691a      	ldr	r2, [r3, #16]
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	1c5a      	adds	r2, r3, #1
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	691a      	ldr	r2, [r3, #16]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae4:	1c5a      	adds	r2, r3, #1
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aee:	3b01      	subs	r3, #1
 8003af0:	b29a      	uxth	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	3b01      	subs	r3, #1
 8003afe:	b29a      	uxth	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b04:	e0b8      	b.n	8003c78 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	4966      	ldr	r1, [pc, #408]	; (8003ca8 <HAL_I2C_Mem_Read+0x448>)
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 fa63 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e0bf      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	b2d2      	uxtb	r2, r2
 8003b3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b68:	2200      	movs	r2, #0
 8003b6a:	494f      	ldr	r1, [pc, #316]	; (8003ca8 <HAL_I2C_Mem_Read+0x448>)
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 fa35 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d001      	beq.n	8003b7c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e091      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b8a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691a      	ldr	r2, [r3, #16]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	b2d2      	uxtb	r2, r2
 8003b98:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	691a      	ldr	r2, [r3, #16]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc8:	b2d2      	uxtb	r2, r2
 8003bca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bf0:	e042      	b.n	8003c78 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 fb48 	bl	800428c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d001      	beq.n	8003c06 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e04c      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	691a      	ldr	r2, [r3, #16]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c10:	b2d2      	uxtb	r2, r2
 8003c12:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c18:	1c5a      	adds	r2, r3, #1
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c2e:	b29b      	uxth	r3, r3
 8003c30:	3b01      	subs	r3, #1
 8003c32:	b29a      	uxth	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	2b04      	cmp	r3, #4
 8003c44:	d118      	bne.n	8003c78 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	691a      	ldr	r2, [r3, #16]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c62:	3b01      	subs	r3, #1
 8003c64:	b29a      	uxth	r2, r3
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f47f aec2 	bne.w	8003a06 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2220      	movs	r2, #32
 8003c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	e000      	b.n	8003ca0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003c9e:	2302      	movs	r3, #2
  }
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3728      	adds	r7, #40	; 0x28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	00010004 	.word	0x00010004

08003cac <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cba:	b2db      	uxtb	r3, r3
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b088      	sub	sp, #32
 8003ce4:	af02      	add	r7, sp, #8
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	4608      	mov	r0, r1
 8003cea:	4611      	mov	r1, r2
 8003cec:	461a      	mov	r2, r3
 8003cee:	4603      	mov	r3, r0
 8003cf0:	817b      	strh	r3, [r7, #10]
 8003cf2:	460b      	mov	r3, r1
 8003cf4:	813b      	strh	r3, [r7, #8]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681a      	ldr	r2, [r3, #0]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d08:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 f960 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00d      	beq.n	8003d3e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d30:	d103      	bne.n	8003d3a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d38:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e05f      	b.n	8003dfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d3e:	897b      	ldrh	r3, [r7, #10]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d4c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d50:	6a3a      	ldr	r2, [r7, #32]
 8003d52:	492d      	ldr	r1, [pc, #180]	; (8003e08 <I2C_RequestMemoryWrite+0x128>)
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 f998 	bl	800408a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e04c      	b.n	8003dfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7c:	6a39      	ldr	r1, [r7, #32]
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 fa02 	bl	8004188 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00d      	beq.n	8003da6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	d107      	bne.n	8003da2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003da0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e02b      	b.n	8003dfe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003da6:	88fb      	ldrh	r3, [r7, #6]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d105      	bne.n	8003db8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003dac:	893b      	ldrh	r3, [r7, #8]
 8003dae:	b2da      	uxtb	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	611a      	str	r2, [r3, #16]
 8003db6:	e021      	b.n	8003dfc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003db8:	893b      	ldrh	r3, [r7, #8]
 8003dba:	0a1b      	lsrs	r3, r3, #8
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dc8:	6a39      	ldr	r1, [r7, #32]
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	f000 f9dc 	bl	8004188 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00d      	beq.n	8003df2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	d107      	bne.n	8003dee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e005      	b.n	8003dfe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003df2:	893b      	ldrh	r3, [r7, #8]
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3718      	adds	r7, #24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	00010002 	.word	0x00010002

08003e0c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af02      	add	r7, sp, #8
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	4608      	mov	r0, r1
 8003e16:	4611      	mov	r1, r2
 8003e18:	461a      	mov	r2, r3
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	817b      	strh	r3, [r7, #10]
 8003e1e:	460b      	mov	r3, r1
 8003e20:	813b      	strh	r3, [r7, #8]
 8003e22:	4613      	mov	r3, r2
 8003e24:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e34:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 f8c2 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00d      	beq.n	8003e7a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e6c:	d103      	bne.n	8003e76 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e0aa      	b.n	8003fd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e7a:	897b      	ldrh	r3, [r7, #10]
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	461a      	mov	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	6a3a      	ldr	r2, [r7, #32]
 8003e8e:	4952      	ldr	r1, [pc, #328]	; (8003fd8 <I2C_RequestMemoryRead+0x1cc>)
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f8fa 	bl	800408a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e097      	b.n	8003fd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	617b      	str	r3, [r7, #20]
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	699b      	ldr	r3, [r3, #24]
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003eb8:	6a39      	ldr	r1, [r7, #32]
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 f964 	bl	8004188 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00d      	beq.n	8003ee2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d107      	bne.n	8003ede <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003edc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e076      	b.n	8003fd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ee2:	88fb      	ldrh	r3, [r7, #6]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d105      	bne.n	8003ef4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ee8:	893b      	ldrh	r3, [r7, #8]
 8003eea:	b2da      	uxtb	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	611a      	str	r2, [r3, #16]
 8003ef2:	e021      	b.n	8003f38 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ef4:	893b      	ldrh	r3, [r7, #8]
 8003ef6:	0a1b      	lsrs	r3, r3, #8
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f04:	6a39      	ldr	r1, [r7, #32]
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f000 f93e 	bl	8004188 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00d      	beq.n	8003f2e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f16:	2b04      	cmp	r3, #4
 8003f18:	d107      	bne.n	8003f2a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	681a      	ldr	r2, [r3, #0]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f28:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e050      	b.n	8003fd0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f2e:	893b      	ldrh	r3, [r7, #8]
 8003f30:	b2da      	uxtb	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f3a:	6a39      	ldr	r1, [r7, #32]
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f000 f923 	bl	8004188 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00d      	beq.n	8003f64 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	d107      	bne.n	8003f60 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f5e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	e035      	b.n	8003fd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f72:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	6a3b      	ldr	r3, [r7, #32]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 f82b 	bl	8003fdc <I2C_WaitOnFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d00d      	beq.n	8003fa8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f9a:	d103      	bne.n	8003fa4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fa2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003fa4:	2303      	movs	r3, #3
 8003fa6:	e013      	b.n	8003fd0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003fa8:	897b      	ldrh	r3, [r7, #10]
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	f043 0301 	orr.w	r3, r3, #1
 8003fb0:	b2da      	uxtb	r2, r3
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003fb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fba:	6a3a      	ldr	r2, [r7, #32]
 8003fbc:	4906      	ldr	r1, [pc, #24]	; (8003fd8 <I2C_RequestMemoryRead+0x1cc>)
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 f863 	bl	800408a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d001      	beq.n	8003fce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e000      	b.n	8003fd0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003fce:	2300      	movs	r3, #0
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	3718      	adds	r7, #24
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	00010002 	.word	0x00010002

08003fdc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	603b      	str	r3, [r7, #0]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003fec:	e025      	b.n	800403a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ff4:	d021      	beq.n	800403a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff6:	f7fe fd9d 	bl	8002b34 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	429a      	cmp	r2, r3
 8004004:	d302      	bcc.n	800400c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d116      	bne.n	800403a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2220      	movs	r2, #32
 8004016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004026:	f043 0220 	orr.w	r2, r3, #32
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e023      	b.n	8004082 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	0c1b      	lsrs	r3, r3, #16
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b01      	cmp	r3, #1
 8004042:	d10d      	bne.n	8004060 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	695b      	ldr	r3, [r3, #20]
 800404a:	43da      	mvns	r2, r3
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	4013      	ands	r3, r2
 8004050:	b29b      	uxth	r3, r3
 8004052:	2b00      	cmp	r3, #0
 8004054:	bf0c      	ite	eq
 8004056:	2301      	moveq	r3, #1
 8004058:	2300      	movne	r3, #0
 800405a:	b2db      	uxtb	r3, r3
 800405c:	461a      	mov	r2, r3
 800405e:	e00c      	b.n	800407a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	43da      	mvns	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4013      	ands	r3, r2
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	bf0c      	ite	eq
 8004072:	2301      	moveq	r3, #1
 8004074:	2300      	movne	r3, #0
 8004076:	b2db      	uxtb	r3, r3
 8004078:	461a      	mov	r2, r3
 800407a:	79fb      	ldrb	r3, [r7, #7]
 800407c:	429a      	cmp	r2, r3
 800407e:	d0b6      	beq.n	8003fee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b084      	sub	sp, #16
 800408e:	af00      	add	r7, sp, #0
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	607a      	str	r2, [r7, #4]
 8004096:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004098:	e051      	b.n	800413e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040a8:	d123      	bne.n	80040f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80040c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040de:	f043 0204 	orr.w	r2, r3, #4
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e046      	b.n	8004180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f8:	d021      	beq.n	800413e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040fa:	f7fe fd1b 	bl	8002b34 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	429a      	cmp	r2, r3
 8004108:	d302      	bcc.n	8004110 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d116      	bne.n	800413e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2200      	movs	r2, #0
 8004114:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2220      	movs	r2, #32
 800411a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2200      	movs	r2, #0
 8004122:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	f043 0220 	orr.w	r2, r3, #32
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e020      	b.n	8004180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	0c1b      	lsrs	r3, r3, #16
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b01      	cmp	r3, #1
 8004146:	d10c      	bne.n	8004162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	43da      	mvns	r2, r3
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	4013      	ands	r3, r2
 8004154:	b29b      	uxth	r3, r3
 8004156:	2b00      	cmp	r3, #0
 8004158:	bf14      	ite	ne
 800415a:	2301      	movne	r3, #1
 800415c:	2300      	moveq	r3, #0
 800415e:	b2db      	uxtb	r3, r3
 8004160:	e00b      	b.n	800417a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	43da      	mvns	r2, r3
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	4013      	ands	r3, r2
 800416e:	b29b      	uxth	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	bf14      	ite	ne
 8004174:	2301      	movne	r3, #1
 8004176:	2300      	moveq	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d18d      	bne.n	800409a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800417e:	2300      	movs	r3, #0
}
 8004180:	4618      	mov	r0, r3
 8004182:	3710      	adds	r7, #16
 8004184:	46bd      	mov	sp, r7
 8004186:	bd80      	pop	{r7, pc}

08004188 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004194:	e02d      	b.n	80041f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 f8ce 	bl	8004338 <I2C_IsAcknowledgeFailed>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e02d      	b.n	8004202 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a6:	68bb      	ldr	r3, [r7, #8]
 80041a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ac:	d021      	beq.n	80041f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ae:	f7fe fcc1 	bl	8002b34 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	68ba      	ldr	r2, [r7, #8]
 80041ba:	429a      	cmp	r2, r3
 80041bc:	d302      	bcc.n	80041c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d116      	bne.n	80041f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	f043 0220 	orr.w	r2, r3, #32
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e007      	b.n	8004202 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695b      	ldr	r3, [r3, #20]
 80041f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fc:	2b80      	cmp	r3, #128	; 0x80
 80041fe:	d1ca      	bne.n	8004196 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800420a:	b580      	push	{r7, lr}
 800420c:	b084      	sub	sp, #16
 800420e:	af00      	add	r7, sp, #0
 8004210:	60f8      	str	r0, [r7, #12]
 8004212:	60b9      	str	r1, [r7, #8]
 8004214:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004216:	e02d      	b.n	8004274 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f88d 	bl	8004338 <I2C_IsAcknowledgeFailed>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e02d      	b.n	8004284 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422e:	d021      	beq.n	8004274 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004230:	f7fe fc80 	bl	8002b34 <HAL_GetTick>
 8004234:	4602      	mov	r2, r0
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	1ad3      	subs	r3, r2, r3
 800423a:	68ba      	ldr	r2, [r7, #8]
 800423c:	429a      	cmp	r2, r3
 800423e:	d302      	bcc.n	8004246 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d116      	bne.n	8004274 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2200      	movs	r2, #0
 800424a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2220      	movs	r2, #32
 8004250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	f043 0220 	orr.w	r2, r3, #32
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e007      	b.n	8004284 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b04      	cmp	r3, #4
 8004280:	d1ca      	bne.n	8004218 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004282:	2300      	movs	r3, #0
}
 8004284:	4618      	mov	r0, r3
 8004286:	3710      	adds	r7, #16
 8004288:	46bd      	mov	sp, r7
 800428a:	bd80      	pop	{r7, pc}

0800428c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004298:	e042      	b.n	8004320 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	f003 0310 	and.w	r3, r3, #16
 80042a4:	2b10      	cmp	r3, #16
 80042a6:	d119      	bne.n	80042dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f06f 0210 	mvn.w	r2, #16
 80042b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2200      	movs	r2, #0
 80042b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e029      	b.n	8004330 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042dc:	f7fe fc2a 	bl	8002b34 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d302      	bcc.n	80042f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d116      	bne.n	8004320 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2200      	movs	r2, #0
 80042f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	f043 0220 	orr.w	r2, r3, #32
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e007      	b.n	8004330 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	695b      	ldr	r3, [r3, #20]
 8004326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800432a:	2b40      	cmp	r3, #64	; 0x40
 800432c:	d1b5      	bne.n	800429a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	695b      	ldr	r3, [r3, #20]
 8004346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800434a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800434e:	d11b      	bne.n	8004388 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004358:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2200      	movs	r2, #0
 800435e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	f043 0204 	orr.w	r2, r3, #4
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e000      	b.n	800438a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	370c      	adds	r7, #12
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr
	...

08004398 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e25b      	b.n	8004862 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d075      	beq.n	80044a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043b6:	4ba3      	ldr	r3, [pc, #652]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f003 030c 	and.w	r3, r3, #12
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d00c      	beq.n	80043dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043c2:	4ba0      	ldr	r3, [pc, #640]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80043ca:	2b08      	cmp	r3, #8
 80043cc:	d112      	bne.n	80043f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ce:	4b9d      	ldr	r3, [pc, #628]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043da:	d10b      	bne.n	80043f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043dc:	4b99      	ldr	r3, [pc, #612]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d05b      	beq.n	80044a0 <HAL_RCC_OscConfig+0x108>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d157      	bne.n	80044a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e236      	b.n	8004862 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043fc:	d106      	bne.n	800440c <HAL_RCC_OscConfig+0x74>
 80043fe:	4b91      	ldr	r3, [pc, #580]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a90      	ldr	r2, [pc, #576]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 8004404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004408:	6013      	str	r3, [r2, #0]
 800440a:	e01d      	b.n	8004448 <HAL_RCC_OscConfig+0xb0>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004414:	d10c      	bne.n	8004430 <HAL_RCC_OscConfig+0x98>
 8004416:	4b8b      	ldr	r3, [pc, #556]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a8a      	ldr	r2, [pc, #552]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 800441c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	4b88      	ldr	r3, [pc, #544]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a87      	ldr	r2, [pc, #540]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 8004428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	e00b      	b.n	8004448 <HAL_RCC_OscConfig+0xb0>
 8004430:	4b84      	ldr	r3, [pc, #528]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a83      	ldr	r2, [pc, #524]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 8004436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800443a:	6013      	str	r3, [r2, #0]
 800443c:	4b81      	ldr	r3, [pc, #516]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a80      	ldr	r2, [pc, #512]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 8004442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d013      	beq.n	8004478 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004450:	f7fe fb70 	bl	8002b34 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004458:	f7fe fb6c 	bl	8002b34 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b64      	cmp	r3, #100	; 0x64
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e1fb      	b.n	8004862 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800446a:	4b76      	ldr	r3, [pc, #472]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d0f0      	beq.n	8004458 <HAL_RCC_OscConfig+0xc0>
 8004476:	e014      	b.n	80044a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004478:	f7fe fb5c 	bl	8002b34 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004480:	f7fe fb58 	bl	8002b34 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b64      	cmp	r3, #100	; 0x64
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e1e7      	b.n	8004862 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004492:	4b6c      	ldr	r3, [pc, #432]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0xe8>
 800449e:	e000      	b.n	80044a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0302 	and.w	r3, r3, #2
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d063      	beq.n	8004576 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044ae:	4b65      	ldr	r3, [pc, #404]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f003 030c 	and.w	r3, r3, #12
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00b      	beq.n	80044d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ba:	4b62      	ldr	r3, [pc, #392]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80044c2:	2b08      	cmp	r3, #8
 80044c4:	d11c      	bne.n	8004500 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044c6:	4b5f      	ldr	r3, [pc, #380]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d116      	bne.n	8004500 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044d2:	4b5c      	ldr	r3, [pc, #368]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d005      	beq.n	80044ea <HAL_RCC_OscConfig+0x152>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d001      	beq.n	80044ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e1bb      	b.n	8004862 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ea:	4b56      	ldr	r3, [pc, #344]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	4952      	ldr	r1, [pc, #328]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044fe:	e03a      	b.n	8004576 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d020      	beq.n	800454a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004508:	4b4f      	ldr	r3, [pc, #316]	; (8004648 <HAL_RCC_OscConfig+0x2b0>)
 800450a:	2201      	movs	r2, #1
 800450c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800450e:	f7fe fb11 	bl	8002b34 <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004516:	f7fe fb0d 	bl	8002b34 <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e19c      	b.n	8004862 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004528:	4b46      	ldr	r3, [pc, #280]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0302 	and.w	r3, r3, #2
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0f0      	beq.n	8004516 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004534:	4b43      	ldr	r3, [pc, #268]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	4940      	ldr	r1, [pc, #256]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 8004544:	4313      	orrs	r3, r2
 8004546:	600b      	str	r3, [r1, #0]
 8004548:	e015      	b.n	8004576 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800454a:	4b3f      	ldr	r3, [pc, #252]	; (8004648 <HAL_RCC_OscConfig+0x2b0>)
 800454c:	2200      	movs	r2, #0
 800454e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004550:	f7fe faf0 	bl	8002b34 <HAL_GetTick>
 8004554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004556:	e008      	b.n	800456a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004558:	f7fe faec 	bl	8002b34 <HAL_GetTick>
 800455c:	4602      	mov	r2, r0
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	2b02      	cmp	r3, #2
 8004564:	d901      	bls.n	800456a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004566:	2303      	movs	r3, #3
 8004568:	e17b      	b.n	8004862 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800456a:	4b36      	ldr	r3, [pc, #216]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1f0      	bne.n	8004558 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0308 	and.w	r3, r3, #8
 800457e:	2b00      	cmp	r3, #0
 8004580:	d030      	beq.n	80045e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d016      	beq.n	80045b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800458a:	4b30      	ldr	r3, [pc, #192]	; (800464c <HAL_RCC_OscConfig+0x2b4>)
 800458c:	2201      	movs	r2, #1
 800458e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004590:	f7fe fad0 	bl	8002b34 <HAL_GetTick>
 8004594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004596:	e008      	b.n	80045aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004598:	f7fe facc 	bl	8002b34 <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e15b      	b.n	8004862 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045aa:	4b26      	ldr	r3, [pc, #152]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 80045ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0f0      	beq.n	8004598 <HAL_RCC_OscConfig+0x200>
 80045b6:	e015      	b.n	80045e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045b8:	4b24      	ldr	r3, [pc, #144]	; (800464c <HAL_RCC_OscConfig+0x2b4>)
 80045ba:	2200      	movs	r2, #0
 80045bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045be:	f7fe fab9 	bl	8002b34 <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045c6:	f7fe fab5 	bl	8002b34 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e144      	b.n	8004862 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d8:	4b1a      	ldr	r3, [pc, #104]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 80045da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045dc:	f003 0302 	and.w	r3, r3, #2
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1f0      	bne.n	80045c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f000 80a0 	beq.w	8004732 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045f2:	2300      	movs	r3, #0
 80045f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045f6:	4b13      	ldr	r3, [pc, #76]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10f      	bne.n	8004622 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004602:	2300      	movs	r3, #0
 8004604:	60bb      	str	r3, [r7, #8]
 8004606:	4b0f      	ldr	r3, [pc, #60]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	4a0e      	ldr	r2, [pc, #56]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 800460c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004610:	6413      	str	r3, [r2, #64]	; 0x40
 8004612:	4b0c      	ldr	r3, [pc, #48]	; (8004644 <HAL_RCC_OscConfig+0x2ac>)
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461a:	60bb      	str	r3, [r7, #8]
 800461c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800461e:	2301      	movs	r3, #1
 8004620:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004622:	4b0b      	ldr	r3, [pc, #44]	; (8004650 <HAL_RCC_OscConfig+0x2b8>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800462a:	2b00      	cmp	r3, #0
 800462c:	d121      	bne.n	8004672 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800462e:	4b08      	ldr	r3, [pc, #32]	; (8004650 <HAL_RCC_OscConfig+0x2b8>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a07      	ldr	r2, [pc, #28]	; (8004650 <HAL_RCC_OscConfig+0x2b8>)
 8004634:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004638:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800463a:	f7fe fa7b 	bl	8002b34 <HAL_GetTick>
 800463e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004640:	e011      	b.n	8004666 <HAL_RCC_OscConfig+0x2ce>
 8004642:	bf00      	nop
 8004644:	40023800 	.word	0x40023800
 8004648:	42470000 	.word	0x42470000
 800464c:	42470e80 	.word	0x42470e80
 8004650:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004654:	f7fe fa6e 	bl	8002b34 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e0fd      	b.n	8004862 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004666:	4b81      	ldr	r3, [pc, #516]	; (800486c <HAL_RCC_OscConfig+0x4d4>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0f0      	beq.n	8004654 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d106      	bne.n	8004688 <HAL_RCC_OscConfig+0x2f0>
 800467a:	4b7d      	ldr	r3, [pc, #500]	; (8004870 <HAL_RCC_OscConfig+0x4d8>)
 800467c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467e:	4a7c      	ldr	r2, [pc, #496]	; (8004870 <HAL_RCC_OscConfig+0x4d8>)
 8004680:	f043 0301 	orr.w	r3, r3, #1
 8004684:	6713      	str	r3, [r2, #112]	; 0x70
 8004686:	e01c      	b.n	80046c2 <HAL_RCC_OscConfig+0x32a>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	2b05      	cmp	r3, #5
 800468e:	d10c      	bne.n	80046aa <HAL_RCC_OscConfig+0x312>
 8004690:	4b77      	ldr	r3, [pc, #476]	; (8004870 <HAL_RCC_OscConfig+0x4d8>)
 8004692:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004694:	4a76      	ldr	r2, [pc, #472]	; (8004870 <HAL_RCC_OscConfig+0x4d8>)
 8004696:	f043 0304 	orr.w	r3, r3, #4
 800469a:	6713      	str	r3, [r2, #112]	; 0x70
 800469c:	4b74      	ldr	r3, [pc, #464]	; (8004870 <HAL_RCC_OscConfig+0x4d8>)
 800469e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a0:	4a73      	ldr	r2, [pc, #460]	; (8004870 <HAL_RCC_OscConfig+0x4d8>)
 80046a2:	f043 0301 	orr.w	r3, r3, #1
 80046a6:	6713      	str	r3, [r2, #112]	; 0x70
 80046a8:	e00b      	b.n	80046c2 <HAL_RCC_OscConfig+0x32a>
 80046aa:	4b71      	ldr	r3, [pc, #452]	; (8004870 <HAL_RCC_OscConfig+0x4d8>)
 80046ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ae:	4a70      	ldr	r2, [pc, #448]	; (8004870 <HAL_RCC_OscConfig+0x4d8>)
 80046b0:	f023 0301 	bic.w	r3, r3, #1
 80046b4:	6713      	str	r3, [r2, #112]	; 0x70
 80046b6:	4b6e      	ldr	r3, [pc, #440]	; (8004870 <HAL_RCC_OscConfig+0x4d8>)
 80046b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ba:	4a6d      	ldr	r2, [pc, #436]	; (8004870 <HAL_RCC_OscConfig+0x4d8>)
 80046bc:	f023 0304 	bic.w	r3, r3, #4
 80046c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d015      	beq.n	80046f6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ca:	f7fe fa33 	bl	8002b34 <HAL_GetTick>
 80046ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046d0:	e00a      	b.n	80046e8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046d2:	f7fe fa2f 	bl	8002b34 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d901      	bls.n	80046e8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e0bc      	b.n	8004862 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046e8:	4b61      	ldr	r3, [pc, #388]	; (8004870 <HAL_RCC_OscConfig+0x4d8>)
 80046ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ec:	f003 0302 	and.w	r3, r3, #2
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d0ee      	beq.n	80046d2 <HAL_RCC_OscConfig+0x33a>
 80046f4:	e014      	b.n	8004720 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f6:	f7fe fa1d 	bl	8002b34 <HAL_GetTick>
 80046fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046fc:	e00a      	b.n	8004714 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046fe:	f7fe fa19 	bl	8002b34 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	f241 3288 	movw	r2, #5000	; 0x1388
 800470c:	4293      	cmp	r3, r2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e0a6      	b.n	8004862 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004714:	4b56      	ldr	r3, [pc, #344]	; (8004870 <HAL_RCC_OscConfig+0x4d8>)
 8004716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004718:	f003 0302 	and.w	r3, r3, #2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d1ee      	bne.n	80046fe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004720:	7dfb      	ldrb	r3, [r7, #23]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d105      	bne.n	8004732 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004726:	4b52      	ldr	r3, [pc, #328]	; (8004870 <HAL_RCC_OscConfig+0x4d8>)
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	4a51      	ldr	r2, [pc, #324]	; (8004870 <HAL_RCC_OscConfig+0x4d8>)
 800472c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004730:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 8092 	beq.w	8004860 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800473c:	4b4c      	ldr	r3, [pc, #304]	; (8004870 <HAL_RCC_OscConfig+0x4d8>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f003 030c 	and.w	r3, r3, #12
 8004744:	2b08      	cmp	r3, #8
 8004746:	d05c      	beq.n	8004802 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	2b02      	cmp	r3, #2
 800474e:	d141      	bne.n	80047d4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004750:	4b48      	ldr	r3, [pc, #288]	; (8004874 <HAL_RCC_OscConfig+0x4dc>)
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004756:	f7fe f9ed 	bl	8002b34 <HAL_GetTick>
 800475a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800475c:	e008      	b.n	8004770 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800475e:	f7fe f9e9 	bl	8002b34 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	2b02      	cmp	r3, #2
 800476a:	d901      	bls.n	8004770 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	e078      	b.n	8004862 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004770:	4b3f      	ldr	r3, [pc, #252]	; (8004870 <HAL_RCC_OscConfig+0x4d8>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1f0      	bne.n	800475e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	69da      	ldr	r2, [r3, #28]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a1b      	ldr	r3, [r3, #32]
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	019b      	lsls	r3, r3, #6
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004792:	085b      	lsrs	r3, r3, #1
 8004794:	3b01      	subs	r3, #1
 8004796:	041b      	lsls	r3, r3, #16
 8004798:	431a      	orrs	r2, r3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479e:	061b      	lsls	r3, r3, #24
 80047a0:	4933      	ldr	r1, [pc, #204]	; (8004870 <HAL_RCC_OscConfig+0x4d8>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047a6:	4b33      	ldr	r3, [pc, #204]	; (8004874 <HAL_RCC_OscConfig+0x4dc>)
 80047a8:	2201      	movs	r2, #1
 80047aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047ac:	f7fe f9c2 	bl	8002b34 <HAL_GetTick>
 80047b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047b2:	e008      	b.n	80047c6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047b4:	f7fe f9be 	bl	8002b34 <HAL_GetTick>
 80047b8:	4602      	mov	r2, r0
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	1ad3      	subs	r3, r2, r3
 80047be:	2b02      	cmp	r3, #2
 80047c0:	d901      	bls.n	80047c6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80047c2:	2303      	movs	r3, #3
 80047c4:	e04d      	b.n	8004862 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c6:	4b2a      	ldr	r3, [pc, #168]	; (8004870 <HAL_RCC_OscConfig+0x4d8>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d0f0      	beq.n	80047b4 <HAL_RCC_OscConfig+0x41c>
 80047d2:	e045      	b.n	8004860 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047d4:	4b27      	ldr	r3, [pc, #156]	; (8004874 <HAL_RCC_OscConfig+0x4dc>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047da:	f7fe f9ab 	bl	8002b34 <HAL_GetTick>
 80047de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047e0:	e008      	b.n	80047f4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e2:	f7fe f9a7 	bl	8002b34 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d901      	bls.n	80047f4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e036      	b.n	8004862 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f4:	4b1e      	ldr	r3, [pc, #120]	; (8004870 <HAL_RCC_OscConfig+0x4d8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1f0      	bne.n	80047e2 <HAL_RCC_OscConfig+0x44a>
 8004800:	e02e      	b.n	8004860 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d101      	bne.n	800480e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e029      	b.n	8004862 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800480e:	4b18      	ldr	r3, [pc, #96]	; (8004870 <HAL_RCC_OscConfig+0x4d8>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	69db      	ldr	r3, [r3, #28]
 800481e:	429a      	cmp	r2, r3
 8004820:	d11c      	bne.n	800485c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800482c:	429a      	cmp	r2, r3
 800482e:	d115      	bne.n	800485c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004836:	4013      	ands	r3, r2
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800483c:	4293      	cmp	r3, r2
 800483e:	d10d      	bne.n	800485c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800484a:	429a      	cmp	r2, r3
 800484c:	d106      	bne.n	800485c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004858:	429a      	cmp	r2, r3
 800485a:	d001      	beq.n	8004860 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e000      	b.n	8004862 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3718      	adds	r7, #24
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40007000 	.word	0x40007000
 8004870:	40023800 	.word	0x40023800
 8004874:	42470060 	.word	0x42470060

08004878 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e0cc      	b.n	8004a26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800488c:	4b68      	ldr	r3, [pc, #416]	; (8004a30 <HAL_RCC_ClockConfig+0x1b8>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 030f 	and.w	r3, r3, #15
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d90c      	bls.n	80048b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489a:	4b65      	ldr	r3, [pc, #404]	; (8004a30 <HAL_RCC_ClockConfig+0x1b8>)
 800489c:	683a      	ldr	r2, [r7, #0]
 800489e:	b2d2      	uxtb	r2, r2
 80048a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048a2:	4b63      	ldr	r3, [pc, #396]	; (8004a30 <HAL_RCC_ClockConfig+0x1b8>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 030f 	and.w	r3, r3, #15
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d001      	beq.n	80048b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e0b8      	b.n	8004a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0302 	and.w	r3, r3, #2
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d020      	beq.n	8004902 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0304 	and.w	r3, r3, #4
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d005      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048cc:	4b59      	ldr	r3, [pc, #356]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	4a58      	ldr	r2, [pc, #352]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80048d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0308 	and.w	r3, r3, #8
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d005      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048e4:	4b53      	ldr	r3, [pc, #332]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	4a52      	ldr	r2, [pc, #328]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80048ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048f0:	4b50      	ldr	r3, [pc, #320]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	494d      	ldr	r1, [pc, #308]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80048fe:	4313      	orrs	r3, r2
 8004900:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	2b00      	cmp	r3, #0
 800490c:	d044      	beq.n	8004998 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d107      	bne.n	8004926 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004916:	4b47      	ldr	r3, [pc, #284]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d119      	bne.n	8004956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e07f      	b.n	8004a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	2b02      	cmp	r3, #2
 800492c:	d003      	beq.n	8004936 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004932:	2b03      	cmp	r3, #3
 8004934:	d107      	bne.n	8004946 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004936:	4b3f      	ldr	r3, [pc, #252]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d109      	bne.n	8004956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e06f      	b.n	8004a26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004946:	4b3b      	ldr	r3, [pc, #236]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e067      	b.n	8004a26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004956:	4b37      	ldr	r3, [pc, #220]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f023 0203 	bic.w	r2, r3, #3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	4934      	ldr	r1, [pc, #208]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 8004964:	4313      	orrs	r3, r2
 8004966:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004968:	f7fe f8e4 	bl	8002b34 <HAL_GetTick>
 800496c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496e:	e00a      	b.n	8004986 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004970:	f7fe f8e0 	bl	8002b34 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	f241 3288 	movw	r2, #5000	; 0x1388
 800497e:	4293      	cmp	r3, r2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e04f      	b.n	8004a26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004986:	4b2b      	ldr	r3, [pc, #172]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 020c 	and.w	r2, r3, #12
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	429a      	cmp	r2, r3
 8004996:	d1eb      	bne.n	8004970 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004998:	4b25      	ldr	r3, [pc, #148]	; (8004a30 <HAL_RCC_ClockConfig+0x1b8>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 030f 	and.w	r3, r3, #15
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d20c      	bcs.n	80049c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a6:	4b22      	ldr	r3, [pc, #136]	; (8004a30 <HAL_RCC_ClockConfig+0x1b8>)
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	b2d2      	uxtb	r2, r2
 80049ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ae:	4b20      	ldr	r3, [pc, #128]	; (8004a30 <HAL_RCC_ClockConfig+0x1b8>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 030f 	and.w	r3, r3, #15
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d001      	beq.n	80049c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e032      	b.n	8004a26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d008      	beq.n	80049de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049cc:	4b19      	ldr	r3, [pc, #100]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	4916      	ldr	r1, [pc, #88]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d009      	beq.n	80049fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049ea:	4b12      	ldr	r3, [pc, #72]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	00db      	lsls	r3, r3, #3
 80049f8:	490e      	ldr	r1, [pc, #56]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	4313      	orrs	r3, r2
 80049fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049fe:	f000 f821 	bl	8004a44 <HAL_RCC_GetSysClockFreq>
 8004a02:	4601      	mov	r1, r0
 8004a04:	4b0b      	ldr	r3, [pc, #44]	; (8004a34 <HAL_RCC_ClockConfig+0x1bc>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	091b      	lsrs	r3, r3, #4
 8004a0a:	f003 030f 	and.w	r3, r3, #15
 8004a0e:	4a0a      	ldr	r2, [pc, #40]	; (8004a38 <HAL_RCC_ClockConfig+0x1c0>)
 8004a10:	5cd3      	ldrb	r3, [r2, r3]
 8004a12:	fa21 f303 	lsr.w	r3, r1, r3
 8004a16:	4a09      	ldr	r2, [pc, #36]	; (8004a3c <HAL_RCC_ClockConfig+0x1c4>)
 8004a18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a1a:	4b09      	ldr	r3, [pc, #36]	; (8004a40 <HAL_RCC_ClockConfig+0x1c8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fe f844 	bl	8002aac <HAL_InitTick>

  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40023c00 	.word	0x40023c00
 8004a34:	40023800 	.word	0x40023800
 8004a38:	08007da8 	.word	0x08007da8
 8004a3c:	200000a0 	.word	0x200000a0
 8004a40:	2000006c 	.word	0x2000006c

08004a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	607b      	str	r3, [r7, #4]
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	2300      	movs	r3, #0
 8004a54:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a5a:	4b63      	ldr	r3, [pc, #396]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	f003 030c 	and.w	r3, r3, #12
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d007      	beq.n	8004a76 <HAL_RCC_GetSysClockFreq+0x32>
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d008      	beq.n	8004a7c <HAL_RCC_GetSysClockFreq+0x38>
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	f040 80b4 	bne.w	8004bd8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a70:	4b5e      	ldr	r3, [pc, #376]	; (8004bec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004a72:	60bb      	str	r3, [r7, #8]
       break;
 8004a74:	e0b3      	b.n	8004bde <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a76:	4b5e      	ldr	r3, [pc, #376]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004a78:	60bb      	str	r3, [r7, #8]
      break;
 8004a7a:	e0b0      	b.n	8004bde <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a7c:	4b5a      	ldr	r3, [pc, #360]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a84:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a86:	4b58      	ldr	r3, [pc, #352]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d04a      	beq.n	8004b28 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a92:	4b55      	ldr	r3, [pc, #340]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	099b      	lsrs	r3, r3, #6
 8004a98:	f04f 0400 	mov.w	r4, #0
 8004a9c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004aa0:	f04f 0200 	mov.w	r2, #0
 8004aa4:	ea03 0501 	and.w	r5, r3, r1
 8004aa8:	ea04 0602 	and.w	r6, r4, r2
 8004aac:	4629      	mov	r1, r5
 8004aae:	4632      	mov	r2, r6
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	f04f 0400 	mov.w	r4, #0
 8004ab8:	0154      	lsls	r4, r2, #5
 8004aba:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004abe:	014b      	lsls	r3, r1, #5
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	4622      	mov	r2, r4
 8004ac4:	1b49      	subs	r1, r1, r5
 8004ac6:	eb62 0206 	sbc.w	r2, r2, r6
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	f04f 0400 	mov.w	r4, #0
 8004ad2:	0194      	lsls	r4, r2, #6
 8004ad4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004ad8:	018b      	lsls	r3, r1, #6
 8004ada:	1a5b      	subs	r3, r3, r1
 8004adc:	eb64 0402 	sbc.w	r4, r4, r2
 8004ae0:	f04f 0100 	mov.w	r1, #0
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	00e2      	lsls	r2, r4, #3
 8004aea:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004aee:	00d9      	lsls	r1, r3, #3
 8004af0:	460b      	mov	r3, r1
 8004af2:	4614      	mov	r4, r2
 8004af4:	195b      	adds	r3, r3, r5
 8004af6:	eb44 0406 	adc.w	r4, r4, r6
 8004afa:	f04f 0100 	mov.w	r1, #0
 8004afe:	f04f 0200 	mov.w	r2, #0
 8004b02:	0262      	lsls	r2, r4, #9
 8004b04:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004b08:	0259      	lsls	r1, r3, #9
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	4614      	mov	r4, r2
 8004b0e:	4618      	mov	r0, r3
 8004b10:	4621      	mov	r1, r4
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f04f 0400 	mov.w	r4, #0
 8004b18:	461a      	mov	r2, r3
 8004b1a:	4623      	mov	r3, r4
 8004b1c:	f7fb fbb0 	bl	8000280 <__aeabi_uldivmod>
 8004b20:	4603      	mov	r3, r0
 8004b22:	460c      	mov	r4, r1
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	e049      	b.n	8004bbc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b28:	4b2f      	ldr	r3, [pc, #188]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	099b      	lsrs	r3, r3, #6
 8004b2e:	f04f 0400 	mov.w	r4, #0
 8004b32:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004b36:	f04f 0200 	mov.w	r2, #0
 8004b3a:	ea03 0501 	and.w	r5, r3, r1
 8004b3e:	ea04 0602 	and.w	r6, r4, r2
 8004b42:	4629      	mov	r1, r5
 8004b44:	4632      	mov	r2, r6
 8004b46:	f04f 0300 	mov.w	r3, #0
 8004b4a:	f04f 0400 	mov.w	r4, #0
 8004b4e:	0154      	lsls	r4, r2, #5
 8004b50:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004b54:	014b      	lsls	r3, r1, #5
 8004b56:	4619      	mov	r1, r3
 8004b58:	4622      	mov	r2, r4
 8004b5a:	1b49      	subs	r1, r1, r5
 8004b5c:	eb62 0206 	sbc.w	r2, r2, r6
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	f04f 0400 	mov.w	r4, #0
 8004b68:	0194      	lsls	r4, r2, #6
 8004b6a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004b6e:	018b      	lsls	r3, r1, #6
 8004b70:	1a5b      	subs	r3, r3, r1
 8004b72:	eb64 0402 	sbc.w	r4, r4, r2
 8004b76:	f04f 0100 	mov.w	r1, #0
 8004b7a:	f04f 0200 	mov.w	r2, #0
 8004b7e:	00e2      	lsls	r2, r4, #3
 8004b80:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004b84:	00d9      	lsls	r1, r3, #3
 8004b86:	460b      	mov	r3, r1
 8004b88:	4614      	mov	r4, r2
 8004b8a:	195b      	adds	r3, r3, r5
 8004b8c:	eb44 0406 	adc.w	r4, r4, r6
 8004b90:	f04f 0100 	mov.w	r1, #0
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	02a2      	lsls	r2, r4, #10
 8004b9a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004b9e:	0299      	lsls	r1, r3, #10
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	4614      	mov	r4, r2
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	4621      	mov	r1, r4
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f04f 0400 	mov.w	r4, #0
 8004bae:	461a      	mov	r2, r3
 8004bb0:	4623      	mov	r3, r4
 8004bb2:	f7fb fb65 	bl	8000280 <__aeabi_uldivmod>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	460c      	mov	r4, r1
 8004bba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bbc:	4b0a      	ldr	r3, [pc, #40]	; (8004be8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	0c1b      	lsrs	r3, r3, #16
 8004bc2:	f003 0303 	and.w	r3, r3, #3
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	005b      	lsls	r3, r3, #1
 8004bca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd4:	60bb      	str	r3, [r7, #8]
      break;
 8004bd6:	e002      	b.n	8004bde <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bd8:	4b04      	ldr	r3, [pc, #16]	; (8004bec <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004bda:	60bb      	str	r3, [r7, #8]
      break;
 8004bdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bde:	68bb      	ldr	r3, [r7, #8]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004be8:	40023800 	.word	0x40023800
 8004bec:	00f42400 	.word	0x00f42400
 8004bf0:	007a1200 	.word	0x007a1200

08004bf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bf8:	4b03      	ldr	r3, [pc, #12]	; (8004c08 <HAL_RCC_GetHCLKFreq+0x14>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	200000a0 	.word	0x200000a0

08004c0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004c10:	f7ff fff0 	bl	8004bf4 <HAL_RCC_GetHCLKFreq>
 8004c14:	4601      	mov	r1, r0
 8004c16:	4b05      	ldr	r3, [pc, #20]	; (8004c2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	0a9b      	lsrs	r3, r3, #10
 8004c1c:	f003 0307 	and.w	r3, r3, #7
 8004c20:	4a03      	ldr	r2, [pc, #12]	; (8004c30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c22:	5cd3      	ldrb	r3, [r2, r3]
 8004c24:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	08007db8 	.word	0x08007db8

08004c34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004c38:	f7ff ffdc 	bl	8004bf4 <HAL_RCC_GetHCLKFreq>
 8004c3c:	4601      	mov	r1, r0
 8004c3e:	4b05      	ldr	r3, [pc, #20]	; (8004c54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	0b5b      	lsrs	r3, r3, #13
 8004c44:	f003 0307 	and.w	r3, r3, #7
 8004c48:	4a03      	ldr	r2, [pc, #12]	; (8004c58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c4a:	5cd3      	ldrb	r3, [r2, r3]
 8004c4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	40023800 	.word	0x40023800
 8004c58:	08007db8 	.word	0x08007db8

08004c5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b082      	sub	sp, #8
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d101      	bne.n	8004c6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e03f      	b.n	8004cee <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c74:	b2db      	uxtb	r3, r3
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d106      	bne.n	8004c88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f837 	bl	8004cf6 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2224      	movs	r2, #36	; 0x24
 8004c8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68da      	ldr	r2, [r3, #12]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f000 f915 	bl	8004ed0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	691a      	ldr	r2, [r3, #16]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004cb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	695a      	ldr	r2, [r3, #20]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	68da      	ldr	r2, [r3, #12]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_UART_MspInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004cf6:	b480      	push	{r7}
 8004cf8:	b083      	sub	sp, #12
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */
}
 8004cfe:	bf00      	nop
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr

08004d0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b088      	sub	sp, #32
 8004d0e:	af02      	add	r7, sp, #8
 8004d10:	60f8      	str	r0, [r7, #12]
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	603b      	str	r3, [r7, #0]
 8004d16:	4613      	mov	r3, r2
 8004d18:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b20      	cmp	r3, #32
 8004d28:	f040 8083 	bne.w	8004e32 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <HAL_UART_Transmit+0x2e>
 8004d32:	88fb      	ldrh	r3, [r7, #6]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e07b      	b.n	8004e34 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d101      	bne.n	8004d4a <HAL_UART_Transmit+0x40>
 8004d46:	2302      	movs	r3, #2
 8004d48:	e074      	b.n	8004e34 <HAL_UART_Transmit+0x12a>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2221      	movs	r2, #33	; 0x21
 8004d5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004d60:	f7fd fee8 	bl	8002b34 <HAL_GetTick>
 8004d64:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	88fa      	ldrh	r2, [r7, #6]
 8004d6a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	88fa      	ldrh	r2, [r7, #6]
 8004d70:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004d7a:	e042      	b.n	8004e02 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	3b01      	subs	r3, #1
 8004d84:	b29a      	uxth	r2, r3
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d92:	d122      	bne.n	8004dda <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	9300      	str	r3, [sp, #0]
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	2180      	movs	r1, #128	; 0x80
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 f84c 	bl	8004e3c <UART_WaitOnFlagUntilTimeout>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e042      	b.n	8004e34 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	881b      	ldrh	r3, [r3, #0]
 8004db6:	461a      	mov	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dc0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d103      	bne.n	8004dd2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	3302      	adds	r3, #2
 8004dce:	60bb      	str	r3, [r7, #8]
 8004dd0:	e017      	b.n	8004e02 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	60bb      	str	r3, [r7, #8]
 8004dd8:	e013      	b.n	8004e02 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	2200      	movs	r2, #0
 8004de2:	2180      	movs	r1, #128	; 0x80
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f000 f829 	bl	8004e3c <UART_WaitOnFlagUntilTimeout>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d001      	beq.n	8004df4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e01f      	b.n	8004e34 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	1c5a      	adds	r2, r3, #1
 8004df8:	60ba      	str	r2, [r7, #8]
 8004dfa:	781a      	ldrb	r2, [r3, #0]
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1b7      	bne.n	8004d7c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2200      	movs	r2, #0
 8004e14:	2140      	movs	r1, #64	; 0x40
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 f810 	bl	8004e3c <UART_WaitOnFlagUntilTimeout>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e006      	b.n	8004e34 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	e000      	b.n	8004e34 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004e32:	2302      	movs	r3, #2
  }
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3718      	adds	r7, #24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	603b      	str	r3, [r7, #0]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e4c:	e02c      	b.n	8004ea8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e54:	d028      	beq.n	8004ea8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e56:	69bb      	ldr	r3, [r7, #24]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d007      	beq.n	8004e6c <UART_WaitOnFlagUntilTimeout+0x30>
 8004e5c:	f7fd fe6a 	bl	8002b34 <HAL_GetTick>
 8004e60:	4602      	mov	r2, r0
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	1ad3      	subs	r3, r2, r3
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d21d      	bcs.n	8004ea8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	68da      	ldr	r2, [r3, #12]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e7a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	695a      	ldr	r2, [r3, #20]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f022 0201 	bic.w	r2, r2, #1
 8004e8a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2220      	movs	r2, #32
 8004e98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004ea4:	2303      	movs	r3, #3
 8004ea6:	e00f      	b.n	8004ec8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	4013      	ands	r3, r2
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	bf0c      	ite	eq
 8004eb8:	2301      	moveq	r3, #1
 8004eba:	2300      	movne	r3, #0
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	79fb      	ldrb	r3, [r7, #7]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d0c3      	beq.n	8004e4e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3710      	adds	r7, #16
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed4:	b085      	sub	sp, #20
 8004ed6:	af00      	add	r7, sp, #0
 8004ed8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	68da      	ldr	r2, [r3, #12]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	430a      	orrs	r2, r1
 8004eee:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004f12:	f023 030c 	bic.w	r3, r3, #12
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6812      	ldr	r2, [r2, #0]
 8004f1a:	68f9      	ldr	r1, [r7, #12]
 8004f1c:	430b      	orrs	r3, r1
 8004f1e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	699a      	ldr	r2, [r3, #24]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	430a      	orrs	r2, r1
 8004f34:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	69db      	ldr	r3, [r3, #28]
 8004f3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f3e:	f040 818b 	bne.w	8005258 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4ac1      	ldr	r2, [pc, #772]	; (800524c <UART_SetConfig+0x37c>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d005      	beq.n	8004f58 <UART_SetConfig+0x88>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4abf      	ldr	r2, [pc, #764]	; (8005250 <UART_SetConfig+0x380>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	f040 80bd 	bne.w	80050d2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f58:	f7ff fe6c 	bl	8004c34 <HAL_RCC_GetPCLK2Freq>
 8004f5c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	461d      	mov	r5, r3
 8004f62:	f04f 0600 	mov.w	r6, #0
 8004f66:	46a8      	mov	r8, r5
 8004f68:	46b1      	mov	r9, r6
 8004f6a:	eb18 0308 	adds.w	r3, r8, r8
 8004f6e:	eb49 0409 	adc.w	r4, r9, r9
 8004f72:	4698      	mov	r8, r3
 8004f74:	46a1      	mov	r9, r4
 8004f76:	eb18 0805 	adds.w	r8, r8, r5
 8004f7a:	eb49 0906 	adc.w	r9, r9, r6
 8004f7e:	f04f 0100 	mov.w	r1, #0
 8004f82:	f04f 0200 	mov.w	r2, #0
 8004f86:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004f8a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004f8e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004f92:	4688      	mov	r8, r1
 8004f94:	4691      	mov	r9, r2
 8004f96:	eb18 0005 	adds.w	r0, r8, r5
 8004f9a:	eb49 0106 	adc.w	r1, r9, r6
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	461d      	mov	r5, r3
 8004fa4:	f04f 0600 	mov.w	r6, #0
 8004fa8:	196b      	adds	r3, r5, r5
 8004faa:	eb46 0406 	adc.w	r4, r6, r6
 8004fae:	461a      	mov	r2, r3
 8004fb0:	4623      	mov	r3, r4
 8004fb2:	f7fb f965 	bl	8000280 <__aeabi_uldivmod>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	460c      	mov	r4, r1
 8004fba:	461a      	mov	r2, r3
 8004fbc:	4ba5      	ldr	r3, [pc, #660]	; (8005254 <UART_SetConfig+0x384>)
 8004fbe:	fba3 2302 	umull	r2, r3, r3, r2
 8004fc2:	095b      	lsrs	r3, r3, #5
 8004fc4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	461d      	mov	r5, r3
 8004fcc:	f04f 0600 	mov.w	r6, #0
 8004fd0:	46a9      	mov	r9, r5
 8004fd2:	46b2      	mov	sl, r6
 8004fd4:	eb19 0309 	adds.w	r3, r9, r9
 8004fd8:	eb4a 040a 	adc.w	r4, sl, sl
 8004fdc:	4699      	mov	r9, r3
 8004fde:	46a2      	mov	sl, r4
 8004fe0:	eb19 0905 	adds.w	r9, r9, r5
 8004fe4:	eb4a 0a06 	adc.w	sl, sl, r6
 8004fe8:	f04f 0100 	mov.w	r1, #0
 8004fec:	f04f 0200 	mov.w	r2, #0
 8004ff0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ff4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ff8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004ffc:	4689      	mov	r9, r1
 8004ffe:	4692      	mov	sl, r2
 8005000:	eb19 0005 	adds.w	r0, r9, r5
 8005004:	eb4a 0106 	adc.w	r1, sl, r6
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	461d      	mov	r5, r3
 800500e:	f04f 0600 	mov.w	r6, #0
 8005012:	196b      	adds	r3, r5, r5
 8005014:	eb46 0406 	adc.w	r4, r6, r6
 8005018:	461a      	mov	r2, r3
 800501a:	4623      	mov	r3, r4
 800501c:	f7fb f930 	bl	8000280 <__aeabi_uldivmod>
 8005020:	4603      	mov	r3, r0
 8005022:	460c      	mov	r4, r1
 8005024:	461a      	mov	r2, r3
 8005026:	4b8b      	ldr	r3, [pc, #556]	; (8005254 <UART_SetConfig+0x384>)
 8005028:	fba3 1302 	umull	r1, r3, r3, r2
 800502c:	095b      	lsrs	r3, r3, #5
 800502e:	2164      	movs	r1, #100	; 0x64
 8005030:	fb01 f303 	mul.w	r3, r1, r3
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	3332      	adds	r3, #50	; 0x32
 800503a:	4a86      	ldr	r2, [pc, #536]	; (8005254 <UART_SetConfig+0x384>)
 800503c:	fba2 2303 	umull	r2, r3, r2, r3
 8005040:	095b      	lsrs	r3, r3, #5
 8005042:	005b      	lsls	r3, r3, #1
 8005044:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005048:	4498      	add	r8, r3
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	461d      	mov	r5, r3
 800504e:	f04f 0600 	mov.w	r6, #0
 8005052:	46a9      	mov	r9, r5
 8005054:	46b2      	mov	sl, r6
 8005056:	eb19 0309 	adds.w	r3, r9, r9
 800505a:	eb4a 040a 	adc.w	r4, sl, sl
 800505e:	4699      	mov	r9, r3
 8005060:	46a2      	mov	sl, r4
 8005062:	eb19 0905 	adds.w	r9, r9, r5
 8005066:	eb4a 0a06 	adc.w	sl, sl, r6
 800506a:	f04f 0100 	mov.w	r1, #0
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005076:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800507a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800507e:	4689      	mov	r9, r1
 8005080:	4692      	mov	sl, r2
 8005082:	eb19 0005 	adds.w	r0, r9, r5
 8005086:	eb4a 0106 	adc.w	r1, sl, r6
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	461d      	mov	r5, r3
 8005090:	f04f 0600 	mov.w	r6, #0
 8005094:	196b      	adds	r3, r5, r5
 8005096:	eb46 0406 	adc.w	r4, r6, r6
 800509a:	461a      	mov	r2, r3
 800509c:	4623      	mov	r3, r4
 800509e:	f7fb f8ef 	bl	8000280 <__aeabi_uldivmod>
 80050a2:	4603      	mov	r3, r0
 80050a4:	460c      	mov	r4, r1
 80050a6:	461a      	mov	r2, r3
 80050a8:	4b6a      	ldr	r3, [pc, #424]	; (8005254 <UART_SetConfig+0x384>)
 80050aa:	fba3 1302 	umull	r1, r3, r3, r2
 80050ae:	095b      	lsrs	r3, r3, #5
 80050b0:	2164      	movs	r1, #100	; 0x64
 80050b2:	fb01 f303 	mul.w	r3, r1, r3
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	00db      	lsls	r3, r3, #3
 80050ba:	3332      	adds	r3, #50	; 0x32
 80050bc:	4a65      	ldr	r2, [pc, #404]	; (8005254 <UART_SetConfig+0x384>)
 80050be:	fba2 2303 	umull	r2, r3, r2, r3
 80050c2:	095b      	lsrs	r3, r3, #5
 80050c4:	f003 0207 	and.w	r2, r3, #7
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4442      	add	r2, r8
 80050ce:	609a      	str	r2, [r3, #8]
 80050d0:	e26f      	b.n	80055b2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050d2:	f7ff fd9b 	bl	8004c0c <HAL_RCC_GetPCLK1Freq>
 80050d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	461d      	mov	r5, r3
 80050dc:	f04f 0600 	mov.w	r6, #0
 80050e0:	46a8      	mov	r8, r5
 80050e2:	46b1      	mov	r9, r6
 80050e4:	eb18 0308 	adds.w	r3, r8, r8
 80050e8:	eb49 0409 	adc.w	r4, r9, r9
 80050ec:	4698      	mov	r8, r3
 80050ee:	46a1      	mov	r9, r4
 80050f0:	eb18 0805 	adds.w	r8, r8, r5
 80050f4:	eb49 0906 	adc.w	r9, r9, r6
 80050f8:	f04f 0100 	mov.w	r1, #0
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005104:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005108:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800510c:	4688      	mov	r8, r1
 800510e:	4691      	mov	r9, r2
 8005110:	eb18 0005 	adds.w	r0, r8, r5
 8005114:	eb49 0106 	adc.w	r1, r9, r6
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	461d      	mov	r5, r3
 800511e:	f04f 0600 	mov.w	r6, #0
 8005122:	196b      	adds	r3, r5, r5
 8005124:	eb46 0406 	adc.w	r4, r6, r6
 8005128:	461a      	mov	r2, r3
 800512a:	4623      	mov	r3, r4
 800512c:	f7fb f8a8 	bl	8000280 <__aeabi_uldivmod>
 8005130:	4603      	mov	r3, r0
 8005132:	460c      	mov	r4, r1
 8005134:	461a      	mov	r2, r3
 8005136:	4b47      	ldr	r3, [pc, #284]	; (8005254 <UART_SetConfig+0x384>)
 8005138:	fba3 2302 	umull	r2, r3, r3, r2
 800513c:	095b      	lsrs	r3, r3, #5
 800513e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005142:	68bb      	ldr	r3, [r7, #8]
 8005144:	461d      	mov	r5, r3
 8005146:	f04f 0600 	mov.w	r6, #0
 800514a:	46a9      	mov	r9, r5
 800514c:	46b2      	mov	sl, r6
 800514e:	eb19 0309 	adds.w	r3, r9, r9
 8005152:	eb4a 040a 	adc.w	r4, sl, sl
 8005156:	4699      	mov	r9, r3
 8005158:	46a2      	mov	sl, r4
 800515a:	eb19 0905 	adds.w	r9, r9, r5
 800515e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005162:	f04f 0100 	mov.w	r1, #0
 8005166:	f04f 0200 	mov.w	r2, #0
 800516a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800516e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005172:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005176:	4689      	mov	r9, r1
 8005178:	4692      	mov	sl, r2
 800517a:	eb19 0005 	adds.w	r0, r9, r5
 800517e:	eb4a 0106 	adc.w	r1, sl, r6
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	461d      	mov	r5, r3
 8005188:	f04f 0600 	mov.w	r6, #0
 800518c:	196b      	adds	r3, r5, r5
 800518e:	eb46 0406 	adc.w	r4, r6, r6
 8005192:	461a      	mov	r2, r3
 8005194:	4623      	mov	r3, r4
 8005196:	f7fb f873 	bl	8000280 <__aeabi_uldivmod>
 800519a:	4603      	mov	r3, r0
 800519c:	460c      	mov	r4, r1
 800519e:	461a      	mov	r2, r3
 80051a0:	4b2c      	ldr	r3, [pc, #176]	; (8005254 <UART_SetConfig+0x384>)
 80051a2:	fba3 1302 	umull	r1, r3, r3, r2
 80051a6:	095b      	lsrs	r3, r3, #5
 80051a8:	2164      	movs	r1, #100	; 0x64
 80051aa:	fb01 f303 	mul.w	r3, r1, r3
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	00db      	lsls	r3, r3, #3
 80051b2:	3332      	adds	r3, #50	; 0x32
 80051b4:	4a27      	ldr	r2, [pc, #156]	; (8005254 <UART_SetConfig+0x384>)
 80051b6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ba:	095b      	lsrs	r3, r3, #5
 80051bc:	005b      	lsls	r3, r3, #1
 80051be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051c2:	4498      	add	r8, r3
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	461d      	mov	r5, r3
 80051c8:	f04f 0600 	mov.w	r6, #0
 80051cc:	46a9      	mov	r9, r5
 80051ce:	46b2      	mov	sl, r6
 80051d0:	eb19 0309 	adds.w	r3, r9, r9
 80051d4:	eb4a 040a 	adc.w	r4, sl, sl
 80051d8:	4699      	mov	r9, r3
 80051da:	46a2      	mov	sl, r4
 80051dc:	eb19 0905 	adds.w	r9, r9, r5
 80051e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80051e4:	f04f 0100 	mov.w	r1, #0
 80051e8:	f04f 0200 	mov.w	r2, #0
 80051ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051f8:	4689      	mov	r9, r1
 80051fa:	4692      	mov	sl, r2
 80051fc:	eb19 0005 	adds.w	r0, r9, r5
 8005200:	eb4a 0106 	adc.w	r1, sl, r6
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	461d      	mov	r5, r3
 800520a:	f04f 0600 	mov.w	r6, #0
 800520e:	196b      	adds	r3, r5, r5
 8005210:	eb46 0406 	adc.w	r4, r6, r6
 8005214:	461a      	mov	r2, r3
 8005216:	4623      	mov	r3, r4
 8005218:	f7fb f832 	bl	8000280 <__aeabi_uldivmod>
 800521c:	4603      	mov	r3, r0
 800521e:	460c      	mov	r4, r1
 8005220:	461a      	mov	r2, r3
 8005222:	4b0c      	ldr	r3, [pc, #48]	; (8005254 <UART_SetConfig+0x384>)
 8005224:	fba3 1302 	umull	r1, r3, r3, r2
 8005228:	095b      	lsrs	r3, r3, #5
 800522a:	2164      	movs	r1, #100	; 0x64
 800522c:	fb01 f303 	mul.w	r3, r1, r3
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	3332      	adds	r3, #50	; 0x32
 8005236:	4a07      	ldr	r2, [pc, #28]	; (8005254 <UART_SetConfig+0x384>)
 8005238:	fba2 2303 	umull	r2, r3, r2, r3
 800523c:	095b      	lsrs	r3, r3, #5
 800523e:	f003 0207 	and.w	r2, r3, #7
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4442      	add	r2, r8
 8005248:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800524a:	e1b2      	b.n	80055b2 <UART_SetConfig+0x6e2>
 800524c:	40011000 	.word	0x40011000
 8005250:	40011400 	.word	0x40011400
 8005254:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4ad7      	ldr	r2, [pc, #860]	; (80055bc <UART_SetConfig+0x6ec>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d005      	beq.n	800526e <UART_SetConfig+0x39e>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4ad6      	ldr	r2, [pc, #856]	; (80055c0 <UART_SetConfig+0x6f0>)
 8005268:	4293      	cmp	r3, r2
 800526a:	f040 80d1 	bne.w	8005410 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800526e:	f7ff fce1 	bl	8004c34 <HAL_RCC_GetPCLK2Freq>
 8005272:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	469a      	mov	sl, r3
 8005278:	f04f 0b00 	mov.w	fp, #0
 800527c:	46d0      	mov	r8, sl
 800527e:	46d9      	mov	r9, fp
 8005280:	eb18 0308 	adds.w	r3, r8, r8
 8005284:	eb49 0409 	adc.w	r4, r9, r9
 8005288:	4698      	mov	r8, r3
 800528a:	46a1      	mov	r9, r4
 800528c:	eb18 080a 	adds.w	r8, r8, sl
 8005290:	eb49 090b 	adc.w	r9, r9, fp
 8005294:	f04f 0100 	mov.w	r1, #0
 8005298:	f04f 0200 	mov.w	r2, #0
 800529c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80052a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80052a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80052a8:	4688      	mov	r8, r1
 80052aa:	4691      	mov	r9, r2
 80052ac:	eb1a 0508 	adds.w	r5, sl, r8
 80052b0:	eb4b 0609 	adc.w	r6, fp, r9
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	4619      	mov	r1, r3
 80052ba:	f04f 0200 	mov.w	r2, #0
 80052be:	f04f 0300 	mov.w	r3, #0
 80052c2:	f04f 0400 	mov.w	r4, #0
 80052c6:	0094      	lsls	r4, r2, #2
 80052c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80052cc:	008b      	lsls	r3, r1, #2
 80052ce:	461a      	mov	r2, r3
 80052d0:	4623      	mov	r3, r4
 80052d2:	4628      	mov	r0, r5
 80052d4:	4631      	mov	r1, r6
 80052d6:	f7fa ffd3 	bl	8000280 <__aeabi_uldivmod>
 80052da:	4603      	mov	r3, r0
 80052dc:	460c      	mov	r4, r1
 80052de:	461a      	mov	r2, r3
 80052e0:	4bb8      	ldr	r3, [pc, #736]	; (80055c4 <UART_SetConfig+0x6f4>)
 80052e2:	fba3 2302 	umull	r2, r3, r3, r2
 80052e6:	095b      	lsrs	r3, r3, #5
 80052e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	469b      	mov	fp, r3
 80052f0:	f04f 0c00 	mov.w	ip, #0
 80052f4:	46d9      	mov	r9, fp
 80052f6:	46e2      	mov	sl, ip
 80052f8:	eb19 0309 	adds.w	r3, r9, r9
 80052fc:	eb4a 040a 	adc.w	r4, sl, sl
 8005300:	4699      	mov	r9, r3
 8005302:	46a2      	mov	sl, r4
 8005304:	eb19 090b 	adds.w	r9, r9, fp
 8005308:	eb4a 0a0c 	adc.w	sl, sl, ip
 800530c:	f04f 0100 	mov.w	r1, #0
 8005310:	f04f 0200 	mov.w	r2, #0
 8005314:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005318:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800531c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005320:	4689      	mov	r9, r1
 8005322:	4692      	mov	sl, r2
 8005324:	eb1b 0509 	adds.w	r5, fp, r9
 8005328:	eb4c 060a 	adc.w	r6, ip, sl
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	4619      	mov	r1, r3
 8005332:	f04f 0200 	mov.w	r2, #0
 8005336:	f04f 0300 	mov.w	r3, #0
 800533a:	f04f 0400 	mov.w	r4, #0
 800533e:	0094      	lsls	r4, r2, #2
 8005340:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005344:	008b      	lsls	r3, r1, #2
 8005346:	461a      	mov	r2, r3
 8005348:	4623      	mov	r3, r4
 800534a:	4628      	mov	r0, r5
 800534c:	4631      	mov	r1, r6
 800534e:	f7fa ff97 	bl	8000280 <__aeabi_uldivmod>
 8005352:	4603      	mov	r3, r0
 8005354:	460c      	mov	r4, r1
 8005356:	461a      	mov	r2, r3
 8005358:	4b9a      	ldr	r3, [pc, #616]	; (80055c4 <UART_SetConfig+0x6f4>)
 800535a:	fba3 1302 	umull	r1, r3, r3, r2
 800535e:	095b      	lsrs	r3, r3, #5
 8005360:	2164      	movs	r1, #100	; 0x64
 8005362:	fb01 f303 	mul.w	r3, r1, r3
 8005366:	1ad3      	subs	r3, r2, r3
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	3332      	adds	r3, #50	; 0x32
 800536c:	4a95      	ldr	r2, [pc, #596]	; (80055c4 <UART_SetConfig+0x6f4>)
 800536e:	fba2 2303 	umull	r2, r3, r2, r3
 8005372:	095b      	lsrs	r3, r3, #5
 8005374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005378:	4498      	add	r8, r3
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	469b      	mov	fp, r3
 800537e:	f04f 0c00 	mov.w	ip, #0
 8005382:	46d9      	mov	r9, fp
 8005384:	46e2      	mov	sl, ip
 8005386:	eb19 0309 	adds.w	r3, r9, r9
 800538a:	eb4a 040a 	adc.w	r4, sl, sl
 800538e:	4699      	mov	r9, r3
 8005390:	46a2      	mov	sl, r4
 8005392:	eb19 090b 	adds.w	r9, r9, fp
 8005396:	eb4a 0a0c 	adc.w	sl, sl, ip
 800539a:	f04f 0100 	mov.w	r1, #0
 800539e:	f04f 0200 	mov.w	r2, #0
 80053a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80053aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80053ae:	4689      	mov	r9, r1
 80053b0:	4692      	mov	sl, r2
 80053b2:	eb1b 0509 	adds.w	r5, fp, r9
 80053b6:	eb4c 060a 	adc.w	r6, ip, sl
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	4619      	mov	r1, r3
 80053c0:	f04f 0200 	mov.w	r2, #0
 80053c4:	f04f 0300 	mov.w	r3, #0
 80053c8:	f04f 0400 	mov.w	r4, #0
 80053cc:	0094      	lsls	r4, r2, #2
 80053ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80053d2:	008b      	lsls	r3, r1, #2
 80053d4:	461a      	mov	r2, r3
 80053d6:	4623      	mov	r3, r4
 80053d8:	4628      	mov	r0, r5
 80053da:	4631      	mov	r1, r6
 80053dc:	f7fa ff50 	bl	8000280 <__aeabi_uldivmod>
 80053e0:	4603      	mov	r3, r0
 80053e2:	460c      	mov	r4, r1
 80053e4:	461a      	mov	r2, r3
 80053e6:	4b77      	ldr	r3, [pc, #476]	; (80055c4 <UART_SetConfig+0x6f4>)
 80053e8:	fba3 1302 	umull	r1, r3, r3, r2
 80053ec:	095b      	lsrs	r3, r3, #5
 80053ee:	2164      	movs	r1, #100	; 0x64
 80053f0:	fb01 f303 	mul.w	r3, r1, r3
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	011b      	lsls	r3, r3, #4
 80053f8:	3332      	adds	r3, #50	; 0x32
 80053fa:	4a72      	ldr	r2, [pc, #456]	; (80055c4 <UART_SetConfig+0x6f4>)
 80053fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005400:	095b      	lsrs	r3, r3, #5
 8005402:	f003 020f 	and.w	r2, r3, #15
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4442      	add	r2, r8
 800540c:	609a      	str	r2, [r3, #8]
 800540e:	e0d0      	b.n	80055b2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005410:	f7ff fbfc 	bl	8004c0c <HAL_RCC_GetPCLK1Freq>
 8005414:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	469a      	mov	sl, r3
 800541a:	f04f 0b00 	mov.w	fp, #0
 800541e:	46d0      	mov	r8, sl
 8005420:	46d9      	mov	r9, fp
 8005422:	eb18 0308 	adds.w	r3, r8, r8
 8005426:	eb49 0409 	adc.w	r4, r9, r9
 800542a:	4698      	mov	r8, r3
 800542c:	46a1      	mov	r9, r4
 800542e:	eb18 080a 	adds.w	r8, r8, sl
 8005432:	eb49 090b 	adc.w	r9, r9, fp
 8005436:	f04f 0100 	mov.w	r1, #0
 800543a:	f04f 0200 	mov.w	r2, #0
 800543e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005442:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005446:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800544a:	4688      	mov	r8, r1
 800544c:	4691      	mov	r9, r2
 800544e:	eb1a 0508 	adds.w	r5, sl, r8
 8005452:	eb4b 0609 	adc.w	r6, fp, r9
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	4619      	mov	r1, r3
 800545c:	f04f 0200 	mov.w	r2, #0
 8005460:	f04f 0300 	mov.w	r3, #0
 8005464:	f04f 0400 	mov.w	r4, #0
 8005468:	0094      	lsls	r4, r2, #2
 800546a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800546e:	008b      	lsls	r3, r1, #2
 8005470:	461a      	mov	r2, r3
 8005472:	4623      	mov	r3, r4
 8005474:	4628      	mov	r0, r5
 8005476:	4631      	mov	r1, r6
 8005478:	f7fa ff02 	bl	8000280 <__aeabi_uldivmod>
 800547c:	4603      	mov	r3, r0
 800547e:	460c      	mov	r4, r1
 8005480:	461a      	mov	r2, r3
 8005482:	4b50      	ldr	r3, [pc, #320]	; (80055c4 <UART_SetConfig+0x6f4>)
 8005484:	fba3 2302 	umull	r2, r3, r3, r2
 8005488:	095b      	lsrs	r3, r3, #5
 800548a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	469b      	mov	fp, r3
 8005492:	f04f 0c00 	mov.w	ip, #0
 8005496:	46d9      	mov	r9, fp
 8005498:	46e2      	mov	sl, ip
 800549a:	eb19 0309 	adds.w	r3, r9, r9
 800549e:	eb4a 040a 	adc.w	r4, sl, sl
 80054a2:	4699      	mov	r9, r3
 80054a4:	46a2      	mov	sl, r4
 80054a6:	eb19 090b 	adds.w	r9, r9, fp
 80054aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80054ae:	f04f 0100 	mov.w	r1, #0
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80054be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80054c2:	4689      	mov	r9, r1
 80054c4:	4692      	mov	sl, r2
 80054c6:	eb1b 0509 	adds.w	r5, fp, r9
 80054ca:	eb4c 060a 	adc.w	r6, ip, sl
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	4619      	mov	r1, r3
 80054d4:	f04f 0200 	mov.w	r2, #0
 80054d8:	f04f 0300 	mov.w	r3, #0
 80054dc:	f04f 0400 	mov.w	r4, #0
 80054e0:	0094      	lsls	r4, r2, #2
 80054e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80054e6:	008b      	lsls	r3, r1, #2
 80054e8:	461a      	mov	r2, r3
 80054ea:	4623      	mov	r3, r4
 80054ec:	4628      	mov	r0, r5
 80054ee:	4631      	mov	r1, r6
 80054f0:	f7fa fec6 	bl	8000280 <__aeabi_uldivmod>
 80054f4:	4603      	mov	r3, r0
 80054f6:	460c      	mov	r4, r1
 80054f8:	461a      	mov	r2, r3
 80054fa:	4b32      	ldr	r3, [pc, #200]	; (80055c4 <UART_SetConfig+0x6f4>)
 80054fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005500:	095b      	lsrs	r3, r3, #5
 8005502:	2164      	movs	r1, #100	; 0x64
 8005504:	fb01 f303 	mul.w	r3, r1, r3
 8005508:	1ad3      	subs	r3, r2, r3
 800550a:	011b      	lsls	r3, r3, #4
 800550c:	3332      	adds	r3, #50	; 0x32
 800550e:	4a2d      	ldr	r2, [pc, #180]	; (80055c4 <UART_SetConfig+0x6f4>)
 8005510:	fba2 2303 	umull	r2, r3, r2, r3
 8005514:	095b      	lsrs	r3, r3, #5
 8005516:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800551a:	4498      	add	r8, r3
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	469b      	mov	fp, r3
 8005520:	f04f 0c00 	mov.w	ip, #0
 8005524:	46d9      	mov	r9, fp
 8005526:	46e2      	mov	sl, ip
 8005528:	eb19 0309 	adds.w	r3, r9, r9
 800552c:	eb4a 040a 	adc.w	r4, sl, sl
 8005530:	4699      	mov	r9, r3
 8005532:	46a2      	mov	sl, r4
 8005534:	eb19 090b 	adds.w	r9, r9, fp
 8005538:	eb4a 0a0c 	adc.w	sl, sl, ip
 800553c:	f04f 0100 	mov.w	r1, #0
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005548:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800554c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005550:	4689      	mov	r9, r1
 8005552:	4692      	mov	sl, r2
 8005554:	eb1b 0509 	adds.w	r5, fp, r9
 8005558:	eb4c 060a 	adc.w	r6, ip, sl
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	4619      	mov	r1, r3
 8005562:	f04f 0200 	mov.w	r2, #0
 8005566:	f04f 0300 	mov.w	r3, #0
 800556a:	f04f 0400 	mov.w	r4, #0
 800556e:	0094      	lsls	r4, r2, #2
 8005570:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005574:	008b      	lsls	r3, r1, #2
 8005576:	461a      	mov	r2, r3
 8005578:	4623      	mov	r3, r4
 800557a:	4628      	mov	r0, r5
 800557c:	4631      	mov	r1, r6
 800557e:	f7fa fe7f 	bl	8000280 <__aeabi_uldivmod>
 8005582:	4603      	mov	r3, r0
 8005584:	460c      	mov	r4, r1
 8005586:	461a      	mov	r2, r3
 8005588:	4b0e      	ldr	r3, [pc, #56]	; (80055c4 <UART_SetConfig+0x6f4>)
 800558a:	fba3 1302 	umull	r1, r3, r3, r2
 800558e:	095b      	lsrs	r3, r3, #5
 8005590:	2164      	movs	r1, #100	; 0x64
 8005592:	fb01 f303 	mul.w	r3, r1, r3
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	011b      	lsls	r3, r3, #4
 800559a:	3332      	adds	r3, #50	; 0x32
 800559c:	4a09      	ldr	r2, [pc, #36]	; (80055c4 <UART_SetConfig+0x6f4>)
 800559e:	fba2 2303 	umull	r2, r3, r2, r3
 80055a2:	095b      	lsrs	r3, r3, #5
 80055a4:	f003 020f 	and.w	r2, r3, #15
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4442      	add	r2, r8
 80055ae:	609a      	str	r2, [r3, #8]
}
 80055b0:	e7ff      	b.n	80055b2 <UART_SetConfig+0x6e2>
 80055b2:	bf00      	nop
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055bc:	40011000 	.word	0x40011000
 80055c0:	40011400 	.word	0x40011400
 80055c4:	51eb851f 	.word	0x51eb851f

080055c8 <MX_MEMS_Init>:
static int32_t LSM6DSO_G_SelfTest(void);
static int32_t LSM6DSO_X_Get_Data(CUSTOM_MOTION_SENSOR_Axes_t *data);
static int32_t LSM6DSO_G_Get_Data(CUSTOM_MOTION_SENSOR_Axes_t *data);

void MX_MEMS_Init(void)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	af00      	add	r7, sp, #0

  /* USER CODE END MEMS_Init_PreTreatment */

  /* Initialize the peripherals and the MEMS components */

  MX_LSM6DSO_SelfTest_Init();
 80055cc:	f000 f808 	bl	80055e0 <MX_LSM6DSO_SelfTest_Init>

  /* USER CODE BEGIN MEMS_Init_PostTreatment */

  /* USER CODE END MEMS_Init_PostTreatment */
}
 80055d0:	bf00      	nop
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <MX_MEMS_Process>:

/*
 * LM background task
 */
void MX_MEMS_Process(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MEMS_Process_PreTreatment */

  /* USER CODE END MEMS_Process_PreTreatment */

  MX_LSM6DSO_SelfTest_Process();
 80055d8:	f000 f848 	bl	800566c <MX_LSM6DSO_SelfTest_Process>

  /* USER CODE BEGIN MEMS_Process_PostTreatment */

  /* USER CODE END MEMS_Process_PostTreatment */
}
 80055dc:	bf00      	nop
 80055de:	bd80      	pop	{r7, pc}

080055e0 <MX_LSM6DSO_SelfTest_Init>:
/**
  * @brief  Initialize the LSM6DSO Self Test application
  * @retval None
  */
void MX_LSM6DSO_SelfTest_Init(void)
{
 80055e0:	b5b0      	push	{r4, r5, r7, lr}
 80055e2:	af00      	add	r7, sp, #0
  /* Initialize LED */
  BSP_LED_Init(LED2);
 80055e4:	2000      	movs	r0, #0
 80055e6:	f7fd f847 	bl	8002678 <BSP_LED_Init>

  /* Initialize button */
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80055ea:	2101      	movs	r1, #1
 80055ec:	2000      	movs	r0, #0
 80055ee:	f7fd f8c3 	bl	8002778 <BSP_PB_Init>

  /* Check what is the Push Button State when the button is not pressed. It can change across families */
  PushButtonState = (BSP_PB_GetState(BUTTON_KEY)) ?  0 : 1;
 80055f2:	2000      	movs	r0, #0
 80055f4:	f7fd f914 	bl	8002820 <BSP_PB_GetState>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	bf0c      	ite	eq
 80055fe:	2301      	moveq	r3, #1
 8005600:	2300      	movne	r3, #0
 8005602:	b2db      	uxtb	r3, r3
 8005604:	461a      	mov	r2, r3
 8005606:	4b0d      	ldr	r3, [pc, #52]	; (800563c <MX_LSM6DSO_SelfTest_Init+0x5c>)
 8005608:	601a      	str	r2, [r3, #0]

  /* Initialize Virtual COM Port */
  BSP_COM_Init(COM1);
 800560a:	2000      	movs	r0, #0
 800560c:	f7fd f96a 	bl	80028e4 <BSP_COM_Init>

  (void)CUSTOM_MOTION_SENSOR_Init(CUSTOM_LSM6DSO_0, MOTION_ACCELERO | MOTION_GYRO);
 8005610:	2103      	movs	r1, #3
 8005612:	2000      	movs	r0, #0
 8005614:	f000 fad2 	bl	8005bbc <CUSTOM_MOTION_SENSOR_Init>

  (void)snprintf(dataOut, MAX_BUF_SIZE, "\r\n------ LSM6DSO self-test DEMO ------\r\n");
 8005618:	4a09      	ldr	r2, [pc, #36]	; (8005640 <MX_LSM6DSO_SelfTest_Init+0x60>)
 800561a:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <MX_LSM6DSO_SelfTest_Init+0x64>)
 800561c:	4614      	mov	r4, r2
 800561e:	461d      	mov	r5, r3
 8005620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005624:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005626:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005628:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800562c:	c403      	stmia	r4!, {r0, r1}
 800562e:	7022      	strb	r2, [r4, #0]
  printf("%s", dataOut);
 8005630:	4903      	ldr	r1, [pc, #12]	; (8005640 <MX_LSM6DSO_SelfTest_Init+0x60>)
 8005632:	4805      	ldr	r0, [pc, #20]	; (8005648 <MX_LSM6DSO_SelfTest_Init+0x68>)
 8005634:	f001 f924 	bl	8006880 <iprintf>
}
 8005638:	bf00      	nop
 800563a:	bdb0      	pop	{r4, r5, r7, pc}
 800563c:	20000228 	.word	0x20000228
 8005640:	20000128 	.word	0x20000128
 8005644:	080079fc 	.word	0x080079fc
 8005648:	08007a28 	.word	0x08007a28

0800564c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	4603      	mov	r3, r0
 8005654:	71fb      	strb	r3, [r7, #7]
  PushButtonDetected = 1;
 8005656:	4b04      	ldr	r3, [pc, #16]	; (8005668 <BSP_PB_Callback+0x1c>)
 8005658:	2201      	movs	r2, #1
 800565a:	701a      	strb	r2, [r3, #0]
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr
 8005668:	20000125 	.word	0x20000125

0800566c <MX_LSM6DSO_SelfTest_Process>:
/**
  * @brief  Process of the LSM6DSO Self Test application
  * @retval None
  */
void MX_LSM6DSO_SelfTest_Process(void)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	af00      	add	r7, sp, #0
	if (LSM6DSO_X_SelfTest() != BSP_ERROR_NONE)
 8005670:	f000 f808 	bl	8005684 <LSM6DSO_X_SelfTest>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d002      	beq.n	8005680 <MX_LSM6DSO_SelfTest_Process+0x14>
	      {
	        Error_Handler();
 800567a:	f000 fdff 	bl	800627c <Error_Handler>
	      }
	return;
 800567e:	bf00      	nop
 8005680:	bf00      	nop

    default:
      Error_Handler();
      break;
  }
}
 8005682:	bd80      	pop	{r7, pc}

08005684 <LSM6DSO_X_SelfTest>:
/**
  * @brief  Performs LSM6DSO accelerometer self-test
  * @retval BSP status
  */
static int32_t LSM6DSO_X_SelfTest(void)
{
 8005684:	b5b0      	push	{r4, r5, r7, lr}
 8005686:	b092      	sub	sp, #72	; 0x48
 8005688:	af02      	add	r7, sp, #8
  int32_t test_result = BSP_ERROR_NONE;
 800568a:	2300      	movs	r3, #0
 800568c:	63fb      	str	r3, [r7, #60]	; 0x3c
  CUSTOM_MOTION_SENSOR_Axes_t data_st;
  CUSTOM_MOTION_SENSOR_Axes_t data;
  uint8_t prev_reg_values[ST_REG_COUNT];
  int32_t ret;

  (void)snprintf(dataOut, MAX_BUF_SIZE, "\r\nStarting LSM6DSO accelerometer self-test ...\r\nKeep the device still!!!\r\n");
 800568e:	4a7e      	ldr	r2, [pc, #504]	; (8005888 <LSM6DSO_X_SelfTest+0x204>)
 8005690:	4b7e      	ldr	r3, [pc, #504]	; (800588c <LSM6DSO_X_SelfTest+0x208>)
 8005692:	4610      	mov	r0, r2
 8005694:	4619      	mov	r1, r3
 8005696:	234b      	movs	r3, #75	; 0x4b
 8005698:	461a      	mov	r2, r3
 800569a:	f001 f8dd 	bl	8006858 <memcpy>
  printf("%s", dataOut);
 800569e:	497a      	ldr	r1, [pc, #488]	; (8005888 <LSM6DSO_X_SelfTest+0x204>)
 80056a0:	487b      	ldr	r0, [pc, #492]	; (8005890 <LSM6DSO_X_SelfTest+0x20c>)
 80056a2:	f001 f8ed 	bl	8006880 <iprintf>

  HAL_Delay(INDICATION_DELAY);
 80056a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80056aa:	f7fd fa4f 	bl	8002b4c <HAL_Delay>
  BSP_LED_On(LED2);
 80056ae:	2000      	movs	r0, #0
 80056b0:	f7fc fff4 	bl	800269c <BSP_LED_On>

  /* Store current settings of the sensor */
  for (i = 0; i < ST_REG_COUNT; i++)
 80056b4:	2300      	movs	r3, #0
 80056b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80056b8:	e013      	b.n	80056e2 <LSM6DSO_X_SelfTest+0x5e>
  {
    if ((ret = CUSTOM_MOTION_SENSOR_Read_Register(CUSTOM_LSM6DSO_0, reg_addr[i], &prev_reg_values[i])) != BSP_ERROR_NONE)
 80056ba:	4a76      	ldr	r2, [pc, #472]	; (8005894 <LSM6DSO_X_SelfTest+0x210>)
 80056bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056be:	4413      	add	r3, r2
 80056c0:	7819      	ldrb	r1, [r3, #0]
 80056c2:	1d3a      	adds	r2, r7, #4
 80056c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056c6:	4413      	add	r3, r2
 80056c8:	461a      	mov	r2, r3
 80056ca:	2000      	movs	r0, #0
 80056cc:	f000 fbfe 	bl	8005ecc <CUSTOM_MOTION_SENSOR_Read_Register>
 80056d0:	6378      	str	r0, [r7, #52]	; 0x34
 80056d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d001      	beq.n	80056dc <LSM6DSO_X_SelfTest+0x58>
    {
      return ret;
 80056d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056da:	e22d      	b.n	8005b38 <LSM6DSO_X_SelfTest+0x4b4>
  for (i = 0; i < ST_REG_COUNT; i++)
 80056dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056de:	3301      	adds	r3, #1
 80056e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80056e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e4:	2b09      	cmp	r3, #9
 80056e6:	d9e8      	bls.n	80056ba <LSM6DSO_X_SelfTest+0x36>
    }
  }

  /* Set the sensor for self-test */
  for (i = 0; i < ST_REG_COUNT; i++)
 80056e8:	2300      	movs	r3, #0
 80056ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80056ec:	e014      	b.n	8005718 <LSM6DSO_X_SelfTest+0x94>
  {
    if ((ret = CUSTOM_MOTION_SENSOR_Write_Register(CUSTOM_LSM6DSO_0, reg_addr[i], x_st_reg_values[i])) != BSP_ERROR_NONE)
 80056ee:	4a69      	ldr	r2, [pc, #420]	; (8005894 <LSM6DSO_X_SelfTest+0x210>)
 80056f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f2:	4413      	add	r3, r2
 80056f4:	7819      	ldrb	r1, [r3, #0]
 80056f6:	4a68      	ldr	r2, [pc, #416]	; (8005898 <LSM6DSO_X_SelfTest+0x214>)
 80056f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fa:	4413      	add	r3, r2
 80056fc:	781b      	ldrb	r3, [r3, #0]
 80056fe:	461a      	mov	r2, r3
 8005700:	2000      	movs	r0, #0
 8005702:	f000 fc0b 	bl	8005f1c <CUSTOM_MOTION_SENSOR_Write_Register>
 8005706:	6378      	str	r0, [r7, #52]	; 0x34
 8005708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <LSM6DSO_X_SelfTest+0x8e>
    {
      return ret;
 800570e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005710:	e212      	b.n	8005b38 <LSM6DSO_X_SelfTest+0x4b4>
  for (i = 0; i < ST_REG_COUNT; i++)
 8005712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005714:	3301      	adds	r3, #1
 8005716:	63bb      	str	r3, [r7, #56]	; 0x38
 8005718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571a:	2b09      	cmp	r3, #9
 800571c:	d9e7      	bls.n	80056ee <LSM6DSO_X_SelfTest+0x6a>
    }
  }

  /* Wait defined time for stable output */
  HAL_Delay(X_POWER_UP_DELAY);
 800571e:	2064      	movs	r0, #100	; 0x64
 8005720:	f7fd fa14 	bl	8002b4c <HAL_Delay>

  /* Read first data and discard it */
  if (LSM6DSO_X_Get_Data(&data) != BSP_ERROR_NONE)
 8005724:	f107 0310 	add.w	r3, r7, #16
 8005728:	4618      	mov	r0, r3
 800572a:	f000 fa23 	bl	8005b74 <LSM6DSO_X_Get_Data>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <LSM6DSO_X_SelfTest+0xb4>
  {
    Error_Handler();
 8005734:	f000 fda2 	bl	800627c <Error_Handler>
  }

  data_nost.x = 0;
 8005738:	2300      	movs	r3, #0
 800573a:	62bb      	str	r3, [r7, #40]	; 0x28
  data_nost.y = 0;
 800573c:	2300      	movs	r3, #0
 800573e:	62fb      	str	r3, [r7, #44]	; 0x2c
  data_nost.z = 0;
 8005740:	2300      	movs	r3, #0
 8005742:	633b      	str	r3, [r7, #48]	; 0x30

  /* Read valid data multiple times and average it */
  for (i = 0; i < (uint32_t)N_SAMPLES; i++)
 8005744:	2300      	movs	r3, #0
 8005746:	63bb      	str	r3, [r7, #56]	; 0x38
 8005748:	e018      	b.n	800577c <LSM6DSO_X_SelfTest+0xf8>
  {
    if (LSM6DSO_X_Get_Data(&data) != BSP_ERROR_NONE)
 800574a:	f107 0310 	add.w	r3, r7, #16
 800574e:	4618      	mov	r0, r3
 8005750:	f000 fa10 	bl	8005b74 <LSM6DSO_X_Get_Data>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d001      	beq.n	800575e <LSM6DSO_X_SelfTest+0xda>
    {
      Error_Handler();
 800575a:	f000 fd8f 	bl	800627c <Error_Handler>
    }
    data_nost.x += data.x;
 800575e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	4413      	add	r3, r2
 8005764:	62bb      	str	r3, [r7, #40]	; 0x28
    data_nost.y += data.y;
 8005766:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	4413      	add	r3, r2
 800576c:	62fb      	str	r3, [r7, #44]	; 0x2c
    data_nost.z += data.z;
 800576e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005770:	69bb      	ldr	r3, [r7, #24]
 8005772:	4413      	add	r3, r2
 8005774:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < (uint32_t)N_SAMPLES; i++)
 8005776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005778:	3301      	adds	r3, #1
 800577a:	63bb      	str	r3, [r7, #56]	; 0x38
 800577c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577e:	2b04      	cmp	r3, #4
 8005780:	d9e3      	bls.n	800574a <LSM6DSO_X_SelfTest+0xc6>
  }
  data_nost.x /= N_SAMPLES;
 8005782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005784:	4a45      	ldr	r2, [pc, #276]	; (800589c <LSM6DSO_X_SelfTest+0x218>)
 8005786:	fb82 1203 	smull	r1, r2, r2, r3
 800578a:	1052      	asrs	r2, r2, #1
 800578c:	17db      	asrs	r3, r3, #31
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	62bb      	str	r3, [r7, #40]	; 0x28
  data_nost.y /= N_SAMPLES;
 8005792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005794:	4a41      	ldr	r2, [pc, #260]	; (800589c <LSM6DSO_X_SelfTest+0x218>)
 8005796:	fb82 1203 	smull	r1, r2, r2, r3
 800579a:	1052      	asrs	r2, r2, #1
 800579c:	17db      	asrs	r3, r3, #31
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  data_nost.z /= N_SAMPLES;
 80057a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a4:	4a3d      	ldr	r2, [pc, #244]	; (800589c <LSM6DSO_X_SelfTest+0x218>)
 80057a6:	fb82 1203 	smull	r1, r2, r2, r3
 80057aa:	1052      	asrs	r2, r2, #1
 80057ac:	17db      	asrs	r3, r3, #31
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	633b      	str	r3, [r7, #48]	; 0x30

  /* Enable self-test */
  if ((ret = CUSTOM_MOTION_SENSOR_Set_SelfTest(CUSTOM_LSM6DSO_0, MOTION_ACCELERO, (uint8_t)LSM6DSO_XL_ST_POSITIVE)) != BSP_ERROR_NONE)
 80057b2:	2201      	movs	r2, #1
 80057b4:	2102      	movs	r1, #2
 80057b6:	2000      	movs	r0, #0
 80057b8:	f000 fc20 	bl	8005ffc <CUSTOM_MOTION_SENSOR_Set_SelfTest>
 80057bc:	6378      	str	r0, [r7, #52]	; 0x34
 80057be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <LSM6DSO_X_SelfTest+0x144>
  {
    return ret;
 80057c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057c6:	e1b7      	b.n	8005b38 <LSM6DSO_X_SelfTest+0x4b4>
  }

  /* Wait defined time for stable output */
  HAL_Delay(X_ST_ENABLED_DELAY);
 80057c8:	2064      	movs	r0, #100	; 0x64
 80057ca:	f7fd f9bf 	bl	8002b4c <HAL_Delay>

  /* Read first data and discard it */
  if (LSM6DSO_X_Get_Data(&data) != BSP_ERROR_NONE)
 80057ce:	f107 0310 	add.w	r3, r7, #16
 80057d2:	4618      	mov	r0, r3
 80057d4:	f000 f9ce 	bl	8005b74 <LSM6DSO_X_Get_Data>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <LSM6DSO_X_SelfTest+0x15e>
  {
    Error_Handler();
 80057de:	f000 fd4d 	bl	800627c <Error_Handler>
  }
  data_st.x = 0;
 80057e2:	2300      	movs	r3, #0
 80057e4:	61fb      	str	r3, [r7, #28]
  data_st.y = 0;
 80057e6:	2300      	movs	r3, #0
 80057e8:	623b      	str	r3, [r7, #32]
  data_st.z = 0;
 80057ea:	2300      	movs	r3, #0
 80057ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Read valid data multiple times and average it */
  for (i = 0; i < (uint32_t)N_SAMPLES; i++)
 80057ee:	2300      	movs	r3, #0
 80057f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80057f2:	e018      	b.n	8005826 <LSM6DSO_X_SelfTest+0x1a2>
  {
    if (LSM6DSO_X_Get_Data(&data) != BSP_ERROR_NONE)
 80057f4:	f107 0310 	add.w	r3, r7, #16
 80057f8:	4618      	mov	r0, r3
 80057fa:	f000 f9bb 	bl	8005b74 <LSM6DSO_X_Get_Data>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d001      	beq.n	8005808 <LSM6DSO_X_SelfTest+0x184>
    {
      Error_Handler();
 8005804:	f000 fd3a 	bl	800627c <Error_Handler>
    }
    data_st.x += data.x;
 8005808:	69fa      	ldr	r2, [r7, #28]
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	4413      	add	r3, r2
 800580e:	61fb      	str	r3, [r7, #28]
    data_st.y += data.y;
 8005810:	6a3a      	ldr	r2, [r7, #32]
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	4413      	add	r3, r2
 8005816:	623b      	str	r3, [r7, #32]
    data_st.z += data.z;
 8005818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	4413      	add	r3, r2
 800581e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0; i < (uint32_t)N_SAMPLES; i++)
 8005820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005822:	3301      	adds	r3, #1
 8005824:	63bb      	str	r3, [r7, #56]	; 0x38
 8005826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005828:	2b04      	cmp	r3, #4
 800582a:	d9e3      	bls.n	80057f4 <LSM6DSO_X_SelfTest+0x170>
  }
  data_st.x /= N_SAMPLES;
 800582c:	69fb      	ldr	r3, [r7, #28]
 800582e:	4a1b      	ldr	r2, [pc, #108]	; (800589c <LSM6DSO_X_SelfTest+0x218>)
 8005830:	fb82 1203 	smull	r1, r2, r2, r3
 8005834:	1052      	asrs	r2, r2, #1
 8005836:	17db      	asrs	r3, r3, #31
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	61fb      	str	r3, [r7, #28]
  data_st.y /= N_SAMPLES;
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	4a17      	ldr	r2, [pc, #92]	; (800589c <LSM6DSO_X_SelfTest+0x218>)
 8005840:	fb82 1203 	smull	r1, r2, r2, r3
 8005844:	1052      	asrs	r2, r2, #1
 8005846:	17db      	asrs	r3, r3, #31
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	623b      	str	r3, [r7, #32]
  data_st.z /= N_SAMPLES;
 800584c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584e:	4a13      	ldr	r2, [pc, #76]	; (800589c <LSM6DSO_X_SelfTest+0x218>)
 8005850:	fb82 1203 	smull	r1, r2, r2, r3
 8005854:	1052      	asrs	r2, r2, #1
 8005856:	17db      	asrs	r3, r3, #31
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Restore previous settings of the sensor */
  for (i = 0; i < ST_REG_COUNT; i++)
 800585c:	2300      	movs	r3, #0
 800585e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005860:	e021      	b.n	80058a6 <LSM6DSO_X_SelfTest+0x222>
  {
    if ((ret = CUSTOM_MOTION_SENSOR_Write_Register(CUSTOM_LSM6DSO_0, reg_addr[i], prev_reg_values[i])) != BSP_ERROR_NONE)
 8005862:	4a0c      	ldr	r2, [pc, #48]	; (8005894 <LSM6DSO_X_SelfTest+0x210>)
 8005864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005866:	4413      	add	r3, r2
 8005868:	7819      	ldrb	r1, [r3, #0]
 800586a:	1d3a      	adds	r2, r7, #4
 800586c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800586e:	4413      	add	r3, r2
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	461a      	mov	r2, r3
 8005874:	2000      	movs	r0, #0
 8005876:	f000 fb51 	bl	8005f1c <CUSTOM_MOTION_SENSOR_Write_Register>
 800587a:	6378      	str	r0, [r7, #52]	; 0x34
 800587c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00e      	beq.n	80058a0 <LSM6DSO_X_SelfTest+0x21c>
    {
      return ret;
 8005882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005884:	e158      	b.n	8005b38 <LSM6DSO_X_SelfTest+0x4b4>
 8005886:	bf00      	nop
 8005888:	20000128 	.word	0x20000128
 800588c:	08007a2c 	.word	0x08007a2c
 8005890:	08007a28 	.word	0x08007a28
 8005894:	20000074 	.word	0x20000074
 8005898:	20000080 	.word	0x20000080
 800589c:	66666667 	.word	0x66666667
  for (i = 0; i < ST_REG_COUNT; i++)
 80058a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a2:	3301      	adds	r3, #1
 80058a4:	63bb      	str	r3, [r7, #56]	; 0x38
 80058a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a8:	2b09      	cmp	r3, #9
 80058aa:	d9da      	bls.n	8005862 <LSM6DSO_X_SelfTest+0x1de>
    }
  }

  /* Evaluate the test */
  if (abs(data_st.x - data_nost.x) < X_LO_LIM)
 80058ac:	69fa      	ldr	r2, [r7, #28]
 80058ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	f113 0f59 	cmn.w	r3, #89	; 0x59
 80058b6:	db07      	blt.n	80058c8 <LSM6DSO_X_SelfTest+0x244>
 80058b8:	69fa      	ldr	r2, [r7, #28]
 80058ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b59      	cmp	r3, #89	; 0x59
 80058c0:	dc02      	bgt.n	80058c8 <LSM6DSO_X_SelfTest+0x244>
  {
    test_result = BSP_ERROR_COMPONENT_FAILURE;
 80058c2:	f06f 0304 	mvn.w	r3, #4
 80058c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  if (abs(data_st.x - data_nost.x) > X_HI_LIM)
 80058c8:	69fa      	ldr	r2, [r7, #28]
 80058ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	bfb8      	it	lt
 80058d2:	425b      	neglt	r3, r3
 80058d4:	f240 62a4 	movw	r2, #1700	; 0x6a4
 80058d8:	4293      	cmp	r3, r2
 80058da:	dd02      	ble.n	80058e2 <LSM6DSO_X_SelfTest+0x25e>
  {
    test_result = BSP_ERROR_COMPONENT_FAILURE;
 80058dc:	f06f 0304 	mvn.w	r3, #4
 80058e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  if (abs(data_st.y - data_nost.y) < X_LO_LIM)
 80058e2:	6a3a      	ldr	r2, [r7, #32]
 80058e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	f113 0f59 	cmn.w	r3, #89	; 0x59
 80058ec:	db07      	blt.n	80058fe <LSM6DSO_X_SelfTest+0x27a>
 80058ee:	6a3a      	ldr	r2, [r7, #32]
 80058f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	2b59      	cmp	r3, #89	; 0x59
 80058f6:	dc02      	bgt.n	80058fe <LSM6DSO_X_SelfTest+0x27a>
  {
    test_result = BSP_ERROR_COMPONENT_FAILURE;
 80058f8:	f06f 0304 	mvn.w	r3, #4
 80058fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  if (abs(data_st.y - data_nost.y) > X_HI_LIM)
 80058fe:	6a3a      	ldr	r2, [r7, #32]
 8005900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005902:	1ad3      	subs	r3, r2, r3
 8005904:	2b00      	cmp	r3, #0
 8005906:	bfb8      	it	lt
 8005908:	425b      	neglt	r3, r3
 800590a:	f240 62a4 	movw	r2, #1700	; 0x6a4
 800590e:	4293      	cmp	r3, r2
 8005910:	dd02      	ble.n	8005918 <LSM6DSO_X_SelfTest+0x294>
  {
    test_result = BSP_ERROR_COMPONENT_FAILURE;
 8005912:	f06f 0304 	mvn.w	r3, #4
 8005916:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  if (abs(data_st.z - data_nost.z) < X_LO_LIM)
 8005918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800591a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591c:	1ad3      	subs	r3, r2, r3
 800591e:	f113 0f59 	cmn.w	r3, #89	; 0x59
 8005922:	db07      	blt.n	8005934 <LSM6DSO_X_SelfTest+0x2b0>
 8005924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b59      	cmp	r3, #89	; 0x59
 800592c:	dc02      	bgt.n	8005934 <LSM6DSO_X_SelfTest+0x2b0>
  {
    test_result = BSP_ERROR_COMPONENT_FAILURE;
 800592e:	f06f 0304 	mvn.w	r3, #4
 8005932:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  if (abs(data_st.z - data_nost.z) > X_HI_LIM)
 8005934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005938:	1ad3      	subs	r3, r2, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	bfb8      	it	lt
 800593e:	425b      	neglt	r3, r3
 8005940:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8005944:	4293      	cmp	r3, r2
 8005946:	dd02      	ble.n	800594e <LSM6DSO_X_SelfTest+0x2ca>
  {
    test_result = BSP_ERROR_COMPONENT_FAILURE;
 8005948:	f06f 0304 	mvn.w	r3, #4
 800594c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Print measured data */
  (void)snprintf(dataOut, MAX_BUF_SIZE, "\r\nMeasured acceleration [mg]:\r\n");
 800594e:	4a7c      	ldr	r2, [pc, #496]	; (8005b40 <LSM6DSO_X_SelfTest+0x4bc>)
 8005950:	4b7c      	ldr	r3, [pc, #496]	; (8005b44 <LSM6DSO_X_SelfTest+0x4c0>)
 8005952:	4614      	mov	r4, r2
 8005954:	461d      	mov	r5, r3
 8005956:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005958:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800595a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800595e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  printf("%s", dataOut);
 8005962:	4977      	ldr	r1, [pc, #476]	; (8005b40 <LSM6DSO_X_SelfTest+0x4bc>)
 8005964:	4878      	ldr	r0, [pc, #480]	; (8005b48 <LSM6DSO_X_SelfTest+0x4c4>)
 8005966:	f000 ff8b 	bl	8006880 <iprintf>
  (void)snprintf(dataOut, MAX_BUF_SIZE, "\r\n     AXIS     | PRE-SELFTEST |   SELFTEST\r\n");
 800596a:	4a75      	ldr	r2, [pc, #468]	; (8005b40 <LSM6DSO_X_SelfTest+0x4bc>)
 800596c:	4b77      	ldr	r3, [pc, #476]	; (8005b4c <LSM6DSO_X_SelfTest+0x4c8>)
 800596e:	4614      	mov	r4, r2
 8005970:	461d      	mov	r5, r3
 8005972:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005974:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005976:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005978:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800597a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800597e:	c407      	stmia	r4!, {r0, r1, r2}
 8005980:	8023      	strh	r3, [r4, #0]
  printf("%s", dataOut);
 8005982:	496f      	ldr	r1, [pc, #444]	; (8005b40 <LSM6DSO_X_SelfTest+0x4bc>)
 8005984:	4870      	ldr	r0, [pc, #448]	; (8005b48 <LSM6DSO_X_SelfTest+0x4c4>)
 8005986:	f000 ff7b 	bl	8006880 <iprintf>
  (void)snprintf(dataOut, MAX_BUF_SIZE, "--------------|--------------|--------------\r\n");
 800598a:	4a6d      	ldr	r2, [pc, #436]	; (8005b40 <LSM6DSO_X_SelfTest+0x4bc>)
 800598c:	4b70      	ldr	r3, [pc, #448]	; (8005b50 <LSM6DSO_X_SelfTest+0x4cc>)
 800598e:	4614      	mov	r4, r2
 8005990:	461d      	mov	r5, r3
 8005992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005994:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005996:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005998:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800599a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800599e:	c407      	stmia	r4!, {r0, r1, r2}
 80059a0:	8023      	strh	r3, [r4, #0]
 80059a2:	3402      	adds	r4, #2
 80059a4:	0c1b      	lsrs	r3, r3, #16
 80059a6:	7023      	strb	r3, [r4, #0]
  printf("%s", dataOut);
 80059a8:	4965      	ldr	r1, [pc, #404]	; (8005b40 <LSM6DSO_X_SelfTest+0x4bc>)
 80059aa:	4867      	ldr	r0, [pc, #412]	; (8005b48 <LSM6DSO_X_SelfTest+0x4c4>)
 80059ac:	f000 ff68 	bl	8006880 <iprintf>
  (void)snprintf(dataOut, MAX_BUF_SIZE, "       X      | %8ld     | %8ld\r\n", data_nost.x, data_st.x);
 80059b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	4613      	mov	r3, r2
 80059b8:	4a66      	ldr	r2, [pc, #408]	; (8005b54 <LSM6DSO_X_SelfTest+0x4d0>)
 80059ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059be:	4860      	ldr	r0, [pc, #384]	; (8005b40 <LSM6DSO_X_SelfTest+0x4bc>)
 80059c0:	f000 ff76 	bl	80068b0 <sniprintf>
  printf("%s", dataOut);
 80059c4:	495e      	ldr	r1, [pc, #376]	; (8005b40 <LSM6DSO_X_SelfTest+0x4bc>)
 80059c6:	4860      	ldr	r0, [pc, #384]	; (8005b48 <LSM6DSO_X_SelfTest+0x4c4>)
 80059c8:	f000 ff5a 	bl	8006880 <iprintf>
  (void)snprintf(dataOut, MAX_BUF_SIZE, "       Y      | %8ld     | %8ld\r\n", data_nost.y, data_st.y);
 80059cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059ce:	6a3b      	ldr	r3, [r7, #32]
 80059d0:	9300      	str	r3, [sp, #0]
 80059d2:	4613      	mov	r3, r2
 80059d4:	4a60      	ldr	r2, [pc, #384]	; (8005b58 <LSM6DSO_X_SelfTest+0x4d4>)
 80059d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059da:	4859      	ldr	r0, [pc, #356]	; (8005b40 <LSM6DSO_X_SelfTest+0x4bc>)
 80059dc:	f000 ff68 	bl	80068b0 <sniprintf>
  printf("%s", dataOut);
 80059e0:	4957      	ldr	r1, [pc, #348]	; (8005b40 <LSM6DSO_X_SelfTest+0x4bc>)
 80059e2:	4859      	ldr	r0, [pc, #356]	; (8005b48 <LSM6DSO_X_SelfTest+0x4c4>)
 80059e4:	f000 ff4c 	bl	8006880 <iprintf>
  (void)snprintf(dataOut, MAX_BUF_SIZE, "       Z      | %8ld     | %8ld\r\n", data_nost.z, data_st.z);
 80059e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	4613      	mov	r3, r2
 80059f0:	4a5a      	ldr	r2, [pc, #360]	; (8005b5c <LSM6DSO_X_SelfTest+0x4d8>)
 80059f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80059f6:	4852      	ldr	r0, [pc, #328]	; (8005b40 <LSM6DSO_X_SelfTest+0x4bc>)
 80059f8:	f000 ff5a 	bl	80068b0 <sniprintf>
  printf("%s", dataOut);
 80059fc:	4950      	ldr	r1, [pc, #320]	; (8005b40 <LSM6DSO_X_SelfTest+0x4bc>)
 80059fe:	4852      	ldr	r0, [pc, #328]	; (8005b48 <LSM6DSO_X_SelfTest+0x4c4>)
 8005a00:	f000 ff3e 	bl	8006880 <iprintf>

  /* Print test limits and data */
  (void)snprintf(dataOut, MAX_BUF_SIZE, "\r\nTest limits and data [mg]:\r\n");
 8005a04:	4a4e      	ldr	r2, [pc, #312]	; (8005b40 <LSM6DSO_X_SelfTest+0x4bc>)
 8005a06:	4b56      	ldr	r3, [pc, #344]	; (8005b60 <LSM6DSO_X_SelfTest+0x4dc>)
 8005a08:	4614      	mov	r4, r2
 8005a0a:	461d      	mov	r5, r3
 8005a0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a10:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005a14:	c407      	stmia	r4!, {r0, r1, r2}
 8005a16:	8023      	strh	r3, [r4, #0]
 8005a18:	3402      	adds	r4, #2
 8005a1a:	0c1b      	lsrs	r3, r3, #16
 8005a1c:	7023      	strb	r3, [r4, #0]
  printf("%s", dataOut);
 8005a1e:	4948      	ldr	r1, [pc, #288]	; (8005b40 <LSM6DSO_X_SelfTest+0x4bc>)
 8005a20:	4849      	ldr	r0, [pc, #292]	; (8005b48 <LSM6DSO_X_SelfTest+0x4c4>)
 8005a22:	f000 ff2d 	bl	8006880 <iprintf>
  (void)snprintf(dataOut, MAX_BUF_SIZE, "\r\n  LOW LIMIT   |  DIFFERENCE  |  HIGH LIMIT\r\n");
 8005a26:	4a46      	ldr	r2, [pc, #280]	; (8005b40 <LSM6DSO_X_SelfTest+0x4bc>)
 8005a28:	4b4e      	ldr	r3, [pc, #312]	; (8005b64 <LSM6DSO_X_SelfTest+0x4e0>)
 8005a2a:	4614      	mov	r4, r2
 8005a2c:	461d      	mov	r5, r3
 8005a2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a32:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a36:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005a3a:	c407      	stmia	r4!, {r0, r1, r2}
 8005a3c:	8023      	strh	r3, [r4, #0]
 8005a3e:	3402      	adds	r4, #2
 8005a40:	0c1b      	lsrs	r3, r3, #16
 8005a42:	7023      	strb	r3, [r4, #0]
  printf("%s", dataOut);
 8005a44:	493e      	ldr	r1, [pc, #248]	; (8005b40 <LSM6DSO_X_SelfTest+0x4bc>)
 8005a46:	4840      	ldr	r0, [pc, #256]	; (8005b48 <LSM6DSO_X_SelfTest+0x4c4>)
 8005a48:	f000 ff1a 	bl	8006880 <iprintf>
  (void)snprintf(dataOut, MAX_BUF_SIZE, "--------------|--------------|--------------\r\n");
 8005a4c:	4a3c      	ldr	r2, [pc, #240]	; (8005b40 <LSM6DSO_X_SelfTest+0x4bc>)
 8005a4e:	4b40      	ldr	r3, [pc, #256]	; (8005b50 <LSM6DSO_X_SelfTest+0x4cc>)
 8005a50:	4614      	mov	r4, r2
 8005a52:	461d      	mov	r5, r3
 8005a54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005a5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005a5c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005a60:	c407      	stmia	r4!, {r0, r1, r2}
 8005a62:	8023      	strh	r3, [r4, #0]
 8005a64:	3402      	adds	r4, #2
 8005a66:	0c1b      	lsrs	r3, r3, #16
 8005a68:	7023      	strb	r3, [r4, #0]
  printf("%s", dataOut);
 8005a6a:	4935      	ldr	r1, [pc, #212]	; (8005b40 <LSM6DSO_X_SelfTest+0x4bc>)
 8005a6c:	4836      	ldr	r0, [pc, #216]	; (8005b48 <LSM6DSO_X_SelfTest+0x4c4>)
 8005a6e:	f000 ff07 	bl	8006880 <iprintf>
  (void)snprintf(dataOut, MAX_BUF_SIZE, "%8d      | %8d     | %8d\r\n", X_LO_LIM, (int)abs(data_st.x - data_nost.x), X_HI_LIM);
 8005a72:	69fa      	ldr	r2, [r7, #28]
 8005a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	bfb8      	it	lt
 8005a7c:	425b      	neglt	r3, r3
 8005a7e:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8005a82:	9201      	str	r2, [sp, #4]
 8005a84:	9300      	str	r3, [sp, #0]
 8005a86:	235a      	movs	r3, #90	; 0x5a
 8005a88:	4a37      	ldr	r2, [pc, #220]	; (8005b68 <LSM6DSO_X_SelfTest+0x4e4>)
 8005a8a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005a8e:	482c      	ldr	r0, [pc, #176]	; (8005b40 <LSM6DSO_X_SelfTest+0x4bc>)
 8005a90:	f000 ff0e 	bl	80068b0 <sniprintf>
  printf("%s", dataOut);
 8005a94:	492a      	ldr	r1, [pc, #168]	; (8005b40 <LSM6DSO_X_SelfTest+0x4bc>)
 8005a96:	482c      	ldr	r0, [pc, #176]	; (8005b48 <LSM6DSO_X_SelfTest+0x4c4>)
 8005a98:	f000 fef2 	bl	8006880 <iprintf>
  (void)snprintf(dataOut, MAX_BUF_SIZE, "%8d      | %8d     | %8d\r\n", X_LO_LIM, (int)abs(data_st.y - data_nost.y), X_HI_LIM);
 8005a9c:	6a3a      	ldr	r2, [r7, #32]
 8005a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	bfb8      	it	lt
 8005aa6:	425b      	neglt	r3, r3
 8005aa8:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8005aac:	9201      	str	r2, [sp, #4]
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	235a      	movs	r3, #90	; 0x5a
 8005ab2:	4a2d      	ldr	r2, [pc, #180]	; (8005b68 <LSM6DSO_X_SelfTest+0x4e4>)
 8005ab4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ab8:	4821      	ldr	r0, [pc, #132]	; (8005b40 <LSM6DSO_X_SelfTest+0x4bc>)
 8005aba:	f000 fef9 	bl	80068b0 <sniprintf>
  printf("%s", dataOut);
 8005abe:	4920      	ldr	r1, [pc, #128]	; (8005b40 <LSM6DSO_X_SelfTest+0x4bc>)
 8005ac0:	4821      	ldr	r0, [pc, #132]	; (8005b48 <LSM6DSO_X_SelfTest+0x4c4>)
 8005ac2:	f000 fedd 	bl	8006880 <iprintf>
  (void)snprintf(dataOut, MAX_BUF_SIZE, "%8d      | %8d     | %8d\r\n", X_LO_LIM, (int)abs(data_st.z - data_nost.z), X_HI_LIM);
 8005ac6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	bfb8      	it	lt
 8005ad0:	425b      	neglt	r3, r3
 8005ad2:	f240 62a4 	movw	r2, #1700	; 0x6a4
 8005ad6:	9201      	str	r2, [sp, #4]
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	235a      	movs	r3, #90	; 0x5a
 8005adc:	4a22      	ldr	r2, [pc, #136]	; (8005b68 <LSM6DSO_X_SelfTest+0x4e4>)
 8005ade:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ae2:	4817      	ldr	r0, [pc, #92]	; (8005b40 <LSM6DSO_X_SelfTest+0x4bc>)
 8005ae4:	f000 fee4 	bl	80068b0 <sniprintf>
  printf("%s", dataOut);
 8005ae8:	4915      	ldr	r1, [pc, #84]	; (8005b40 <LSM6DSO_X_SelfTest+0x4bc>)
 8005aea:	4817      	ldr	r0, [pc, #92]	; (8005b48 <LSM6DSO_X_SelfTest+0x4c4>)
 8005aec:	f000 fec8 	bl	8006880 <iprintf>

  /* Print the test result */
  if (test_result == BSP_ERROR_NONE)
 8005af0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d10c      	bne.n	8005b10 <LSM6DSO_X_SelfTest+0x48c>
  {
    (void)snprintf(dataOut, MAX_BUF_SIZE, "\r\nLSM6DSO accelerometer self-test PASSED!\r\n");
 8005af6:	4a12      	ldr	r2, [pc, #72]	; (8005b40 <LSM6DSO_X_SelfTest+0x4bc>)
 8005af8:	4b1c      	ldr	r3, [pc, #112]	; (8005b6c <LSM6DSO_X_SelfTest+0x4e8>)
 8005afa:	4614      	mov	r4, r2
 8005afc:	461d      	mov	r5, r3
 8005afe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b00:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b06:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005b0a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005b0e:	e00b      	b.n	8005b28 <LSM6DSO_X_SelfTest+0x4a4>
  }
  else
  {
    (void)snprintf(dataOut, MAX_BUF_SIZE, "\r\nLSM6DSO accelerometer self-test FAILED!\r\n");
 8005b10:	4a0b      	ldr	r2, [pc, #44]	; (8005b40 <LSM6DSO_X_SelfTest+0x4bc>)
 8005b12:	4b17      	ldr	r3, [pc, #92]	; (8005b70 <LSM6DSO_X_SelfTest+0x4ec>)
 8005b14:	4614      	mov	r4, r2
 8005b16:	461d      	mov	r5, r3
 8005b18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005b1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005b20:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005b24:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  }
  printf("%s", dataOut);
 8005b28:	4905      	ldr	r1, [pc, #20]	; (8005b40 <LSM6DSO_X_SelfTest+0x4bc>)
 8005b2a:	4807      	ldr	r0, [pc, #28]	; (8005b48 <LSM6DSO_X_SelfTest+0x4c4>)
 8005b2c:	f000 fea8 	bl	8006880 <iprintf>

  BSP_LED_Off(LED2);
 8005b30:	2000      	movs	r0, #0
 8005b32:	f7fc fdc9 	bl	80026c8 <BSP_LED_Off>

  return ret;
 8005b36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3740      	adds	r7, #64	; 0x40
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bdb0      	pop	{r4, r5, r7, pc}
 8005b40:	20000128 	.word	0x20000128
 8005b44:	08007a78 	.word	0x08007a78
 8005b48:	08007a28 	.word	0x08007a28
 8005b4c:	08007a98 	.word	0x08007a98
 8005b50:	08007ac8 	.word	0x08007ac8
 8005b54:	08007af8 	.word	0x08007af8
 8005b58:	08007b1c 	.word	0x08007b1c
 8005b5c:	08007b40 	.word	0x08007b40
 8005b60:	08007b64 	.word	0x08007b64
 8005b64:	08007b84 	.word	0x08007b84
 8005b68:	08007bb4 	.word	0x08007bb4
 8005b6c:	08007bd0 	.word	0x08007bd0
 8005b70:	08007bfc 	.word	0x08007bfc

08005b74 <LSM6DSO_X_Get_Data>:
  * @brief  Wait for data ready and get data
  * @param  data the sensor data
  * @retval None
  */
static int32_t LSM6DSO_X_Get_Data(CUSTOM_MOTION_SENSOR_Axes_t *data)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  /* Wait for data ready */
  do
  {
    if ((ret = CUSTOM_MOTION_SENSOR_Get_DRDY_Status(CUSTOM_LSM6DSO_0, MOTION_ACCELERO, &status)) != BSP_ERROR_NONE)
 8005b7c:	f107 030b 	add.w	r3, r7, #11
 8005b80:	461a      	mov	r2, r3
 8005b82:	2102      	movs	r1, #2
 8005b84:	2000      	movs	r0, #0
 8005b86:	f000 f9f3 	bl	8005f70 <CUSTOM_MOTION_SENSOR_Get_DRDY_Status>
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <LSM6DSO_X_Get_Data+0x22>
    {
      return ret;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	e00e      	b.n	8005bb4 <LSM6DSO_X_Get_Data+0x40>
    }
  }
  while (status == 0U);
 8005b96:	7afb      	ldrb	r3, [r7, #11]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d0ef      	beq.n	8005b7c <LSM6DSO_X_Get_Data+0x8>

  /* Read accelero data */
  if ((ret = CUSTOM_MOTION_SENSOR_GetAxes(CUSTOM_LSM6DSO_0, MOTION_ACCELERO, data)) != BSP_ERROR_NONE)
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	2102      	movs	r1, #2
 8005ba0:	2000      	movs	r0, #0
 8005ba2:	f000 f893 	bl	8005ccc <CUSTOM_MOTION_SENSOR_GetAxes>
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d001      	beq.n	8005bb2 <LSM6DSO_X_Get_Data+0x3e>
  {
    return ret;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	e000      	b.n	8005bb4 <LSM6DSO_X_Get_Data+0x40>
  }

  return ret;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <CUSTOM_MOTION_SENSOR_Init>:
  *         - MOTION_ACCELERO
  *         - MOTION_MAGNETO
  * @retval BSP status
  */
int32_t CUSTOM_MOTION_SENSOR_Init(uint32_t Instance, uint32_t Functions)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b08e      	sub	sp, #56	; 0x38
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t function = MOTION_GYRO;
 8005bca:	2301      	movs	r3, #1
 8005bcc:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t i;
  uint32_t component_functions = 0;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  CUSTOM_MOTION_SENSOR_Capabilities_t cap;

  switch (Instance)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d131      	bne.n	8005c3c <CUSTOM_MOTION_SENSOR_Init+0x80>
  {
#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSO_0 == 1)
    case CUSTOM_LSM6DSO_0:
      if (LSM6DSO_0_Probe(Functions) != BSP_ERROR_NONE)
 8005bd8:	6838      	ldr	r0, [r7, #0]
 8005bda:	f000 f8bb 	bl	8005d54 <LSM6DSO_0_Probe>
 8005bde:	4603      	mov	r3, r0
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <CUSTOM_MOTION_SENSOR_Init+0x2e>
      {
        return BSP_ERROR_NO_INIT;
 8005be4:	f04f 33ff 	mov.w	r3, #4294967295
 8005be8:	e064      	b.n	8005cb4 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (MotionDrv[Instance]->GetCapabilities(MotionCompObj[Instance], (void *)&cap) != BSP_ERROR_NONE)
 8005bea:	4a34      	ldr	r2, [pc, #208]	; (8005cbc <CUSTOM_MOTION_SENSOR_Init+0x100>)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	4932      	ldr	r1, [pc, #200]	; (8005cc0 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005bfc:	f107 010c 	add.w	r1, r7, #12
 8005c00:	4610      	mov	r0, r2
 8005c02:	4798      	blx	r3
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d002      	beq.n	8005c10 <CUSTOM_MOTION_SENSOR_Init+0x54>
      {
        return BSP_ERROR_UNKNOWN_COMPONENT;
 8005c0a:	f06f 0306 	mvn.w	r3, #6
 8005c0e:	e051      	b.n	8005cb4 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
      if (cap.Acc == 1U)
 8005c10:	7b3b      	ldrb	r3, [r7, #12]
 8005c12:	2b01      	cmp	r3, #1
 8005c14:	d103      	bne.n	8005c1e <CUSTOM_MOTION_SENSOR_Init+0x62>
      {
        component_functions |= MOTION_ACCELERO;
 8005c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c18:	f043 0302 	orr.w	r3, r3, #2
 8005c1c:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Gyro == 1U)
 8005c1e:	7b7b      	ldrb	r3, [r7, #13]
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	d103      	bne.n	8005c2c <CUSTOM_MOTION_SENSOR_Init+0x70>
      {
        component_functions |= MOTION_GYRO;
 8005c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c26:	f043 0301 	orr.w	r3, r3, #1
 8005c2a:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      if (cap.Magneto == 1U)
 8005c2c:	7bbb      	ldrb	r3, [r7, #14]
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d108      	bne.n	8005c44 <CUSTOM_MOTION_SENSOR_Init+0x88>
      {
        component_functions |= MOTION_MAGNETO;
 8005c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c34:	f043 0304 	orr.w	r3, r3, #4
 8005c38:	62bb      	str	r3, [r7, #40]	; 0x28
      }
      break;
 8005c3a:	e003      	b.n	8005c44 <CUSTOM_MOTION_SENSOR_Init+0x88>
#endif
    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005c3c:	f06f 0301 	mvn.w	r3, #1
 8005c40:	637b      	str	r3, [r7, #52]	; 0x34
      break;
 8005c42:	e000      	b.n	8005c46 <CUSTOM_MOTION_SENSOR_Init+0x8a>
      break;
 8005c44:	bf00      	nop
  }

  if (ret != BSP_ERROR_NONE)
 8005c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <CUSTOM_MOTION_SENSOR_Init+0x94>
  {
    return ret;
 8005c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c4e:	e031      	b.n	8005cb4 <CUSTOM_MOTION_SENSOR_Init+0xf8>
  }

  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 8005c50:	2300      	movs	r3, #0
 8005c52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c54:	e02a      	b.n	8005cac <CUSTOM_MOTION_SENSOR_Init+0xf0>
  {
    if (((Functions & function) == function) && ((component_functions & function) == function))
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d11e      	bne.n	8005ca0 <CUSTOM_MOTION_SENSOR_Init+0xe4>
 8005c62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c66:	4013      	ands	r3, r2
 8005c68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d118      	bne.n	8005ca0 <CUSTOM_MOTION_SENSOR_Init+0xe4>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[function]]->Enable(MotionCompObj[Instance]) != BSP_ERROR_NONE)
 8005c6e:	4a15      	ldr	r2, [pc, #84]	; (8005cc4 <CUSTOM_MOTION_SENSOR_Init+0x108>)
 8005c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c72:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005c76:	4814      	ldr	r0, [pc, #80]	; (8005cc8 <CUSTOM_MOTION_SENSOR_Init+0x10c>)
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	005b      	lsls	r3, r3, #1
 8005c7e:	4413      	add	r3, r2
 8005c80:	440b      	add	r3, r1
 8005c82:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	490d      	ldr	r1, [pc, #52]	; (8005cc0 <CUSTOM_MOTION_SENSOR_Init+0x104>)
 8005c8a:	687a      	ldr	r2, [r7, #4]
 8005c8c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005c90:	4610      	mov	r0, r2
 8005c92:	4798      	blx	r3
 8005c94:	4603      	mov	r3, r0
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d002      	beq.n	8005ca0 <CUSTOM_MOTION_SENSOR_Init+0xe4>
      {
        return BSP_ERROR_COMPONENT_FAILURE;
 8005c9a:	f06f 0304 	mvn.w	r3, #4
 8005c9e:	e009      	b.n	8005cb4 <CUSTOM_MOTION_SENSOR_Init+0xf8>
      }
    }
    function = function << 1;
 8005ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	633b      	str	r3, [r7, #48]	; 0x30
  for (i = 0; i < CUSTOM_MOTION_FUNCTIONS_NBR; i++)
 8005ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca8:	3301      	adds	r3, #1
 8005caa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cae:	2b02      	cmp	r3, #2
 8005cb0:	d9d1      	bls.n	8005c56 <CUSTOM_MOTION_SENSOR_Init+0x9a>
  }

  return ret;
 8005cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3738      	adds	r7, #56	; 0x38
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}
 8005cbc:	20000238 	.word	0x20000238
 8005cc0:	200002c4 	.word	0x200002c4
 8005cc4:	2000008c 	.word	0x2000008c
 8005cc8:	2000022c 	.word	0x2000022c

08005ccc <CUSTOM_MOTION_SENSOR_GetAxes>:
 *         - MOTION_MAGNETO
 * @param  Axes pointer to axes data structure
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_GetAxes(uint32_t Instance, uint32_t Function, CUSTOM_MOTION_SENSOR_Axes_t *Axes)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b086      	sub	sp, #24
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if (Instance >= CUSTOM_MOTION_INSTANCES_NBR)
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d003      	beq.n	8005ce6 <CUSTOM_MOTION_SENSOR_GetAxes+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005cde:	f06f 0301 	mvn.w	r3, #1
 8005ce2:	617b      	str	r3, [r7, #20]
 8005ce4:	e029      	b.n	8005d3a <CUSTOM_MOTION_SENSOR_GetAxes+0x6e>
  }
  else
  {
    if ((MotionCtx[Instance].Functions & Function) == Function)
 8005ce6:	4a17      	ldr	r2, [pc, #92]	; (8005d44 <CUSTOM_MOTION_SENSOR_GetAxes+0x78>)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	4013      	ands	r3, r2
 8005cf2:	68ba      	ldr	r2, [r7, #8]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d11d      	bne.n	8005d34 <CUSTOM_MOTION_SENSOR_GetAxes+0x68>
    {
      if (MotionFuncDrv[Instance][FunctionIndex[Function]]->GetAxes(MotionCompObj[Instance], Axes) != BSP_ERROR_NONE)
 8005cf8:	4a13      	ldr	r2, [pc, #76]	; (8005d48 <CUSTOM_MOTION_SENSOR_GetAxes+0x7c>)
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005d00:	4812      	ldr	r0, [pc, #72]	; (8005d4c <CUSTOM_MOTION_SENSOR_GetAxes+0x80>)
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	4613      	mov	r3, r2
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	4413      	add	r3, r2
 8005d0a:	440b      	add	r3, r1
 8005d0c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	490f      	ldr	r1, [pc, #60]	; (8005d50 <CUSTOM_MOTION_SENSOR_GetAxes+0x84>)
 8005d14:	68fa      	ldr	r2, [r7, #12]
 8005d16:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8005d1a:	6879      	ldr	r1, [r7, #4]
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	4798      	blx	r3
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d003      	beq.n	8005d2e <CUSTOM_MOTION_SENSOR_GetAxes+0x62>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d26:	f06f 0304 	mvn.w	r3, #4
 8005d2a:	617b      	str	r3, [r7, #20]
 8005d2c:	e005      	b.n	8005d3a <CUSTOM_MOTION_SENSOR_GetAxes+0x6e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	617b      	str	r3, [r7, #20]
 8005d32:	e002      	b.n	8005d3a <CUSTOM_MOTION_SENSOR_GetAxes+0x6e>
      }
    }
    else
    {
      ret = BSP_ERROR_WRONG_PARAM;
 8005d34:	f06f 0301 	mvn.w	r3, #1
 8005d38:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8005d3a:	697b      	ldr	r3, [r7, #20]
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3718      	adds	r7, #24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	2000023c 	.word	0x2000023c
 8005d48:	2000008c 	.word	0x2000008c
 8005d4c:	2000022c 	.word	0x2000022c
 8005d50:	200002c4 	.word	0x200002c4

08005d54 <LSM6DSO_0_Probe>:
 * @param  Functions Motion sensor functions. Could be :
 *         - MOTION_GYRO and/or MOTION_ACCELERO
 * @retval BSP status
 */
static int32_t LSM6DSO_0_Probe(uint32_t Functions)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b092      	sub	sp, #72	; 0x48
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
  LSM6DSO_IO_t            io_ctx;
  uint8_t                 id;
  static LSM6DSO_Object_t lsm6dso_obj_0;
  LSM6DSO_Capabilities_t  cap;
  int32_t                 ret = BSP_ERROR_NONE;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	647b      	str	r3, [r7, #68]	; 0x44

  /* Configure the driver */
  io_ctx.BusType     = LSM6DSO_I2C_BUS; /* I2C */
 8005d60:	2300      	movs	r3, #0
 8005d62:	633b      	str	r3, [r7, #48]	; 0x30
  io_ctx.Address     = LSM6DSO_I2C_ADD_H; /* SA0 = VDD */
 8005d64:	23d7      	movs	r3, #215	; 0xd7
 8005d66:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  io_ctx.Init        = CUSTOM_LSM6DSO_0_I2C_Init;
 8005d6a:	4b4a      	ldr	r3, [pc, #296]	; (8005e94 <LSM6DSO_0_Probe+0x140>)
 8005d6c:	62bb      	str	r3, [r7, #40]	; 0x28
  io_ctx.DeInit      = CUSTOM_LSM6DSO_0_I2C_DeInit;
 8005d6e:	4b4a      	ldr	r3, [pc, #296]	; (8005e98 <LSM6DSO_0_Probe+0x144>)
 8005d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  io_ctx.ReadReg     = CUSTOM_LSM6DSO_0_I2C_ReadReg;
 8005d72:	4b4a      	ldr	r3, [pc, #296]	; (8005e9c <LSM6DSO_0_Probe+0x148>)
 8005d74:	63fb      	str	r3, [r7, #60]	; 0x3c
  io_ctx.WriteReg    = CUSTOM_LSM6DSO_0_I2C_WriteReg;
 8005d76:	4b4a      	ldr	r3, [pc, #296]	; (8005ea0 <LSM6DSO_0_Probe+0x14c>)
 8005d78:	63bb      	str	r3, [r7, #56]	; 0x38
  io_ctx.GetTick     = BSP_GetTick;
 8005d7a:	4b4a      	ldr	r3, [pc, #296]	; (8005ea4 <LSM6DSO_0_Probe+0x150>)
 8005d7c:	643b      	str	r3, [r7, #64]	; 0x40

  if (LSM6DSO_RegisterBusIO(&lsm6dso_obj_0, &io_ctx) != LSM6DSO_OK)
 8005d7e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005d82:	4619      	mov	r1, r3
 8005d84:	4848      	ldr	r0, [pc, #288]	; (8005ea8 <LSM6DSO_0_Probe+0x154>)
 8005d86:	f7fa fbfb 	bl	8000580 <LSM6DSO_RegisterBusIO>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d003      	beq.n	8005d98 <LSM6DSO_0_Probe+0x44>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005d90:	f06f 0306 	mvn.w	r3, #6
 8005d94:	647b      	str	r3, [r7, #68]	; 0x44
 8005d96:	e077      	b.n	8005e88 <LSM6DSO_0_Probe+0x134>
  }
  else if (LSM6DSO_ReadID(&lsm6dso_obj_0, &id) != LSM6DSO_OK)
 8005d98:	f107 0327 	add.w	r3, r7, #39	; 0x27
 8005d9c:	4619      	mov	r1, r3
 8005d9e:	4842      	ldr	r0, [pc, #264]	; (8005ea8 <LSM6DSO_0_Probe+0x154>)
 8005da0:	f7fa fcf0 	bl	8000784 <LSM6DSO_ReadID>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d003      	beq.n	8005db2 <LSM6DSO_0_Probe+0x5e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005daa:	f06f 0306 	mvn.w	r3, #6
 8005dae:	647b      	str	r3, [r7, #68]	; 0x44
 8005db0:	e06a      	b.n	8005e88 <LSM6DSO_0_Probe+0x134>
  }
  else if (id != LSM6DSO_ID)
 8005db2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005db6:	2b6c      	cmp	r3, #108	; 0x6c
 8005db8:	d003      	beq.n	8005dc2 <LSM6DSO_0_Probe+0x6e>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8005dba:	f06f 0306 	mvn.w	r3, #6
 8005dbe:	647b      	str	r3, [r7, #68]	; 0x44
 8005dc0:	e062      	b.n	8005e88 <LSM6DSO_0_Probe+0x134>
  }
  else
  {
    (void)LSM6DSO_GetCapabilities(&lsm6dso_obj_0, &cap);
 8005dc2:	f107 0308 	add.w	r3, r7, #8
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	4837      	ldr	r0, [pc, #220]	; (8005ea8 <LSM6DSO_0_Probe+0x154>)
 8005dca:	f7fa fcf1 	bl	80007b0 <LSM6DSO_GetCapabilities>
    MotionCtx[CUSTOM_LSM6DSO_0].Functions = ((uint32_t)cap.Gyro) | ((uint32_t)cap.Acc << 1) | ((uint32_t)cap.Magneto << 2);
 8005dce:	7a7b      	ldrb	r3, [r7, #9]
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	7a3b      	ldrb	r3, [r7, #8]
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	7abb      	ldrb	r3, [r7, #10]
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	4a33      	ldr	r2, [pc, #204]	; (8005eac <LSM6DSO_0_Probe+0x158>)
 8005de0:	6013      	str	r3, [r2, #0]

    MotionCompObj[CUSTOM_LSM6DSO_0] = &lsm6dso_obj_0;
 8005de2:	4b33      	ldr	r3, [pc, #204]	; (8005eb0 <LSM6DSO_0_Probe+0x15c>)
 8005de4:	4a30      	ldr	r2, [pc, #192]	; (8005ea8 <LSM6DSO_0_Probe+0x154>)
 8005de6:	601a      	str	r2, [r3, #0]
    /* The second cast (void *) is added to bypass Misra R11.3 rule */
    MotionDrv[CUSTOM_LSM6DSO_0] = (MOTION_SENSOR_CommonDrv_t *)(void *)&LSM6DSO_COMMON_Driver;
 8005de8:	4b32      	ldr	r3, [pc, #200]	; (8005eb4 <LSM6DSO_0_Probe+0x160>)
 8005dea:	4a33      	ldr	r2, [pc, #204]	; (8005eb8 <LSM6DSO_0_Probe+0x164>)
 8005dec:	601a      	str	r2, [r3, #0]

    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_GYRO) == MOTION_GYRO) && (cap.Gyro == 1U))
 8005dee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d11d      	bne.n	8005e30 <LSM6DSO_0_Probe+0xdc>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d018      	beq.n	8005e30 <LSM6DSO_0_Probe+0xdc>
 8005dfe:	7a7b      	ldrb	r3, [r7, #9]
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d115      	bne.n	8005e30 <LSM6DSO_0_Probe+0xdc>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_LSM6DSO_0][FunctionIndex[MOTION_GYRO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_GYRO_Driver;
 8005e04:	4b2d      	ldr	r3, [pc, #180]	; (8005ebc <LSM6DSO_0_Probe+0x168>)
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	4a2d      	ldr	r2, [pc, #180]	; (8005ec0 <LSM6DSO_0_Probe+0x16c>)
 8005e0a:	492e      	ldr	r1, [pc, #184]	; (8005ec4 <LSM6DSO_0_Probe+0x170>)
 8005e0c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[CUSTOM_LSM6DSO_0]->Init(MotionCompObj[CUSTOM_LSM6DSO_0]) != LSM6DSO_OK)
 8005e10:	4b28      	ldr	r3, [pc, #160]	; (8005eb4 <LSM6DSO_0_Probe+0x160>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a26      	ldr	r2, [pc, #152]	; (8005eb0 <LSM6DSO_0_Probe+0x15c>)
 8005e18:	6812      	ldr	r2, [r2, #0]
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	4798      	blx	r3
 8005e1e:	4603      	mov	r3, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d003      	beq.n	8005e2c <LSM6DSO_0_Probe+0xd8>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e24:	f06f 0304 	mvn.w	r3, #4
 8005e28:	647b      	str	r3, [r7, #68]	; 0x44
 8005e2a:	e001      	b.n	8005e30 <LSM6DSO_0_Probe+0xdc>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_ACCELERO) == MOTION_ACCELERO) && (cap.Acc == 1U))
 8005e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d11d      	bne.n	8005e72 <LSM6DSO_0_Probe+0x11e>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f003 0302 	and.w	r3, r3, #2
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d018      	beq.n	8005e72 <LSM6DSO_0_Probe+0x11e>
 8005e40:	7a3b      	ldrb	r3, [r7, #8]
 8005e42:	2b01      	cmp	r3, #1
 8005e44:	d115      	bne.n	8005e72 <LSM6DSO_0_Probe+0x11e>
    {
      /* The second cast (void *) is added to bypass Misra R11.3 rule */
      MotionFuncDrv[CUSTOM_LSM6DSO_0][FunctionIndex[MOTION_ACCELERO]] = (MOTION_SENSOR_FuncDrv_t *)(void *)&LSM6DSO_ACC_Driver;
 8005e46:	4b1d      	ldr	r3, [pc, #116]	; (8005ebc <LSM6DSO_0_Probe+0x168>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	4a1d      	ldr	r2, [pc, #116]	; (8005ec0 <LSM6DSO_0_Probe+0x16c>)
 8005e4c:	491e      	ldr	r1, [pc, #120]	; (8005ec8 <LSM6DSO_0_Probe+0x174>)
 8005e4e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

      if (MotionDrv[CUSTOM_LSM6DSO_0]->Init(MotionCompObj[CUSTOM_LSM6DSO_0]) != LSM6DSO_OK)
 8005e52:	4b18      	ldr	r3, [pc, #96]	; (8005eb4 <LSM6DSO_0_Probe+0x160>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a15      	ldr	r2, [pc, #84]	; (8005eb0 <LSM6DSO_0_Probe+0x15c>)
 8005e5a:	6812      	ldr	r2, [r2, #0]
 8005e5c:	4610      	mov	r0, r2
 8005e5e:	4798      	blx	r3
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <LSM6DSO_0_Probe+0x11a>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e66:	f06f 0304 	mvn.w	r3, #4
 8005e6a:	647b      	str	r3, [r7, #68]	; 0x44
 8005e6c:	e001      	b.n	8005e72 <LSM6DSO_0_Probe+0x11e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	647b      	str	r3, [r7, #68]	; 0x44
      }
    }
    if ((ret == BSP_ERROR_NONE) && ((Functions & MOTION_MAGNETO) == MOTION_MAGNETO))
 8005e72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d107      	bne.n	8005e88 <LSM6DSO_0_Probe+0x134>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f003 0304 	and.w	r3, r3, #4
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d002      	beq.n	8005e88 <LSM6DSO_0_Probe+0x134>
    {
      /* Return an error if the application try to initialize a function not supported by the component */
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005e82:	f06f 0304 	mvn.w	r3, #4
 8005e86:	647b      	str	r3, [r7, #68]	; 0x44
    }
  }

  return ret;
 8005e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3748      	adds	r7, #72	; 0x48
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	0800637d 	.word	0x0800637d
 8005e98:	080063e1 	.word	0x080063e1
 8005e9c:	08006495 	.word	0x08006495
 8005ea0:	08006431 	.word	0x08006431
 8005ea4:	080064f9 	.word	0x080064f9
 8005ea8:	20000240 	.word	0x20000240
 8005eac:	2000023c 	.word	0x2000023c
 8005eb0:	200002c4 	.word	0x200002c4
 8005eb4:	20000238 	.word	0x20000238
 8005eb8:	20000000 	.word	0x20000000
 8005ebc:	2000008c 	.word	0x2000008c
 8005ec0:	2000022c 	.word	0x2000022c
 8005ec4:	20000034 	.word	0x20000034
 8005ec8:	20000010 	.word	0x20000010

08005ecc <CUSTOM_MOTION_SENSOR_Read_Register>:
 * @param  Reg address to be read
 * @param  Data pointer where the value is written to
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Read_Register(uint32_t Instance, uint8_t Reg, uint8_t *Data)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	72fb      	strb	r3, [r7, #11]
  int32_t ret;

  switch (Instance)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d112      	bne.n	8005f06 <CUSTOM_MOTION_SENSOR_Read_Register+0x3a>
  {

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSO_0 == 1)
    case CUSTOM_LSM6DSO_0:
      if (LSM6DSO_Read_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 8005ee0:	4a0d      	ldr	r2, [pc, #52]	; (8005f18 <CUSTOM_MOTION_SENSOR_Read_Register+0x4c>)
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ee8:	7af9      	ldrb	r1, [r7, #11]
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	4618      	mov	r0, r3
 8005eee:	f7fb faf4 	bl	80014da <LSM6DSO_Read_Reg>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d003      	beq.n	8005f00 <CUSTOM_MOTION_SENSOR_Read_Register+0x34>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ef8:	f06f 0304 	mvn.w	r3, #4
 8005efc:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8005efe:	e006      	b.n	8005f0e <CUSTOM_MOTION_SENSOR_Read_Register+0x42>
        ret = BSP_ERROR_NONE;
 8005f00:	2300      	movs	r3, #0
 8005f02:	617b      	str	r3, [r7, #20]
      break;
 8005f04:	e003      	b.n	8005f0e <CUSTOM_MOTION_SENSOR_Read_Register+0x42>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005f06:	f06f 0301 	mvn.w	r3, #1
 8005f0a:	617b      	str	r3, [r7, #20]
      break;
 8005f0c:	bf00      	nop
  }

  return ret;
 8005f0e:	697b      	ldr	r3, [r7, #20]
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3718      	adds	r7, #24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	200002c4 	.word	0x200002c4

08005f1c <CUSTOM_MOTION_SENSOR_Write_Register>:
 * @param  Reg address to be read
 * @param  Data value to be written
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Write_Register(uint32_t Instance, uint8_t Reg, uint8_t Data)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	460b      	mov	r3, r1
 8005f26:	70fb      	strb	r3, [r7, #3]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	70bb      	strb	r3, [r7, #2]
  int32_t ret;

  switch (Instance)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d112      	bne.n	8005f58 <CUSTOM_MOTION_SENSOR_Write_Register+0x3c>
  {

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSO_0 == 1)
    case CUSTOM_LSM6DSO_0:
      if (LSM6DSO_Write_Reg(MotionCompObj[Instance], Reg, Data) != BSP_ERROR_NONE)
 8005f32:	4a0e      	ldr	r2, [pc, #56]	; (8005f6c <CUSTOM_MOTION_SENSOR_Write_Register+0x50>)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f3a:	78ba      	ldrb	r2, [r7, #2]
 8005f3c:	78f9      	ldrb	r1, [r7, #3]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fb fae5 	bl	800150e <LSM6DSO_Write_Reg>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d003      	beq.n	8005f52 <CUSTOM_MOTION_SENSOR_Write_Register+0x36>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005f4a:	f06f 0304 	mvn.w	r3, #4
 8005f4e:	60fb      	str	r3, [r7, #12]
      }
      else
      {
        ret = BSP_ERROR_NONE;
      }
      break;
 8005f50:	e006      	b.n	8005f60 <CUSTOM_MOTION_SENSOR_Write_Register+0x44>
        ret = BSP_ERROR_NONE;
 8005f52:	2300      	movs	r3, #0
 8005f54:	60fb      	str	r3, [r7, #12]
      break;
 8005f56:	e003      	b.n	8005f60 <CUSTOM_MOTION_SENSOR_Write_Register+0x44>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005f58:	f06f 0301 	mvn.w	r3, #1
 8005f5c:	60fb      	str	r3, [r7, #12]
      break;
 8005f5e:	bf00      	nop
  }

  return ret;
 8005f60:	68fb      	ldr	r3, [r7, #12]
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3710      	adds	r7, #16
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	200002c4 	.word	0x200002c4

08005f70 <CUSTOM_MOTION_SENSOR_Get_DRDY_Status>:
 * @param  Function Motion sensor function
 * @param  Status the pointer to the status
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Get_DRDY_Status(uint32_t Instance, uint32_t Function, uint8_t *Status)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
  int32_t ret;

  switch (Instance)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d131      	bne.n	8005fe6 <CUSTOM_MOTION_SENSOR_Get_DRDY_Status+0x76>
  {

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSO_0 == 1)
    case CUSTOM_LSM6DSO_0:
      if ((Function & MOTION_ACCELERO) == MOTION_ACCELERO)
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f003 0302 	and.w	r3, r3, #2
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d011      	beq.n	8005fb0 <CUSTOM_MOTION_SENSOR_Get_DRDY_Status+0x40>
      {
        if (LSM6DSO_ACC_Get_DRDY_Status(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 8005f8c:	4a1a      	ldr	r2, [pc, #104]	; (8005ff8 <CUSTOM_MOTION_SENSOR_Get_DRDY_Status+0x88>)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7fb fad4 	bl	8001544 <LSM6DSO_ACC_Get_DRDY_Status>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <CUSTOM_MOTION_SENSOR_Get_DRDY_Status+0x3a>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8005fa2:	f06f 0304 	mvn.w	r3, #4
 8005fa6:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
      }
      break;
 8005fa8:	e021      	b.n	8005fee <CUSTOM_MOTION_SENSOR_Get_DRDY_Status+0x7e>
          ret = BSP_ERROR_NONE;
 8005faa:	2300      	movs	r3, #0
 8005fac:	617b      	str	r3, [r7, #20]
      break;
 8005fae:	e01e      	b.n	8005fee <CUSTOM_MOTION_SENSOR_Get_DRDY_Status+0x7e>
      else if ((Function & MOTION_GYRO) == MOTION_GYRO)
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d011      	beq.n	8005fde <CUSTOM_MOTION_SENSOR_Get_DRDY_Status+0x6e>
        if (LSM6DSO_GYRO_Get_DRDY_Status(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 8005fba:	4a0f      	ldr	r2, [pc, #60]	; (8005ff8 <CUSTOM_MOTION_SENSOR_Get_DRDY_Status+0x88>)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fc2:	6879      	ldr	r1, [r7, #4]
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f7fb fafc 	bl	80015c2 <LSM6DSO_GYRO_Get_DRDY_Status>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <CUSTOM_MOTION_SENSOR_Get_DRDY_Status+0x68>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8005fd0:	f06f 0304 	mvn.w	r3, #4
 8005fd4:	617b      	str	r3, [r7, #20]
      break;
 8005fd6:	e00a      	b.n	8005fee <CUSTOM_MOTION_SENSOR_Get_DRDY_Status+0x7e>
          ret = BSP_ERROR_NONE;
 8005fd8:	2300      	movs	r3, #0
 8005fda:	617b      	str	r3, [r7, #20]
      break;
 8005fdc:	e007      	b.n	8005fee <CUSTOM_MOTION_SENSOR_Get_DRDY_Status+0x7e>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005fde:	f06f 0304 	mvn.w	r3, #4
 8005fe2:	617b      	str	r3, [r7, #20]
      break;
 8005fe4:	e003      	b.n	8005fee <CUSTOM_MOTION_SENSOR_Get_DRDY_Status+0x7e>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8005fe6:	f06f 0301 	mvn.w	r3, #1
 8005fea:	617b      	str	r3, [r7, #20]
      break;
 8005fec:	bf00      	nop
  }

  return ret;
 8005fee:	697b      	ldr	r3, [r7, #20]
}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3718      	adds	r7, #24
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	200002c4 	.word	0x200002c4

08005ffc <CUSTOM_MOTION_SENSOR_Set_SelfTest>:
 * @param  Function Motion sensor function
 * @param  Data FIFO single axis data
 * @retval BSP status
 */
int32_t CUSTOM_MOTION_SENSOR_Set_SelfTest(uint32_t Instance, uint32_t Function, uint8_t Status)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	4613      	mov	r3, r2
 8006008:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  switch (Instance)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d133      	bne.n	8006078 <CUSTOM_MOTION_SENSOR_Set_SelfTest+0x7c>
  {

#if (USE_CUSTOM_MOTION_SENSOR_LSM6DSO_0 == 1)
    case CUSTOM_LSM6DSO_0:
      if ((Function & MOTION_ACCELERO) == MOTION_ACCELERO)
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d012      	beq.n	8006040 <CUSTOM_MOTION_SENSOR_Set_SelfTest+0x44>
      {
        if (LSM6DSO_ACC_Set_SelfTest(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 800601a:	4a1c      	ldr	r2, [pc, #112]	; (800608c <CUSTOM_MOTION_SENSOR_Set_SelfTest+0x90>)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006022:	79fa      	ldrb	r2, [r7, #7]
 8006024:	4611      	mov	r1, r2
 8006026:	4618      	mov	r0, r3
 8006028:	f7fb faa2 	bl	8001570 <LSM6DSO_ACC_Set_SelfTest>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d003      	beq.n	800603a <CUSTOM_MOTION_SENSOR_Set_SelfTest+0x3e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8006032:	f06f 0304 	mvn.w	r3, #4
 8006036:	617b      	str	r3, [r7, #20]
      }
      else
      {
        ret = BSP_ERROR_WRONG_PARAM;
      }
      break;
 8006038:	e022      	b.n	8006080 <CUSTOM_MOTION_SENSOR_Set_SelfTest+0x84>
          ret = BSP_ERROR_NONE;
 800603a:	2300      	movs	r3, #0
 800603c:	617b      	str	r3, [r7, #20]
      break;
 800603e:	e01f      	b.n	8006080 <CUSTOM_MOTION_SENSOR_Set_SelfTest+0x84>
      else if ((Function & MOTION_GYRO) == MOTION_GYRO)
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	f003 0301 	and.w	r3, r3, #1
 8006046:	2b00      	cmp	r3, #0
 8006048:	d012      	beq.n	8006070 <CUSTOM_MOTION_SENSOR_Set_SelfTest+0x74>
        if (LSM6DSO_GYRO_Set_SelfTest(MotionCompObj[Instance], Status) != BSP_ERROR_NONE)
 800604a:	4a10      	ldr	r2, [pc, #64]	; (800608c <CUSTOM_MOTION_SENSOR_Set_SelfTest+0x90>)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006052:	79fa      	ldrb	r2, [r7, #7]
 8006054:	4611      	mov	r1, r2
 8006056:	4618      	mov	r0, r3
 8006058:	f7fb fac9 	bl	80015ee <LSM6DSO_GYRO_Set_SelfTest>
 800605c:	4603      	mov	r3, r0
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <CUSTOM_MOTION_SENSOR_Set_SelfTest+0x6e>
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8006062:	f06f 0304 	mvn.w	r3, #4
 8006066:	617b      	str	r3, [r7, #20]
      break;
 8006068:	e00a      	b.n	8006080 <CUSTOM_MOTION_SENSOR_Set_SelfTest+0x84>
          ret = BSP_ERROR_NONE;
 800606a:	2300      	movs	r3, #0
 800606c:	617b      	str	r3, [r7, #20]
      break;
 800606e:	e007      	b.n	8006080 <CUSTOM_MOTION_SENSOR_Set_SelfTest+0x84>
        ret = BSP_ERROR_WRONG_PARAM;
 8006070:	f06f 0301 	mvn.w	r3, #1
 8006074:	617b      	str	r3, [r7, #20]
      break;
 8006076:	e003      	b.n	8006080 <CUSTOM_MOTION_SENSOR_Set_SelfTest+0x84>
#endif

    default:
      ret = BSP_ERROR_WRONG_PARAM;
 8006078:	f06f 0301 	mvn.w	r3, #1
 800607c:	617b      	str	r3, [r7, #20]
      break;
 800607e:	bf00      	nop
  }

  return ret;
 8006080:	697b      	ldr	r3, [r7, #20]
}
 8006082:	4618      	mov	r0, r3
 8006084:	3718      	adds	r7, #24
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}
 800608a:	bf00      	nop
 800608c:	200002c4 	.word	0x200002c4

08006090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006094:	f7fc fce8 	bl	8002a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006098:	f000 f82c 	bl	80060f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800609c:	f000 f8aa 	bl	80061f4 <MX_GPIO_Init>
  MX_CRC_Init();
 80060a0:	f000 f894 	bl	80061cc <MX_CRC_Init>
  MX_MEMS_Init();
 80060a4:	f7ff fa90 	bl	80055c8 <MX_MEMS_Init>
  /* USER CODE BEGIN 2 */
  UartHandle.Instance          = USARTx;
 80060a8:	4b10      	ldr	r3, [pc, #64]	; (80060ec <main+0x5c>)
 80060aa:	4a11      	ldr	r2, [pc, #68]	; (80060f0 <main+0x60>)
 80060ac:	601a      	str	r2, [r3, #0]
  UartHandle.Init.BaudRate     = 9600;
 80060ae:	4b0f      	ldr	r3, [pc, #60]	; (80060ec <main+0x5c>)
 80060b0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80060b4:	605a      	str	r2, [r3, #4]
  UartHandle.Init.WordLength   = UART_WORDLENGTH_8B;
 80060b6:	4b0d      	ldr	r3, [pc, #52]	; (80060ec <main+0x5c>)
 80060b8:	2200      	movs	r2, #0
 80060ba:	609a      	str	r2, [r3, #8]
  UartHandle.Init.StopBits     = UART_STOPBITS_1;
 80060bc:	4b0b      	ldr	r3, [pc, #44]	; (80060ec <main+0x5c>)
 80060be:	2200      	movs	r2, #0
 80060c0:	60da      	str	r2, [r3, #12]
  UartHandle.Init.Parity       = UART_PARITY_NONE;
 80060c2:	4b0a      	ldr	r3, [pc, #40]	; (80060ec <main+0x5c>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	611a      	str	r2, [r3, #16]
  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80060c8:	4b08      	ldr	r3, [pc, #32]	; (80060ec <main+0x5c>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	619a      	str	r2, [r3, #24]
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 80060ce:	4b07      	ldr	r3, [pc, #28]	; (80060ec <main+0x5c>)
 80060d0:	220c      	movs	r2, #12
 80060d2:	615a      	str	r2, [r3, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 80060d4:	4b05      	ldr	r3, [pc, #20]	; (80060ec <main+0x5c>)
 80060d6:	2200      	movs	r2, #0
 80060d8:	61da      	str	r2, [r3, #28]
  BSP_LED_Init(LED2);
 80060da:	2000      	movs	r0, #0
 80060dc:	f7fc facc 	bl	8002678 <BSP_LED_Init>
  BSP_LED_On(LED2);
 80060e0:	2000      	movs	r0, #0
 80060e2:	f7fc fadb 	bl	800269c <BSP_LED_On>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  MX_MEMS_Process();
 80060e6:	f7ff fa75 	bl	80055d4 <MX_MEMS_Process>
 80060ea:	e7fc      	b.n	80060e6 <main+0x56>
 80060ec:	200002d0 	.word	0x200002d0
 80060f0:	40004400 	.word	0x40004400

080060f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b094      	sub	sp, #80	; 0x50
 80060f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80060fa:	f107 0320 	add.w	r3, r7, #32
 80060fe:	2230      	movs	r2, #48	; 0x30
 8006100:	2100      	movs	r1, #0
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fbb3 	bl	800686e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006108:	f107 030c 	add.w	r3, r7, #12
 800610c:	2200      	movs	r2, #0
 800610e:	601a      	str	r2, [r3, #0]
 8006110:	605a      	str	r2, [r3, #4]
 8006112:	609a      	str	r2, [r3, #8]
 8006114:	60da      	str	r2, [r3, #12]
 8006116:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006118:	2300      	movs	r3, #0
 800611a:	60bb      	str	r3, [r7, #8]
 800611c:	4b29      	ldr	r3, [pc, #164]	; (80061c4 <SystemClock_Config+0xd0>)
 800611e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006120:	4a28      	ldr	r2, [pc, #160]	; (80061c4 <SystemClock_Config+0xd0>)
 8006122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006126:	6413      	str	r3, [r2, #64]	; 0x40
 8006128:	4b26      	ldr	r3, [pc, #152]	; (80061c4 <SystemClock_Config+0xd0>)
 800612a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006130:	60bb      	str	r3, [r7, #8]
 8006132:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8006134:	2300      	movs	r3, #0
 8006136:	607b      	str	r3, [r7, #4]
 8006138:	4b23      	ldr	r3, [pc, #140]	; (80061c8 <SystemClock_Config+0xd4>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8006140:	4a21      	ldr	r2, [pc, #132]	; (80061c8 <SystemClock_Config+0xd4>)
 8006142:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006146:	6013      	str	r3, [r2, #0]
 8006148:	4b1f      	ldr	r3, [pc, #124]	; (80061c8 <SystemClock_Config+0xd4>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006150:	607b      	str	r3, [r7, #4]
 8006152:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006154:	2302      	movs	r3, #2
 8006156:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006158:	2301      	movs	r3, #1
 800615a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800615c:	2310      	movs	r3, #16
 800615e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006160:	2302      	movs	r3, #2
 8006162:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006164:	2300      	movs	r3, #0
 8006166:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8006168:	2310      	movs	r3, #16
 800616a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800616c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8006170:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8006172:	2304      	movs	r3, #4
 8006174:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8006176:	2307      	movs	r3, #7
 8006178:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800617a:	f107 0320 	add.w	r3, r7, #32
 800617e:	4618      	mov	r0, r3
 8006180:	f7fe f90a 	bl	8004398 <HAL_RCC_OscConfig>
 8006184:	4603      	mov	r3, r0
 8006186:	2b00      	cmp	r3, #0
 8006188:	d001      	beq.n	800618e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800618a:	f000 f877 	bl	800627c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800618e:	230f      	movs	r3, #15
 8006190:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006192:	2302      	movs	r3, #2
 8006194:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006196:	2300      	movs	r3, #0
 8006198:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800619a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800619e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80061a0:	2300      	movs	r3, #0
 80061a2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80061a4:	f107 030c 	add.w	r3, r7, #12
 80061a8:	2102      	movs	r1, #2
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fe fb64 	bl	8004878 <HAL_RCC_ClockConfig>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d001      	beq.n	80061ba <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80061b6:	f000 f861 	bl	800627c <Error_Handler>
  }
}
 80061ba:	bf00      	nop
 80061bc:	3750      	adds	r7, #80	; 0x50
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	40023800 	.word	0x40023800
 80061c8:	40007000 	.word	0x40007000

080061cc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80061d0:	4b06      	ldr	r3, [pc, #24]	; (80061ec <MX_CRC_Init+0x20>)
 80061d2:	4a07      	ldr	r2, [pc, #28]	; (80061f0 <MX_CRC_Init+0x24>)
 80061d4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80061d6:	4805      	ldr	r0, [pc, #20]	; (80061ec <MX_CRC_Init+0x20>)
 80061d8:	f7fc fdeb 	bl	8002db2 <HAL_CRC_Init>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80061e2:	f000 f84b 	bl	800627c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80061e6:	bf00      	nop
 80061e8:	bd80      	pop	{r7, pc}
 80061ea:	bf00      	nop
 80061ec:	200002c8 	.word	0x200002c8
 80061f0:	40023000 	.word	0x40023000

080061f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80061fa:	2300      	movs	r3, #0
 80061fc:	60fb      	str	r3, [r7, #12]
 80061fe:	4b1e      	ldr	r3, [pc, #120]	; (8006278 <MX_GPIO_Init+0x84>)
 8006200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006202:	4a1d      	ldr	r2, [pc, #116]	; (8006278 <MX_GPIO_Init+0x84>)
 8006204:	f043 0304 	orr.w	r3, r3, #4
 8006208:	6313      	str	r3, [r2, #48]	; 0x30
 800620a:	4b1b      	ldr	r3, [pc, #108]	; (8006278 <MX_GPIO_Init+0x84>)
 800620c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620e:	f003 0304 	and.w	r3, r3, #4
 8006212:	60fb      	str	r3, [r7, #12]
 8006214:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006216:	2300      	movs	r3, #0
 8006218:	60bb      	str	r3, [r7, #8]
 800621a:	4b17      	ldr	r3, [pc, #92]	; (8006278 <MX_GPIO_Init+0x84>)
 800621c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800621e:	4a16      	ldr	r2, [pc, #88]	; (8006278 <MX_GPIO_Init+0x84>)
 8006220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006224:	6313      	str	r3, [r2, #48]	; 0x30
 8006226:	4b14      	ldr	r3, [pc, #80]	; (8006278 <MX_GPIO_Init+0x84>)
 8006228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800622a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800622e:	60bb      	str	r3, [r7, #8]
 8006230:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006232:	2300      	movs	r3, #0
 8006234:	607b      	str	r3, [r7, #4]
 8006236:	4b10      	ldr	r3, [pc, #64]	; (8006278 <MX_GPIO_Init+0x84>)
 8006238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800623a:	4a0f      	ldr	r2, [pc, #60]	; (8006278 <MX_GPIO_Init+0x84>)
 800623c:	f043 0301 	orr.w	r3, r3, #1
 8006240:	6313      	str	r3, [r2, #48]	; 0x30
 8006242:	4b0d      	ldr	r3, [pc, #52]	; (8006278 <MX_GPIO_Init+0x84>)
 8006244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	607b      	str	r3, [r7, #4]
 800624c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800624e:	2300      	movs	r3, #0
 8006250:	603b      	str	r3, [r7, #0]
 8006252:	4b09      	ldr	r3, [pc, #36]	; (8006278 <MX_GPIO_Init+0x84>)
 8006254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006256:	4a08      	ldr	r2, [pc, #32]	; (8006278 <MX_GPIO_Init+0x84>)
 8006258:	f043 0302 	orr.w	r3, r3, #2
 800625c:	6313      	str	r3, [r2, #48]	; 0x30
 800625e:	4b06      	ldr	r3, [pc, #24]	; (8006278 <MX_GPIO_Init+0x84>)
 8006260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006262:	f003 0302 	and.w	r3, r3, #2
 8006266:	603b      	str	r3, [r7, #0]
 8006268:	683b      	ldr	r3, [r7, #0]

}
 800626a:	bf00      	nop
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr
 8006276:	bf00      	nop
 8006278:	40023800 	.word	0x40023800

0800627c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800627c:	b580      	push	{r7, lr}
 800627e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	BSP_LED_Off(LED2);
 8006280:	2000      	movs	r0, #0
 8006282:	f7fc fa21 	bl	80026c8 <BSP_LED_Off>
  /* USER CODE END Error_Handler_Debug */
}
 8006286:	bf00      	nop
 8006288:	bd80      	pop	{r7, pc}
	...

0800628c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b082      	sub	sp, #8
 8006290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006292:	2300      	movs	r3, #0
 8006294:	607b      	str	r3, [r7, #4]
 8006296:	4b10      	ldr	r3, [pc, #64]	; (80062d8 <HAL_MspInit+0x4c>)
 8006298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800629a:	4a0f      	ldr	r2, [pc, #60]	; (80062d8 <HAL_MspInit+0x4c>)
 800629c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062a0:	6453      	str	r3, [r2, #68]	; 0x44
 80062a2:	4b0d      	ldr	r3, [pc, #52]	; (80062d8 <HAL_MspInit+0x4c>)
 80062a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062aa:	607b      	str	r3, [r7, #4]
 80062ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80062ae:	2300      	movs	r3, #0
 80062b0:	603b      	str	r3, [r7, #0]
 80062b2:	4b09      	ldr	r3, [pc, #36]	; (80062d8 <HAL_MspInit+0x4c>)
 80062b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062b6:	4a08      	ldr	r2, [pc, #32]	; (80062d8 <HAL_MspInit+0x4c>)
 80062b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062bc:	6413      	str	r3, [r2, #64]	; 0x40
 80062be:	4b06      	ldr	r3, [pc, #24]	; (80062d8 <HAL_MspInit+0x4c>)
 80062c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062c6:	603b      	str	r3, [r7, #0]
 80062c8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80062ca:	2007      	movs	r0, #7
 80062cc:	f7fc fd30 	bl	8002d30 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80062d0:	bf00      	nop
 80062d2:	3708      	adds	r7, #8
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	40023800 	.word	0x40023800

080062dc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a0b      	ldr	r2, [pc, #44]	; (8006318 <HAL_CRC_MspInit+0x3c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d10d      	bne.n	800630a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80062ee:	2300      	movs	r3, #0
 80062f0:	60fb      	str	r3, [r7, #12]
 80062f2:	4b0a      	ldr	r3, [pc, #40]	; (800631c <HAL_CRC_MspInit+0x40>)
 80062f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062f6:	4a09      	ldr	r2, [pc, #36]	; (800631c <HAL_CRC_MspInit+0x40>)
 80062f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80062fc:	6313      	str	r3, [r2, #48]	; 0x30
 80062fe:	4b07      	ldr	r3, [pc, #28]	; (800631c <HAL_CRC_MspInit+0x40>)
 8006300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006302:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006306:	60fb      	str	r3, [r7, #12]
 8006308:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800630a:	bf00      	nop
 800630c:	3714      	adds	r7, #20
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr
 8006316:	bf00      	nop
 8006318:	40023000 	.word	0x40023000
 800631c:	40023800 	.word	0x40023800

08006320 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006320:	b480      	push	{r7}
 8006322:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006324:	bf00      	nop
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800632e:	b480      	push	{r7}
 8006330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006332:	e7fe      	b.n	8006332 <HardFault_Handler+0x4>

08006334 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006334:	b480      	push	{r7}
 8006336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006338:	e7fe      	b.n	8006338 <MemManage_Handler+0x4>

0800633a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800633a:	b480      	push	{r7}
 800633c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800633e:	e7fe      	b.n	800633e <BusFault_Handler+0x4>

08006340 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006340:	b480      	push	{r7}
 8006342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006344:	e7fe      	b.n	8006344 <UsageFault_Handler+0x4>

08006346 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006346:	b480      	push	{r7}
 8006348:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800634a:	bf00      	nop
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006358:	bf00      	nop
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006362:	b480      	push	{r7}
 8006364:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006366:	bf00      	nop
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr

08006370 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006374:	f7fc fbca 	bl	8002b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006378:	bf00      	nop
 800637a:	bd80      	pop	{r7, pc}

0800637c <BSP_I2C1_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C1_Init(void)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 8006382:	2300      	movs	r3, #0
 8006384:	607b      	str	r3, [r7, #4]

  hi2c1.Instance  = I2C1;
 8006386:	4b13      	ldr	r3, [pc, #76]	; (80063d4 <BSP_I2C1_Init+0x58>)
 8006388:	4a13      	ldr	r2, [pc, #76]	; (80063d8 <BSP_I2C1_Init+0x5c>)
 800638a:	601a      	str	r2, [r3, #0]

  if(I2C1InitCounter++ == 0)
 800638c:	4b13      	ldr	r3, [pc, #76]	; (80063dc <BSP_I2C1_Init+0x60>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	1c5a      	adds	r2, r3, #1
 8006392:	4912      	ldr	r1, [pc, #72]	; (80063dc <BSP_I2C1_Init+0x60>)
 8006394:	600a      	str	r2, [r1, #0]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d117      	bne.n	80063ca <BSP_I2C1_Init+0x4e>
  {
    if (HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_RESET)
 800639a:	480e      	ldr	r0, [pc, #56]	; (80063d4 <BSP_I2C1_Init+0x58>)
 800639c:	f7fd fc86 	bl	8003cac <HAL_I2C_GetState>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d111      	bne.n	80063ca <BSP_I2C1_Init+0x4e>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C1_MspInit(&hi2c1);
 80063a6:	480b      	ldr	r0, [pc, #44]	; (80063d4 <BSP_I2C1_Init+0x58>)
 80063a8:	f000 f8e2 	bl	8006570 <I2C1_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10b      	bne.n	80063ca <BSP_I2C1_Init+0x4e>
	  {
    	/* Init the I2C */
    	if(MX_I2C1_Init(&hi2c1) != HAL_OK)
 80063b2:	4808      	ldr	r0, [pc, #32]	; (80063d4 <BSP_I2C1_Init+0x58>)
 80063b4:	f000 f8a8 	bl	8006508 <MX_I2C1_Init>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d003      	beq.n	80063c6 <BSP_I2C1_Init+0x4a>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 80063be:	f06f 0307 	mvn.w	r3, #7
 80063c2:	607b      	str	r3, [r7, #4]
 80063c4:	e001      	b.n	80063ca <BSP_I2C1_Init+0x4e>
    	}
        else
        {
      	  ret = BSP_ERROR_NONE;
 80063c6:	2300      	movs	r3, #0
 80063c8:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 80063ca:	687b      	ldr	r3, [r7, #4]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3708      	adds	r7, #8
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	20000310 	.word	0x20000310
 80063d8:	40005400 	.word	0x40005400
 80063dc:	20000270 	.word	0x20000270

080063e0 <BSP_I2C1_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C1_DeInit(void)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80063e6:	2300      	movs	r3, #0
 80063e8:	607b      	str	r3, [r7, #4]

  if (I2C1InitCounter > 0)
 80063ea:	4b0f      	ldr	r3, [pc, #60]	; (8006428 <BSP_I2C1_DeInit+0x48>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d014      	beq.n	800641c <BSP_I2C1_DeInit+0x3c>
  {
    if (--I2C1InitCounter == 0)
 80063f2:	4b0d      	ldr	r3, [pc, #52]	; (8006428 <BSP_I2C1_DeInit+0x48>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	3b01      	subs	r3, #1
 80063f8:	4a0b      	ldr	r2, [pc, #44]	; (8006428 <BSP_I2C1_DeInit+0x48>)
 80063fa:	6013      	str	r3, [r2, #0]
 80063fc:	4b0a      	ldr	r3, [pc, #40]	; (8006428 <BSP_I2C1_DeInit+0x48>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d10b      	bne.n	800641c <BSP_I2C1_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C1_MspDeInit(&hi2c1);
 8006404:	4809      	ldr	r0, [pc, #36]	; (800642c <BSP_I2C1_DeInit+0x4c>)
 8006406:	f000 f8fd 	bl	8006604 <I2C1_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c1) != HAL_OK)
 800640a:	4808      	ldr	r0, [pc, #32]	; (800642c <BSP_I2C1_DeInit+0x4c>)
 800640c:	f7fd f8ea 	bl	80035e4 <HAL_I2C_DeInit>
 8006410:	4603      	mov	r3, r0
 8006412:	2b00      	cmp	r3, #0
 8006414:	d002      	beq.n	800641c <BSP_I2C1_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 8006416:	f06f 0307 	mvn.w	r3, #7
 800641a:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 800641c:	687b      	ldr	r3, [r7, #4]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3708      	adds	r7, #8
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	20000270 	.word	0x20000270
 800642c:	20000310 	.word	0x20000310

08006430 <BSP_I2C1_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b08a      	sub	sp, #40	; 0x28
 8006434:	af04      	add	r7, sp, #16
 8006436:	60ba      	str	r2, [r7, #8]
 8006438:	461a      	mov	r2, r3
 800643a:	4603      	mov	r3, r0
 800643c:	81fb      	strh	r3, [r7, #14]
 800643e:	460b      	mov	r3, r1
 8006440:	81bb      	strh	r3, [r7, #12]
 8006442:	4613      	mov	r3, r2
 8006444:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8006446:	2300      	movs	r3, #0
 8006448:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c1, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 800644a:	89ba      	ldrh	r2, [r7, #12]
 800644c:	89f9      	ldrh	r1, [r7, #14]
 800644e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006452:	9302      	str	r3, [sp, #8]
 8006454:	88fb      	ldrh	r3, [r7, #6]
 8006456:	9301      	str	r3, [sp, #4]
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	2301      	movs	r3, #1
 800645e:	480c      	ldr	r0, [pc, #48]	; (8006490 <BSP_I2C1_WriteReg+0x60>)
 8006460:	f7fd f904 	bl	800366c <HAL_I2C_Mem_Write>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d00c      	beq.n	8006484 <BSP_I2C1_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 800646a:	4809      	ldr	r0, [pc, #36]	; (8006490 <BSP_I2C1_WriteReg+0x60>)
 800646c:	f7fd fc2c 	bl	8003cc8 <HAL_I2C_GetError>
 8006470:	4603      	mov	r3, r0
 8006472:	2b04      	cmp	r3, #4
 8006474:	d103      	bne.n	800647e <BSP_I2C1_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8006476:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800647a:	617b      	str	r3, [r7, #20]
 800647c:	e002      	b.n	8006484 <BSP_I2C1_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800647e:	f06f 0303 	mvn.w	r3, #3
 8006482:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8006484:	697b      	ldr	r3, [r7, #20]
}
 8006486:	4618      	mov	r0, r3
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	20000310 	.word	0x20000310

08006494 <BSP_I2C1_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b08a      	sub	sp, #40	; 0x28
 8006498:	af04      	add	r7, sp, #16
 800649a:	60ba      	str	r2, [r7, #8]
 800649c:	461a      	mov	r2, r3
 800649e:	4603      	mov	r3, r0
 80064a0:	81fb      	strh	r3, [r7, #14]
 80064a2:	460b      	mov	r3, r1
 80064a4:	81bb      	strh	r3, [r7, #12]
 80064a6:	4613      	mov	r3, r2
 80064a8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80064aa:	2300      	movs	r3, #0
 80064ac:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C1_POLL_TIMEOUT) != HAL_OK)
 80064ae:	89ba      	ldrh	r2, [r7, #12]
 80064b0:	89f9      	ldrh	r1, [r7, #14]
 80064b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80064b6:	9302      	str	r3, [sp, #8]
 80064b8:	88fb      	ldrh	r3, [r7, #6]
 80064ba:	9301      	str	r3, [sp, #4]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	9300      	str	r3, [sp, #0]
 80064c0:	2301      	movs	r3, #1
 80064c2:	480c      	ldr	r0, [pc, #48]	; (80064f4 <BSP_I2C1_ReadReg+0x60>)
 80064c4:	f7fd f9cc 	bl	8003860 <HAL_I2C_Mem_Read>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00c      	beq.n	80064e8 <BSP_I2C1_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF)
 80064ce:	4809      	ldr	r0, [pc, #36]	; (80064f4 <BSP_I2C1_ReadReg+0x60>)
 80064d0:	f7fd fbfa 	bl	8003cc8 <HAL_I2C_GetError>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b04      	cmp	r3, #4
 80064d8:	d103      	bne.n	80064e2 <BSP_I2C1_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80064da:	f06f 0365 	mvn.w	r3, #101	; 0x65
 80064de:	617b      	str	r3, [r7, #20]
 80064e0:	e002      	b.n	80064e8 <BSP_I2C1_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80064e2:	f06f 0303 	mvn.w	r3, #3
 80064e6:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80064e8:	697b      	ldr	r3, [r7, #20]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	20000310 	.word	0x20000310

080064f8 <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 80064f8:	b580      	push	{r7, lr}
 80064fa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80064fc:	f7fc fb1a 	bl	8002b34 <HAL_GetTick>
 8006500:	4603      	mov	r3, r0
}
 8006502:	4618      	mov	r0, r3
 8006504:	bd80      	pop	{r7, pc}
	...

08006508 <MX_I2C1_Init>:

/* I2C1 init function */

__weak HAL_StatusTypeDef MX_I2C1_Init(I2C_HandleTypeDef* hi2c)
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b084      	sub	sp, #16
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006510:	2300      	movs	r3, #0
 8006512:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C1;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a14      	ldr	r2, [pc, #80]	; (8006568 <MX_I2C1_Init+0x60>)
 8006518:	601a      	str	r2, [r3, #0]
  hi2c->Init.ClockSpeed = 100000;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a13      	ldr	r2, [pc, #76]	; (800656c <MX_I2C1_Init+0x64>)
 800651e:	605a      	str	r2, [r3, #4]
  hi2c->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	609a      	str	r2, [r3, #8]
  hi2c->Init.OwnAddress1 = 0;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	60da      	str	r2, [r3, #12]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006532:	611a      	str	r2, [r3, #16]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2200      	movs	r2, #0
 8006538:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2 = 0;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2200      	movs	r2, #0
 800653e:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2200      	movs	r2, #0
 8006544:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f7fc ff11 	bl	8003374 <HAL_I2C_Init>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d001      	beq.n	800655c <MX_I2C1_Init+0x54>
  {
    ret = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800655c:	7bfb      	ldrb	r3, [r7, #15]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3710      	adds	r7, #16
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	40005400 	.word	0x40005400
 800656c:	000186a0 	.word	0x000186a0

08006570 <I2C1_MspInit>:

static void I2C1_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b08a      	sub	sp, #40	; 0x28
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006578:	2300      	movs	r3, #0
 800657a:	613b      	str	r3, [r7, #16]
 800657c:	4b1f      	ldr	r3, [pc, #124]	; (80065fc <I2C1_MspInit+0x8c>)
 800657e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006580:	4a1e      	ldr	r2, [pc, #120]	; (80065fc <I2C1_MspInit+0x8c>)
 8006582:	f043 0302 	orr.w	r3, r3, #2
 8006586:	6313      	str	r3, [r2, #48]	; 0x30
 8006588:	4b1c      	ldr	r3, [pc, #112]	; (80065fc <I2C1_MspInit+0x8c>)
 800658a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800658c:	f003 0302 	and.w	r3, r3, #2
 8006590:	613b      	str	r3, [r7, #16]
 8006592:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C1_SCL_GPIO_PIN;
 8006594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800659a:	2312      	movs	r3, #18
 800659c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800659e:	2301      	movs	r3, #1
 80065a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065a2:	2303      	movs	r3, #3
 80065a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SCL_GPIO_AF;
 80065a6:	2304      	movs	r3, #4
 80065a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SCL_GPIO_PORT, &GPIO_InitStruct);
 80065aa:	f107 0314 	add.w	r3, r7, #20
 80065ae:	4619      	mov	r1, r3
 80065b0:	4813      	ldr	r0, [pc, #76]	; (8006600 <I2C1_MspInit+0x90>)
 80065b2:	f7fc fc49 	bl	8002e48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C1_SDA_GPIO_PIN;
 80065b6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80065bc:	2312      	movs	r3, #18
 80065be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80065c0:	2301      	movs	r3, #1
 80065c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065c4:	2303      	movs	r3, #3
 80065c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C1_SDA_GPIO_AF;
 80065c8:	2304      	movs	r3, #4
 80065ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C1_SDA_GPIO_PORT, &GPIO_InitStruct);
 80065cc:	f107 0314 	add.w	r3, r7, #20
 80065d0:	4619      	mov	r1, r3
 80065d2:	480b      	ldr	r0, [pc, #44]	; (8006600 <I2C1_MspInit+0x90>)
 80065d4:	f7fc fc38 	bl	8002e48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80065d8:	2300      	movs	r3, #0
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	4b07      	ldr	r3, [pc, #28]	; (80065fc <I2C1_MspInit+0x8c>)
 80065de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e0:	4a06      	ldr	r2, [pc, #24]	; (80065fc <I2C1_MspInit+0x8c>)
 80065e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80065e6:	6413      	str	r3, [r2, #64]	; 0x40
 80065e8:	4b04      	ldr	r3, [pc, #16]	; (80065fc <I2C1_MspInit+0x8c>)
 80065ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065f0:	60fb      	str	r3, [r7, #12]
 80065f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
}
 80065f4:	bf00      	nop
 80065f6:	3728      	adds	r7, #40	; 0x28
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	40023800 	.word	0x40023800
 8006600:	40020400 	.word	0x40020400

08006604 <I2C1_MspDeInit>:

static void I2C1_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800660c:	4b09      	ldr	r3, [pc, #36]	; (8006634 <I2C1_MspDeInit+0x30>)
 800660e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006610:	4a08      	ldr	r2, [pc, #32]	; (8006634 <I2C1_MspDeInit+0x30>)
 8006612:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006616:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C1_SCL_GPIO_PORT, BUS_I2C1_SCL_GPIO_PIN);
 8006618:	f44f 7180 	mov.w	r1, #256	; 0x100
 800661c:	4806      	ldr	r0, [pc, #24]	; (8006638 <I2C1_MspDeInit+0x34>)
 800661e:	f7fc fd95 	bl	800314c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C1_SDA_GPIO_PORT, BUS_I2C1_SDA_GPIO_PIN);
 8006622:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006626:	4804      	ldr	r0, [pc, #16]	; (8006638 <I2C1_MspDeInit+0x34>)
 8006628:	f7fc fd90 	bl	800314c <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
}
 800662c:	bf00      	nop
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}
 8006634:	40023800 	.word	0x40023800
 8006638:	40020400 	.word	0x40020400

0800663c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b086      	sub	sp, #24
 8006640:	af00      	add	r7, sp, #0
 8006642:	60f8      	str	r0, [r7, #12]
 8006644:	60b9      	str	r1, [r7, #8]
 8006646:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006648:	2300      	movs	r3, #0
 800664a:	617b      	str	r3, [r7, #20]
 800664c:	e00a      	b.n	8006664 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800664e:	f3af 8000 	nop.w
 8006652:	4601      	mov	r1, r0
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	1c5a      	adds	r2, r3, #1
 8006658:	60ba      	str	r2, [r7, #8]
 800665a:	b2ca      	uxtb	r2, r1
 800665c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	3301      	adds	r3, #1
 8006662:	617b      	str	r3, [r7, #20]
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	429a      	cmp	r2, r3
 800666a:	dbf0      	blt.n	800664e <_read+0x12>
	}

return len;
 800666c:	687b      	ldr	r3, [r7, #4]
}
 800666e:	4618      	mov	r0, r3
 8006670:	3718      	adds	r7, #24
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b086      	sub	sp, #24
 800667a:	af00      	add	r7, sp, #0
 800667c:	60f8      	str	r0, [r7, #12]
 800667e:	60b9      	str	r1, [r7, #8]
 8006680:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006682:	2300      	movs	r3, #0
 8006684:	617b      	str	r3, [r7, #20]
 8006686:	e009      	b.n	800669c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006688:	68bb      	ldr	r3, [r7, #8]
 800668a:	1c5a      	adds	r2, r3, #1
 800668c:	60ba      	str	r2, [r7, #8]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	4618      	mov	r0, r3
 8006692:	f7fc f989 	bl	80029a8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	3301      	adds	r3, #1
 800669a:	617b      	str	r3, [r7, #20]
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	dbf1      	blt.n	8006688 <_write+0x12>
	}
	return len;
 80066a4:	687b      	ldr	r3, [r7, #4]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3718      	adds	r7, #24
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}

080066ae <_close>:

int _close(int file)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
	return -1;
 80066b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	370c      	adds	r7, #12
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr

080066c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b083      	sub	sp, #12
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	6078      	str	r0, [r7, #4]
 80066ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80066d6:	605a      	str	r2, [r3, #4]
	return 0;
 80066d8:	2300      	movs	r3, #0
}
 80066da:	4618      	mov	r0, r3
 80066dc:	370c      	adds	r7, #12
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr

080066e6 <_isatty>:

int _isatty(int file)
{
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
	return 1;
 80066ee:	2301      	movs	r3, #1
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	607a      	str	r2, [r7, #4]
	return 0;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
	...

08006718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b086      	sub	sp, #24
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006720:	4a14      	ldr	r2, [pc, #80]	; (8006774 <_sbrk+0x5c>)
 8006722:	4b15      	ldr	r3, [pc, #84]	; (8006778 <_sbrk+0x60>)
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800672c:	4b13      	ldr	r3, [pc, #76]	; (800677c <_sbrk+0x64>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d102      	bne.n	800673a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006734:	4b11      	ldr	r3, [pc, #68]	; (800677c <_sbrk+0x64>)
 8006736:	4a12      	ldr	r2, [pc, #72]	; (8006780 <_sbrk+0x68>)
 8006738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800673a:	4b10      	ldr	r3, [pc, #64]	; (800677c <_sbrk+0x64>)
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	4413      	add	r3, r2
 8006742:	693a      	ldr	r2, [r7, #16]
 8006744:	429a      	cmp	r2, r3
 8006746:	d207      	bcs.n	8006758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006748:	f000 f85c 	bl	8006804 <__errno>
 800674c:	4602      	mov	r2, r0
 800674e:	230c      	movs	r3, #12
 8006750:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8006752:	f04f 33ff 	mov.w	r3, #4294967295
 8006756:	e009      	b.n	800676c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006758:	4b08      	ldr	r3, [pc, #32]	; (800677c <_sbrk+0x64>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800675e:	4b07      	ldr	r3, [pc, #28]	; (800677c <_sbrk+0x64>)
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4413      	add	r3, r2
 8006766:	4a05      	ldr	r2, [pc, #20]	; (800677c <_sbrk+0x64>)
 8006768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800676a:	68fb      	ldr	r3, [r7, #12]
}
 800676c:	4618      	mov	r0, r3
 800676e:	3718      	adds	r7, #24
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	20018000 	.word	0x20018000
 8006778:	00000800 	.word	0x00000800
 800677c:	20000274 	.word	0x20000274
 8006780:	20000368 	.word	0x20000368

08006784 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006784:	b480      	push	{r7}
 8006786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006788:	4b08      	ldr	r3, [pc, #32]	; (80067ac <SystemInit+0x28>)
 800678a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800678e:	4a07      	ldr	r2, [pc, #28]	; (80067ac <SystemInit+0x28>)
 8006790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006798:	4b04      	ldr	r3, [pc, #16]	; (80067ac <SystemInit+0x28>)
 800679a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800679e:	609a      	str	r2, [r3, #8]
#endif
}
 80067a0:	bf00      	nop
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
 80067aa:	bf00      	nop
 80067ac:	e000ed00 	.word	0xe000ed00

080067b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80067b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80067e8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80067b4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80067b6:	e003      	b.n	80067c0 <LoopCopyDataInit>

080067b8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80067b8:	4b0c      	ldr	r3, [pc, #48]	; (80067ec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80067ba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80067bc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80067be:	3104      	adds	r1, #4

080067c0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80067c0:	480b      	ldr	r0, [pc, #44]	; (80067f0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80067c2:	4b0c      	ldr	r3, [pc, #48]	; (80067f4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80067c4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80067c6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80067c8:	d3f6      	bcc.n	80067b8 <CopyDataInit>
  ldr  r2, =_sbss
 80067ca:	4a0b      	ldr	r2, [pc, #44]	; (80067f8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80067cc:	e002      	b.n	80067d4 <LoopFillZerobss>

080067ce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80067ce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80067d0:	f842 3b04 	str.w	r3, [r2], #4

080067d4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80067d4:	4b09      	ldr	r3, [pc, #36]	; (80067fc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80067d6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80067d8:	d3f9      	bcc.n	80067ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80067da:	f7ff ffd3 	bl	8006784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80067de:	f000 f817 	bl	8006810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80067e2:	f7ff fc55 	bl	8006090 <main>
  bx  lr    
 80067e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80067e8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80067ec:	08007e68 	.word	0x08007e68
  ldr  r0, =_sdata
 80067f0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80067f4:	20000108 	.word	0x20000108
  ldr  r2, =_sbss
 80067f8:	20000108 	.word	0x20000108
  ldr  r3, = _ebss
 80067fc:	20000368 	.word	0x20000368

08006800 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006800:	e7fe      	b.n	8006800 <ADC_IRQHandler>
	...

08006804 <__errno>:
 8006804:	4b01      	ldr	r3, [pc, #4]	; (800680c <__errno+0x8>)
 8006806:	6818      	ldr	r0, [r3, #0]
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	200000a4 	.word	0x200000a4

08006810 <__libc_init_array>:
 8006810:	b570      	push	{r4, r5, r6, lr}
 8006812:	4e0d      	ldr	r6, [pc, #52]	; (8006848 <__libc_init_array+0x38>)
 8006814:	4c0d      	ldr	r4, [pc, #52]	; (800684c <__libc_init_array+0x3c>)
 8006816:	1ba4      	subs	r4, r4, r6
 8006818:	10a4      	asrs	r4, r4, #2
 800681a:	2500      	movs	r5, #0
 800681c:	42a5      	cmp	r5, r4
 800681e:	d109      	bne.n	8006834 <__libc_init_array+0x24>
 8006820:	4e0b      	ldr	r6, [pc, #44]	; (8006850 <__libc_init_array+0x40>)
 8006822:	4c0c      	ldr	r4, [pc, #48]	; (8006854 <__libc_init_array+0x44>)
 8006824:	f001 f8de 	bl	80079e4 <_init>
 8006828:	1ba4      	subs	r4, r4, r6
 800682a:	10a4      	asrs	r4, r4, #2
 800682c:	2500      	movs	r5, #0
 800682e:	42a5      	cmp	r5, r4
 8006830:	d105      	bne.n	800683e <__libc_init_array+0x2e>
 8006832:	bd70      	pop	{r4, r5, r6, pc}
 8006834:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006838:	4798      	blx	r3
 800683a:	3501      	adds	r5, #1
 800683c:	e7ee      	b.n	800681c <__libc_init_array+0xc>
 800683e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006842:	4798      	blx	r3
 8006844:	3501      	adds	r5, #1
 8006846:	e7f2      	b.n	800682e <__libc_init_array+0x1e>
 8006848:	08007e60 	.word	0x08007e60
 800684c:	08007e60 	.word	0x08007e60
 8006850:	08007e60 	.word	0x08007e60
 8006854:	08007e64 	.word	0x08007e64

08006858 <memcpy>:
 8006858:	b510      	push	{r4, lr}
 800685a:	1e43      	subs	r3, r0, #1
 800685c:	440a      	add	r2, r1
 800685e:	4291      	cmp	r1, r2
 8006860:	d100      	bne.n	8006864 <memcpy+0xc>
 8006862:	bd10      	pop	{r4, pc}
 8006864:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006868:	f803 4f01 	strb.w	r4, [r3, #1]!
 800686c:	e7f7      	b.n	800685e <memcpy+0x6>

0800686e <memset>:
 800686e:	4402      	add	r2, r0
 8006870:	4603      	mov	r3, r0
 8006872:	4293      	cmp	r3, r2
 8006874:	d100      	bne.n	8006878 <memset+0xa>
 8006876:	4770      	bx	lr
 8006878:	f803 1b01 	strb.w	r1, [r3], #1
 800687c:	e7f9      	b.n	8006872 <memset+0x4>
	...

08006880 <iprintf>:
 8006880:	b40f      	push	{r0, r1, r2, r3}
 8006882:	4b0a      	ldr	r3, [pc, #40]	; (80068ac <iprintf+0x2c>)
 8006884:	b513      	push	{r0, r1, r4, lr}
 8006886:	681c      	ldr	r4, [r3, #0]
 8006888:	b124      	cbz	r4, 8006894 <iprintf+0x14>
 800688a:	69a3      	ldr	r3, [r4, #24]
 800688c:	b913      	cbnz	r3, 8006894 <iprintf+0x14>
 800688e:	4620      	mov	r0, r4
 8006890:	f000 f882 	bl	8006998 <__sinit>
 8006894:	ab05      	add	r3, sp, #20
 8006896:	9a04      	ldr	r2, [sp, #16]
 8006898:	68a1      	ldr	r1, [r4, #8]
 800689a:	9301      	str	r3, [sp, #4]
 800689c:	4620      	mov	r0, r4
 800689e:	f000 fadb 	bl	8006e58 <_vfiprintf_r>
 80068a2:	b002      	add	sp, #8
 80068a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068a8:	b004      	add	sp, #16
 80068aa:	4770      	bx	lr
 80068ac:	200000a4 	.word	0x200000a4

080068b0 <sniprintf>:
 80068b0:	b40c      	push	{r2, r3}
 80068b2:	b530      	push	{r4, r5, lr}
 80068b4:	4b17      	ldr	r3, [pc, #92]	; (8006914 <sniprintf+0x64>)
 80068b6:	1e0c      	subs	r4, r1, #0
 80068b8:	b09d      	sub	sp, #116	; 0x74
 80068ba:	681d      	ldr	r5, [r3, #0]
 80068bc:	da08      	bge.n	80068d0 <sniprintf+0x20>
 80068be:	238b      	movs	r3, #139	; 0x8b
 80068c0:	602b      	str	r3, [r5, #0]
 80068c2:	f04f 30ff 	mov.w	r0, #4294967295
 80068c6:	b01d      	add	sp, #116	; 0x74
 80068c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80068cc:	b002      	add	sp, #8
 80068ce:	4770      	bx	lr
 80068d0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80068d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80068d8:	bf14      	ite	ne
 80068da:	f104 33ff 	addne.w	r3, r4, #4294967295
 80068de:	4623      	moveq	r3, r4
 80068e0:	9304      	str	r3, [sp, #16]
 80068e2:	9307      	str	r3, [sp, #28]
 80068e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80068e8:	9002      	str	r0, [sp, #8]
 80068ea:	9006      	str	r0, [sp, #24]
 80068ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 80068f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80068f2:	ab21      	add	r3, sp, #132	; 0x84
 80068f4:	a902      	add	r1, sp, #8
 80068f6:	4628      	mov	r0, r5
 80068f8:	9301      	str	r3, [sp, #4]
 80068fa:	f000 f98b 	bl	8006c14 <_svfiprintf_r>
 80068fe:	1c43      	adds	r3, r0, #1
 8006900:	bfbc      	itt	lt
 8006902:	238b      	movlt	r3, #139	; 0x8b
 8006904:	602b      	strlt	r3, [r5, #0]
 8006906:	2c00      	cmp	r4, #0
 8006908:	d0dd      	beq.n	80068c6 <sniprintf+0x16>
 800690a:	9b02      	ldr	r3, [sp, #8]
 800690c:	2200      	movs	r2, #0
 800690e:	701a      	strb	r2, [r3, #0]
 8006910:	e7d9      	b.n	80068c6 <sniprintf+0x16>
 8006912:	bf00      	nop
 8006914:	200000a4 	.word	0x200000a4

08006918 <std>:
 8006918:	2300      	movs	r3, #0
 800691a:	b510      	push	{r4, lr}
 800691c:	4604      	mov	r4, r0
 800691e:	e9c0 3300 	strd	r3, r3, [r0]
 8006922:	6083      	str	r3, [r0, #8]
 8006924:	8181      	strh	r1, [r0, #12]
 8006926:	6643      	str	r3, [r0, #100]	; 0x64
 8006928:	81c2      	strh	r2, [r0, #14]
 800692a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800692e:	6183      	str	r3, [r0, #24]
 8006930:	4619      	mov	r1, r3
 8006932:	2208      	movs	r2, #8
 8006934:	305c      	adds	r0, #92	; 0x5c
 8006936:	f7ff ff9a 	bl	800686e <memset>
 800693a:	4b05      	ldr	r3, [pc, #20]	; (8006950 <std+0x38>)
 800693c:	6263      	str	r3, [r4, #36]	; 0x24
 800693e:	4b05      	ldr	r3, [pc, #20]	; (8006954 <std+0x3c>)
 8006940:	62a3      	str	r3, [r4, #40]	; 0x28
 8006942:	4b05      	ldr	r3, [pc, #20]	; (8006958 <std+0x40>)
 8006944:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006946:	4b05      	ldr	r3, [pc, #20]	; (800695c <std+0x44>)
 8006948:	6224      	str	r4, [r4, #32]
 800694a:	6323      	str	r3, [r4, #48]	; 0x30
 800694c:	bd10      	pop	{r4, pc}
 800694e:	bf00      	nop
 8006950:	080073b5 	.word	0x080073b5
 8006954:	080073d7 	.word	0x080073d7
 8006958:	0800740f 	.word	0x0800740f
 800695c:	08007433 	.word	0x08007433

08006960 <_cleanup_r>:
 8006960:	4901      	ldr	r1, [pc, #4]	; (8006968 <_cleanup_r+0x8>)
 8006962:	f000 b885 	b.w	8006a70 <_fwalk_reent>
 8006966:	bf00      	nop
 8006968:	0800770d 	.word	0x0800770d

0800696c <__sfmoreglue>:
 800696c:	b570      	push	{r4, r5, r6, lr}
 800696e:	1e4a      	subs	r2, r1, #1
 8006970:	2568      	movs	r5, #104	; 0x68
 8006972:	4355      	muls	r5, r2
 8006974:	460e      	mov	r6, r1
 8006976:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800697a:	f000 f897 	bl	8006aac <_malloc_r>
 800697e:	4604      	mov	r4, r0
 8006980:	b140      	cbz	r0, 8006994 <__sfmoreglue+0x28>
 8006982:	2100      	movs	r1, #0
 8006984:	e9c0 1600 	strd	r1, r6, [r0]
 8006988:	300c      	adds	r0, #12
 800698a:	60a0      	str	r0, [r4, #8]
 800698c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006990:	f7ff ff6d 	bl	800686e <memset>
 8006994:	4620      	mov	r0, r4
 8006996:	bd70      	pop	{r4, r5, r6, pc}

08006998 <__sinit>:
 8006998:	6983      	ldr	r3, [r0, #24]
 800699a:	b510      	push	{r4, lr}
 800699c:	4604      	mov	r4, r0
 800699e:	bb33      	cbnz	r3, 80069ee <__sinit+0x56>
 80069a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80069a4:	6503      	str	r3, [r0, #80]	; 0x50
 80069a6:	4b12      	ldr	r3, [pc, #72]	; (80069f0 <__sinit+0x58>)
 80069a8:	4a12      	ldr	r2, [pc, #72]	; (80069f4 <__sinit+0x5c>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	6282      	str	r2, [r0, #40]	; 0x28
 80069ae:	4298      	cmp	r0, r3
 80069b0:	bf04      	itt	eq
 80069b2:	2301      	moveq	r3, #1
 80069b4:	6183      	streq	r3, [r0, #24]
 80069b6:	f000 f81f 	bl	80069f8 <__sfp>
 80069ba:	6060      	str	r0, [r4, #4]
 80069bc:	4620      	mov	r0, r4
 80069be:	f000 f81b 	bl	80069f8 <__sfp>
 80069c2:	60a0      	str	r0, [r4, #8]
 80069c4:	4620      	mov	r0, r4
 80069c6:	f000 f817 	bl	80069f8 <__sfp>
 80069ca:	2200      	movs	r2, #0
 80069cc:	60e0      	str	r0, [r4, #12]
 80069ce:	2104      	movs	r1, #4
 80069d0:	6860      	ldr	r0, [r4, #4]
 80069d2:	f7ff ffa1 	bl	8006918 <std>
 80069d6:	2201      	movs	r2, #1
 80069d8:	2109      	movs	r1, #9
 80069da:	68a0      	ldr	r0, [r4, #8]
 80069dc:	f7ff ff9c 	bl	8006918 <std>
 80069e0:	2202      	movs	r2, #2
 80069e2:	2112      	movs	r1, #18
 80069e4:	68e0      	ldr	r0, [r4, #12]
 80069e6:	f7ff ff97 	bl	8006918 <std>
 80069ea:	2301      	movs	r3, #1
 80069ec:	61a3      	str	r3, [r4, #24]
 80069ee:	bd10      	pop	{r4, pc}
 80069f0:	08007dc0 	.word	0x08007dc0
 80069f4:	08006961 	.word	0x08006961

080069f8 <__sfp>:
 80069f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fa:	4b1b      	ldr	r3, [pc, #108]	; (8006a68 <__sfp+0x70>)
 80069fc:	681e      	ldr	r6, [r3, #0]
 80069fe:	69b3      	ldr	r3, [r6, #24]
 8006a00:	4607      	mov	r7, r0
 8006a02:	b913      	cbnz	r3, 8006a0a <__sfp+0x12>
 8006a04:	4630      	mov	r0, r6
 8006a06:	f7ff ffc7 	bl	8006998 <__sinit>
 8006a0a:	3648      	adds	r6, #72	; 0x48
 8006a0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006a10:	3b01      	subs	r3, #1
 8006a12:	d503      	bpl.n	8006a1c <__sfp+0x24>
 8006a14:	6833      	ldr	r3, [r6, #0]
 8006a16:	b133      	cbz	r3, 8006a26 <__sfp+0x2e>
 8006a18:	6836      	ldr	r6, [r6, #0]
 8006a1a:	e7f7      	b.n	8006a0c <__sfp+0x14>
 8006a1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006a20:	b16d      	cbz	r5, 8006a3e <__sfp+0x46>
 8006a22:	3468      	adds	r4, #104	; 0x68
 8006a24:	e7f4      	b.n	8006a10 <__sfp+0x18>
 8006a26:	2104      	movs	r1, #4
 8006a28:	4638      	mov	r0, r7
 8006a2a:	f7ff ff9f 	bl	800696c <__sfmoreglue>
 8006a2e:	6030      	str	r0, [r6, #0]
 8006a30:	2800      	cmp	r0, #0
 8006a32:	d1f1      	bne.n	8006a18 <__sfp+0x20>
 8006a34:	230c      	movs	r3, #12
 8006a36:	603b      	str	r3, [r7, #0]
 8006a38:	4604      	mov	r4, r0
 8006a3a:	4620      	mov	r0, r4
 8006a3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a3e:	4b0b      	ldr	r3, [pc, #44]	; (8006a6c <__sfp+0x74>)
 8006a40:	6665      	str	r5, [r4, #100]	; 0x64
 8006a42:	e9c4 5500 	strd	r5, r5, [r4]
 8006a46:	60a5      	str	r5, [r4, #8]
 8006a48:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006a4c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006a50:	2208      	movs	r2, #8
 8006a52:	4629      	mov	r1, r5
 8006a54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a58:	f7ff ff09 	bl	800686e <memset>
 8006a5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a64:	e7e9      	b.n	8006a3a <__sfp+0x42>
 8006a66:	bf00      	nop
 8006a68:	08007dc0 	.word	0x08007dc0
 8006a6c:	ffff0001 	.word	0xffff0001

08006a70 <_fwalk_reent>:
 8006a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a74:	4680      	mov	r8, r0
 8006a76:	4689      	mov	r9, r1
 8006a78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a7c:	2600      	movs	r6, #0
 8006a7e:	b914      	cbnz	r4, 8006a86 <_fwalk_reent+0x16>
 8006a80:	4630      	mov	r0, r6
 8006a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a86:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006a8a:	3f01      	subs	r7, #1
 8006a8c:	d501      	bpl.n	8006a92 <_fwalk_reent+0x22>
 8006a8e:	6824      	ldr	r4, [r4, #0]
 8006a90:	e7f5      	b.n	8006a7e <_fwalk_reent+0xe>
 8006a92:	89ab      	ldrh	r3, [r5, #12]
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d907      	bls.n	8006aa8 <_fwalk_reent+0x38>
 8006a98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	d003      	beq.n	8006aa8 <_fwalk_reent+0x38>
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	4640      	mov	r0, r8
 8006aa4:	47c8      	blx	r9
 8006aa6:	4306      	orrs	r6, r0
 8006aa8:	3568      	adds	r5, #104	; 0x68
 8006aaa:	e7ee      	b.n	8006a8a <_fwalk_reent+0x1a>

08006aac <_malloc_r>:
 8006aac:	b570      	push	{r4, r5, r6, lr}
 8006aae:	1ccd      	adds	r5, r1, #3
 8006ab0:	f025 0503 	bic.w	r5, r5, #3
 8006ab4:	3508      	adds	r5, #8
 8006ab6:	2d0c      	cmp	r5, #12
 8006ab8:	bf38      	it	cc
 8006aba:	250c      	movcc	r5, #12
 8006abc:	2d00      	cmp	r5, #0
 8006abe:	4606      	mov	r6, r0
 8006ac0:	db01      	blt.n	8006ac6 <_malloc_r+0x1a>
 8006ac2:	42a9      	cmp	r1, r5
 8006ac4:	d903      	bls.n	8006ace <_malloc_r+0x22>
 8006ac6:	230c      	movs	r3, #12
 8006ac8:	6033      	str	r3, [r6, #0]
 8006aca:	2000      	movs	r0, #0
 8006acc:	bd70      	pop	{r4, r5, r6, pc}
 8006ace:	f000 fed6 	bl	800787e <__malloc_lock>
 8006ad2:	4a21      	ldr	r2, [pc, #132]	; (8006b58 <_malloc_r+0xac>)
 8006ad4:	6814      	ldr	r4, [r2, #0]
 8006ad6:	4621      	mov	r1, r4
 8006ad8:	b991      	cbnz	r1, 8006b00 <_malloc_r+0x54>
 8006ada:	4c20      	ldr	r4, [pc, #128]	; (8006b5c <_malloc_r+0xb0>)
 8006adc:	6823      	ldr	r3, [r4, #0]
 8006ade:	b91b      	cbnz	r3, 8006ae8 <_malloc_r+0x3c>
 8006ae0:	4630      	mov	r0, r6
 8006ae2:	f000 fc57 	bl	8007394 <_sbrk_r>
 8006ae6:	6020      	str	r0, [r4, #0]
 8006ae8:	4629      	mov	r1, r5
 8006aea:	4630      	mov	r0, r6
 8006aec:	f000 fc52 	bl	8007394 <_sbrk_r>
 8006af0:	1c43      	adds	r3, r0, #1
 8006af2:	d124      	bne.n	8006b3e <_malloc_r+0x92>
 8006af4:	230c      	movs	r3, #12
 8006af6:	6033      	str	r3, [r6, #0]
 8006af8:	4630      	mov	r0, r6
 8006afa:	f000 fec1 	bl	8007880 <__malloc_unlock>
 8006afe:	e7e4      	b.n	8006aca <_malloc_r+0x1e>
 8006b00:	680b      	ldr	r3, [r1, #0]
 8006b02:	1b5b      	subs	r3, r3, r5
 8006b04:	d418      	bmi.n	8006b38 <_malloc_r+0x8c>
 8006b06:	2b0b      	cmp	r3, #11
 8006b08:	d90f      	bls.n	8006b2a <_malloc_r+0x7e>
 8006b0a:	600b      	str	r3, [r1, #0]
 8006b0c:	50cd      	str	r5, [r1, r3]
 8006b0e:	18cc      	adds	r4, r1, r3
 8006b10:	4630      	mov	r0, r6
 8006b12:	f000 feb5 	bl	8007880 <__malloc_unlock>
 8006b16:	f104 000b 	add.w	r0, r4, #11
 8006b1a:	1d23      	adds	r3, r4, #4
 8006b1c:	f020 0007 	bic.w	r0, r0, #7
 8006b20:	1ac3      	subs	r3, r0, r3
 8006b22:	d0d3      	beq.n	8006acc <_malloc_r+0x20>
 8006b24:	425a      	negs	r2, r3
 8006b26:	50e2      	str	r2, [r4, r3]
 8006b28:	e7d0      	b.n	8006acc <_malloc_r+0x20>
 8006b2a:	428c      	cmp	r4, r1
 8006b2c:	684b      	ldr	r3, [r1, #4]
 8006b2e:	bf16      	itet	ne
 8006b30:	6063      	strne	r3, [r4, #4]
 8006b32:	6013      	streq	r3, [r2, #0]
 8006b34:	460c      	movne	r4, r1
 8006b36:	e7eb      	b.n	8006b10 <_malloc_r+0x64>
 8006b38:	460c      	mov	r4, r1
 8006b3a:	6849      	ldr	r1, [r1, #4]
 8006b3c:	e7cc      	b.n	8006ad8 <_malloc_r+0x2c>
 8006b3e:	1cc4      	adds	r4, r0, #3
 8006b40:	f024 0403 	bic.w	r4, r4, #3
 8006b44:	42a0      	cmp	r0, r4
 8006b46:	d005      	beq.n	8006b54 <_malloc_r+0xa8>
 8006b48:	1a21      	subs	r1, r4, r0
 8006b4a:	4630      	mov	r0, r6
 8006b4c:	f000 fc22 	bl	8007394 <_sbrk_r>
 8006b50:	3001      	adds	r0, #1
 8006b52:	d0cf      	beq.n	8006af4 <_malloc_r+0x48>
 8006b54:	6025      	str	r5, [r4, #0]
 8006b56:	e7db      	b.n	8006b10 <_malloc_r+0x64>
 8006b58:	20000278 	.word	0x20000278
 8006b5c:	2000027c 	.word	0x2000027c

08006b60 <__ssputs_r>:
 8006b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b64:	688e      	ldr	r6, [r1, #8]
 8006b66:	429e      	cmp	r6, r3
 8006b68:	4682      	mov	sl, r0
 8006b6a:	460c      	mov	r4, r1
 8006b6c:	4690      	mov	r8, r2
 8006b6e:	4699      	mov	r9, r3
 8006b70:	d837      	bhi.n	8006be2 <__ssputs_r+0x82>
 8006b72:	898a      	ldrh	r2, [r1, #12]
 8006b74:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b78:	d031      	beq.n	8006bde <__ssputs_r+0x7e>
 8006b7a:	6825      	ldr	r5, [r4, #0]
 8006b7c:	6909      	ldr	r1, [r1, #16]
 8006b7e:	1a6f      	subs	r7, r5, r1
 8006b80:	6965      	ldr	r5, [r4, #20]
 8006b82:	2302      	movs	r3, #2
 8006b84:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b88:	fb95 f5f3 	sdiv	r5, r5, r3
 8006b8c:	f109 0301 	add.w	r3, r9, #1
 8006b90:	443b      	add	r3, r7
 8006b92:	429d      	cmp	r5, r3
 8006b94:	bf38      	it	cc
 8006b96:	461d      	movcc	r5, r3
 8006b98:	0553      	lsls	r3, r2, #21
 8006b9a:	d530      	bpl.n	8006bfe <__ssputs_r+0x9e>
 8006b9c:	4629      	mov	r1, r5
 8006b9e:	f7ff ff85 	bl	8006aac <_malloc_r>
 8006ba2:	4606      	mov	r6, r0
 8006ba4:	b950      	cbnz	r0, 8006bbc <__ssputs_r+0x5c>
 8006ba6:	230c      	movs	r3, #12
 8006ba8:	f8ca 3000 	str.w	r3, [sl]
 8006bac:	89a3      	ldrh	r3, [r4, #12]
 8006bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bb2:	81a3      	strh	r3, [r4, #12]
 8006bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bbc:	463a      	mov	r2, r7
 8006bbe:	6921      	ldr	r1, [r4, #16]
 8006bc0:	f7ff fe4a 	bl	8006858 <memcpy>
 8006bc4:	89a3      	ldrh	r3, [r4, #12]
 8006bc6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bce:	81a3      	strh	r3, [r4, #12]
 8006bd0:	6126      	str	r6, [r4, #16]
 8006bd2:	6165      	str	r5, [r4, #20]
 8006bd4:	443e      	add	r6, r7
 8006bd6:	1bed      	subs	r5, r5, r7
 8006bd8:	6026      	str	r6, [r4, #0]
 8006bda:	60a5      	str	r5, [r4, #8]
 8006bdc:	464e      	mov	r6, r9
 8006bde:	454e      	cmp	r6, r9
 8006be0:	d900      	bls.n	8006be4 <__ssputs_r+0x84>
 8006be2:	464e      	mov	r6, r9
 8006be4:	4632      	mov	r2, r6
 8006be6:	4641      	mov	r1, r8
 8006be8:	6820      	ldr	r0, [r4, #0]
 8006bea:	f000 fe2f 	bl	800784c <memmove>
 8006bee:	68a3      	ldr	r3, [r4, #8]
 8006bf0:	1b9b      	subs	r3, r3, r6
 8006bf2:	60a3      	str	r3, [r4, #8]
 8006bf4:	6823      	ldr	r3, [r4, #0]
 8006bf6:	441e      	add	r6, r3
 8006bf8:	6026      	str	r6, [r4, #0]
 8006bfa:	2000      	movs	r0, #0
 8006bfc:	e7dc      	b.n	8006bb8 <__ssputs_r+0x58>
 8006bfe:	462a      	mov	r2, r5
 8006c00:	f000 fe8e 	bl	8007920 <_realloc_r>
 8006c04:	4606      	mov	r6, r0
 8006c06:	2800      	cmp	r0, #0
 8006c08:	d1e2      	bne.n	8006bd0 <__ssputs_r+0x70>
 8006c0a:	6921      	ldr	r1, [r4, #16]
 8006c0c:	4650      	mov	r0, sl
 8006c0e:	f000 fe39 	bl	8007884 <_free_r>
 8006c12:	e7c8      	b.n	8006ba6 <__ssputs_r+0x46>

08006c14 <_svfiprintf_r>:
 8006c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c18:	461d      	mov	r5, r3
 8006c1a:	898b      	ldrh	r3, [r1, #12]
 8006c1c:	061f      	lsls	r7, r3, #24
 8006c1e:	b09d      	sub	sp, #116	; 0x74
 8006c20:	4680      	mov	r8, r0
 8006c22:	460c      	mov	r4, r1
 8006c24:	4616      	mov	r6, r2
 8006c26:	d50f      	bpl.n	8006c48 <_svfiprintf_r+0x34>
 8006c28:	690b      	ldr	r3, [r1, #16]
 8006c2a:	b96b      	cbnz	r3, 8006c48 <_svfiprintf_r+0x34>
 8006c2c:	2140      	movs	r1, #64	; 0x40
 8006c2e:	f7ff ff3d 	bl	8006aac <_malloc_r>
 8006c32:	6020      	str	r0, [r4, #0]
 8006c34:	6120      	str	r0, [r4, #16]
 8006c36:	b928      	cbnz	r0, 8006c44 <_svfiprintf_r+0x30>
 8006c38:	230c      	movs	r3, #12
 8006c3a:	f8c8 3000 	str.w	r3, [r8]
 8006c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c42:	e0c8      	b.n	8006dd6 <_svfiprintf_r+0x1c2>
 8006c44:	2340      	movs	r3, #64	; 0x40
 8006c46:	6163      	str	r3, [r4, #20]
 8006c48:	2300      	movs	r3, #0
 8006c4a:	9309      	str	r3, [sp, #36]	; 0x24
 8006c4c:	2320      	movs	r3, #32
 8006c4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c52:	2330      	movs	r3, #48	; 0x30
 8006c54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c58:	9503      	str	r5, [sp, #12]
 8006c5a:	f04f 0b01 	mov.w	fp, #1
 8006c5e:	4637      	mov	r7, r6
 8006c60:	463d      	mov	r5, r7
 8006c62:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006c66:	b10b      	cbz	r3, 8006c6c <_svfiprintf_r+0x58>
 8006c68:	2b25      	cmp	r3, #37	; 0x25
 8006c6a:	d13e      	bne.n	8006cea <_svfiprintf_r+0xd6>
 8006c6c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006c70:	d00b      	beq.n	8006c8a <_svfiprintf_r+0x76>
 8006c72:	4653      	mov	r3, sl
 8006c74:	4632      	mov	r2, r6
 8006c76:	4621      	mov	r1, r4
 8006c78:	4640      	mov	r0, r8
 8006c7a:	f7ff ff71 	bl	8006b60 <__ssputs_r>
 8006c7e:	3001      	adds	r0, #1
 8006c80:	f000 80a4 	beq.w	8006dcc <_svfiprintf_r+0x1b8>
 8006c84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c86:	4453      	add	r3, sl
 8006c88:	9309      	str	r3, [sp, #36]	; 0x24
 8006c8a:	783b      	ldrb	r3, [r7, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	f000 809d 	beq.w	8006dcc <_svfiprintf_r+0x1b8>
 8006c92:	2300      	movs	r3, #0
 8006c94:	f04f 32ff 	mov.w	r2, #4294967295
 8006c98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c9c:	9304      	str	r3, [sp, #16]
 8006c9e:	9307      	str	r3, [sp, #28]
 8006ca0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ca4:	931a      	str	r3, [sp, #104]	; 0x68
 8006ca6:	462f      	mov	r7, r5
 8006ca8:	2205      	movs	r2, #5
 8006caa:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006cae:	4850      	ldr	r0, [pc, #320]	; (8006df0 <_svfiprintf_r+0x1dc>)
 8006cb0:	f7f9 fa96 	bl	80001e0 <memchr>
 8006cb4:	9b04      	ldr	r3, [sp, #16]
 8006cb6:	b9d0      	cbnz	r0, 8006cee <_svfiprintf_r+0xda>
 8006cb8:	06d9      	lsls	r1, r3, #27
 8006cba:	bf44      	itt	mi
 8006cbc:	2220      	movmi	r2, #32
 8006cbe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006cc2:	071a      	lsls	r2, r3, #28
 8006cc4:	bf44      	itt	mi
 8006cc6:	222b      	movmi	r2, #43	; 0x2b
 8006cc8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006ccc:	782a      	ldrb	r2, [r5, #0]
 8006cce:	2a2a      	cmp	r2, #42	; 0x2a
 8006cd0:	d015      	beq.n	8006cfe <_svfiprintf_r+0xea>
 8006cd2:	9a07      	ldr	r2, [sp, #28]
 8006cd4:	462f      	mov	r7, r5
 8006cd6:	2000      	movs	r0, #0
 8006cd8:	250a      	movs	r5, #10
 8006cda:	4639      	mov	r1, r7
 8006cdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ce0:	3b30      	subs	r3, #48	; 0x30
 8006ce2:	2b09      	cmp	r3, #9
 8006ce4:	d94d      	bls.n	8006d82 <_svfiprintf_r+0x16e>
 8006ce6:	b1b8      	cbz	r0, 8006d18 <_svfiprintf_r+0x104>
 8006ce8:	e00f      	b.n	8006d0a <_svfiprintf_r+0xf6>
 8006cea:	462f      	mov	r7, r5
 8006cec:	e7b8      	b.n	8006c60 <_svfiprintf_r+0x4c>
 8006cee:	4a40      	ldr	r2, [pc, #256]	; (8006df0 <_svfiprintf_r+0x1dc>)
 8006cf0:	1a80      	subs	r0, r0, r2
 8006cf2:	fa0b f000 	lsl.w	r0, fp, r0
 8006cf6:	4318      	orrs	r0, r3
 8006cf8:	9004      	str	r0, [sp, #16]
 8006cfa:	463d      	mov	r5, r7
 8006cfc:	e7d3      	b.n	8006ca6 <_svfiprintf_r+0x92>
 8006cfe:	9a03      	ldr	r2, [sp, #12]
 8006d00:	1d11      	adds	r1, r2, #4
 8006d02:	6812      	ldr	r2, [r2, #0]
 8006d04:	9103      	str	r1, [sp, #12]
 8006d06:	2a00      	cmp	r2, #0
 8006d08:	db01      	blt.n	8006d0e <_svfiprintf_r+0xfa>
 8006d0a:	9207      	str	r2, [sp, #28]
 8006d0c:	e004      	b.n	8006d18 <_svfiprintf_r+0x104>
 8006d0e:	4252      	negs	r2, r2
 8006d10:	f043 0302 	orr.w	r3, r3, #2
 8006d14:	9207      	str	r2, [sp, #28]
 8006d16:	9304      	str	r3, [sp, #16]
 8006d18:	783b      	ldrb	r3, [r7, #0]
 8006d1a:	2b2e      	cmp	r3, #46	; 0x2e
 8006d1c:	d10c      	bne.n	8006d38 <_svfiprintf_r+0x124>
 8006d1e:	787b      	ldrb	r3, [r7, #1]
 8006d20:	2b2a      	cmp	r3, #42	; 0x2a
 8006d22:	d133      	bne.n	8006d8c <_svfiprintf_r+0x178>
 8006d24:	9b03      	ldr	r3, [sp, #12]
 8006d26:	1d1a      	adds	r2, r3, #4
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	9203      	str	r2, [sp, #12]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	bfb8      	it	lt
 8006d30:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d34:	3702      	adds	r7, #2
 8006d36:	9305      	str	r3, [sp, #20]
 8006d38:	4d2e      	ldr	r5, [pc, #184]	; (8006df4 <_svfiprintf_r+0x1e0>)
 8006d3a:	7839      	ldrb	r1, [r7, #0]
 8006d3c:	2203      	movs	r2, #3
 8006d3e:	4628      	mov	r0, r5
 8006d40:	f7f9 fa4e 	bl	80001e0 <memchr>
 8006d44:	b138      	cbz	r0, 8006d56 <_svfiprintf_r+0x142>
 8006d46:	2340      	movs	r3, #64	; 0x40
 8006d48:	1b40      	subs	r0, r0, r5
 8006d4a:	fa03 f000 	lsl.w	r0, r3, r0
 8006d4e:	9b04      	ldr	r3, [sp, #16]
 8006d50:	4303      	orrs	r3, r0
 8006d52:	3701      	adds	r7, #1
 8006d54:	9304      	str	r3, [sp, #16]
 8006d56:	7839      	ldrb	r1, [r7, #0]
 8006d58:	4827      	ldr	r0, [pc, #156]	; (8006df8 <_svfiprintf_r+0x1e4>)
 8006d5a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d5e:	2206      	movs	r2, #6
 8006d60:	1c7e      	adds	r6, r7, #1
 8006d62:	f7f9 fa3d 	bl	80001e0 <memchr>
 8006d66:	2800      	cmp	r0, #0
 8006d68:	d038      	beq.n	8006ddc <_svfiprintf_r+0x1c8>
 8006d6a:	4b24      	ldr	r3, [pc, #144]	; (8006dfc <_svfiprintf_r+0x1e8>)
 8006d6c:	bb13      	cbnz	r3, 8006db4 <_svfiprintf_r+0x1a0>
 8006d6e:	9b03      	ldr	r3, [sp, #12]
 8006d70:	3307      	adds	r3, #7
 8006d72:	f023 0307 	bic.w	r3, r3, #7
 8006d76:	3308      	adds	r3, #8
 8006d78:	9303      	str	r3, [sp, #12]
 8006d7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d7c:	444b      	add	r3, r9
 8006d7e:	9309      	str	r3, [sp, #36]	; 0x24
 8006d80:	e76d      	b.n	8006c5e <_svfiprintf_r+0x4a>
 8006d82:	fb05 3202 	mla	r2, r5, r2, r3
 8006d86:	2001      	movs	r0, #1
 8006d88:	460f      	mov	r7, r1
 8006d8a:	e7a6      	b.n	8006cda <_svfiprintf_r+0xc6>
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	3701      	adds	r7, #1
 8006d90:	9305      	str	r3, [sp, #20]
 8006d92:	4619      	mov	r1, r3
 8006d94:	250a      	movs	r5, #10
 8006d96:	4638      	mov	r0, r7
 8006d98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d9c:	3a30      	subs	r2, #48	; 0x30
 8006d9e:	2a09      	cmp	r2, #9
 8006da0:	d903      	bls.n	8006daa <_svfiprintf_r+0x196>
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d0c8      	beq.n	8006d38 <_svfiprintf_r+0x124>
 8006da6:	9105      	str	r1, [sp, #20]
 8006da8:	e7c6      	b.n	8006d38 <_svfiprintf_r+0x124>
 8006daa:	fb05 2101 	mla	r1, r5, r1, r2
 8006dae:	2301      	movs	r3, #1
 8006db0:	4607      	mov	r7, r0
 8006db2:	e7f0      	b.n	8006d96 <_svfiprintf_r+0x182>
 8006db4:	ab03      	add	r3, sp, #12
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	4622      	mov	r2, r4
 8006dba:	4b11      	ldr	r3, [pc, #68]	; (8006e00 <_svfiprintf_r+0x1ec>)
 8006dbc:	a904      	add	r1, sp, #16
 8006dbe:	4640      	mov	r0, r8
 8006dc0:	f3af 8000 	nop.w
 8006dc4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006dc8:	4681      	mov	r9, r0
 8006dca:	d1d6      	bne.n	8006d7a <_svfiprintf_r+0x166>
 8006dcc:	89a3      	ldrh	r3, [r4, #12]
 8006dce:	065b      	lsls	r3, r3, #25
 8006dd0:	f53f af35 	bmi.w	8006c3e <_svfiprintf_r+0x2a>
 8006dd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dd6:	b01d      	add	sp, #116	; 0x74
 8006dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ddc:	ab03      	add	r3, sp, #12
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	4622      	mov	r2, r4
 8006de2:	4b07      	ldr	r3, [pc, #28]	; (8006e00 <_svfiprintf_r+0x1ec>)
 8006de4:	a904      	add	r1, sp, #16
 8006de6:	4640      	mov	r0, r8
 8006de8:	f000 f9c2 	bl	8007170 <_printf_i>
 8006dec:	e7ea      	b.n	8006dc4 <_svfiprintf_r+0x1b0>
 8006dee:	bf00      	nop
 8006df0:	08007e24 	.word	0x08007e24
 8006df4:	08007e2a 	.word	0x08007e2a
 8006df8:	08007e2e 	.word	0x08007e2e
 8006dfc:	00000000 	.word	0x00000000
 8006e00:	08006b61 	.word	0x08006b61

08006e04 <__sfputc_r>:
 8006e04:	6893      	ldr	r3, [r2, #8]
 8006e06:	3b01      	subs	r3, #1
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	b410      	push	{r4}
 8006e0c:	6093      	str	r3, [r2, #8]
 8006e0e:	da08      	bge.n	8006e22 <__sfputc_r+0x1e>
 8006e10:	6994      	ldr	r4, [r2, #24]
 8006e12:	42a3      	cmp	r3, r4
 8006e14:	db01      	blt.n	8006e1a <__sfputc_r+0x16>
 8006e16:	290a      	cmp	r1, #10
 8006e18:	d103      	bne.n	8006e22 <__sfputc_r+0x1e>
 8006e1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e1e:	f000 bb0d 	b.w	800743c <__swbuf_r>
 8006e22:	6813      	ldr	r3, [r2, #0]
 8006e24:	1c58      	adds	r0, r3, #1
 8006e26:	6010      	str	r0, [r2, #0]
 8006e28:	7019      	strb	r1, [r3, #0]
 8006e2a:	4608      	mov	r0, r1
 8006e2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <__sfputs_r>:
 8006e32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e34:	4606      	mov	r6, r0
 8006e36:	460f      	mov	r7, r1
 8006e38:	4614      	mov	r4, r2
 8006e3a:	18d5      	adds	r5, r2, r3
 8006e3c:	42ac      	cmp	r4, r5
 8006e3e:	d101      	bne.n	8006e44 <__sfputs_r+0x12>
 8006e40:	2000      	movs	r0, #0
 8006e42:	e007      	b.n	8006e54 <__sfputs_r+0x22>
 8006e44:	463a      	mov	r2, r7
 8006e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e4a:	4630      	mov	r0, r6
 8006e4c:	f7ff ffda 	bl	8006e04 <__sfputc_r>
 8006e50:	1c43      	adds	r3, r0, #1
 8006e52:	d1f3      	bne.n	8006e3c <__sfputs_r+0xa>
 8006e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006e58 <_vfiprintf_r>:
 8006e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e5c:	460c      	mov	r4, r1
 8006e5e:	b09d      	sub	sp, #116	; 0x74
 8006e60:	4617      	mov	r7, r2
 8006e62:	461d      	mov	r5, r3
 8006e64:	4606      	mov	r6, r0
 8006e66:	b118      	cbz	r0, 8006e70 <_vfiprintf_r+0x18>
 8006e68:	6983      	ldr	r3, [r0, #24]
 8006e6a:	b90b      	cbnz	r3, 8006e70 <_vfiprintf_r+0x18>
 8006e6c:	f7ff fd94 	bl	8006998 <__sinit>
 8006e70:	4b7c      	ldr	r3, [pc, #496]	; (8007064 <_vfiprintf_r+0x20c>)
 8006e72:	429c      	cmp	r4, r3
 8006e74:	d158      	bne.n	8006f28 <_vfiprintf_r+0xd0>
 8006e76:	6874      	ldr	r4, [r6, #4]
 8006e78:	89a3      	ldrh	r3, [r4, #12]
 8006e7a:	0718      	lsls	r0, r3, #28
 8006e7c:	d55e      	bpl.n	8006f3c <_vfiprintf_r+0xe4>
 8006e7e:	6923      	ldr	r3, [r4, #16]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d05b      	beq.n	8006f3c <_vfiprintf_r+0xe4>
 8006e84:	2300      	movs	r3, #0
 8006e86:	9309      	str	r3, [sp, #36]	; 0x24
 8006e88:	2320      	movs	r3, #32
 8006e8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e8e:	2330      	movs	r3, #48	; 0x30
 8006e90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e94:	9503      	str	r5, [sp, #12]
 8006e96:	f04f 0b01 	mov.w	fp, #1
 8006e9a:	46b8      	mov	r8, r7
 8006e9c:	4645      	mov	r5, r8
 8006e9e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006ea2:	b10b      	cbz	r3, 8006ea8 <_vfiprintf_r+0x50>
 8006ea4:	2b25      	cmp	r3, #37	; 0x25
 8006ea6:	d154      	bne.n	8006f52 <_vfiprintf_r+0xfa>
 8006ea8:	ebb8 0a07 	subs.w	sl, r8, r7
 8006eac:	d00b      	beq.n	8006ec6 <_vfiprintf_r+0x6e>
 8006eae:	4653      	mov	r3, sl
 8006eb0:	463a      	mov	r2, r7
 8006eb2:	4621      	mov	r1, r4
 8006eb4:	4630      	mov	r0, r6
 8006eb6:	f7ff ffbc 	bl	8006e32 <__sfputs_r>
 8006eba:	3001      	adds	r0, #1
 8006ebc:	f000 80c2 	beq.w	8007044 <_vfiprintf_r+0x1ec>
 8006ec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ec2:	4453      	add	r3, sl
 8006ec4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ec6:	f898 3000 	ldrb.w	r3, [r8]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f000 80ba 	beq.w	8007044 <_vfiprintf_r+0x1ec>
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ed6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006eda:	9304      	str	r3, [sp, #16]
 8006edc:	9307      	str	r3, [sp, #28]
 8006ede:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ee2:	931a      	str	r3, [sp, #104]	; 0x68
 8006ee4:	46a8      	mov	r8, r5
 8006ee6:	2205      	movs	r2, #5
 8006ee8:	f818 1b01 	ldrb.w	r1, [r8], #1
 8006eec:	485e      	ldr	r0, [pc, #376]	; (8007068 <_vfiprintf_r+0x210>)
 8006eee:	f7f9 f977 	bl	80001e0 <memchr>
 8006ef2:	9b04      	ldr	r3, [sp, #16]
 8006ef4:	bb78      	cbnz	r0, 8006f56 <_vfiprintf_r+0xfe>
 8006ef6:	06d9      	lsls	r1, r3, #27
 8006ef8:	bf44      	itt	mi
 8006efa:	2220      	movmi	r2, #32
 8006efc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f00:	071a      	lsls	r2, r3, #28
 8006f02:	bf44      	itt	mi
 8006f04:	222b      	movmi	r2, #43	; 0x2b
 8006f06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006f0a:	782a      	ldrb	r2, [r5, #0]
 8006f0c:	2a2a      	cmp	r2, #42	; 0x2a
 8006f0e:	d02a      	beq.n	8006f66 <_vfiprintf_r+0x10e>
 8006f10:	9a07      	ldr	r2, [sp, #28]
 8006f12:	46a8      	mov	r8, r5
 8006f14:	2000      	movs	r0, #0
 8006f16:	250a      	movs	r5, #10
 8006f18:	4641      	mov	r1, r8
 8006f1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f1e:	3b30      	subs	r3, #48	; 0x30
 8006f20:	2b09      	cmp	r3, #9
 8006f22:	d969      	bls.n	8006ff8 <_vfiprintf_r+0x1a0>
 8006f24:	b360      	cbz	r0, 8006f80 <_vfiprintf_r+0x128>
 8006f26:	e024      	b.n	8006f72 <_vfiprintf_r+0x11a>
 8006f28:	4b50      	ldr	r3, [pc, #320]	; (800706c <_vfiprintf_r+0x214>)
 8006f2a:	429c      	cmp	r4, r3
 8006f2c:	d101      	bne.n	8006f32 <_vfiprintf_r+0xda>
 8006f2e:	68b4      	ldr	r4, [r6, #8]
 8006f30:	e7a2      	b.n	8006e78 <_vfiprintf_r+0x20>
 8006f32:	4b4f      	ldr	r3, [pc, #316]	; (8007070 <_vfiprintf_r+0x218>)
 8006f34:	429c      	cmp	r4, r3
 8006f36:	bf08      	it	eq
 8006f38:	68f4      	ldreq	r4, [r6, #12]
 8006f3a:	e79d      	b.n	8006e78 <_vfiprintf_r+0x20>
 8006f3c:	4621      	mov	r1, r4
 8006f3e:	4630      	mov	r0, r6
 8006f40:	f000 fae0 	bl	8007504 <__swsetup_r>
 8006f44:	2800      	cmp	r0, #0
 8006f46:	d09d      	beq.n	8006e84 <_vfiprintf_r+0x2c>
 8006f48:	f04f 30ff 	mov.w	r0, #4294967295
 8006f4c:	b01d      	add	sp, #116	; 0x74
 8006f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f52:	46a8      	mov	r8, r5
 8006f54:	e7a2      	b.n	8006e9c <_vfiprintf_r+0x44>
 8006f56:	4a44      	ldr	r2, [pc, #272]	; (8007068 <_vfiprintf_r+0x210>)
 8006f58:	1a80      	subs	r0, r0, r2
 8006f5a:	fa0b f000 	lsl.w	r0, fp, r0
 8006f5e:	4318      	orrs	r0, r3
 8006f60:	9004      	str	r0, [sp, #16]
 8006f62:	4645      	mov	r5, r8
 8006f64:	e7be      	b.n	8006ee4 <_vfiprintf_r+0x8c>
 8006f66:	9a03      	ldr	r2, [sp, #12]
 8006f68:	1d11      	adds	r1, r2, #4
 8006f6a:	6812      	ldr	r2, [r2, #0]
 8006f6c:	9103      	str	r1, [sp, #12]
 8006f6e:	2a00      	cmp	r2, #0
 8006f70:	db01      	blt.n	8006f76 <_vfiprintf_r+0x11e>
 8006f72:	9207      	str	r2, [sp, #28]
 8006f74:	e004      	b.n	8006f80 <_vfiprintf_r+0x128>
 8006f76:	4252      	negs	r2, r2
 8006f78:	f043 0302 	orr.w	r3, r3, #2
 8006f7c:	9207      	str	r2, [sp, #28]
 8006f7e:	9304      	str	r3, [sp, #16]
 8006f80:	f898 3000 	ldrb.w	r3, [r8]
 8006f84:	2b2e      	cmp	r3, #46	; 0x2e
 8006f86:	d10e      	bne.n	8006fa6 <_vfiprintf_r+0x14e>
 8006f88:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006f8c:	2b2a      	cmp	r3, #42	; 0x2a
 8006f8e:	d138      	bne.n	8007002 <_vfiprintf_r+0x1aa>
 8006f90:	9b03      	ldr	r3, [sp, #12]
 8006f92:	1d1a      	adds	r2, r3, #4
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	9203      	str	r2, [sp, #12]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	bfb8      	it	lt
 8006f9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fa0:	f108 0802 	add.w	r8, r8, #2
 8006fa4:	9305      	str	r3, [sp, #20]
 8006fa6:	4d33      	ldr	r5, [pc, #204]	; (8007074 <_vfiprintf_r+0x21c>)
 8006fa8:	f898 1000 	ldrb.w	r1, [r8]
 8006fac:	2203      	movs	r2, #3
 8006fae:	4628      	mov	r0, r5
 8006fb0:	f7f9 f916 	bl	80001e0 <memchr>
 8006fb4:	b140      	cbz	r0, 8006fc8 <_vfiprintf_r+0x170>
 8006fb6:	2340      	movs	r3, #64	; 0x40
 8006fb8:	1b40      	subs	r0, r0, r5
 8006fba:	fa03 f000 	lsl.w	r0, r3, r0
 8006fbe:	9b04      	ldr	r3, [sp, #16]
 8006fc0:	4303      	orrs	r3, r0
 8006fc2:	f108 0801 	add.w	r8, r8, #1
 8006fc6:	9304      	str	r3, [sp, #16]
 8006fc8:	f898 1000 	ldrb.w	r1, [r8]
 8006fcc:	482a      	ldr	r0, [pc, #168]	; (8007078 <_vfiprintf_r+0x220>)
 8006fce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fd2:	2206      	movs	r2, #6
 8006fd4:	f108 0701 	add.w	r7, r8, #1
 8006fd8:	f7f9 f902 	bl	80001e0 <memchr>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	d037      	beq.n	8007050 <_vfiprintf_r+0x1f8>
 8006fe0:	4b26      	ldr	r3, [pc, #152]	; (800707c <_vfiprintf_r+0x224>)
 8006fe2:	bb1b      	cbnz	r3, 800702c <_vfiprintf_r+0x1d4>
 8006fe4:	9b03      	ldr	r3, [sp, #12]
 8006fe6:	3307      	adds	r3, #7
 8006fe8:	f023 0307 	bic.w	r3, r3, #7
 8006fec:	3308      	adds	r3, #8
 8006fee:	9303      	str	r3, [sp, #12]
 8006ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ff2:	444b      	add	r3, r9
 8006ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ff6:	e750      	b.n	8006e9a <_vfiprintf_r+0x42>
 8006ff8:	fb05 3202 	mla	r2, r5, r2, r3
 8006ffc:	2001      	movs	r0, #1
 8006ffe:	4688      	mov	r8, r1
 8007000:	e78a      	b.n	8006f18 <_vfiprintf_r+0xc0>
 8007002:	2300      	movs	r3, #0
 8007004:	f108 0801 	add.w	r8, r8, #1
 8007008:	9305      	str	r3, [sp, #20]
 800700a:	4619      	mov	r1, r3
 800700c:	250a      	movs	r5, #10
 800700e:	4640      	mov	r0, r8
 8007010:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007014:	3a30      	subs	r2, #48	; 0x30
 8007016:	2a09      	cmp	r2, #9
 8007018:	d903      	bls.n	8007022 <_vfiprintf_r+0x1ca>
 800701a:	2b00      	cmp	r3, #0
 800701c:	d0c3      	beq.n	8006fa6 <_vfiprintf_r+0x14e>
 800701e:	9105      	str	r1, [sp, #20]
 8007020:	e7c1      	b.n	8006fa6 <_vfiprintf_r+0x14e>
 8007022:	fb05 2101 	mla	r1, r5, r1, r2
 8007026:	2301      	movs	r3, #1
 8007028:	4680      	mov	r8, r0
 800702a:	e7f0      	b.n	800700e <_vfiprintf_r+0x1b6>
 800702c:	ab03      	add	r3, sp, #12
 800702e:	9300      	str	r3, [sp, #0]
 8007030:	4622      	mov	r2, r4
 8007032:	4b13      	ldr	r3, [pc, #76]	; (8007080 <_vfiprintf_r+0x228>)
 8007034:	a904      	add	r1, sp, #16
 8007036:	4630      	mov	r0, r6
 8007038:	f3af 8000 	nop.w
 800703c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007040:	4681      	mov	r9, r0
 8007042:	d1d5      	bne.n	8006ff0 <_vfiprintf_r+0x198>
 8007044:	89a3      	ldrh	r3, [r4, #12]
 8007046:	065b      	lsls	r3, r3, #25
 8007048:	f53f af7e 	bmi.w	8006f48 <_vfiprintf_r+0xf0>
 800704c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800704e:	e77d      	b.n	8006f4c <_vfiprintf_r+0xf4>
 8007050:	ab03      	add	r3, sp, #12
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	4622      	mov	r2, r4
 8007056:	4b0a      	ldr	r3, [pc, #40]	; (8007080 <_vfiprintf_r+0x228>)
 8007058:	a904      	add	r1, sp, #16
 800705a:	4630      	mov	r0, r6
 800705c:	f000 f888 	bl	8007170 <_printf_i>
 8007060:	e7ec      	b.n	800703c <_vfiprintf_r+0x1e4>
 8007062:	bf00      	nop
 8007064:	08007de4 	.word	0x08007de4
 8007068:	08007e24 	.word	0x08007e24
 800706c:	08007e04 	.word	0x08007e04
 8007070:	08007dc4 	.word	0x08007dc4
 8007074:	08007e2a 	.word	0x08007e2a
 8007078:	08007e2e 	.word	0x08007e2e
 800707c:	00000000 	.word	0x00000000
 8007080:	08006e33 	.word	0x08006e33

08007084 <_printf_common>:
 8007084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007088:	4691      	mov	r9, r2
 800708a:	461f      	mov	r7, r3
 800708c:	688a      	ldr	r2, [r1, #8]
 800708e:	690b      	ldr	r3, [r1, #16]
 8007090:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007094:	4293      	cmp	r3, r2
 8007096:	bfb8      	it	lt
 8007098:	4613      	movlt	r3, r2
 800709a:	f8c9 3000 	str.w	r3, [r9]
 800709e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80070a2:	4606      	mov	r6, r0
 80070a4:	460c      	mov	r4, r1
 80070a6:	b112      	cbz	r2, 80070ae <_printf_common+0x2a>
 80070a8:	3301      	adds	r3, #1
 80070aa:	f8c9 3000 	str.w	r3, [r9]
 80070ae:	6823      	ldr	r3, [r4, #0]
 80070b0:	0699      	lsls	r1, r3, #26
 80070b2:	bf42      	ittt	mi
 80070b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80070b8:	3302      	addmi	r3, #2
 80070ba:	f8c9 3000 	strmi.w	r3, [r9]
 80070be:	6825      	ldr	r5, [r4, #0]
 80070c0:	f015 0506 	ands.w	r5, r5, #6
 80070c4:	d107      	bne.n	80070d6 <_printf_common+0x52>
 80070c6:	f104 0a19 	add.w	sl, r4, #25
 80070ca:	68e3      	ldr	r3, [r4, #12]
 80070cc:	f8d9 2000 	ldr.w	r2, [r9]
 80070d0:	1a9b      	subs	r3, r3, r2
 80070d2:	42ab      	cmp	r3, r5
 80070d4:	dc28      	bgt.n	8007128 <_printf_common+0xa4>
 80070d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80070da:	6822      	ldr	r2, [r4, #0]
 80070dc:	3300      	adds	r3, #0
 80070de:	bf18      	it	ne
 80070e0:	2301      	movne	r3, #1
 80070e2:	0692      	lsls	r2, r2, #26
 80070e4:	d42d      	bmi.n	8007142 <_printf_common+0xbe>
 80070e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80070ea:	4639      	mov	r1, r7
 80070ec:	4630      	mov	r0, r6
 80070ee:	47c0      	blx	r8
 80070f0:	3001      	adds	r0, #1
 80070f2:	d020      	beq.n	8007136 <_printf_common+0xb2>
 80070f4:	6823      	ldr	r3, [r4, #0]
 80070f6:	68e5      	ldr	r5, [r4, #12]
 80070f8:	f8d9 2000 	ldr.w	r2, [r9]
 80070fc:	f003 0306 	and.w	r3, r3, #6
 8007100:	2b04      	cmp	r3, #4
 8007102:	bf08      	it	eq
 8007104:	1aad      	subeq	r5, r5, r2
 8007106:	68a3      	ldr	r3, [r4, #8]
 8007108:	6922      	ldr	r2, [r4, #16]
 800710a:	bf0c      	ite	eq
 800710c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007110:	2500      	movne	r5, #0
 8007112:	4293      	cmp	r3, r2
 8007114:	bfc4      	itt	gt
 8007116:	1a9b      	subgt	r3, r3, r2
 8007118:	18ed      	addgt	r5, r5, r3
 800711a:	f04f 0900 	mov.w	r9, #0
 800711e:	341a      	adds	r4, #26
 8007120:	454d      	cmp	r5, r9
 8007122:	d11a      	bne.n	800715a <_printf_common+0xd6>
 8007124:	2000      	movs	r0, #0
 8007126:	e008      	b.n	800713a <_printf_common+0xb6>
 8007128:	2301      	movs	r3, #1
 800712a:	4652      	mov	r2, sl
 800712c:	4639      	mov	r1, r7
 800712e:	4630      	mov	r0, r6
 8007130:	47c0      	blx	r8
 8007132:	3001      	adds	r0, #1
 8007134:	d103      	bne.n	800713e <_printf_common+0xba>
 8007136:	f04f 30ff 	mov.w	r0, #4294967295
 800713a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800713e:	3501      	adds	r5, #1
 8007140:	e7c3      	b.n	80070ca <_printf_common+0x46>
 8007142:	18e1      	adds	r1, r4, r3
 8007144:	1c5a      	adds	r2, r3, #1
 8007146:	2030      	movs	r0, #48	; 0x30
 8007148:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800714c:	4422      	add	r2, r4
 800714e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007152:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007156:	3302      	adds	r3, #2
 8007158:	e7c5      	b.n	80070e6 <_printf_common+0x62>
 800715a:	2301      	movs	r3, #1
 800715c:	4622      	mov	r2, r4
 800715e:	4639      	mov	r1, r7
 8007160:	4630      	mov	r0, r6
 8007162:	47c0      	blx	r8
 8007164:	3001      	adds	r0, #1
 8007166:	d0e6      	beq.n	8007136 <_printf_common+0xb2>
 8007168:	f109 0901 	add.w	r9, r9, #1
 800716c:	e7d8      	b.n	8007120 <_printf_common+0x9c>
	...

08007170 <_printf_i>:
 8007170:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007174:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007178:	460c      	mov	r4, r1
 800717a:	7e09      	ldrb	r1, [r1, #24]
 800717c:	b085      	sub	sp, #20
 800717e:	296e      	cmp	r1, #110	; 0x6e
 8007180:	4617      	mov	r7, r2
 8007182:	4606      	mov	r6, r0
 8007184:	4698      	mov	r8, r3
 8007186:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007188:	f000 80b3 	beq.w	80072f2 <_printf_i+0x182>
 800718c:	d822      	bhi.n	80071d4 <_printf_i+0x64>
 800718e:	2963      	cmp	r1, #99	; 0x63
 8007190:	d036      	beq.n	8007200 <_printf_i+0x90>
 8007192:	d80a      	bhi.n	80071aa <_printf_i+0x3a>
 8007194:	2900      	cmp	r1, #0
 8007196:	f000 80b9 	beq.w	800730c <_printf_i+0x19c>
 800719a:	2958      	cmp	r1, #88	; 0x58
 800719c:	f000 8083 	beq.w	80072a6 <_printf_i+0x136>
 80071a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80071a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80071a8:	e032      	b.n	8007210 <_printf_i+0xa0>
 80071aa:	2964      	cmp	r1, #100	; 0x64
 80071ac:	d001      	beq.n	80071b2 <_printf_i+0x42>
 80071ae:	2969      	cmp	r1, #105	; 0x69
 80071b0:	d1f6      	bne.n	80071a0 <_printf_i+0x30>
 80071b2:	6820      	ldr	r0, [r4, #0]
 80071b4:	6813      	ldr	r3, [r2, #0]
 80071b6:	0605      	lsls	r5, r0, #24
 80071b8:	f103 0104 	add.w	r1, r3, #4
 80071bc:	d52a      	bpl.n	8007214 <_printf_i+0xa4>
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6011      	str	r1, [r2, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	da03      	bge.n	80071ce <_printf_i+0x5e>
 80071c6:	222d      	movs	r2, #45	; 0x2d
 80071c8:	425b      	negs	r3, r3
 80071ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80071ce:	486f      	ldr	r0, [pc, #444]	; (800738c <_printf_i+0x21c>)
 80071d0:	220a      	movs	r2, #10
 80071d2:	e039      	b.n	8007248 <_printf_i+0xd8>
 80071d4:	2973      	cmp	r1, #115	; 0x73
 80071d6:	f000 809d 	beq.w	8007314 <_printf_i+0x1a4>
 80071da:	d808      	bhi.n	80071ee <_printf_i+0x7e>
 80071dc:	296f      	cmp	r1, #111	; 0x6f
 80071de:	d020      	beq.n	8007222 <_printf_i+0xb2>
 80071e0:	2970      	cmp	r1, #112	; 0x70
 80071e2:	d1dd      	bne.n	80071a0 <_printf_i+0x30>
 80071e4:	6823      	ldr	r3, [r4, #0]
 80071e6:	f043 0320 	orr.w	r3, r3, #32
 80071ea:	6023      	str	r3, [r4, #0]
 80071ec:	e003      	b.n	80071f6 <_printf_i+0x86>
 80071ee:	2975      	cmp	r1, #117	; 0x75
 80071f0:	d017      	beq.n	8007222 <_printf_i+0xb2>
 80071f2:	2978      	cmp	r1, #120	; 0x78
 80071f4:	d1d4      	bne.n	80071a0 <_printf_i+0x30>
 80071f6:	2378      	movs	r3, #120	; 0x78
 80071f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80071fc:	4864      	ldr	r0, [pc, #400]	; (8007390 <_printf_i+0x220>)
 80071fe:	e055      	b.n	80072ac <_printf_i+0x13c>
 8007200:	6813      	ldr	r3, [r2, #0]
 8007202:	1d19      	adds	r1, r3, #4
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	6011      	str	r1, [r2, #0]
 8007208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800720c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007210:	2301      	movs	r3, #1
 8007212:	e08c      	b.n	800732e <_printf_i+0x1be>
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	6011      	str	r1, [r2, #0]
 8007218:	f010 0f40 	tst.w	r0, #64	; 0x40
 800721c:	bf18      	it	ne
 800721e:	b21b      	sxthne	r3, r3
 8007220:	e7cf      	b.n	80071c2 <_printf_i+0x52>
 8007222:	6813      	ldr	r3, [r2, #0]
 8007224:	6825      	ldr	r5, [r4, #0]
 8007226:	1d18      	adds	r0, r3, #4
 8007228:	6010      	str	r0, [r2, #0]
 800722a:	0628      	lsls	r0, r5, #24
 800722c:	d501      	bpl.n	8007232 <_printf_i+0xc2>
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	e002      	b.n	8007238 <_printf_i+0xc8>
 8007232:	0668      	lsls	r0, r5, #25
 8007234:	d5fb      	bpl.n	800722e <_printf_i+0xbe>
 8007236:	881b      	ldrh	r3, [r3, #0]
 8007238:	4854      	ldr	r0, [pc, #336]	; (800738c <_printf_i+0x21c>)
 800723a:	296f      	cmp	r1, #111	; 0x6f
 800723c:	bf14      	ite	ne
 800723e:	220a      	movne	r2, #10
 8007240:	2208      	moveq	r2, #8
 8007242:	2100      	movs	r1, #0
 8007244:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007248:	6865      	ldr	r5, [r4, #4]
 800724a:	60a5      	str	r5, [r4, #8]
 800724c:	2d00      	cmp	r5, #0
 800724e:	f2c0 8095 	blt.w	800737c <_printf_i+0x20c>
 8007252:	6821      	ldr	r1, [r4, #0]
 8007254:	f021 0104 	bic.w	r1, r1, #4
 8007258:	6021      	str	r1, [r4, #0]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d13d      	bne.n	80072da <_printf_i+0x16a>
 800725e:	2d00      	cmp	r5, #0
 8007260:	f040 808e 	bne.w	8007380 <_printf_i+0x210>
 8007264:	4665      	mov	r5, ip
 8007266:	2a08      	cmp	r2, #8
 8007268:	d10b      	bne.n	8007282 <_printf_i+0x112>
 800726a:	6823      	ldr	r3, [r4, #0]
 800726c:	07db      	lsls	r3, r3, #31
 800726e:	d508      	bpl.n	8007282 <_printf_i+0x112>
 8007270:	6923      	ldr	r3, [r4, #16]
 8007272:	6862      	ldr	r2, [r4, #4]
 8007274:	429a      	cmp	r2, r3
 8007276:	bfde      	ittt	le
 8007278:	2330      	movle	r3, #48	; 0x30
 800727a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800727e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007282:	ebac 0305 	sub.w	r3, ip, r5
 8007286:	6123      	str	r3, [r4, #16]
 8007288:	f8cd 8000 	str.w	r8, [sp]
 800728c:	463b      	mov	r3, r7
 800728e:	aa03      	add	r2, sp, #12
 8007290:	4621      	mov	r1, r4
 8007292:	4630      	mov	r0, r6
 8007294:	f7ff fef6 	bl	8007084 <_printf_common>
 8007298:	3001      	adds	r0, #1
 800729a:	d14d      	bne.n	8007338 <_printf_i+0x1c8>
 800729c:	f04f 30ff 	mov.w	r0, #4294967295
 80072a0:	b005      	add	sp, #20
 80072a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072a6:	4839      	ldr	r0, [pc, #228]	; (800738c <_printf_i+0x21c>)
 80072a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80072ac:	6813      	ldr	r3, [r2, #0]
 80072ae:	6821      	ldr	r1, [r4, #0]
 80072b0:	1d1d      	adds	r5, r3, #4
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	6015      	str	r5, [r2, #0]
 80072b6:	060a      	lsls	r2, r1, #24
 80072b8:	d50b      	bpl.n	80072d2 <_printf_i+0x162>
 80072ba:	07ca      	lsls	r2, r1, #31
 80072bc:	bf44      	itt	mi
 80072be:	f041 0120 	orrmi.w	r1, r1, #32
 80072c2:	6021      	strmi	r1, [r4, #0]
 80072c4:	b91b      	cbnz	r3, 80072ce <_printf_i+0x15e>
 80072c6:	6822      	ldr	r2, [r4, #0]
 80072c8:	f022 0220 	bic.w	r2, r2, #32
 80072cc:	6022      	str	r2, [r4, #0]
 80072ce:	2210      	movs	r2, #16
 80072d0:	e7b7      	b.n	8007242 <_printf_i+0xd2>
 80072d2:	064d      	lsls	r5, r1, #25
 80072d4:	bf48      	it	mi
 80072d6:	b29b      	uxthmi	r3, r3
 80072d8:	e7ef      	b.n	80072ba <_printf_i+0x14a>
 80072da:	4665      	mov	r5, ip
 80072dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80072e0:	fb02 3311 	mls	r3, r2, r1, r3
 80072e4:	5cc3      	ldrb	r3, [r0, r3]
 80072e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80072ea:	460b      	mov	r3, r1
 80072ec:	2900      	cmp	r1, #0
 80072ee:	d1f5      	bne.n	80072dc <_printf_i+0x16c>
 80072f0:	e7b9      	b.n	8007266 <_printf_i+0xf6>
 80072f2:	6813      	ldr	r3, [r2, #0]
 80072f4:	6825      	ldr	r5, [r4, #0]
 80072f6:	6961      	ldr	r1, [r4, #20]
 80072f8:	1d18      	adds	r0, r3, #4
 80072fa:	6010      	str	r0, [r2, #0]
 80072fc:	0628      	lsls	r0, r5, #24
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	d501      	bpl.n	8007306 <_printf_i+0x196>
 8007302:	6019      	str	r1, [r3, #0]
 8007304:	e002      	b.n	800730c <_printf_i+0x19c>
 8007306:	066a      	lsls	r2, r5, #25
 8007308:	d5fb      	bpl.n	8007302 <_printf_i+0x192>
 800730a:	8019      	strh	r1, [r3, #0]
 800730c:	2300      	movs	r3, #0
 800730e:	6123      	str	r3, [r4, #16]
 8007310:	4665      	mov	r5, ip
 8007312:	e7b9      	b.n	8007288 <_printf_i+0x118>
 8007314:	6813      	ldr	r3, [r2, #0]
 8007316:	1d19      	adds	r1, r3, #4
 8007318:	6011      	str	r1, [r2, #0]
 800731a:	681d      	ldr	r5, [r3, #0]
 800731c:	6862      	ldr	r2, [r4, #4]
 800731e:	2100      	movs	r1, #0
 8007320:	4628      	mov	r0, r5
 8007322:	f7f8 ff5d 	bl	80001e0 <memchr>
 8007326:	b108      	cbz	r0, 800732c <_printf_i+0x1bc>
 8007328:	1b40      	subs	r0, r0, r5
 800732a:	6060      	str	r0, [r4, #4]
 800732c:	6863      	ldr	r3, [r4, #4]
 800732e:	6123      	str	r3, [r4, #16]
 8007330:	2300      	movs	r3, #0
 8007332:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007336:	e7a7      	b.n	8007288 <_printf_i+0x118>
 8007338:	6923      	ldr	r3, [r4, #16]
 800733a:	462a      	mov	r2, r5
 800733c:	4639      	mov	r1, r7
 800733e:	4630      	mov	r0, r6
 8007340:	47c0      	blx	r8
 8007342:	3001      	adds	r0, #1
 8007344:	d0aa      	beq.n	800729c <_printf_i+0x12c>
 8007346:	6823      	ldr	r3, [r4, #0]
 8007348:	079b      	lsls	r3, r3, #30
 800734a:	d413      	bmi.n	8007374 <_printf_i+0x204>
 800734c:	68e0      	ldr	r0, [r4, #12]
 800734e:	9b03      	ldr	r3, [sp, #12]
 8007350:	4298      	cmp	r0, r3
 8007352:	bfb8      	it	lt
 8007354:	4618      	movlt	r0, r3
 8007356:	e7a3      	b.n	80072a0 <_printf_i+0x130>
 8007358:	2301      	movs	r3, #1
 800735a:	464a      	mov	r2, r9
 800735c:	4639      	mov	r1, r7
 800735e:	4630      	mov	r0, r6
 8007360:	47c0      	blx	r8
 8007362:	3001      	adds	r0, #1
 8007364:	d09a      	beq.n	800729c <_printf_i+0x12c>
 8007366:	3501      	adds	r5, #1
 8007368:	68e3      	ldr	r3, [r4, #12]
 800736a:	9a03      	ldr	r2, [sp, #12]
 800736c:	1a9b      	subs	r3, r3, r2
 800736e:	42ab      	cmp	r3, r5
 8007370:	dcf2      	bgt.n	8007358 <_printf_i+0x1e8>
 8007372:	e7eb      	b.n	800734c <_printf_i+0x1dc>
 8007374:	2500      	movs	r5, #0
 8007376:	f104 0919 	add.w	r9, r4, #25
 800737a:	e7f5      	b.n	8007368 <_printf_i+0x1f8>
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1ac      	bne.n	80072da <_printf_i+0x16a>
 8007380:	7803      	ldrb	r3, [r0, #0]
 8007382:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007386:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800738a:	e76c      	b.n	8007266 <_printf_i+0xf6>
 800738c:	08007e35 	.word	0x08007e35
 8007390:	08007e46 	.word	0x08007e46

08007394 <_sbrk_r>:
 8007394:	b538      	push	{r3, r4, r5, lr}
 8007396:	4c06      	ldr	r4, [pc, #24]	; (80073b0 <_sbrk_r+0x1c>)
 8007398:	2300      	movs	r3, #0
 800739a:	4605      	mov	r5, r0
 800739c:	4608      	mov	r0, r1
 800739e:	6023      	str	r3, [r4, #0]
 80073a0:	f7ff f9ba 	bl	8006718 <_sbrk>
 80073a4:	1c43      	adds	r3, r0, #1
 80073a6:	d102      	bne.n	80073ae <_sbrk_r+0x1a>
 80073a8:	6823      	ldr	r3, [r4, #0]
 80073aa:	b103      	cbz	r3, 80073ae <_sbrk_r+0x1a>
 80073ac:	602b      	str	r3, [r5, #0]
 80073ae:	bd38      	pop	{r3, r4, r5, pc}
 80073b0:	20000364 	.word	0x20000364

080073b4 <__sread>:
 80073b4:	b510      	push	{r4, lr}
 80073b6:	460c      	mov	r4, r1
 80073b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073bc:	f000 fad6 	bl	800796c <_read_r>
 80073c0:	2800      	cmp	r0, #0
 80073c2:	bfab      	itete	ge
 80073c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073c6:	89a3      	ldrhlt	r3, [r4, #12]
 80073c8:	181b      	addge	r3, r3, r0
 80073ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073ce:	bfac      	ite	ge
 80073d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80073d2:	81a3      	strhlt	r3, [r4, #12]
 80073d4:	bd10      	pop	{r4, pc}

080073d6 <__swrite>:
 80073d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073da:	461f      	mov	r7, r3
 80073dc:	898b      	ldrh	r3, [r1, #12]
 80073de:	05db      	lsls	r3, r3, #23
 80073e0:	4605      	mov	r5, r0
 80073e2:	460c      	mov	r4, r1
 80073e4:	4616      	mov	r6, r2
 80073e6:	d505      	bpl.n	80073f4 <__swrite+0x1e>
 80073e8:	2302      	movs	r3, #2
 80073ea:	2200      	movs	r2, #0
 80073ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073f0:	f000 f9b6 	bl	8007760 <_lseek_r>
 80073f4:	89a3      	ldrh	r3, [r4, #12]
 80073f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073fe:	81a3      	strh	r3, [r4, #12]
 8007400:	4632      	mov	r2, r6
 8007402:	463b      	mov	r3, r7
 8007404:	4628      	mov	r0, r5
 8007406:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800740a:	f000 b869 	b.w	80074e0 <_write_r>

0800740e <__sseek>:
 800740e:	b510      	push	{r4, lr}
 8007410:	460c      	mov	r4, r1
 8007412:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007416:	f000 f9a3 	bl	8007760 <_lseek_r>
 800741a:	1c43      	adds	r3, r0, #1
 800741c:	89a3      	ldrh	r3, [r4, #12]
 800741e:	bf15      	itete	ne
 8007420:	6560      	strne	r0, [r4, #84]	; 0x54
 8007422:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007426:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800742a:	81a3      	strheq	r3, [r4, #12]
 800742c:	bf18      	it	ne
 800742e:	81a3      	strhne	r3, [r4, #12]
 8007430:	bd10      	pop	{r4, pc}

08007432 <__sclose>:
 8007432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007436:	f000 b8d3 	b.w	80075e0 <_close_r>
	...

0800743c <__swbuf_r>:
 800743c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800743e:	460e      	mov	r6, r1
 8007440:	4614      	mov	r4, r2
 8007442:	4605      	mov	r5, r0
 8007444:	b118      	cbz	r0, 800744e <__swbuf_r+0x12>
 8007446:	6983      	ldr	r3, [r0, #24]
 8007448:	b90b      	cbnz	r3, 800744e <__swbuf_r+0x12>
 800744a:	f7ff faa5 	bl	8006998 <__sinit>
 800744e:	4b21      	ldr	r3, [pc, #132]	; (80074d4 <__swbuf_r+0x98>)
 8007450:	429c      	cmp	r4, r3
 8007452:	d12a      	bne.n	80074aa <__swbuf_r+0x6e>
 8007454:	686c      	ldr	r4, [r5, #4]
 8007456:	69a3      	ldr	r3, [r4, #24]
 8007458:	60a3      	str	r3, [r4, #8]
 800745a:	89a3      	ldrh	r3, [r4, #12]
 800745c:	071a      	lsls	r2, r3, #28
 800745e:	d52e      	bpl.n	80074be <__swbuf_r+0x82>
 8007460:	6923      	ldr	r3, [r4, #16]
 8007462:	b363      	cbz	r3, 80074be <__swbuf_r+0x82>
 8007464:	6923      	ldr	r3, [r4, #16]
 8007466:	6820      	ldr	r0, [r4, #0]
 8007468:	1ac0      	subs	r0, r0, r3
 800746a:	6963      	ldr	r3, [r4, #20]
 800746c:	b2f6      	uxtb	r6, r6
 800746e:	4283      	cmp	r3, r0
 8007470:	4637      	mov	r7, r6
 8007472:	dc04      	bgt.n	800747e <__swbuf_r+0x42>
 8007474:	4621      	mov	r1, r4
 8007476:	4628      	mov	r0, r5
 8007478:	f000 f948 	bl	800770c <_fflush_r>
 800747c:	bb28      	cbnz	r0, 80074ca <__swbuf_r+0x8e>
 800747e:	68a3      	ldr	r3, [r4, #8]
 8007480:	3b01      	subs	r3, #1
 8007482:	60a3      	str	r3, [r4, #8]
 8007484:	6823      	ldr	r3, [r4, #0]
 8007486:	1c5a      	adds	r2, r3, #1
 8007488:	6022      	str	r2, [r4, #0]
 800748a:	701e      	strb	r6, [r3, #0]
 800748c:	6963      	ldr	r3, [r4, #20]
 800748e:	3001      	adds	r0, #1
 8007490:	4283      	cmp	r3, r0
 8007492:	d004      	beq.n	800749e <__swbuf_r+0x62>
 8007494:	89a3      	ldrh	r3, [r4, #12]
 8007496:	07db      	lsls	r3, r3, #31
 8007498:	d519      	bpl.n	80074ce <__swbuf_r+0x92>
 800749a:	2e0a      	cmp	r6, #10
 800749c:	d117      	bne.n	80074ce <__swbuf_r+0x92>
 800749e:	4621      	mov	r1, r4
 80074a0:	4628      	mov	r0, r5
 80074a2:	f000 f933 	bl	800770c <_fflush_r>
 80074a6:	b190      	cbz	r0, 80074ce <__swbuf_r+0x92>
 80074a8:	e00f      	b.n	80074ca <__swbuf_r+0x8e>
 80074aa:	4b0b      	ldr	r3, [pc, #44]	; (80074d8 <__swbuf_r+0x9c>)
 80074ac:	429c      	cmp	r4, r3
 80074ae:	d101      	bne.n	80074b4 <__swbuf_r+0x78>
 80074b0:	68ac      	ldr	r4, [r5, #8]
 80074b2:	e7d0      	b.n	8007456 <__swbuf_r+0x1a>
 80074b4:	4b09      	ldr	r3, [pc, #36]	; (80074dc <__swbuf_r+0xa0>)
 80074b6:	429c      	cmp	r4, r3
 80074b8:	bf08      	it	eq
 80074ba:	68ec      	ldreq	r4, [r5, #12]
 80074bc:	e7cb      	b.n	8007456 <__swbuf_r+0x1a>
 80074be:	4621      	mov	r1, r4
 80074c0:	4628      	mov	r0, r5
 80074c2:	f000 f81f 	bl	8007504 <__swsetup_r>
 80074c6:	2800      	cmp	r0, #0
 80074c8:	d0cc      	beq.n	8007464 <__swbuf_r+0x28>
 80074ca:	f04f 37ff 	mov.w	r7, #4294967295
 80074ce:	4638      	mov	r0, r7
 80074d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074d2:	bf00      	nop
 80074d4:	08007de4 	.word	0x08007de4
 80074d8:	08007e04 	.word	0x08007e04
 80074dc:	08007dc4 	.word	0x08007dc4

080074e0 <_write_r>:
 80074e0:	b538      	push	{r3, r4, r5, lr}
 80074e2:	4c07      	ldr	r4, [pc, #28]	; (8007500 <_write_r+0x20>)
 80074e4:	4605      	mov	r5, r0
 80074e6:	4608      	mov	r0, r1
 80074e8:	4611      	mov	r1, r2
 80074ea:	2200      	movs	r2, #0
 80074ec:	6022      	str	r2, [r4, #0]
 80074ee:	461a      	mov	r2, r3
 80074f0:	f7ff f8c1 	bl	8006676 <_write>
 80074f4:	1c43      	adds	r3, r0, #1
 80074f6:	d102      	bne.n	80074fe <_write_r+0x1e>
 80074f8:	6823      	ldr	r3, [r4, #0]
 80074fa:	b103      	cbz	r3, 80074fe <_write_r+0x1e>
 80074fc:	602b      	str	r3, [r5, #0]
 80074fe:	bd38      	pop	{r3, r4, r5, pc}
 8007500:	20000364 	.word	0x20000364

08007504 <__swsetup_r>:
 8007504:	4b32      	ldr	r3, [pc, #200]	; (80075d0 <__swsetup_r+0xcc>)
 8007506:	b570      	push	{r4, r5, r6, lr}
 8007508:	681d      	ldr	r5, [r3, #0]
 800750a:	4606      	mov	r6, r0
 800750c:	460c      	mov	r4, r1
 800750e:	b125      	cbz	r5, 800751a <__swsetup_r+0x16>
 8007510:	69ab      	ldr	r3, [r5, #24]
 8007512:	b913      	cbnz	r3, 800751a <__swsetup_r+0x16>
 8007514:	4628      	mov	r0, r5
 8007516:	f7ff fa3f 	bl	8006998 <__sinit>
 800751a:	4b2e      	ldr	r3, [pc, #184]	; (80075d4 <__swsetup_r+0xd0>)
 800751c:	429c      	cmp	r4, r3
 800751e:	d10f      	bne.n	8007540 <__swsetup_r+0x3c>
 8007520:	686c      	ldr	r4, [r5, #4]
 8007522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007526:	b29a      	uxth	r2, r3
 8007528:	0715      	lsls	r5, r2, #28
 800752a:	d42c      	bmi.n	8007586 <__swsetup_r+0x82>
 800752c:	06d0      	lsls	r0, r2, #27
 800752e:	d411      	bmi.n	8007554 <__swsetup_r+0x50>
 8007530:	2209      	movs	r2, #9
 8007532:	6032      	str	r2, [r6, #0]
 8007534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007538:	81a3      	strh	r3, [r4, #12]
 800753a:	f04f 30ff 	mov.w	r0, #4294967295
 800753e:	e03e      	b.n	80075be <__swsetup_r+0xba>
 8007540:	4b25      	ldr	r3, [pc, #148]	; (80075d8 <__swsetup_r+0xd4>)
 8007542:	429c      	cmp	r4, r3
 8007544:	d101      	bne.n	800754a <__swsetup_r+0x46>
 8007546:	68ac      	ldr	r4, [r5, #8]
 8007548:	e7eb      	b.n	8007522 <__swsetup_r+0x1e>
 800754a:	4b24      	ldr	r3, [pc, #144]	; (80075dc <__swsetup_r+0xd8>)
 800754c:	429c      	cmp	r4, r3
 800754e:	bf08      	it	eq
 8007550:	68ec      	ldreq	r4, [r5, #12]
 8007552:	e7e6      	b.n	8007522 <__swsetup_r+0x1e>
 8007554:	0751      	lsls	r1, r2, #29
 8007556:	d512      	bpl.n	800757e <__swsetup_r+0x7a>
 8007558:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800755a:	b141      	cbz	r1, 800756e <__swsetup_r+0x6a>
 800755c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007560:	4299      	cmp	r1, r3
 8007562:	d002      	beq.n	800756a <__swsetup_r+0x66>
 8007564:	4630      	mov	r0, r6
 8007566:	f000 f98d 	bl	8007884 <_free_r>
 800756a:	2300      	movs	r3, #0
 800756c:	6363      	str	r3, [r4, #52]	; 0x34
 800756e:	89a3      	ldrh	r3, [r4, #12]
 8007570:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007574:	81a3      	strh	r3, [r4, #12]
 8007576:	2300      	movs	r3, #0
 8007578:	6063      	str	r3, [r4, #4]
 800757a:	6923      	ldr	r3, [r4, #16]
 800757c:	6023      	str	r3, [r4, #0]
 800757e:	89a3      	ldrh	r3, [r4, #12]
 8007580:	f043 0308 	orr.w	r3, r3, #8
 8007584:	81a3      	strh	r3, [r4, #12]
 8007586:	6923      	ldr	r3, [r4, #16]
 8007588:	b94b      	cbnz	r3, 800759e <__swsetup_r+0x9a>
 800758a:	89a3      	ldrh	r3, [r4, #12]
 800758c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007590:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007594:	d003      	beq.n	800759e <__swsetup_r+0x9a>
 8007596:	4621      	mov	r1, r4
 8007598:	4630      	mov	r0, r6
 800759a:	f000 f917 	bl	80077cc <__smakebuf_r>
 800759e:	89a2      	ldrh	r2, [r4, #12]
 80075a0:	f012 0301 	ands.w	r3, r2, #1
 80075a4:	d00c      	beq.n	80075c0 <__swsetup_r+0xbc>
 80075a6:	2300      	movs	r3, #0
 80075a8:	60a3      	str	r3, [r4, #8]
 80075aa:	6963      	ldr	r3, [r4, #20]
 80075ac:	425b      	negs	r3, r3
 80075ae:	61a3      	str	r3, [r4, #24]
 80075b0:	6923      	ldr	r3, [r4, #16]
 80075b2:	b953      	cbnz	r3, 80075ca <__swsetup_r+0xc6>
 80075b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075b8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80075bc:	d1ba      	bne.n	8007534 <__swsetup_r+0x30>
 80075be:	bd70      	pop	{r4, r5, r6, pc}
 80075c0:	0792      	lsls	r2, r2, #30
 80075c2:	bf58      	it	pl
 80075c4:	6963      	ldrpl	r3, [r4, #20]
 80075c6:	60a3      	str	r3, [r4, #8]
 80075c8:	e7f2      	b.n	80075b0 <__swsetup_r+0xac>
 80075ca:	2000      	movs	r0, #0
 80075cc:	e7f7      	b.n	80075be <__swsetup_r+0xba>
 80075ce:	bf00      	nop
 80075d0:	200000a4 	.word	0x200000a4
 80075d4:	08007de4 	.word	0x08007de4
 80075d8:	08007e04 	.word	0x08007e04
 80075dc:	08007dc4 	.word	0x08007dc4

080075e0 <_close_r>:
 80075e0:	b538      	push	{r3, r4, r5, lr}
 80075e2:	4c06      	ldr	r4, [pc, #24]	; (80075fc <_close_r+0x1c>)
 80075e4:	2300      	movs	r3, #0
 80075e6:	4605      	mov	r5, r0
 80075e8:	4608      	mov	r0, r1
 80075ea:	6023      	str	r3, [r4, #0]
 80075ec:	f7ff f85f 	bl	80066ae <_close>
 80075f0:	1c43      	adds	r3, r0, #1
 80075f2:	d102      	bne.n	80075fa <_close_r+0x1a>
 80075f4:	6823      	ldr	r3, [r4, #0]
 80075f6:	b103      	cbz	r3, 80075fa <_close_r+0x1a>
 80075f8:	602b      	str	r3, [r5, #0]
 80075fa:	bd38      	pop	{r3, r4, r5, pc}
 80075fc:	20000364 	.word	0x20000364

08007600 <__sflush_r>:
 8007600:	898a      	ldrh	r2, [r1, #12]
 8007602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007606:	4605      	mov	r5, r0
 8007608:	0710      	lsls	r0, r2, #28
 800760a:	460c      	mov	r4, r1
 800760c:	d458      	bmi.n	80076c0 <__sflush_r+0xc0>
 800760e:	684b      	ldr	r3, [r1, #4]
 8007610:	2b00      	cmp	r3, #0
 8007612:	dc05      	bgt.n	8007620 <__sflush_r+0x20>
 8007614:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007616:	2b00      	cmp	r3, #0
 8007618:	dc02      	bgt.n	8007620 <__sflush_r+0x20>
 800761a:	2000      	movs	r0, #0
 800761c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007620:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007622:	2e00      	cmp	r6, #0
 8007624:	d0f9      	beq.n	800761a <__sflush_r+0x1a>
 8007626:	2300      	movs	r3, #0
 8007628:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800762c:	682f      	ldr	r7, [r5, #0]
 800762e:	6a21      	ldr	r1, [r4, #32]
 8007630:	602b      	str	r3, [r5, #0]
 8007632:	d032      	beq.n	800769a <__sflush_r+0x9a>
 8007634:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007636:	89a3      	ldrh	r3, [r4, #12]
 8007638:	075a      	lsls	r2, r3, #29
 800763a:	d505      	bpl.n	8007648 <__sflush_r+0x48>
 800763c:	6863      	ldr	r3, [r4, #4]
 800763e:	1ac0      	subs	r0, r0, r3
 8007640:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007642:	b10b      	cbz	r3, 8007648 <__sflush_r+0x48>
 8007644:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007646:	1ac0      	subs	r0, r0, r3
 8007648:	2300      	movs	r3, #0
 800764a:	4602      	mov	r2, r0
 800764c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800764e:	6a21      	ldr	r1, [r4, #32]
 8007650:	4628      	mov	r0, r5
 8007652:	47b0      	blx	r6
 8007654:	1c43      	adds	r3, r0, #1
 8007656:	89a3      	ldrh	r3, [r4, #12]
 8007658:	d106      	bne.n	8007668 <__sflush_r+0x68>
 800765a:	6829      	ldr	r1, [r5, #0]
 800765c:	291d      	cmp	r1, #29
 800765e:	d848      	bhi.n	80076f2 <__sflush_r+0xf2>
 8007660:	4a29      	ldr	r2, [pc, #164]	; (8007708 <__sflush_r+0x108>)
 8007662:	40ca      	lsrs	r2, r1
 8007664:	07d6      	lsls	r6, r2, #31
 8007666:	d544      	bpl.n	80076f2 <__sflush_r+0xf2>
 8007668:	2200      	movs	r2, #0
 800766a:	6062      	str	r2, [r4, #4]
 800766c:	04d9      	lsls	r1, r3, #19
 800766e:	6922      	ldr	r2, [r4, #16]
 8007670:	6022      	str	r2, [r4, #0]
 8007672:	d504      	bpl.n	800767e <__sflush_r+0x7e>
 8007674:	1c42      	adds	r2, r0, #1
 8007676:	d101      	bne.n	800767c <__sflush_r+0x7c>
 8007678:	682b      	ldr	r3, [r5, #0]
 800767a:	b903      	cbnz	r3, 800767e <__sflush_r+0x7e>
 800767c:	6560      	str	r0, [r4, #84]	; 0x54
 800767e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007680:	602f      	str	r7, [r5, #0]
 8007682:	2900      	cmp	r1, #0
 8007684:	d0c9      	beq.n	800761a <__sflush_r+0x1a>
 8007686:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800768a:	4299      	cmp	r1, r3
 800768c:	d002      	beq.n	8007694 <__sflush_r+0x94>
 800768e:	4628      	mov	r0, r5
 8007690:	f000 f8f8 	bl	8007884 <_free_r>
 8007694:	2000      	movs	r0, #0
 8007696:	6360      	str	r0, [r4, #52]	; 0x34
 8007698:	e7c0      	b.n	800761c <__sflush_r+0x1c>
 800769a:	2301      	movs	r3, #1
 800769c:	4628      	mov	r0, r5
 800769e:	47b0      	blx	r6
 80076a0:	1c41      	adds	r1, r0, #1
 80076a2:	d1c8      	bne.n	8007636 <__sflush_r+0x36>
 80076a4:	682b      	ldr	r3, [r5, #0]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d0c5      	beq.n	8007636 <__sflush_r+0x36>
 80076aa:	2b1d      	cmp	r3, #29
 80076ac:	d001      	beq.n	80076b2 <__sflush_r+0xb2>
 80076ae:	2b16      	cmp	r3, #22
 80076b0:	d101      	bne.n	80076b6 <__sflush_r+0xb6>
 80076b2:	602f      	str	r7, [r5, #0]
 80076b4:	e7b1      	b.n	800761a <__sflush_r+0x1a>
 80076b6:	89a3      	ldrh	r3, [r4, #12]
 80076b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076bc:	81a3      	strh	r3, [r4, #12]
 80076be:	e7ad      	b.n	800761c <__sflush_r+0x1c>
 80076c0:	690f      	ldr	r7, [r1, #16]
 80076c2:	2f00      	cmp	r7, #0
 80076c4:	d0a9      	beq.n	800761a <__sflush_r+0x1a>
 80076c6:	0793      	lsls	r3, r2, #30
 80076c8:	680e      	ldr	r6, [r1, #0]
 80076ca:	bf08      	it	eq
 80076cc:	694b      	ldreq	r3, [r1, #20]
 80076ce:	600f      	str	r7, [r1, #0]
 80076d0:	bf18      	it	ne
 80076d2:	2300      	movne	r3, #0
 80076d4:	eba6 0807 	sub.w	r8, r6, r7
 80076d8:	608b      	str	r3, [r1, #8]
 80076da:	f1b8 0f00 	cmp.w	r8, #0
 80076de:	dd9c      	ble.n	800761a <__sflush_r+0x1a>
 80076e0:	4643      	mov	r3, r8
 80076e2:	463a      	mov	r2, r7
 80076e4:	6a21      	ldr	r1, [r4, #32]
 80076e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80076e8:	4628      	mov	r0, r5
 80076ea:	47b0      	blx	r6
 80076ec:	2800      	cmp	r0, #0
 80076ee:	dc06      	bgt.n	80076fe <__sflush_r+0xfe>
 80076f0:	89a3      	ldrh	r3, [r4, #12]
 80076f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076f6:	81a3      	strh	r3, [r4, #12]
 80076f8:	f04f 30ff 	mov.w	r0, #4294967295
 80076fc:	e78e      	b.n	800761c <__sflush_r+0x1c>
 80076fe:	4407      	add	r7, r0
 8007700:	eba8 0800 	sub.w	r8, r8, r0
 8007704:	e7e9      	b.n	80076da <__sflush_r+0xda>
 8007706:	bf00      	nop
 8007708:	20400001 	.word	0x20400001

0800770c <_fflush_r>:
 800770c:	b538      	push	{r3, r4, r5, lr}
 800770e:	690b      	ldr	r3, [r1, #16]
 8007710:	4605      	mov	r5, r0
 8007712:	460c      	mov	r4, r1
 8007714:	b1db      	cbz	r3, 800774e <_fflush_r+0x42>
 8007716:	b118      	cbz	r0, 8007720 <_fflush_r+0x14>
 8007718:	6983      	ldr	r3, [r0, #24]
 800771a:	b90b      	cbnz	r3, 8007720 <_fflush_r+0x14>
 800771c:	f7ff f93c 	bl	8006998 <__sinit>
 8007720:	4b0c      	ldr	r3, [pc, #48]	; (8007754 <_fflush_r+0x48>)
 8007722:	429c      	cmp	r4, r3
 8007724:	d109      	bne.n	800773a <_fflush_r+0x2e>
 8007726:	686c      	ldr	r4, [r5, #4]
 8007728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800772c:	b17b      	cbz	r3, 800774e <_fflush_r+0x42>
 800772e:	4621      	mov	r1, r4
 8007730:	4628      	mov	r0, r5
 8007732:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007736:	f7ff bf63 	b.w	8007600 <__sflush_r>
 800773a:	4b07      	ldr	r3, [pc, #28]	; (8007758 <_fflush_r+0x4c>)
 800773c:	429c      	cmp	r4, r3
 800773e:	d101      	bne.n	8007744 <_fflush_r+0x38>
 8007740:	68ac      	ldr	r4, [r5, #8]
 8007742:	e7f1      	b.n	8007728 <_fflush_r+0x1c>
 8007744:	4b05      	ldr	r3, [pc, #20]	; (800775c <_fflush_r+0x50>)
 8007746:	429c      	cmp	r4, r3
 8007748:	bf08      	it	eq
 800774a:	68ec      	ldreq	r4, [r5, #12]
 800774c:	e7ec      	b.n	8007728 <_fflush_r+0x1c>
 800774e:	2000      	movs	r0, #0
 8007750:	bd38      	pop	{r3, r4, r5, pc}
 8007752:	bf00      	nop
 8007754:	08007de4 	.word	0x08007de4
 8007758:	08007e04 	.word	0x08007e04
 800775c:	08007dc4 	.word	0x08007dc4

08007760 <_lseek_r>:
 8007760:	b538      	push	{r3, r4, r5, lr}
 8007762:	4c07      	ldr	r4, [pc, #28]	; (8007780 <_lseek_r+0x20>)
 8007764:	4605      	mov	r5, r0
 8007766:	4608      	mov	r0, r1
 8007768:	4611      	mov	r1, r2
 800776a:	2200      	movs	r2, #0
 800776c:	6022      	str	r2, [r4, #0]
 800776e:	461a      	mov	r2, r3
 8007770:	f7fe ffc4 	bl	80066fc <_lseek>
 8007774:	1c43      	adds	r3, r0, #1
 8007776:	d102      	bne.n	800777e <_lseek_r+0x1e>
 8007778:	6823      	ldr	r3, [r4, #0]
 800777a:	b103      	cbz	r3, 800777e <_lseek_r+0x1e>
 800777c:	602b      	str	r3, [r5, #0]
 800777e:	bd38      	pop	{r3, r4, r5, pc}
 8007780:	20000364 	.word	0x20000364

08007784 <__swhatbuf_r>:
 8007784:	b570      	push	{r4, r5, r6, lr}
 8007786:	460e      	mov	r6, r1
 8007788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800778c:	2900      	cmp	r1, #0
 800778e:	b096      	sub	sp, #88	; 0x58
 8007790:	4614      	mov	r4, r2
 8007792:	461d      	mov	r5, r3
 8007794:	da07      	bge.n	80077a6 <__swhatbuf_r+0x22>
 8007796:	2300      	movs	r3, #0
 8007798:	602b      	str	r3, [r5, #0]
 800779a:	89b3      	ldrh	r3, [r6, #12]
 800779c:	061a      	lsls	r2, r3, #24
 800779e:	d410      	bmi.n	80077c2 <__swhatbuf_r+0x3e>
 80077a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80077a4:	e00e      	b.n	80077c4 <__swhatbuf_r+0x40>
 80077a6:	466a      	mov	r2, sp
 80077a8:	f000 f8f2 	bl	8007990 <_fstat_r>
 80077ac:	2800      	cmp	r0, #0
 80077ae:	dbf2      	blt.n	8007796 <__swhatbuf_r+0x12>
 80077b0:	9a01      	ldr	r2, [sp, #4]
 80077b2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80077b6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80077ba:	425a      	negs	r2, r3
 80077bc:	415a      	adcs	r2, r3
 80077be:	602a      	str	r2, [r5, #0]
 80077c0:	e7ee      	b.n	80077a0 <__swhatbuf_r+0x1c>
 80077c2:	2340      	movs	r3, #64	; 0x40
 80077c4:	2000      	movs	r0, #0
 80077c6:	6023      	str	r3, [r4, #0]
 80077c8:	b016      	add	sp, #88	; 0x58
 80077ca:	bd70      	pop	{r4, r5, r6, pc}

080077cc <__smakebuf_r>:
 80077cc:	898b      	ldrh	r3, [r1, #12]
 80077ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80077d0:	079d      	lsls	r5, r3, #30
 80077d2:	4606      	mov	r6, r0
 80077d4:	460c      	mov	r4, r1
 80077d6:	d507      	bpl.n	80077e8 <__smakebuf_r+0x1c>
 80077d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80077dc:	6023      	str	r3, [r4, #0]
 80077de:	6123      	str	r3, [r4, #16]
 80077e0:	2301      	movs	r3, #1
 80077e2:	6163      	str	r3, [r4, #20]
 80077e4:	b002      	add	sp, #8
 80077e6:	bd70      	pop	{r4, r5, r6, pc}
 80077e8:	ab01      	add	r3, sp, #4
 80077ea:	466a      	mov	r2, sp
 80077ec:	f7ff ffca 	bl	8007784 <__swhatbuf_r>
 80077f0:	9900      	ldr	r1, [sp, #0]
 80077f2:	4605      	mov	r5, r0
 80077f4:	4630      	mov	r0, r6
 80077f6:	f7ff f959 	bl	8006aac <_malloc_r>
 80077fa:	b948      	cbnz	r0, 8007810 <__smakebuf_r+0x44>
 80077fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007800:	059a      	lsls	r2, r3, #22
 8007802:	d4ef      	bmi.n	80077e4 <__smakebuf_r+0x18>
 8007804:	f023 0303 	bic.w	r3, r3, #3
 8007808:	f043 0302 	orr.w	r3, r3, #2
 800780c:	81a3      	strh	r3, [r4, #12]
 800780e:	e7e3      	b.n	80077d8 <__smakebuf_r+0xc>
 8007810:	4b0d      	ldr	r3, [pc, #52]	; (8007848 <__smakebuf_r+0x7c>)
 8007812:	62b3      	str	r3, [r6, #40]	; 0x28
 8007814:	89a3      	ldrh	r3, [r4, #12]
 8007816:	6020      	str	r0, [r4, #0]
 8007818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800781c:	81a3      	strh	r3, [r4, #12]
 800781e:	9b00      	ldr	r3, [sp, #0]
 8007820:	6163      	str	r3, [r4, #20]
 8007822:	9b01      	ldr	r3, [sp, #4]
 8007824:	6120      	str	r0, [r4, #16]
 8007826:	b15b      	cbz	r3, 8007840 <__smakebuf_r+0x74>
 8007828:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800782c:	4630      	mov	r0, r6
 800782e:	f000 f8c1 	bl	80079b4 <_isatty_r>
 8007832:	b128      	cbz	r0, 8007840 <__smakebuf_r+0x74>
 8007834:	89a3      	ldrh	r3, [r4, #12]
 8007836:	f023 0303 	bic.w	r3, r3, #3
 800783a:	f043 0301 	orr.w	r3, r3, #1
 800783e:	81a3      	strh	r3, [r4, #12]
 8007840:	89a3      	ldrh	r3, [r4, #12]
 8007842:	431d      	orrs	r5, r3
 8007844:	81a5      	strh	r5, [r4, #12]
 8007846:	e7cd      	b.n	80077e4 <__smakebuf_r+0x18>
 8007848:	08006961 	.word	0x08006961

0800784c <memmove>:
 800784c:	4288      	cmp	r0, r1
 800784e:	b510      	push	{r4, lr}
 8007850:	eb01 0302 	add.w	r3, r1, r2
 8007854:	d807      	bhi.n	8007866 <memmove+0x1a>
 8007856:	1e42      	subs	r2, r0, #1
 8007858:	4299      	cmp	r1, r3
 800785a:	d00a      	beq.n	8007872 <memmove+0x26>
 800785c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007860:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007864:	e7f8      	b.n	8007858 <memmove+0xc>
 8007866:	4283      	cmp	r3, r0
 8007868:	d9f5      	bls.n	8007856 <memmove+0xa>
 800786a:	1881      	adds	r1, r0, r2
 800786c:	1ad2      	subs	r2, r2, r3
 800786e:	42d3      	cmn	r3, r2
 8007870:	d100      	bne.n	8007874 <memmove+0x28>
 8007872:	bd10      	pop	{r4, pc}
 8007874:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007878:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800787c:	e7f7      	b.n	800786e <memmove+0x22>

0800787e <__malloc_lock>:
 800787e:	4770      	bx	lr

08007880 <__malloc_unlock>:
 8007880:	4770      	bx	lr
	...

08007884 <_free_r>:
 8007884:	b538      	push	{r3, r4, r5, lr}
 8007886:	4605      	mov	r5, r0
 8007888:	2900      	cmp	r1, #0
 800788a:	d045      	beq.n	8007918 <_free_r+0x94>
 800788c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007890:	1f0c      	subs	r4, r1, #4
 8007892:	2b00      	cmp	r3, #0
 8007894:	bfb8      	it	lt
 8007896:	18e4      	addlt	r4, r4, r3
 8007898:	f7ff fff1 	bl	800787e <__malloc_lock>
 800789c:	4a1f      	ldr	r2, [pc, #124]	; (800791c <_free_r+0x98>)
 800789e:	6813      	ldr	r3, [r2, #0]
 80078a0:	4610      	mov	r0, r2
 80078a2:	b933      	cbnz	r3, 80078b2 <_free_r+0x2e>
 80078a4:	6063      	str	r3, [r4, #4]
 80078a6:	6014      	str	r4, [r2, #0]
 80078a8:	4628      	mov	r0, r5
 80078aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078ae:	f7ff bfe7 	b.w	8007880 <__malloc_unlock>
 80078b2:	42a3      	cmp	r3, r4
 80078b4:	d90c      	bls.n	80078d0 <_free_r+0x4c>
 80078b6:	6821      	ldr	r1, [r4, #0]
 80078b8:	1862      	adds	r2, r4, r1
 80078ba:	4293      	cmp	r3, r2
 80078bc:	bf04      	itt	eq
 80078be:	681a      	ldreq	r2, [r3, #0]
 80078c0:	685b      	ldreq	r3, [r3, #4]
 80078c2:	6063      	str	r3, [r4, #4]
 80078c4:	bf04      	itt	eq
 80078c6:	1852      	addeq	r2, r2, r1
 80078c8:	6022      	streq	r2, [r4, #0]
 80078ca:	6004      	str	r4, [r0, #0]
 80078cc:	e7ec      	b.n	80078a8 <_free_r+0x24>
 80078ce:	4613      	mov	r3, r2
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	b10a      	cbz	r2, 80078d8 <_free_r+0x54>
 80078d4:	42a2      	cmp	r2, r4
 80078d6:	d9fa      	bls.n	80078ce <_free_r+0x4a>
 80078d8:	6819      	ldr	r1, [r3, #0]
 80078da:	1858      	adds	r0, r3, r1
 80078dc:	42a0      	cmp	r0, r4
 80078de:	d10b      	bne.n	80078f8 <_free_r+0x74>
 80078e0:	6820      	ldr	r0, [r4, #0]
 80078e2:	4401      	add	r1, r0
 80078e4:	1858      	adds	r0, r3, r1
 80078e6:	4282      	cmp	r2, r0
 80078e8:	6019      	str	r1, [r3, #0]
 80078ea:	d1dd      	bne.n	80078a8 <_free_r+0x24>
 80078ec:	6810      	ldr	r0, [r2, #0]
 80078ee:	6852      	ldr	r2, [r2, #4]
 80078f0:	605a      	str	r2, [r3, #4]
 80078f2:	4401      	add	r1, r0
 80078f4:	6019      	str	r1, [r3, #0]
 80078f6:	e7d7      	b.n	80078a8 <_free_r+0x24>
 80078f8:	d902      	bls.n	8007900 <_free_r+0x7c>
 80078fa:	230c      	movs	r3, #12
 80078fc:	602b      	str	r3, [r5, #0]
 80078fe:	e7d3      	b.n	80078a8 <_free_r+0x24>
 8007900:	6820      	ldr	r0, [r4, #0]
 8007902:	1821      	adds	r1, r4, r0
 8007904:	428a      	cmp	r2, r1
 8007906:	bf04      	itt	eq
 8007908:	6811      	ldreq	r1, [r2, #0]
 800790a:	6852      	ldreq	r2, [r2, #4]
 800790c:	6062      	str	r2, [r4, #4]
 800790e:	bf04      	itt	eq
 8007910:	1809      	addeq	r1, r1, r0
 8007912:	6021      	streq	r1, [r4, #0]
 8007914:	605c      	str	r4, [r3, #4]
 8007916:	e7c7      	b.n	80078a8 <_free_r+0x24>
 8007918:	bd38      	pop	{r3, r4, r5, pc}
 800791a:	bf00      	nop
 800791c:	20000278 	.word	0x20000278

08007920 <_realloc_r>:
 8007920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007922:	4607      	mov	r7, r0
 8007924:	4614      	mov	r4, r2
 8007926:	460e      	mov	r6, r1
 8007928:	b921      	cbnz	r1, 8007934 <_realloc_r+0x14>
 800792a:	4611      	mov	r1, r2
 800792c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007930:	f7ff b8bc 	b.w	8006aac <_malloc_r>
 8007934:	b922      	cbnz	r2, 8007940 <_realloc_r+0x20>
 8007936:	f7ff ffa5 	bl	8007884 <_free_r>
 800793a:	4625      	mov	r5, r4
 800793c:	4628      	mov	r0, r5
 800793e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007940:	f000 f848 	bl	80079d4 <_malloc_usable_size_r>
 8007944:	42a0      	cmp	r0, r4
 8007946:	d20f      	bcs.n	8007968 <_realloc_r+0x48>
 8007948:	4621      	mov	r1, r4
 800794a:	4638      	mov	r0, r7
 800794c:	f7ff f8ae 	bl	8006aac <_malloc_r>
 8007950:	4605      	mov	r5, r0
 8007952:	2800      	cmp	r0, #0
 8007954:	d0f2      	beq.n	800793c <_realloc_r+0x1c>
 8007956:	4631      	mov	r1, r6
 8007958:	4622      	mov	r2, r4
 800795a:	f7fe ff7d 	bl	8006858 <memcpy>
 800795e:	4631      	mov	r1, r6
 8007960:	4638      	mov	r0, r7
 8007962:	f7ff ff8f 	bl	8007884 <_free_r>
 8007966:	e7e9      	b.n	800793c <_realloc_r+0x1c>
 8007968:	4635      	mov	r5, r6
 800796a:	e7e7      	b.n	800793c <_realloc_r+0x1c>

0800796c <_read_r>:
 800796c:	b538      	push	{r3, r4, r5, lr}
 800796e:	4c07      	ldr	r4, [pc, #28]	; (800798c <_read_r+0x20>)
 8007970:	4605      	mov	r5, r0
 8007972:	4608      	mov	r0, r1
 8007974:	4611      	mov	r1, r2
 8007976:	2200      	movs	r2, #0
 8007978:	6022      	str	r2, [r4, #0]
 800797a:	461a      	mov	r2, r3
 800797c:	f7fe fe5e 	bl	800663c <_read>
 8007980:	1c43      	adds	r3, r0, #1
 8007982:	d102      	bne.n	800798a <_read_r+0x1e>
 8007984:	6823      	ldr	r3, [r4, #0]
 8007986:	b103      	cbz	r3, 800798a <_read_r+0x1e>
 8007988:	602b      	str	r3, [r5, #0]
 800798a:	bd38      	pop	{r3, r4, r5, pc}
 800798c:	20000364 	.word	0x20000364

08007990 <_fstat_r>:
 8007990:	b538      	push	{r3, r4, r5, lr}
 8007992:	4c07      	ldr	r4, [pc, #28]	; (80079b0 <_fstat_r+0x20>)
 8007994:	2300      	movs	r3, #0
 8007996:	4605      	mov	r5, r0
 8007998:	4608      	mov	r0, r1
 800799a:	4611      	mov	r1, r2
 800799c:	6023      	str	r3, [r4, #0]
 800799e:	f7fe fe92 	bl	80066c6 <_fstat>
 80079a2:	1c43      	adds	r3, r0, #1
 80079a4:	d102      	bne.n	80079ac <_fstat_r+0x1c>
 80079a6:	6823      	ldr	r3, [r4, #0]
 80079a8:	b103      	cbz	r3, 80079ac <_fstat_r+0x1c>
 80079aa:	602b      	str	r3, [r5, #0]
 80079ac:	bd38      	pop	{r3, r4, r5, pc}
 80079ae:	bf00      	nop
 80079b0:	20000364 	.word	0x20000364

080079b4 <_isatty_r>:
 80079b4:	b538      	push	{r3, r4, r5, lr}
 80079b6:	4c06      	ldr	r4, [pc, #24]	; (80079d0 <_isatty_r+0x1c>)
 80079b8:	2300      	movs	r3, #0
 80079ba:	4605      	mov	r5, r0
 80079bc:	4608      	mov	r0, r1
 80079be:	6023      	str	r3, [r4, #0]
 80079c0:	f7fe fe91 	bl	80066e6 <_isatty>
 80079c4:	1c43      	adds	r3, r0, #1
 80079c6:	d102      	bne.n	80079ce <_isatty_r+0x1a>
 80079c8:	6823      	ldr	r3, [r4, #0]
 80079ca:	b103      	cbz	r3, 80079ce <_isatty_r+0x1a>
 80079cc:	602b      	str	r3, [r5, #0]
 80079ce:	bd38      	pop	{r3, r4, r5, pc}
 80079d0:	20000364 	.word	0x20000364

080079d4 <_malloc_usable_size_r>:
 80079d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079d8:	1f18      	subs	r0, r3, #4
 80079da:	2b00      	cmp	r3, #0
 80079dc:	bfbc      	itt	lt
 80079de:	580b      	ldrlt	r3, [r1, r0]
 80079e0:	18c0      	addlt	r0, r0, r3
 80079e2:	4770      	bx	lr

080079e4 <_init>:
 80079e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e6:	bf00      	nop
 80079e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ea:	bc08      	pop	{r3}
 80079ec:	469e      	mov	lr, r3
 80079ee:	4770      	bx	lr

080079f0 <_fini>:
 80079f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f2:	bf00      	nop
 80079f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079f6:	bc08      	pop	{r3}
 80079f8:	469e      	mov	lr, r3
 80079fa:	4770      	bx	lr
