
STM32F4xx-Nucleo-DataLogTerminal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bd0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08007d70  08007d70  00017d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007e28  08007e28  00017e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007e30  08007e30  00017e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007e34  08007e34  00017e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000002cc  20000000  08007e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000428  200002cc  08008104  000202cc  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200006f4  08008104  000206f4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 10 .debug_info   00043b7a  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000039d3  00000000  00000000  00063e76  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0003298d  00000000  00000000  00067849  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001e78  00000000  00000000  0009a1d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00008a78  00000000  00000000  0009c050  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0001a836  00000000  00000000  000a4ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00017973  00000000  00000000  000bf2fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000ac252  00000000  00000000  000d6c71  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  00182ec3  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00007740  00000000  00000000  00182f40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002cc 	.word	0x200002cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007d58 	.word	0x08007d58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	08007d58 	.word	0x08007d58

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <LSM6DS0_ACC_GYRO_WriteReg>:
* Input       : Register Address, Data to be written
* Output      : None
* Return      : None
*******************************************************************************/
status_t LSM6DS0_ACC_GYRO_WriteReg(void *handle, u8_t Reg, u8_t *Bufp, u16_t len)
{
 8000590:	b508      	push	{r3, lr}
  if ( Sensor_IO_Write( handle, Reg, Bufp, len ) )
 8000592:	f005 f8ff 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
  else
    return MEMS_SUCCESS;
}
 8000596:	fab0 f080 	clz	r0, r0
 800059a:	0940      	lsrs	r0, r0, #5
 800059c:	bd08      	pop	{r3, pc}
 800059e:	bf00      	nop

080005a0 <LSM6DS0_ACC_GYRO_ReadReg>:
* Input       : Register Address
* Output      : Data REad
* Return      : None
*******************************************************************************/
status_t LSM6DS0_ACC_GYRO_ReadReg(void *handle, u8_t Reg, u8_t *Bufp, u16_t len)
{
 80005a0:	b508      	push	{r3, lr}
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 80005a2:	f005 f945 	bl	8005830 <Sensor_IO_Read>
    return MEMS_ERROR;
  else
    return MEMS_SUCCESS;
}
 80005a6:	fab0 f080 	clz	r0, r0
 80005aa:	0940      	lsrs	r0, r0, #5
 80005ac:	bd08      	pop	{r3, pc}
 80005ae:	bf00      	nop

080005b0 <LSM6DS0_ACC_GYRO_R_WHO_AM_I_>:
* Input          : Pointer to u8_t
* Output         : Status of WHO_AM_I_BIT
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS0_ACC_GYRO_R_WHO_AM_I_(void *handle, u8_t *value)
{
 80005b0:	b508      	push	{r3, lr}
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 80005b2:	460a      	mov	r2, r1
 80005b4:	2301      	movs	r3, #1
 80005b6:	210f      	movs	r1, #15
 80005b8:	f005 f93a 	bl	8005830 <Sensor_IO_Read>

  *value &= LSM6DS0_ACC_GYRO_WHO_AM_I_BIT_MASK; //coerce
  *value = *value >> LSM6DS0_ACC_GYRO_WHO_AM_I_BIT_POSITION; //mask

  return MEMS_SUCCESS;
}
 80005bc:	fab0 f080 	clz	r0, r0
 80005c0:	0940      	lsrs	r0, r0, #5
 80005c2:	bd08      	pop	{r3, pc}

080005c4 <LSM6DS0_ACC_GYRO_W_GyroFullScale>:
* Input          : LSM6DS0_ACC_GYRO_FS_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS0_ACC_GYRO_W_GyroFullScale(void *handle, LSM6DS0_ACC_GYRO_FS_G_t newValue)
{
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	b083      	sub	sp, #12
 80005c8:	460c      	mov	r4, r1
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 80005ca:	f10d 0207 	add.w	r2, sp, #7
 80005ce:	2301      	movs	r3, #1
 80005d0:	2110      	movs	r1, #16
{
 80005d2:	4605      	mov	r5, r0
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 80005d4:	f005 f92c 	bl	8005830 <Sensor_IO_Read>
 80005d8:	b110      	cbz	r0, 80005e0 <LSM6DS0_ACC_GYRO_W_GyroFullScale+0x1c>
  u8_t value;

  if( !LSM6DS0_ACC_GYRO_ReadReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG1_G, &value, 1) )
    return MEMS_ERROR;
 80005da:	2000      	movs	r0, #0

  if( !LSM6DS0_ACC_GYRO_WriteReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG1_G, &value, 1 ) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 80005dc:	b003      	add	sp, #12
 80005de:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS0_ACC_GYRO_FS_G_MASK;
 80005e0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80005e4:	f023 0318 	bic.w	r3, r3, #24
  value |= newValue;
 80005e8:	431c      	orrs	r4, r3
  if ( Sensor_IO_Write( handle, Reg, Bufp, len ) )
 80005ea:	f10d 0207 	add.w	r2, sp, #7
 80005ee:	4628      	mov	r0, r5
 80005f0:	2301      	movs	r3, #1
 80005f2:	2110      	movs	r1, #16
  value |= newValue;
 80005f4:	f88d 4007 	strb.w	r4, [sp, #7]
  if ( Sensor_IO_Write( handle, Reg, Bufp, len ) )
 80005f8:	f005 f8cc 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 80005fc:	fab0 f080 	clz	r0, r0
 8000600:	0940      	lsrs	r0, r0, #5
}
 8000602:	b003      	add	sp, #12
 8000604:	bd30      	pop	{r4, r5, pc}
 8000606:	bf00      	nop

08000608 <LSM6DS0_ACC_GYRO_R_GyroFullScale>:
* Input          : Pointer to LSM6DS0_ACC_GYRO_FS_G_t
* Output         : Status of FS_G see LSM6DS0_ACC_GYRO_FS_G_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS0_ACC_GYRO_R_GyroFullScale(void *handle, LSM6DS0_ACC_GYRO_FS_G_t *value)
{
 8000608:	b510      	push	{r4, lr}
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 800060a:	460a      	mov	r2, r1
{
 800060c:	460c      	mov	r4, r1
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 800060e:	2301      	movs	r3, #1
 8000610:	2110      	movs	r1, #16
 8000612:	f005 f90d 	bl	8005830 <Sensor_IO_Read>
 8000616:	b928      	cbnz	r0, 8000624 <LSM6DS0_ACC_GYRO_R_GyroFullScale+0x1c>
  if( !LSM6DS0_ACC_GYRO_ReadReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG1_G, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS0_ACC_GYRO_FS_G_MASK; //mask
 8000618:	7823      	ldrb	r3, [r4, #0]
 800061a:	f003 0318 	and.w	r3, r3, #24
 800061e:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 8000620:	2001      	movs	r0, #1
}
 8000622:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 8000624:	2000      	movs	r0, #0
}
 8000626:	bd10      	pop	{r4, pc}

08000628 <LSM6DS0_ACC_GYRO_W_GyroDataRate>:
* Input          : LSM6DS0_ACC_GYRO_ODR_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS0_ACC_GYRO_W_GyroDataRate(void *handle, LSM6DS0_ACC_GYRO_ODR_G_t newValue)
{
 8000628:	b530      	push	{r4, r5, lr}
 800062a:	b083      	sub	sp, #12
 800062c:	460c      	mov	r4, r1
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 800062e:	f10d 0207 	add.w	r2, sp, #7
 8000632:	2301      	movs	r3, #1
 8000634:	2110      	movs	r1, #16
{
 8000636:	4605      	mov	r5, r0
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 8000638:	f005 f8fa 	bl	8005830 <Sensor_IO_Read>
 800063c:	b110      	cbz	r0, 8000644 <LSM6DS0_ACC_GYRO_W_GyroDataRate+0x1c>
  u8_t value;

  if( !LSM6DS0_ACC_GYRO_ReadReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG1_G, &value, 1) )
    return MEMS_ERROR;
 800063e:	2000      	movs	r0, #0

  if( !LSM6DS0_ACC_GYRO_WriteReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG1_G, &value, 1 ) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8000640:	b003      	add	sp, #12
 8000642:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS0_ACC_GYRO_ODR_G_MASK;
 8000644:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000648:	f003 031f 	and.w	r3, r3, #31
  value |= newValue;
 800064c:	431c      	orrs	r4, r3
  if ( Sensor_IO_Write( handle, Reg, Bufp, len ) )
 800064e:	f10d 0207 	add.w	r2, sp, #7
 8000652:	4628      	mov	r0, r5
 8000654:	2301      	movs	r3, #1
 8000656:	2110      	movs	r1, #16
  value |= newValue;
 8000658:	f88d 4007 	strb.w	r4, [sp, #7]
  if ( Sensor_IO_Write( handle, Reg, Bufp, len ) )
 800065c:	f005 f89a 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8000660:	fab0 f080 	clz	r0, r0
 8000664:	0940      	lsrs	r0, r0, #5
}
 8000666:	b003      	add	sp, #12
 8000668:	bd30      	pop	{r4, r5, pc}
 800066a:	bf00      	nop

0800066c <LSM6DS0_ACC_GYRO_R_GyroDataRate>:
* Input          : Pointer to LSM6DS0_ACC_GYRO_ODR_G_t
* Output         : Status of ODR_G see LSM6DS0_ACC_GYRO_ODR_G_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS0_ACC_GYRO_R_GyroDataRate(void *handle, LSM6DS0_ACC_GYRO_ODR_G_t *value)
{
 800066c:	b510      	push	{r4, lr}
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 800066e:	460a      	mov	r2, r1
{
 8000670:	460c      	mov	r4, r1
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 8000672:	2301      	movs	r3, #1
 8000674:	2110      	movs	r1, #16
 8000676:	f005 f8db 	bl	8005830 <Sensor_IO_Read>
 800067a:	b928      	cbnz	r0, 8000688 <LSM6DS0_ACC_GYRO_R_GyroDataRate+0x1c>
  if( !LSM6DS0_ACC_GYRO_ReadReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG1_G, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS0_ACC_GYRO_ODR_G_MASK; //mask
 800067c:	7823      	ldrb	r3, [r4, #0]
 800067e:	f023 031f 	bic.w	r3, r3, #31
 8000682:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 8000684:	2001      	movs	r0, #1
}
 8000686:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 8000688:	2000      	movs	r0, #0
}
 800068a:	bd10      	pop	{r4, pc}

0800068c <LSM6DS0_ACC_GYRO_W_AccelerometerFullScale>:
* Input          : LSM6DS0_ACC_GYRO_FS_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS0_ACC_GYRO_W_AccelerometerFullScale(void *handle, LSM6DS0_ACC_GYRO_FS_XL_t newValue)
{
 800068c:	b530      	push	{r4, r5, lr}
 800068e:	b083      	sub	sp, #12
 8000690:	460c      	mov	r4, r1
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 8000692:	f10d 0207 	add.w	r2, sp, #7
 8000696:	2301      	movs	r3, #1
 8000698:	2120      	movs	r1, #32
{
 800069a:	4605      	mov	r5, r0
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 800069c:	f005 f8c8 	bl	8005830 <Sensor_IO_Read>
 80006a0:	b110      	cbz	r0, 80006a8 <LSM6DS0_ACC_GYRO_W_AccelerometerFullScale+0x1c>
  u8_t value;

  if( !LSM6DS0_ACC_GYRO_ReadReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG6_XL, &value, 1) )
    return MEMS_ERROR;
 80006a2:	2000      	movs	r0, #0

  if( !LSM6DS0_ACC_GYRO_WriteReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG6_XL, &value, 1 ) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 80006a4:	b003      	add	sp, #12
 80006a6:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS0_ACC_GYRO_FS_XL_MASK;
 80006a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80006ac:	f023 0318 	bic.w	r3, r3, #24
  value |= newValue;
 80006b0:	431c      	orrs	r4, r3
  if ( Sensor_IO_Write( handle, Reg, Bufp, len ) )
 80006b2:	f10d 0207 	add.w	r2, sp, #7
 80006b6:	4628      	mov	r0, r5
 80006b8:	2301      	movs	r3, #1
 80006ba:	2120      	movs	r1, #32
  value |= newValue;
 80006bc:	f88d 4007 	strb.w	r4, [sp, #7]
  if ( Sensor_IO_Write( handle, Reg, Bufp, len ) )
 80006c0:	f005 f868 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 80006c4:	fab0 f080 	clz	r0, r0
 80006c8:	0940      	lsrs	r0, r0, #5
}
 80006ca:	b003      	add	sp, #12
 80006cc:	bd30      	pop	{r4, r5, pc}
 80006ce:	bf00      	nop

080006d0 <LSM6DS0_ACC_GYRO_R_AccelerometerFullScale>:
* Input          : Pointer to LSM6DS0_ACC_GYRO_FS_XL_t
* Output         : Status of FS_XL see LSM6DS0_ACC_GYRO_FS_XL_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS0_ACC_GYRO_R_AccelerometerFullScale(void *handle, LSM6DS0_ACC_GYRO_FS_XL_t *value)
{
 80006d0:	b510      	push	{r4, lr}
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 80006d2:	460a      	mov	r2, r1
{
 80006d4:	460c      	mov	r4, r1
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 80006d6:	2301      	movs	r3, #1
 80006d8:	2120      	movs	r1, #32
 80006da:	f005 f8a9 	bl	8005830 <Sensor_IO_Read>
 80006de:	b928      	cbnz	r0, 80006ec <LSM6DS0_ACC_GYRO_R_AccelerometerFullScale+0x1c>
  if( !LSM6DS0_ACC_GYRO_ReadReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG6_XL, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS0_ACC_GYRO_FS_XL_MASK; //mask
 80006e0:	7823      	ldrb	r3, [r4, #0]
 80006e2:	f003 0318 	and.w	r3, r3, #24
 80006e6:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 80006e8:	2001      	movs	r0, #1
}
 80006ea:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 80006ec:	2000      	movs	r0, #0
}
 80006ee:	bd10      	pop	{r4, pc}

080006f0 <LSM6DS0_ACC_GYRO_W_AccelerometerDataRate>:
* Input          : LSM6DS0_ACC_GYRO_ODR_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS0_ACC_GYRO_W_AccelerometerDataRate(void *handle, LSM6DS0_ACC_GYRO_ODR_XL_t newValue)
{
 80006f0:	b530      	push	{r4, r5, lr}
 80006f2:	b083      	sub	sp, #12
 80006f4:	460c      	mov	r4, r1
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 80006f6:	f10d 0207 	add.w	r2, sp, #7
 80006fa:	2301      	movs	r3, #1
 80006fc:	2120      	movs	r1, #32
{
 80006fe:	4605      	mov	r5, r0
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 8000700:	f005 f896 	bl	8005830 <Sensor_IO_Read>
 8000704:	b110      	cbz	r0, 800070c <LSM6DS0_ACC_GYRO_W_AccelerometerDataRate+0x1c>
  u8_t value;

  if( !LSM6DS0_ACC_GYRO_ReadReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG6_XL, &value, 1) )
    return MEMS_ERROR;
 8000706:	2000      	movs	r0, #0

  if( !LSM6DS0_ACC_GYRO_WriteReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG6_XL, &value, 1 ) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8000708:	b003      	add	sp, #12
 800070a:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS0_ACC_GYRO_ODR_XL_MASK;
 800070c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000710:	f003 031f 	and.w	r3, r3, #31
  value |= newValue;
 8000714:	431c      	orrs	r4, r3
  if ( Sensor_IO_Write( handle, Reg, Bufp, len ) )
 8000716:	f10d 0207 	add.w	r2, sp, #7
 800071a:	4628      	mov	r0, r5
 800071c:	2301      	movs	r3, #1
 800071e:	2120      	movs	r1, #32
  value |= newValue;
 8000720:	f88d 4007 	strb.w	r4, [sp, #7]
  if ( Sensor_IO_Write( handle, Reg, Bufp, len ) )
 8000724:	f005 f836 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8000728:	fab0 f080 	clz	r0, r0
 800072c:	0940      	lsrs	r0, r0, #5
}
 800072e:	b003      	add	sp, #12
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	bf00      	nop

08000734 <LSM6DS0_ACC_GYRO_R_AccelerometerDataRate>:
* Input          : Pointer to LSM6DS0_ACC_GYRO_ODR_XL_t
* Output         : Status of ODR_XL see LSM6DS0_ACC_GYRO_ODR_XL_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS0_ACC_GYRO_R_AccelerometerDataRate(void *handle, LSM6DS0_ACC_GYRO_ODR_XL_t *value)
{
 8000734:	b510      	push	{r4, lr}
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 8000736:	460a      	mov	r2, r1
{
 8000738:	460c      	mov	r4, r1
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 800073a:	2301      	movs	r3, #1
 800073c:	2120      	movs	r1, #32
 800073e:	f005 f877 	bl	8005830 <Sensor_IO_Read>
 8000742:	b928      	cbnz	r0, 8000750 <LSM6DS0_ACC_GYRO_R_AccelerometerDataRate+0x1c>
  if( !LSM6DS0_ACC_GYRO_ReadReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG6_XL, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS0_ACC_GYRO_ODR_XL_MASK; //mask
 8000744:	7823      	ldrb	r3, [r4, #0]
 8000746:	f023 031f 	bic.w	r3, r3, #31
 800074a:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 800074c:	2001      	movs	r0, #1
}
 800074e:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 8000750:	2000      	movs	r0, #0
}
 8000752:	bd10      	pop	{r4, pc}

08000754 <LSM6DS0_ACC_GYRO_W_BlockDataUpdate>:
* Input          : LSM6DS0_ACC_GYRO_BDU_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS0_ACC_GYRO_W_BlockDataUpdate(void *handle, LSM6DS0_ACC_GYRO_BDU_t newValue)
{
 8000754:	b530      	push	{r4, r5, lr}
 8000756:	b083      	sub	sp, #12
 8000758:	460c      	mov	r4, r1
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 800075a:	f10d 0207 	add.w	r2, sp, #7
 800075e:	2301      	movs	r3, #1
 8000760:	2122      	movs	r1, #34	; 0x22
{
 8000762:	4605      	mov	r5, r0
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 8000764:	f005 f864 	bl	8005830 <Sensor_IO_Read>
 8000768:	b110      	cbz	r0, 8000770 <LSM6DS0_ACC_GYRO_W_BlockDataUpdate+0x1c>
  u8_t value;

  if( !LSM6DS0_ACC_GYRO_ReadReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG8, &value, 1) )
    return MEMS_ERROR;
 800076a:	2000      	movs	r0, #0

  if( !LSM6DS0_ACC_GYRO_WriteReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG8, &value, 1 ) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800076c:	b003      	add	sp, #12
 800076e:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS0_ACC_GYRO_BDU_MASK;
 8000770:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  value |= newValue;
 8000778:	431c      	orrs	r4, r3
  if ( Sensor_IO_Write( handle, Reg, Bufp, len ) )
 800077a:	f10d 0207 	add.w	r2, sp, #7
 800077e:	4628      	mov	r0, r5
 8000780:	2301      	movs	r3, #1
 8000782:	2122      	movs	r1, #34	; 0x22
  value |= newValue;
 8000784:	f88d 4007 	strb.w	r4, [sp, #7]
  if ( Sensor_IO_Write( handle, Reg, Bufp, len ) )
 8000788:	f005 f804 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 800078c:	fab0 f080 	clz	r0, r0
 8000790:	0940      	lsrs	r0, r0, #5
}
 8000792:	b003      	add	sp, #12
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <LSM6DS0_ACC_GYRO_Get_AngularRate>:
* Input          : pointer to [u8_t]
* Output         : AngularRate buffer u8_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS0_ACC_GYRO_Get_AngularRate(void *handle, u8_t *buff)
{
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	4606      	mov	r6, r0
 800079c:	460d      	mov	r5, r1
 800079e:	2418      	movs	r4, #24
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 80007a0:	462a      	mov	r2, r5
 80007a2:	2301      	movs	r3, #1
 80007a4:	4621      	mov	r1, r4
 80007a6:	4630      	mov	r0, r6
 80007a8:	f005 f842 	bl	8005830 <Sensor_IO_Read>
  k = 0;
  for (i = 0; i < 3; i++ )
  {
    for (j = 0; j < numberOfByteForDimension; j++ )
    {
      if( !LSM6DS0_ACC_GYRO_ReadReg(handle, LSM6DS0_ACC_GYRO_OUT_X_L_G + k, &buff[k], 1 ))
 80007ac:	1c61      	adds	r1, r4, #1
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 80007ae:	1c6a      	adds	r2, r5, #1
 80007b0:	2301      	movs	r3, #1
 80007b2:	b2c9      	uxtb	r1, r1
 80007b4:	3502      	adds	r5, #2
 80007b6:	b948      	cbnz	r0, 80007cc <LSM6DS0_ACC_GYRO_Get_AngularRate+0x34>
 80007b8:	4630      	mov	r0, r6
 80007ba:	f005 f839 	bl	8005830 <Sensor_IO_Read>
 80007be:	3402      	adds	r4, #2
 80007c0:	b2e4      	uxtb	r4, r4
 80007c2:	b918      	cbnz	r0, 80007cc <LSM6DS0_ACC_GYRO_Get_AngularRate+0x34>
  for (i = 0; i < 3; i++ )
 80007c4:	2c1e      	cmp	r4, #30
 80007c6:	d1eb      	bne.n	80007a0 <LSM6DS0_ACC_GYRO_Get_AngularRate+0x8>
        return MEMS_ERROR;
      k++;
    }
  }

  return MEMS_SUCCESS;
 80007c8:	2001      	movs	r0, #1
}
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
        return MEMS_ERROR;
 80007cc:	2000      	movs	r0, #0
}
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <LSM6DS0_ACC_GYRO_Get_Acceleration>:
* Input          : pointer to [u8_t]
* Output         : Acceleration buffer u8_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS0_ACC_GYRO_Get_Acceleration(void *handle, u8_t *buff)
{
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	4606      	mov	r6, r0
 80007d4:	460d      	mov	r5, r1
 80007d6:	2428      	movs	r4, #40	; 0x28
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 80007d8:	462a      	mov	r2, r5
 80007da:	2301      	movs	r3, #1
 80007dc:	4621      	mov	r1, r4
 80007de:	4630      	mov	r0, r6
 80007e0:	f005 f826 	bl	8005830 <Sensor_IO_Read>
  k = 0;
  for (i = 0; i < 3; i++ )
  {
    for (j = 0; j < numberOfByteForDimension; j++ )
    {
      if( !LSM6DS0_ACC_GYRO_ReadReg(handle, LSM6DS0_ACC_GYRO_OUT_X_L_XL + k, &buff[k], 1 ))
 80007e4:	1c61      	adds	r1, r4, #1
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 80007e6:	1c6a      	adds	r2, r5, #1
 80007e8:	2301      	movs	r3, #1
 80007ea:	b2c9      	uxtb	r1, r1
 80007ec:	3502      	adds	r5, #2
 80007ee:	b948      	cbnz	r0, 8000804 <LSM6DS0_ACC_GYRO_Get_Acceleration+0x34>
 80007f0:	4630      	mov	r0, r6
 80007f2:	f005 f81d 	bl	8005830 <Sensor_IO_Read>
 80007f6:	3402      	adds	r4, #2
 80007f8:	b2e4      	uxtb	r4, r4
 80007fa:	b918      	cbnz	r0, 8000804 <LSM6DS0_ACC_GYRO_Get_Acceleration+0x34>
  for (i = 0; i < 3; i++ )
 80007fc:	2c2e      	cmp	r4, #46	; 0x2e
 80007fe:	d1eb      	bne.n	80007d8 <LSM6DS0_ACC_GYRO_Get_Acceleration+0x8>
        return MEMS_ERROR;
      k++;
    }
  }
  return MEMS_SUCCESS;
 8000800:	2001      	movs	r0, #1
}
 8000802:	bd70      	pop	{r4, r5, r6, pc}
        return MEMS_ERROR;
 8000804:	2000      	movs	r0, #0
}
 8000806:	bd70      	pop	{r4, r5, r6, pc}

08000808 <LSM6DS0_ACC_GYRO_R_AccelerometerDataReadyFlag>:
* Input          : Pointer to LSM6DS0_ACC_GYRO_XLDA_t
* Output         : Status of XLDA see LSM6DS0_ACC_GYRO_XLDA_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS0_ACC_GYRO_R_AccelerometerDataReadyFlag(void *handle, LSM6DS0_ACC_GYRO_XLDA_t *value)
{
 8000808:	b510      	push	{r4, lr}
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 800080a:	460a      	mov	r2, r1
{
 800080c:	460c      	mov	r4, r1
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 800080e:	2301      	movs	r3, #1
 8000810:	2127      	movs	r1, #39	; 0x27
 8000812:	f005 f80d 	bl	8005830 <Sensor_IO_Read>
 8000816:	b928      	cbnz	r0, 8000824 <LSM6DS0_ACC_GYRO_R_AccelerometerDataReadyFlag+0x1c>

  if( !LSM6DS0_ACC_GYRO_ReadReg(handle, LSM6DS0_ACC_GYRO_STATUS_REG, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS0_ACC_GYRO_XLDA_MASK; //mask
 8000818:	7823      	ldrb	r3, [r4, #0]
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 8000820:	2001      	movs	r0, #1
}
 8000822:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 8000824:	2000      	movs	r0, #0
}
 8000826:	bd10      	pop	{r4, pc}

08000828 <LSM6DS0_ACC_GYRO_R_GyroDataReadyFlag>:
* Input          : Pointer to LSM6DS0_ACC_GYRO_GDA_t
* Output         : Status of GDA see LSM6DS0_ACC_GYRO_GDA_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS0_ACC_GYRO_R_GyroDataReadyFlag(void *handle, LSM6DS0_ACC_GYRO_GDA_t *value)
{
 8000828:	b510      	push	{r4, lr}
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 800082a:	460a      	mov	r2, r1
{
 800082c:	460c      	mov	r4, r1
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 800082e:	2301      	movs	r3, #1
 8000830:	2127      	movs	r1, #39	; 0x27
 8000832:	f004 fffd 	bl	8005830 <Sensor_IO_Read>
 8000836:	b928      	cbnz	r0, 8000844 <LSM6DS0_ACC_GYRO_R_GyroDataReadyFlag+0x1c>

  if( !LSM6DS0_ACC_GYRO_ReadReg(handle, LSM6DS0_ACC_GYRO_STATUS_REG, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS0_ACC_GYRO_GDA_MASK; //mask
 8000838:	7823      	ldrb	r3, [r4, #0]
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 8000840:	2001      	movs	r0, #1
}
 8000842:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 8000844:	2000      	movs	r0, #0
}
 8000846:	bd10      	pop	{r4, pc}

08000848 <LSM6DS0_ACC_GYRO_W_GyroAxisX>:
* Input          : LSM6DS0_ACC_GYRO_XEN_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS0_ACC_GYRO_W_GyroAxisX(void *handle, LSM6DS0_ACC_GYRO_XEN_G_t newValue)
{
 8000848:	b530      	push	{r4, r5, lr}
 800084a:	b083      	sub	sp, #12
 800084c:	460c      	mov	r4, r1
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 800084e:	f10d 0207 	add.w	r2, sp, #7
 8000852:	2301      	movs	r3, #1
 8000854:	211e      	movs	r1, #30
{
 8000856:	4605      	mov	r5, r0
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 8000858:	f004 ffea 	bl	8005830 <Sensor_IO_Read>
 800085c:	b110      	cbz	r0, 8000864 <LSM6DS0_ACC_GYRO_W_GyroAxisX+0x1c>
  u8_t value;

  if( !LSM6DS0_ACC_GYRO_ReadReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG4, &value, 1) )
    return MEMS_ERROR;
 800085e:	2000      	movs	r0, #0

  if( !LSM6DS0_ACC_GYRO_WriteReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG4, &value, 1 ) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8000860:	b003      	add	sp, #12
 8000862:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS0_ACC_GYRO_XEN_G_MASK;
 8000864:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000868:	f023 0308 	bic.w	r3, r3, #8
  value |= newValue;
 800086c:	431c      	orrs	r4, r3
  if ( Sensor_IO_Write( handle, Reg, Bufp, len ) )
 800086e:	f10d 0207 	add.w	r2, sp, #7
 8000872:	4628      	mov	r0, r5
 8000874:	2301      	movs	r3, #1
 8000876:	211e      	movs	r1, #30
  value |= newValue;
 8000878:	f88d 4007 	strb.w	r4, [sp, #7]
  if ( Sensor_IO_Write( handle, Reg, Bufp, len ) )
 800087c:	f004 ff8a 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8000880:	fab0 f080 	clz	r0, r0
 8000884:	0940      	lsrs	r0, r0, #5
}
 8000886:	b003      	add	sp, #12
 8000888:	bd30      	pop	{r4, r5, pc}
 800088a:	bf00      	nop

0800088c <LSM6DS0_ACC_GYRO_R_GyroAxisX>:
* Input          : Pointer to LSM6DS0_ACC_GYRO_XEN_G_t
* Output         : Status of XEN_G see LSM6DS0_ACC_GYRO_XEN_G_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS0_ACC_GYRO_R_GyroAxisX(void *handle, LSM6DS0_ACC_GYRO_XEN_G_t *value)
{
 800088c:	b510      	push	{r4, lr}
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 800088e:	460a      	mov	r2, r1
{
 8000890:	460c      	mov	r4, r1
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 8000892:	2301      	movs	r3, #1
 8000894:	211e      	movs	r1, #30
 8000896:	f004 ffcb 	bl	8005830 <Sensor_IO_Read>
 800089a:	b928      	cbnz	r0, 80008a8 <LSM6DS0_ACC_GYRO_R_GyroAxisX+0x1c>
  if( !LSM6DS0_ACC_GYRO_ReadReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG4, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS0_ACC_GYRO_XEN_G_MASK; //mask
 800089c:	7823      	ldrb	r3, [r4, #0]
 800089e:	f003 0308 	and.w	r3, r3, #8
 80008a2:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 80008a4:	2001      	movs	r0, #1
}
 80008a6:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 80008a8:	2000      	movs	r0, #0
}
 80008aa:	bd10      	pop	{r4, pc}

080008ac <LSM6DS0_ACC_GYRO_W_GyroAxisY>:
* Input          : LSM6DS0_ACC_GYRO_YEN_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS0_ACC_GYRO_W_GyroAxisY(void *handle, LSM6DS0_ACC_GYRO_YEN_G_t newValue)
{
 80008ac:	b530      	push	{r4, r5, lr}
 80008ae:	b083      	sub	sp, #12
 80008b0:	460c      	mov	r4, r1
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 80008b2:	f10d 0207 	add.w	r2, sp, #7
 80008b6:	2301      	movs	r3, #1
 80008b8:	211e      	movs	r1, #30
{
 80008ba:	4605      	mov	r5, r0
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 80008bc:	f004 ffb8 	bl	8005830 <Sensor_IO_Read>
 80008c0:	b110      	cbz	r0, 80008c8 <LSM6DS0_ACC_GYRO_W_GyroAxisY+0x1c>
  u8_t value;

  if( !LSM6DS0_ACC_GYRO_ReadReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG4, &value, 1) )
    return MEMS_ERROR;
 80008c2:	2000      	movs	r0, #0

  if( !LSM6DS0_ACC_GYRO_WriteReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG4, &value, 1 ) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 80008c4:	b003      	add	sp, #12
 80008c6:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS0_ACC_GYRO_YEN_G_MASK;
 80008c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80008cc:	f023 0310 	bic.w	r3, r3, #16
  value |= newValue;
 80008d0:	431c      	orrs	r4, r3
  if ( Sensor_IO_Write( handle, Reg, Bufp, len ) )
 80008d2:	f10d 0207 	add.w	r2, sp, #7
 80008d6:	4628      	mov	r0, r5
 80008d8:	2301      	movs	r3, #1
 80008da:	211e      	movs	r1, #30
  value |= newValue;
 80008dc:	f88d 4007 	strb.w	r4, [sp, #7]
  if ( Sensor_IO_Write( handle, Reg, Bufp, len ) )
 80008e0:	f004 ff58 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 80008e4:	fab0 f080 	clz	r0, r0
 80008e8:	0940      	lsrs	r0, r0, #5
}
 80008ea:	b003      	add	sp, #12
 80008ec:	bd30      	pop	{r4, r5, pc}
 80008ee:	bf00      	nop

080008f0 <LSM6DS0_ACC_GYRO_R_GyroAxisY>:
* Input          : Pointer to LSM6DS0_ACC_GYRO_YEN_G_t
* Output         : Status of YEN_G see LSM6DS0_ACC_GYRO_YEN_G_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS0_ACC_GYRO_R_GyroAxisY(void *handle, LSM6DS0_ACC_GYRO_YEN_G_t *value)
{
 80008f0:	b510      	push	{r4, lr}
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 80008f2:	460a      	mov	r2, r1
{
 80008f4:	460c      	mov	r4, r1
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 80008f6:	2301      	movs	r3, #1
 80008f8:	211e      	movs	r1, #30
 80008fa:	f004 ff99 	bl	8005830 <Sensor_IO_Read>
 80008fe:	b928      	cbnz	r0, 800090c <LSM6DS0_ACC_GYRO_R_GyroAxisY+0x1c>

  if( !LSM6DS0_ACC_GYRO_ReadReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG4, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS0_ACC_GYRO_YEN_G_MASK; //mask
 8000900:	7823      	ldrb	r3, [r4, #0]
 8000902:	f003 0310 	and.w	r3, r3, #16
 8000906:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 8000908:	2001      	movs	r0, #1
}
 800090a:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 800090c:	2000      	movs	r0, #0
}
 800090e:	bd10      	pop	{r4, pc}

08000910 <LSM6DS0_ACC_GYRO_W_GyroAxisZ>:
* Input          : LSM6DS0_ACC_GYRO_ZEN_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS0_ACC_GYRO_W_GyroAxisZ(void *handle, LSM6DS0_ACC_GYRO_ZEN_G_t newValue)
{
 8000910:	b530      	push	{r4, r5, lr}
 8000912:	b083      	sub	sp, #12
 8000914:	460c      	mov	r4, r1
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 8000916:	f10d 0207 	add.w	r2, sp, #7
 800091a:	2301      	movs	r3, #1
 800091c:	211e      	movs	r1, #30
{
 800091e:	4605      	mov	r5, r0
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 8000920:	f004 ff86 	bl	8005830 <Sensor_IO_Read>
 8000924:	b110      	cbz	r0, 800092c <LSM6DS0_ACC_GYRO_W_GyroAxisZ+0x1c>
  u8_t value;

  if( !LSM6DS0_ACC_GYRO_ReadReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG4, &value, 1) )
    return MEMS_ERROR;
 8000926:	2000      	movs	r0, #0

  if( !LSM6DS0_ACC_GYRO_WriteReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG4, &value, 1 ) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8000928:	b003      	add	sp, #12
 800092a:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS0_ACC_GYRO_ZEN_G_MASK;
 800092c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000930:	f023 0320 	bic.w	r3, r3, #32
  value |= newValue;
 8000934:	431c      	orrs	r4, r3
  if ( Sensor_IO_Write( handle, Reg, Bufp, len ) )
 8000936:	f10d 0207 	add.w	r2, sp, #7
 800093a:	4628      	mov	r0, r5
 800093c:	2301      	movs	r3, #1
 800093e:	211e      	movs	r1, #30
  value |= newValue;
 8000940:	f88d 4007 	strb.w	r4, [sp, #7]
  if ( Sensor_IO_Write( handle, Reg, Bufp, len ) )
 8000944:	f004 ff26 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8000948:	fab0 f080 	clz	r0, r0
 800094c:	0940      	lsrs	r0, r0, #5
}
 800094e:	b003      	add	sp, #12
 8000950:	bd30      	pop	{r4, r5, pc}
 8000952:	bf00      	nop

08000954 <LSM6DS0_ACC_GYRO_R_GyroAxisZ>:
* Input          : Pointer to LSM6DS0_ACC_GYRO_ZEN_G_t
* Output         : Status of ZEN_G see LSM6DS0_ACC_GYRO_ZEN_G_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS0_ACC_GYRO_R_GyroAxisZ(void *handle, LSM6DS0_ACC_GYRO_ZEN_G_t *value)
{
 8000954:	b510      	push	{r4, lr}
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 8000956:	460a      	mov	r2, r1
{
 8000958:	460c      	mov	r4, r1
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 800095a:	2301      	movs	r3, #1
 800095c:	211e      	movs	r1, #30
 800095e:	f004 ff67 	bl	8005830 <Sensor_IO_Read>
 8000962:	b928      	cbnz	r0, 8000970 <LSM6DS0_ACC_GYRO_R_GyroAxisZ+0x1c>

  if( !LSM6DS0_ACC_GYRO_ReadReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG4, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS0_ACC_GYRO_ZEN_G_MASK; //mask
 8000964:	7823      	ldrb	r3, [r4, #0]
 8000966:	f003 0320 	and.w	r3, r3, #32
 800096a:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 800096c:	2001      	movs	r0, #1
}
 800096e:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 8000970:	2000      	movs	r0, #0
}
 8000972:	bd10      	pop	{r4, pc}

08000974 <LSM6DS0_ACC_GYRO_W_AccelerometerAxisX>:
* Input          : LSM6DS0_ACC_GYRO_XEN_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS0_ACC_GYRO_W_AccelerometerAxisX(void *handle, LSM6DS0_ACC_GYRO_XEN_XL_t newValue)
{
 8000974:	b530      	push	{r4, r5, lr}
 8000976:	b083      	sub	sp, #12
 8000978:	460c      	mov	r4, r1
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 800097a:	f10d 0207 	add.w	r2, sp, #7
 800097e:	2301      	movs	r3, #1
 8000980:	211f      	movs	r1, #31
{
 8000982:	4605      	mov	r5, r0
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 8000984:	f004 ff54 	bl	8005830 <Sensor_IO_Read>
 8000988:	b110      	cbz	r0, 8000990 <LSM6DS0_ACC_GYRO_W_AccelerometerAxisX+0x1c>
  u8_t value;

  if( !LSM6DS0_ACC_GYRO_ReadReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG5_XL, &value, 1) )
    return MEMS_ERROR;
 800098a:	2000      	movs	r0, #0

  if( !LSM6DS0_ACC_GYRO_WriteReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG5_XL, &value, 1 ) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800098c:	b003      	add	sp, #12
 800098e:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS0_ACC_GYRO_XEN_XL_MASK;
 8000990:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000994:	f023 0308 	bic.w	r3, r3, #8
  value |= newValue;
 8000998:	431c      	orrs	r4, r3
  if ( Sensor_IO_Write( handle, Reg, Bufp, len ) )
 800099a:	f10d 0207 	add.w	r2, sp, #7
 800099e:	4628      	mov	r0, r5
 80009a0:	2301      	movs	r3, #1
 80009a2:	211f      	movs	r1, #31
  value |= newValue;
 80009a4:	f88d 4007 	strb.w	r4, [sp, #7]
  if ( Sensor_IO_Write( handle, Reg, Bufp, len ) )
 80009a8:	f004 fef4 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 80009ac:	fab0 f080 	clz	r0, r0
 80009b0:	0940      	lsrs	r0, r0, #5
}
 80009b2:	b003      	add	sp, #12
 80009b4:	bd30      	pop	{r4, r5, pc}
 80009b6:	bf00      	nop

080009b8 <LSM6DS0_ACC_GYRO_R_AccelerometerAxisX>:
* Input          : Pointer to LSM6DS0_ACC_GYRO_XEN_XL_t
* Output         : Status of XEN_XL see LSM6DS0_ACC_GYRO_XEN_XL_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS0_ACC_GYRO_R_AccelerometerAxisX(void *handle, LSM6DS0_ACC_GYRO_XEN_XL_t *value)
{
 80009b8:	b510      	push	{r4, lr}
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 80009ba:	460a      	mov	r2, r1
{
 80009bc:	460c      	mov	r4, r1
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 80009be:	2301      	movs	r3, #1
 80009c0:	211f      	movs	r1, #31
 80009c2:	f004 ff35 	bl	8005830 <Sensor_IO_Read>
 80009c6:	b928      	cbnz	r0, 80009d4 <LSM6DS0_ACC_GYRO_R_AccelerometerAxisX+0x1c>

  if( !LSM6DS0_ACC_GYRO_ReadReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG5_XL, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS0_ACC_GYRO_XEN_XL_MASK; //mask
 80009c8:	7823      	ldrb	r3, [r4, #0]
 80009ca:	f003 0308 	and.w	r3, r3, #8
 80009ce:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 80009d0:	2001      	movs	r0, #1
}
 80009d2:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 80009d4:	2000      	movs	r0, #0
}
 80009d6:	bd10      	pop	{r4, pc}

080009d8 <LSM6DS0_ACC_GYRO_W_AccelerometerAxisY>:
* Input          : LSM6DS0_ACC_GYRO_YEN_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS0_ACC_GYRO_W_AccelerometerAxisY(void *handle, LSM6DS0_ACC_GYRO_YEN_XL_t newValue)
{
 80009d8:	b530      	push	{r4, r5, lr}
 80009da:	b083      	sub	sp, #12
 80009dc:	460c      	mov	r4, r1
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 80009de:	f10d 0207 	add.w	r2, sp, #7
 80009e2:	2301      	movs	r3, #1
 80009e4:	211f      	movs	r1, #31
{
 80009e6:	4605      	mov	r5, r0
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 80009e8:	f004 ff22 	bl	8005830 <Sensor_IO_Read>
 80009ec:	b110      	cbz	r0, 80009f4 <LSM6DS0_ACC_GYRO_W_AccelerometerAxisY+0x1c>
  u8_t value;

  if( !LSM6DS0_ACC_GYRO_ReadReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG5_XL, &value, 1) )
    return MEMS_ERROR;
 80009ee:	2000      	movs	r0, #0

  if( !LSM6DS0_ACC_GYRO_WriteReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG5_XL, &value, 1 ) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 80009f0:	b003      	add	sp, #12
 80009f2:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS0_ACC_GYRO_YEN_XL_MASK;
 80009f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80009f8:	f023 0310 	bic.w	r3, r3, #16
  value |= newValue;
 80009fc:	431c      	orrs	r4, r3
  if ( Sensor_IO_Write( handle, Reg, Bufp, len ) )
 80009fe:	f10d 0207 	add.w	r2, sp, #7
 8000a02:	4628      	mov	r0, r5
 8000a04:	2301      	movs	r3, #1
 8000a06:	211f      	movs	r1, #31
  value |= newValue;
 8000a08:	f88d 4007 	strb.w	r4, [sp, #7]
  if ( Sensor_IO_Write( handle, Reg, Bufp, len ) )
 8000a0c:	f004 fec2 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8000a10:	fab0 f080 	clz	r0, r0
 8000a14:	0940      	lsrs	r0, r0, #5
}
 8000a16:	b003      	add	sp, #12
 8000a18:	bd30      	pop	{r4, r5, pc}
 8000a1a:	bf00      	nop

08000a1c <LSM6DS0_ACC_GYRO_R_AccelerometerAxisY>:
* Input          : Pointer to LSM6DS0_ACC_GYRO_YEN_XL_t
* Output         : Status of YEN_XL see LSM6DS0_ACC_GYRO_YEN_XL_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS0_ACC_GYRO_R_AccelerometerAxisY(void *handle, LSM6DS0_ACC_GYRO_YEN_XL_t *value)
{
 8000a1c:	b510      	push	{r4, lr}
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 8000a1e:	460a      	mov	r2, r1
{
 8000a20:	460c      	mov	r4, r1
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 8000a22:	2301      	movs	r3, #1
 8000a24:	211f      	movs	r1, #31
 8000a26:	f004 ff03 	bl	8005830 <Sensor_IO_Read>
 8000a2a:	b928      	cbnz	r0, 8000a38 <LSM6DS0_ACC_GYRO_R_AccelerometerAxisY+0x1c>
  if( !LSM6DS0_ACC_GYRO_ReadReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG5_XL, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS0_ACC_GYRO_YEN_XL_MASK; //mask
 8000a2c:	7823      	ldrb	r3, [r4, #0]
 8000a2e:	f003 0310 	and.w	r3, r3, #16
 8000a32:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 8000a34:	2001      	movs	r0, #1
}
 8000a36:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 8000a38:	2000      	movs	r0, #0
}
 8000a3a:	bd10      	pop	{r4, pc}

08000a3c <LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ>:
* Input          : LSM6DS0_ACC_GYRO_ZEN_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ(void *handle, LSM6DS0_ACC_GYRO_ZEN_XL_t newValue)
{
 8000a3c:	b530      	push	{r4, r5, lr}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	460c      	mov	r4, r1
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 8000a42:	f10d 0207 	add.w	r2, sp, #7
 8000a46:	2301      	movs	r3, #1
 8000a48:	211f      	movs	r1, #31
{
 8000a4a:	4605      	mov	r5, r0
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 8000a4c:	f004 fef0 	bl	8005830 <Sensor_IO_Read>
 8000a50:	b110      	cbz	r0, 8000a58 <LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ+0x1c>
  u8_t value;

  if( !LSM6DS0_ACC_GYRO_ReadReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG5_XL, &value, 1) )
    return MEMS_ERROR;
 8000a52:	2000      	movs	r0, #0

  if( !LSM6DS0_ACC_GYRO_WriteReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG5_XL, &value, 1 ) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8000a54:	b003      	add	sp, #12
 8000a56:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS0_ACC_GYRO_ZEN_XL_MASK;
 8000a58:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000a5c:	f023 0320 	bic.w	r3, r3, #32
  value |= newValue;
 8000a60:	431c      	orrs	r4, r3
  if ( Sensor_IO_Write( handle, Reg, Bufp, len ) )
 8000a62:	f10d 0207 	add.w	r2, sp, #7
 8000a66:	4628      	mov	r0, r5
 8000a68:	2301      	movs	r3, #1
 8000a6a:	211f      	movs	r1, #31
  value |= newValue;
 8000a6c:	f88d 4007 	strb.w	r4, [sp, #7]
  if ( Sensor_IO_Write( handle, Reg, Bufp, len ) )
 8000a70:	f004 fe90 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8000a74:	fab0 f080 	clz	r0, r0
 8000a78:	0940      	lsrs	r0, r0, #5
}
 8000a7a:	b003      	add	sp, #12
 8000a7c:	bd30      	pop	{r4, r5, pc}
 8000a7e:	bf00      	nop

08000a80 <LSM6DS0_ACC_GYRO_R_AccelerometerAxisZ>:
* Input          : Pointer to LSM6DS0_ACC_GYRO_ZEN_XL_t
* Output         : Status of ZEN_XL see LSM6DS0_ACC_GYRO_ZEN_XL_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS0_ACC_GYRO_R_AccelerometerAxisZ(void *handle, LSM6DS0_ACC_GYRO_ZEN_XL_t *value)
{
 8000a80:	b510      	push	{r4, lr}
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 8000a82:	460a      	mov	r2, r1
{
 8000a84:	460c      	mov	r4, r1
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 8000a86:	2301      	movs	r3, #1
 8000a88:	211f      	movs	r1, #31
 8000a8a:	f004 fed1 	bl	8005830 <Sensor_IO_Read>
 8000a8e:	b928      	cbnz	r0, 8000a9c <LSM6DS0_ACC_GYRO_R_AccelerometerAxisZ+0x1c>

  if( !LSM6DS0_ACC_GYRO_ReadReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG5_XL, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS0_ACC_GYRO_ZEN_XL_MASK; //mask
 8000a90:	7823      	ldrb	r3, [r4, #0]
 8000a92:	f003 0320 	and.w	r3, r3, #32
 8000a96:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 8000a98:	2001      	movs	r0, #1
}
 8000a9a:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 8000a9c:	2000      	movs	r0, #0
}
 8000a9e:	bd10      	pop	{r4, pc}

08000aa0 <LSM6DS0_ACC_GYRO_W_AutoIndexOnMultiAccess>:
* Input          : LSM6DS0_ACC_GYRO_IF_ADD_INC_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS0_ACC_GYRO_W_AutoIndexOnMultiAccess(void *handle, LSM6DS0_ACC_GYRO_IF_ADD_INC_t newValue)
{
 8000aa0:	b530      	push	{r4, r5, lr}
 8000aa2:	b083      	sub	sp, #12
 8000aa4:	460c      	mov	r4, r1
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 8000aa6:	f10d 0207 	add.w	r2, sp, #7
 8000aaa:	2301      	movs	r3, #1
 8000aac:	2122      	movs	r1, #34	; 0x22
{
 8000aae:	4605      	mov	r5, r0
  if ( Sensor_IO_Read( handle, Reg, Bufp, len ) )
 8000ab0:	f004 febe 	bl	8005830 <Sensor_IO_Read>
 8000ab4:	b110      	cbz	r0, 8000abc <LSM6DS0_ACC_GYRO_W_AutoIndexOnMultiAccess+0x1c>
  u8_t value;

  if( !LSM6DS0_ACC_GYRO_ReadReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG8, &value, 1) )
    return MEMS_ERROR;
 8000ab6:	2000      	movs	r0, #0
  if( !LSM6DS0_ACC_GYRO_WriteReg(handle, LSM6DS0_ACC_GYRO_CTRL_REG8, &value, 1 ) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;

}
 8000ab8:	b003      	add	sp, #12
 8000aba:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS0_ACC_GYRO_IF_ADD_INC_MASK;
 8000abc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000ac0:	f023 0304 	bic.w	r3, r3, #4
  value |= newValue;
 8000ac4:	431c      	orrs	r4, r3
  if ( Sensor_IO_Write( handle, Reg, Bufp, len ) )
 8000ac6:	f10d 0207 	add.w	r2, sp, #7
 8000aca:	4628      	mov	r0, r5
 8000acc:	2301      	movs	r3, #1
 8000ace:	2122      	movs	r1, #34	; 0x22
  value |= newValue;
 8000ad0:	f88d 4007 	strb.w	r4, [sp, #7]
  if ( Sensor_IO_Write( handle, Reg, Bufp, len ) )
 8000ad4:	f004 fe5e 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8000ad8:	fab0 f080 	clz	r0, r0
 8000adc:	0940      	lsrs	r0, r0, #5
}
 8000ade:	b003      	add	sp, #12
 8000ae0:	bd30      	pop	{r4, r5, pc}
 8000ae2:	bf00      	nop

08000ae4 <LSM6DS0_X_Get_DRDY_Status>:
 * @param status the data ready status
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS0_X_Get_DRDY_Status( DrvContextTypeDef *handle, uint8_t *status )
{
 8000ae4:	b510      	push	{r4, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	460c      	mov	r4, r1

  LSM6DS0_ACC_GYRO_XLDA_t status_raw;

  if ( LSM6DS0_ACC_GYRO_R_AccelerometerDataReadyFlag( (void *)handle, &status_raw ) == MEMS_ERROR )
 8000aea:	f10d 0107 	add.w	r1, sp, #7
 8000aee:	f7ff fe8b 	bl	8000808 <LSM6DS0_ACC_GYRO_R_AccelerometerDataReadyFlag>
 8000af2:	b120      	cbz	r0, 8000afe <LSM6DS0_X_Get_DRDY_Status+0x1a>
  {
    return COMPONENT_ERROR;
  }

  switch( status_raw )
 8000af4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000af8:	b140      	cbz	r0, 8000b0c <LSM6DS0_X_Get_DRDY_Status+0x28>
 8000afa:	2801      	cmp	r0, #1
 8000afc:	d002      	beq.n	8000b04 <LSM6DS0_X_Get_DRDY_Status+0x20>
      break;
    case LSM6DS0_ACC_GYRO_XLDA_DOWN:
      *status = 0;
      break;
    default:
      return COMPONENT_ERROR;
 8000afe:	2001      	movs	r0, #1
  }

  return COMPONENT_OK;
}
 8000b00:	b002      	add	sp, #8
 8000b02:	bd10      	pop	{r4, pc}
      *status = 1;
 8000b04:	7020      	strb	r0, [r4, #0]
  return COMPONENT_OK;
 8000b06:	2000      	movs	r0, #0
}
 8000b08:	b002      	add	sp, #8
 8000b0a:	bd10      	pop	{r4, pc}
      *status = 0;
 8000b0c:	7020      	strb	r0, [r4, #0]
}
 8000b0e:	b002      	add	sp, #8
 8000b10:	bd10      	pop	{r4, pc}
 8000b12:	bf00      	nop

08000b14 <LSM6DS0_X_Write_Reg>:
{
 8000b14:	b510      	push	{r4, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	ac02      	add	r4, sp, #8
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS0_Write_Reg( DrvContextTypeDef *handle, uint8_t reg, uint8_t data )
{

  if ( LSM6DS0_ACC_GYRO_WriteReg( (void *)handle, reg, &data, 1 ) == MEMS_ERROR )
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	f804 2d01 	strb.w	r2, [r4, #-1]!
 8000b20:	4622      	mov	r2, r4
 8000b22:	f7ff fd35 	bl	8000590 <LSM6DS0_ACC_GYRO_WriteReg>
}
 8000b26:	fab0 f080 	clz	r0, r0
 8000b2a:	0940      	lsrs	r0, r0, #5
 8000b2c:	b002      	add	sp, #8
 8000b2e:	bd10      	pop	{r4, pc}

08000b30 <LSM6DS0_X_Read_Reg>:
{
 8000b30:	b508      	push	{r3, lr}
  if ( LSM6DS0_ACC_GYRO_ReadReg( (void *)handle, reg, data, 1 ) == MEMS_ERROR )
 8000b32:	2301      	movs	r3, #1
 8000b34:	f7ff fd34 	bl	80005a0 <LSM6DS0_ACC_GYRO_ReadReg>
}
 8000b38:	fab0 f080 	clz	r0, r0
 8000b3c:	0940      	lsrs	r0, r0, #5
 8000b3e:	bd08      	pop	{r3, pc}

08000b40 <LSM6DS0_X_Get_Axes_Status>:
{
 8000b40:	b530      	push	{r4, r5, lr}
 8000b42:	b083      	sub	sp, #12
 8000b44:	460d      	mov	r5, r1
  if ( LSM6DS0_ACC_GYRO_R_AccelerometerAxisX( (void *)handle, &xStatus ) == MEMS_ERROR )
 8000b46:	f10d 0105 	add.w	r1, sp, #5
{
 8000b4a:	4604      	mov	r4, r0
  if ( LSM6DS0_ACC_GYRO_R_AccelerometerAxisX( (void *)handle, &xStatus ) == MEMS_ERROR )
 8000b4c:	f7ff ff34 	bl	80009b8 <LSM6DS0_ACC_GYRO_R_AccelerometerAxisX>
 8000b50:	b910      	cbnz	r0, 8000b58 <LSM6DS0_X_Get_Axes_Status+0x18>
    return COMPONENT_ERROR;
 8000b52:	2001      	movs	r0, #1
}
 8000b54:	b003      	add	sp, #12
 8000b56:	bd30      	pop	{r4, r5, pc}
  if ( LSM6DS0_ACC_GYRO_R_AccelerometerAxisY( (void *)handle, &yStatus ) == MEMS_ERROR )
 8000b58:	f10d 0106 	add.w	r1, sp, #6
 8000b5c:	4620      	mov	r0, r4
 8000b5e:	f7ff ff5d 	bl	8000a1c <LSM6DS0_ACC_GYRO_R_AccelerometerAxisY>
 8000b62:	2800      	cmp	r0, #0
 8000b64:	d0f5      	beq.n	8000b52 <LSM6DS0_X_Get_Axes_Status+0x12>
  if ( LSM6DS0_ACC_GYRO_R_AccelerometerAxisZ( (void *)handle, &zStatus ) == MEMS_ERROR )
 8000b66:	4620      	mov	r0, r4
 8000b68:	f10d 0107 	add.w	r1, sp, #7
 8000b6c:	f7ff ff88 	bl	8000a80 <LSM6DS0_ACC_GYRO_R_AccelerometerAxisZ>
 8000b70:	2800      	cmp	r0, #0
 8000b72:	d0ee      	beq.n	8000b52 <LSM6DS0_X_Get_Axes_Status+0x12>
  xyz_enabled[0] = ( xStatus == LSM6DS0_ACC_GYRO_XEN_XL_ENABLE ) ? 1 : 0;
 8000b74:	f89d 1005 	ldrb.w	r1, [sp, #5]
  xyz_enabled[1] = ( yStatus == LSM6DS0_ACC_GYRO_YEN_XL_ENABLE ) ? 1 : 0;
 8000b78:	f89d 2006 	ldrb.w	r2, [sp, #6]
  xyz_enabled[2] = ( zStatus == LSM6DS0_ACC_GYRO_ZEN_XL_ENABLE ) ? 1 : 0;
 8000b7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
  xyz_enabled[0] = ( xStatus == LSM6DS0_ACC_GYRO_XEN_XL_ENABLE ) ? 1 : 0;
 8000b80:	f1a1 0108 	sub.w	r1, r1, #8
  xyz_enabled[1] = ( yStatus == LSM6DS0_ACC_GYRO_YEN_XL_ENABLE ) ? 1 : 0;
 8000b84:	f1a2 0210 	sub.w	r2, r2, #16
  xyz_enabled[2] = ( zStatus == LSM6DS0_ACC_GYRO_ZEN_XL_ENABLE ) ? 1 : 0;
 8000b88:	f1a3 0320 	sub.w	r3, r3, #32
  xyz_enabled[0] = ( xStatus == LSM6DS0_ACC_GYRO_XEN_XL_ENABLE ) ? 1 : 0;
 8000b8c:	fab1 f181 	clz	r1, r1
  xyz_enabled[1] = ( yStatus == LSM6DS0_ACC_GYRO_YEN_XL_ENABLE ) ? 1 : 0;
 8000b90:	fab2 f282 	clz	r2, r2
  xyz_enabled[2] = ( zStatus == LSM6DS0_ACC_GYRO_ZEN_XL_ENABLE ) ? 1 : 0;
 8000b94:	fab3 f383 	clz	r3, r3
  xyz_enabled[0] = ( xStatus == LSM6DS0_ACC_GYRO_XEN_XL_ENABLE ) ? 1 : 0;
 8000b98:	0949      	lsrs	r1, r1, #5
  xyz_enabled[1] = ( yStatus == LSM6DS0_ACC_GYRO_YEN_XL_ENABLE ) ? 1 : 0;
 8000b9a:	0952      	lsrs	r2, r2, #5
  xyz_enabled[2] = ( zStatus == LSM6DS0_ACC_GYRO_ZEN_XL_ENABLE ) ? 1 : 0;
 8000b9c:	095b      	lsrs	r3, r3, #5
  xyz_enabled[0] = ( xStatus == LSM6DS0_ACC_GYRO_XEN_XL_ENABLE ) ? 1 : 0;
 8000b9e:	7029      	strb	r1, [r5, #0]
  xyz_enabled[1] = ( yStatus == LSM6DS0_ACC_GYRO_YEN_XL_ENABLE ) ? 1 : 0;
 8000ba0:	706a      	strb	r2, [r5, #1]
  xyz_enabled[2] = ( zStatus == LSM6DS0_ACC_GYRO_ZEN_XL_ENABLE ) ? 1 : 0;
 8000ba2:	70ab      	strb	r3, [r5, #2]
  return COMPONENT_OK;
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	e7d5      	b.n	8000b54 <LSM6DS0_X_Get_Axes_Status+0x14>

08000ba8 <LSM6DS0_X_Set_FS_Value>:
           : ( fullScale <= 4.0f ) ? LSM6DS0_ACC_GYRO_FS_XL_4g
 8000ba8:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8000bac:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8000bb4:	b508      	push	{r3, lr}
           : ( fullScale <= 4.0f ) ? LSM6DS0_ACC_GYRO_FS_XL_4g
 8000bb6:	d90d      	bls.n	8000bd4 <LSM6DS0_X_Set_FS_Value+0x2c>
 8000bb8:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8000bbc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bc4:	d80d      	bhi.n	8000be2 <LSM6DS0_X_Set_FS_Value+0x3a>
 8000bc6:	2110      	movs	r1, #16
  if ( LSM6DS0_ACC_GYRO_W_AccelerometerFullScale( (void *)handle, new_fs ) == MEMS_ERROR )
 8000bc8:	f7ff fd60 	bl	800068c <LSM6DS0_ACC_GYRO_W_AccelerometerFullScale>
}
 8000bcc:	fab0 f080 	clz	r0, r0
 8000bd0:	0940      	lsrs	r0, r0, #5
 8000bd2:	bd08      	pop	{r3, pc}
           : ( fullScale <= 4.0f ) ? LSM6DS0_ACC_GYRO_FS_XL_4g
 8000bd4:	2100      	movs	r1, #0
  if ( LSM6DS0_ACC_GYRO_W_AccelerometerFullScale( (void *)handle, new_fs ) == MEMS_ERROR )
 8000bd6:	f7ff fd59 	bl	800068c <LSM6DS0_ACC_GYRO_W_AccelerometerFullScale>
}
 8000bda:	fab0 f080 	clz	r0, r0
 8000bde:	0940      	lsrs	r0, r0, #5
 8000be0:	bd08      	pop	{r3, pc}
           : ( fullScale <= 4.0f ) ? LSM6DS0_ACC_GYRO_FS_XL_4g
 8000be2:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8000be6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bee:	bf94      	ite	ls
 8000bf0:	2118      	movls	r1, #24
 8000bf2:	2108      	movhi	r1, #8
  if ( LSM6DS0_ACC_GYRO_W_AccelerometerFullScale( (void *)handle, new_fs ) == MEMS_ERROR )
 8000bf4:	f7ff fd4a 	bl	800068c <LSM6DS0_ACC_GYRO_W_AccelerometerFullScale>
}
 8000bf8:	fab0 f080 	clz	r0, r0
 8000bfc:	0940      	lsrs	r0, r0, #5
 8000bfe:	bd08      	pop	{r3, pc}

08000c00 <LSM6DS0_X_Set_FS>:
  switch( fullScale )
 8000c00:	2902      	cmp	r1, #2
 8000c02:	d00c      	beq.n	8000c1e <LSM6DS0_X_Set_FS+0x1e>
 8000c04:	2904      	cmp	r1, #4
 8000c06:	d002      	beq.n	8000c0e <LSM6DS0_X_Set_FS+0xe>
 8000c08:	b111      	cbz	r1, 8000c10 <LSM6DS0_X_Set_FS+0x10>
      return COMPONENT_ERROR;
 8000c0a:	2001      	movs	r0, #1
}
 8000c0c:	4770      	bx	lr
      new_fs = LSM6DS0_ACC_GYRO_FS_XL_8g;
 8000c0e:	2118      	movs	r1, #24
{
 8000c10:	b508      	push	{r3, lr}
  if ( LSM6DS0_ACC_GYRO_W_AccelerometerFullScale( (void *)handle, new_fs ) == MEMS_ERROR )
 8000c12:	f7ff fd3b 	bl	800068c <LSM6DS0_ACC_GYRO_W_AccelerometerFullScale>
      return COMPONENT_ERROR;
 8000c16:	fab0 f080 	clz	r0, r0
 8000c1a:	0940      	lsrs	r0, r0, #5
}
 8000c1c:	bd08      	pop	{r3, pc}
      new_fs = LSM6DS0_ACC_GYRO_FS_XL_4g;
 8000c1e:	2110      	movs	r1, #16
{
 8000c20:	b508      	push	{r3, lr}
  if ( LSM6DS0_ACC_GYRO_W_AccelerometerFullScale( (void *)handle, new_fs ) == MEMS_ERROR )
 8000c22:	f7ff fd33 	bl	800068c <LSM6DS0_ACC_GYRO_W_AccelerometerFullScale>
      return COMPONENT_ERROR;
 8000c26:	fab0 f080 	clz	r0, r0
 8000c2a:	0940      	lsrs	r0, r0, #5
}
 8000c2c:	bd08      	pop	{r3, pc}
 8000c2e:	bf00      	nop

08000c30 <LSM6DS0_X_Get_FS>:
{
 8000c30:	b510      	push	{r4, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	460c      	mov	r4, r1
  if ( LSM6DS0_ACC_GYRO_R_AccelerometerFullScale( (void *)handle, &fs_low_level ) == MEMS_ERROR )
 8000c36:	f10d 0107 	add.w	r1, sp, #7
 8000c3a:	f7ff fd49 	bl	80006d0 <LSM6DS0_ACC_GYRO_R_AccelerometerFullScale>
 8000c3e:	b190      	cbz	r0, 8000c66 <LSM6DS0_X_Get_FS+0x36>
  switch( fs_low_level )
 8000c40:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000c44:	2b18      	cmp	r3, #24
 8000c46:	d829      	bhi.n	8000c9c <LSM6DS0_X_Get_FS+0x6c>
 8000c48:	e8df f003 	tbb	[pc, r3]
 8000c4c:	28282816 	.word	0x28282816
 8000c50:	28282828 	.word	0x28282828
 8000c54:	2828281c 	.word	0x2828281c
 8000c58:	28282828 	.word	0x28282828
 8000c5c:	28282822 	.word	0x28282822
 8000c60:	28282828 	.word	0x28282828
 8000c64:	10          	.byte	0x10
 8000c65:	00          	.byte	0x00
    return COMPONENT_ERROR;
 8000c66:	2001      	movs	r0, #1
}
 8000c68:	b002      	add	sp, #8
 8000c6a:	bd10      	pop	{r4, pc}
      *fullScale =  8.0f;
 8000c6c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
  return COMPONENT_OK;
 8000c70:	2000      	movs	r0, #0
      *fullScale =  8.0f;
 8000c72:	6023      	str	r3, [r4, #0]
}
 8000c74:	b002      	add	sp, #8
 8000c76:	bd10      	pop	{r4, pc}
      *fullScale =  2.0f;
 8000c78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  return COMPONENT_OK;
 8000c7c:	2000      	movs	r0, #0
      *fullScale =  2.0f;
 8000c7e:	6023      	str	r3, [r4, #0]
}
 8000c80:	b002      	add	sp, #8
 8000c82:	bd10      	pop	{r4, pc}
      *fullScale = 16.0f;
 8000c84:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
  return COMPONENT_OK;
 8000c88:	2000      	movs	r0, #0
      *fullScale = 16.0f;
 8000c8a:	6023      	str	r3, [r4, #0]
}
 8000c8c:	b002      	add	sp, #8
 8000c8e:	bd10      	pop	{r4, pc}
      *fullScale =  4.0f;
 8000c90:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
  return COMPONENT_OK;
 8000c94:	2000      	movs	r0, #0
      *fullScale =  4.0f;
 8000c96:	6023      	str	r3, [r4, #0]
}
 8000c98:	b002      	add	sp, #8
 8000c9a:	bd10      	pop	{r4, pc}
      *fullScale = -1.0f;
 8000c9c:	4b02      	ldr	r3, [pc, #8]	; (8000ca8 <LSM6DS0_X_Get_FS+0x78>)
 8000c9e:	6023      	str	r3, [r4, #0]
      return COMPONENT_ERROR;
 8000ca0:	2001      	movs	r0, #1
}
 8000ca2:	b002      	add	sp, #8
 8000ca4:	bd10      	pop	{r4, pc}
 8000ca6:	bf00      	nop
 8000ca8:	bf800000 	.word	0xbf800000

08000cac <LSM6DS0_X_Get_Sensitivity>:
{
 8000cac:	b510      	push	{r4, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	460c      	mov	r4, r1
  if ( LSM6DS0_ACC_GYRO_R_AccelerometerFullScale( (void *)handle, &fullScale ) == MEMS_ERROR )
 8000cb2:	f10d 0107 	add.w	r1, sp, #7
 8000cb6:	f7ff fd0b 	bl	80006d0 <LSM6DS0_ACC_GYRO_R_AccelerometerFullScale>
 8000cba:	b190      	cbz	r0, 8000ce2 <LSM6DS0_X_Get_Sensitivity+0x36>
  switch( fullScale )
 8000cbc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000cc0:	2b18      	cmp	r3, #24
 8000cc2:	d825      	bhi.n	8000d10 <LSM6DS0_X_Get_Sensitivity+0x64>
 8000cc4:	e8df f003 	tbb	[pc, r3]
 8000cc8:	24242415 	.word	0x24242415
 8000ccc:	24242424 	.word	0x24242424
 8000cd0:	2424241a 	.word	0x2424241a
 8000cd4:	24242424 	.word	0x24242424
 8000cd8:	2424241f 	.word	0x2424241f
 8000cdc:	24242424 	.word	0x24242424
 8000ce0:	10          	.byte	0x10
 8000ce1:	00          	.byte	0x00
    return COMPONENT_ERROR;
 8000ce2:	2001      	movs	r0, #1
}
 8000ce4:	b002      	add	sp, #8
 8000ce6:	bd10      	pop	{r4, pc}
      *sensitivity = ( float )LSM6DS0_ACC_SENSITIVITY_FOR_FS_8G;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <LSM6DS0_X_Get_Sensitivity+0x70>)
 8000cea:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8000cec:	2000      	movs	r0, #0
}
 8000cee:	b002      	add	sp, #8
 8000cf0:	bd10      	pop	{r4, pc}
      *sensitivity = ( float )LSM6DS0_ACC_SENSITIVITY_FOR_FS_2G;
 8000cf2:	4b0b      	ldr	r3, [pc, #44]	; (8000d20 <LSM6DS0_X_Get_Sensitivity+0x74>)
 8000cf4:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8000cf6:	2000      	movs	r0, #0
}
 8000cf8:	b002      	add	sp, #8
 8000cfa:	bd10      	pop	{r4, pc}
      *sensitivity = ( float )LSM6DS0_ACC_SENSITIVITY_FOR_FS_16G;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <LSM6DS0_X_Get_Sensitivity+0x78>)
 8000cfe:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8000d00:	2000      	movs	r0, #0
}
 8000d02:	b002      	add	sp, #8
 8000d04:	bd10      	pop	{r4, pc}
      *sensitivity = ( float )LSM6DS0_ACC_SENSITIVITY_FOR_FS_4G;
 8000d06:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <LSM6DS0_X_Get_Sensitivity+0x7c>)
 8000d08:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8000d0a:	2000      	movs	r0, #0
}
 8000d0c:	b002      	add	sp, #8
 8000d0e:	bd10      	pop	{r4, pc}
      *sensitivity = -1.0f;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <LSM6DS0_X_Get_Sensitivity+0x80>)
 8000d12:	6023      	str	r3, [r4, #0]
      return COMPONENT_ERROR;
 8000d14:	2001      	movs	r0, #1
}
 8000d16:	b002      	add	sp, #8
 8000d18:	bd10      	pop	{r4, pc}
 8000d1a:	bf00      	nop
 8000d1c:	3e79db23 	.word	0x3e79db23
 8000d20:	3d79db23 	.word	0x3d79db23
 8000d24:	3f3b645a 	.word	0x3f3b645a
 8000d28:	3df9db23 	.word	0x3df9db23
 8000d2c:	bf800000 	.word	0xbf800000

08000d30 <LSM6DS0_X_Get_WhoAmI>:
{
 8000d30:	b508      	push	{r3, lr}
  if ( LSM6DS0_ACC_GYRO_R_WHO_AM_I_( (void *)handle, ( uint8_t* )who_am_i ) == MEMS_ERROR )
 8000d32:	f7ff fc3d 	bl	80005b0 <LSM6DS0_ACC_GYRO_R_WHO_AM_I_>
}
 8000d36:	fab0 f080 	clz	r0, r0
 8000d3a:	0940      	lsrs	r0, r0, #5
 8000d3c:	bd08      	pop	{r3, pc}
 8000d3e:	bf00      	nop

08000d40 <LSM6DS0_G_Get_DRDY_Status>:
{
 8000d40:	b510      	push	{r4, lr}
 8000d42:	b082      	sub	sp, #8
 8000d44:	460c      	mov	r4, r1
  if ( LSM6DS0_ACC_GYRO_R_GyroDataReadyFlag( (void *)handle, &status_raw ) == MEMS_ERROR )
 8000d46:	f10d 0107 	add.w	r1, sp, #7
 8000d4a:	f7ff fd6d 	bl	8000828 <LSM6DS0_ACC_GYRO_R_GyroDataReadyFlag>
 8000d4e:	b120      	cbz	r0, 8000d5a <LSM6DS0_G_Get_DRDY_Status+0x1a>
  switch( status_raw )
 8000d50:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000d54:	b148      	cbz	r0, 8000d6a <LSM6DS0_G_Get_DRDY_Status+0x2a>
 8000d56:	2802      	cmp	r0, #2
 8000d58:	d002      	beq.n	8000d60 <LSM6DS0_G_Get_DRDY_Status+0x20>
      return COMPONENT_ERROR;
 8000d5a:	2001      	movs	r0, #1
}
 8000d5c:	b002      	add	sp, #8
 8000d5e:	bd10      	pop	{r4, pc}
      *status = 1;
 8000d60:	2301      	movs	r3, #1
  return COMPONENT_OK;
 8000d62:	2000      	movs	r0, #0
      *status = 1;
 8000d64:	7023      	strb	r3, [r4, #0]
}
 8000d66:	b002      	add	sp, #8
 8000d68:	bd10      	pop	{r4, pc}
      *status = 0;
 8000d6a:	7020      	strb	r0, [r4, #0]
}
 8000d6c:	b002      	add	sp, #8
 8000d6e:	bd10      	pop	{r4, pc}

08000d70 <LSM6DS0_G_Get_Axes_Status>:
{
 8000d70:	b530      	push	{r4, r5, lr}
 8000d72:	b083      	sub	sp, #12
 8000d74:	460d      	mov	r5, r1
  if ( LSM6DS0_ACC_GYRO_R_GyroAxisX( (void *)handle, &xStatus ) == MEMS_ERROR )
 8000d76:	f10d 0105 	add.w	r1, sp, #5
{
 8000d7a:	4604      	mov	r4, r0
  if ( LSM6DS0_ACC_GYRO_R_GyroAxisX( (void *)handle, &xStatus ) == MEMS_ERROR )
 8000d7c:	f7ff fd86 	bl	800088c <LSM6DS0_ACC_GYRO_R_GyroAxisX>
 8000d80:	b910      	cbnz	r0, 8000d88 <LSM6DS0_G_Get_Axes_Status+0x18>
    return COMPONENT_ERROR;
 8000d82:	2001      	movs	r0, #1
}
 8000d84:	b003      	add	sp, #12
 8000d86:	bd30      	pop	{r4, r5, pc}
  if ( LSM6DS0_ACC_GYRO_R_GyroAxisY( (void *)handle, &yStatus ) == MEMS_ERROR )
 8000d88:	f10d 0106 	add.w	r1, sp, #6
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	f7ff fdaf 	bl	80008f0 <LSM6DS0_ACC_GYRO_R_GyroAxisY>
 8000d92:	2800      	cmp	r0, #0
 8000d94:	d0f5      	beq.n	8000d82 <LSM6DS0_G_Get_Axes_Status+0x12>
  if ( LSM6DS0_ACC_GYRO_R_GyroAxisZ( (void *)handle, &zStatus ) == MEMS_ERROR )
 8000d96:	4620      	mov	r0, r4
 8000d98:	f10d 0107 	add.w	r1, sp, #7
 8000d9c:	f7ff fdda 	bl	8000954 <LSM6DS0_ACC_GYRO_R_GyroAxisZ>
 8000da0:	2800      	cmp	r0, #0
 8000da2:	d0ee      	beq.n	8000d82 <LSM6DS0_G_Get_Axes_Status+0x12>
  xyz_enabled[0] = ( xStatus == LSM6DS0_ACC_GYRO_XEN_G_ENABLE ) ? 1 : 0;
 8000da4:	f89d 1005 	ldrb.w	r1, [sp, #5]
  xyz_enabled[1] = ( yStatus == LSM6DS0_ACC_GYRO_YEN_G_ENABLE ) ? 1 : 0;
 8000da8:	f89d 2006 	ldrb.w	r2, [sp, #6]
  xyz_enabled[2] = ( zStatus == LSM6DS0_ACC_GYRO_ZEN_G_ENABLE ) ? 1 : 0;
 8000dac:	f89d 3007 	ldrb.w	r3, [sp, #7]
  xyz_enabled[0] = ( xStatus == LSM6DS0_ACC_GYRO_XEN_G_ENABLE ) ? 1 : 0;
 8000db0:	f1a1 0108 	sub.w	r1, r1, #8
  xyz_enabled[1] = ( yStatus == LSM6DS0_ACC_GYRO_YEN_G_ENABLE ) ? 1 : 0;
 8000db4:	f1a2 0210 	sub.w	r2, r2, #16
  xyz_enabled[2] = ( zStatus == LSM6DS0_ACC_GYRO_ZEN_G_ENABLE ) ? 1 : 0;
 8000db8:	f1a3 0320 	sub.w	r3, r3, #32
  xyz_enabled[0] = ( xStatus == LSM6DS0_ACC_GYRO_XEN_G_ENABLE ) ? 1 : 0;
 8000dbc:	fab1 f181 	clz	r1, r1
  xyz_enabled[1] = ( yStatus == LSM6DS0_ACC_GYRO_YEN_G_ENABLE ) ? 1 : 0;
 8000dc0:	fab2 f282 	clz	r2, r2
  xyz_enabled[2] = ( zStatus == LSM6DS0_ACC_GYRO_ZEN_G_ENABLE ) ? 1 : 0;
 8000dc4:	fab3 f383 	clz	r3, r3
  xyz_enabled[0] = ( xStatus == LSM6DS0_ACC_GYRO_XEN_G_ENABLE ) ? 1 : 0;
 8000dc8:	0949      	lsrs	r1, r1, #5
  xyz_enabled[1] = ( yStatus == LSM6DS0_ACC_GYRO_YEN_G_ENABLE ) ? 1 : 0;
 8000dca:	0952      	lsrs	r2, r2, #5
  xyz_enabled[2] = ( zStatus == LSM6DS0_ACC_GYRO_ZEN_G_ENABLE ) ? 1 : 0;
 8000dcc:	095b      	lsrs	r3, r3, #5
  xyz_enabled[0] = ( xStatus == LSM6DS0_ACC_GYRO_XEN_G_ENABLE ) ? 1 : 0;
 8000dce:	7029      	strb	r1, [r5, #0]
  xyz_enabled[1] = ( yStatus == LSM6DS0_ACC_GYRO_YEN_G_ENABLE ) ? 1 : 0;
 8000dd0:	706a      	strb	r2, [r5, #1]
  xyz_enabled[2] = ( zStatus == LSM6DS0_ACC_GYRO_ZEN_G_ENABLE ) ? 1 : 0;
 8000dd2:	70ab      	strb	r3, [r5, #2]
  return COMPONENT_OK;
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	e7d5      	b.n	8000d84 <LSM6DS0_G_Get_Axes_Status+0x14>

08000dd8 <LSM6DS0_G_Set_FS_Value>:
           : ( fullScale <= 500.0f ) ? LSM6DS0_ACC_GYRO_FS_G_500dps
 8000dd8:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8000e14 <LSM6DS0_G_Set_FS_Value+0x3c>
 8000ddc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8000de4:	b508      	push	{r3, lr}
           : ( fullScale <= 500.0f ) ? LSM6DS0_ACC_GYRO_FS_G_500dps
 8000de6:	d90e      	bls.n	8000e06 <LSM6DS0_G_Set_FS_Value+0x2e>
 8000de8:	eddf 7a0b 	vldr	s15, [pc, #44]	; 8000e18 <LSM6DS0_G_Set_FS_Value+0x40>
 8000dec:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df4:	bf94      	ite	ls
 8000df6:	2108      	movls	r1, #8
 8000df8:	2118      	movhi	r1, #24
  if ( LSM6DS0_ACC_GYRO_W_GyroFullScale( (void *)handle, new_fs ) == MEMS_ERROR )
 8000dfa:	f7ff fbe3 	bl	80005c4 <LSM6DS0_ACC_GYRO_W_GyroFullScale>
}
 8000dfe:	fab0 f080 	clz	r0, r0
 8000e02:	0940      	lsrs	r0, r0, #5
 8000e04:	bd08      	pop	{r3, pc}
           : ( fullScale <= 500.0f ) ? LSM6DS0_ACC_GYRO_FS_G_500dps
 8000e06:	2100      	movs	r1, #0
  if ( LSM6DS0_ACC_GYRO_W_GyroFullScale( (void *)handle, new_fs ) == MEMS_ERROR )
 8000e08:	f7ff fbdc 	bl	80005c4 <LSM6DS0_ACC_GYRO_W_GyroFullScale>
}
 8000e0c:	fab0 f080 	clz	r0, r0
 8000e10:	0940      	lsrs	r0, r0, #5
 8000e12:	bd08      	pop	{r3, pc}
 8000e14:	43750000 	.word	0x43750000
 8000e18:	43fa0000 	.word	0x43fa0000

08000e1c <LSM6DS0_G_Set_FS>:
  switch( fullScale )
 8000e1c:	2902      	cmp	r1, #2
 8000e1e:	d00c      	beq.n	8000e3a <LSM6DS0_G_Set_FS+0x1e>
 8000e20:	2904      	cmp	r1, #4
 8000e22:	d002      	beq.n	8000e2a <LSM6DS0_G_Set_FS+0xe>
 8000e24:	b111      	cbz	r1, 8000e2c <LSM6DS0_G_Set_FS+0x10>
      return COMPONENT_ERROR;
 8000e26:	2001      	movs	r0, #1
}
 8000e28:	4770      	bx	lr
      new_fs = LSM6DS0_ACC_GYRO_FS_G_2000dps;
 8000e2a:	2118      	movs	r1, #24
{
 8000e2c:	b508      	push	{r3, lr}
  if ( LSM6DS0_ACC_GYRO_W_GyroFullScale( (void *)handle, new_fs ) == MEMS_ERROR )
 8000e2e:	f7ff fbc9 	bl	80005c4 <LSM6DS0_ACC_GYRO_W_GyroFullScale>
      return COMPONENT_ERROR;
 8000e32:	fab0 f080 	clz	r0, r0
 8000e36:	0940      	lsrs	r0, r0, #5
}
 8000e38:	bd08      	pop	{r3, pc}
      new_fs = LSM6DS0_ACC_GYRO_FS_G_500dps;
 8000e3a:	2108      	movs	r1, #8
{
 8000e3c:	b508      	push	{r3, lr}
  if ( LSM6DS0_ACC_GYRO_W_GyroFullScale( (void *)handle, new_fs ) == MEMS_ERROR )
 8000e3e:	f7ff fbc1 	bl	80005c4 <LSM6DS0_ACC_GYRO_W_GyroFullScale>
      return COMPONENT_ERROR;
 8000e42:	fab0 f080 	clz	r0, r0
 8000e46:	0940      	lsrs	r0, r0, #5
}
 8000e48:	bd08      	pop	{r3, pc}
 8000e4a:	bf00      	nop

08000e4c <LSM6DS0_G_Get_FS>:
{
 8000e4c:	b510      	push	{r4, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	460c      	mov	r4, r1
  if ( LSM6DS0_ACC_GYRO_R_GyroFullScale( (void *)handle, &fs_low_level ) == MEMS_ERROR )
 8000e52:	f10d 0107 	add.w	r1, sp, #7
 8000e56:	f7ff fbd7 	bl	8000608 <LSM6DS0_ACC_GYRO_R_GyroFullScale>
 8000e5a:	b158      	cbz	r0, 8000e74 <LSM6DS0_G_Get_FS+0x28>
  switch( fs_low_level )
 8000e5c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000e60:	2808      	cmp	r0, #8
 8000e62:	d00a      	beq.n	8000e7a <LSM6DS0_G_Get_FS+0x2e>
 8000e64:	2818      	cmp	r0, #24
 8000e66:	d011      	beq.n	8000e8c <LSM6DS0_G_Get_FS+0x40>
 8000e68:	b160      	cbz	r0, 8000e84 <LSM6DS0_G_Get_FS+0x38>
      *fullScale =   -1.0f;
 8000e6a:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <LSM6DS0_G_Get_FS+0x4c>)
 8000e6c:	6023      	str	r3, [r4, #0]
      return COMPONENT_ERROR;
 8000e6e:	2001      	movs	r0, #1
}
 8000e70:	b002      	add	sp, #8
 8000e72:	bd10      	pop	{r4, pc}
    return COMPONENT_ERROR;
 8000e74:	2001      	movs	r0, #1
}
 8000e76:	b002      	add	sp, #8
 8000e78:	bd10      	pop	{r4, pc}
      *fullScale =  500.0f;
 8000e7a:	4b08      	ldr	r3, [pc, #32]	; (8000e9c <LSM6DS0_G_Get_FS+0x50>)
 8000e7c:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8000e7e:	2000      	movs	r0, #0
}
 8000e80:	b002      	add	sp, #8
 8000e82:	bd10      	pop	{r4, pc}
      *fullScale =  245.0f;
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <LSM6DS0_G_Get_FS+0x54>)
 8000e86:	6023      	str	r3, [r4, #0]
}
 8000e88:	b002      	add	sp, #8
 8000e8a:	bd10      	pop	{r4, pc}
      *fullScale = 2000.0f;
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <LSM6DS0_G_Get_FS+0x58>)
 8000e8e:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8000e90:	2000      	movs	r0, #0
}
 8000e92:	b002      	add	sp, #8
 8000e94:	bd10      	pop	{r4, pc}
 8000e96:	bf00      	nop
 8000e98:	bf800000 	.word	0xbf800000
 8000e9c:	43fa0000 	.word	0x43fa0000
 8000ea0:	43750000 	.word	0x43750000
 8000ea4:	44fa0000 	.word	0x44fa0000

08000ea8 <LSM6DS0_G_Get_Sensitivity>:
{
 8000ea8:	b510      	push	{r4, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	460c      	mov	r4, r1
  if ( LSM6DS0_ACC_GYRO_R_GyroFullScale( (void *)handle, &fullScale ) == MEMS_ERROR )
 8000eae:	f10d 0107 	add.w	r1, sp, #7
 8000eb2:	f7ff fba9 	bl	8000608 <LSM6DS0_ACC_GYRO_R_GyroFullScale>
 8000eb6:	b158      	cbz	r0, 8000ed0 <LSM6DS0_G_Get_Sensitivity+0x28>
  switch( fullScale )
 8000eb8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000ebc:	2808      	cmp	r0, #8
 8000ebe:	d00a      	beq.n	8000ed6 <LSM6DS0_G_Get_Sensitivity+0x2e>
 8000ec0:	2818      	cmp	r0, #24
 8000ec2:	d011      	beq.n	8000ee8 <LSM6DS0_G_Get_Sensitivity+0x40>
 8000ec4:	b160      	cbz	r0, 8000ee0 <LSM6DS0_G_Get_Sensitivity+0x38>
      *sensitivity = -1.0f;
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <LSM6DS0_G_Get_Sensitivity+0x4c>)
 8000ec8:	6023      	str	r3, [r4, #0]
      return COMPONENT_ERROR;
 8000eca:	2001      	movs	r0, #1
}
 8000ecc:	b002      	add	sp, #8
 8000ece:	bd10      	pop	{r4, pc}
    return COMPONENT_ERROR;
 8000ed0:	2001      	movs	r0, #1
}
 8000ed2:	b002      	add	sp, #8
 8000ed4:	bd10      	pop	{r4, pc}
      *sensitivity = ( float )LSM6DS0_GYRO_SENSITIVITY_FOR_FS_500DPS;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	; (8000ef8 <LSM6DS0_G_Get_Sensitivity+0x50>)
 8000ed8:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8000eda:	2000      	movs	r0, #0
}
 8000edc:	b002      	add	sp, #8
 8000ede:	bd10      	pop	{r4, pc}
      *sensitivity = ( float )LSM6DS0_GYRO_SENSITIVITY_FOR_FS_245DPS;
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <LSM6DS0_G_Get_Sensitivity+0x54>)
 8000ee2:	6023      	str	r3, [r4, #0]
}
 8000ee4:	b002      	add	sp, #8
 8000ee6:	bd10      	pop	{r4, pc}
      *sensitivity = ( float )LSM6DS0_GYRO_SENSITIVITY_FOR_FS_2000DPS;
 8000ee8:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <LSM6DS0_G_Get_Sensitivity+0x58>)
 8000eea:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8000eec:	2000      	movs	r0, #0
}
 8000eee:	b002      	add	sp, #8
 8000ef0:	bd10      	pop	{r4, pc}
 8000ef2:	bf00      	nop
 8000ef4:	bf800000 	.word	0xbf800000
 8000ef8:	418c0000 	.word	0x418c0000
 8000efc:	410c0000 	.word	0x410c0000
 8000f00:	428c0000 	.word	0x428c0000

08000f04 <LSM6DS0_G_Get_ODR>:
{
 8000f04:	b510      	push	{r4, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	460c      	mov	r4, r1
  if ( LSM6DS0_ACC_GYRO_R_GyroDataRate( (void *)handle, &odr_low_level ) == MEMS_ERROR )
 8000f0a:	f10d 0107 	add.w	r1, sp, #7
 8000f0e:	f7ff fbad 	bl	800066c <LSM6DS0_ACC_GYRO_R_GyroDataRate>
 8000f12:	b160      	cbz	r0, 8000f2e <LSM6DS0_G_Get_ODR+0x2a>
  switch( odr_low_level )
 8000f14:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8000f18:	2860      	cmp	r0, #96	; 0x60
 8000f1a:	d01d      	beq.n	8000f58 <LSM6DS0_G_Get_ODR+0x54>
 8000f1c:	d80a      	bhi.n	8000f34 <LSM6DS0_G_Get_ODR+0x30>
 8000f1e:	2820      	cmp	r0, #32
 8000f20:	d012      	beq.n	8000f48 <LSM6DS0_G_Get_ODR+0x44>
 8000f22:	2840      	cmp	r0, #64	; 0x40
 8000f24:	d01c      	beq.n	8000f60 <LSM6DS0_G_Get_ODR+0x5c>
 8000f26:	b958      	cbnz	r0, 8000f40 <LSM6DS0_G_Get_ODR+0x3c>
      *odr =   0.0f;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	6023      	str	r3, [r4, #0]
      break;
 8000f2c:	e000      	b.n	8000f30 <LSM6DS0_G_Get_ODR+0x2c>
    return COMPONENT_ERROR;
 8000f2e:	2001      	movs	r0, #1
}
 8000f30:	b002      	add	sp, #8
 8000f32:	bd10      	pop	{r4, pc}
  switch( odr_low_level )
 8000f34:	28a0      	cmp	r0, #160	; 0xa0
 8000f36:	d00b      	beq.n	8000f50 <LSM6DS0_G_Get_ODR+0x4c>
 8000f38:	28c0      	cmp	r0, #192	; 0xc0
 8000f3a:	d019      	beq.n	8000f70 <LSM6DS0_G_Get_ODR+0x6c>
 8000f3c:	2880      	cmp	r0, #128	; 0x80
 8000f3e:	d013      	beq.n	8000f68 <LSM6DS0_G_Get_ODR+0x64>
      *odr =  -1.0f;
 8000f40:	4b0d      	ldr	r3, [pc, #52]	; (8000f78 <LSM6DS0_G_Get_ODR+0x74>)
 8000f42:	6023      	str	r3, [r4, #0]
      return COMPONENT_ERROR;
 8000f44:	2001      	movs	r0, #1
 8000f46:	e7f3      	b.n	8000f30 <LSM6DS0_G_Get_ODR+0x2c>
      *odr =  15.0f;
 8000f48:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <LSM6DS0_G_Get_ODR+0x78>)
 8000f4a:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8000f4c:	2000      	movs	r0, #0
      break;
 8000f4e:	e7ef      	b.n	8000f30 <LSM6DS0_G_Get_ODR+0x2c>
      *odr = 476.0f;
 8000f50:	4b0b      	ldr	r3, [pc, #44]	; (8000f80 <LSM6DS0_G_Get_ODR+0x7c>)
 8000f52:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8000f54:	2000      	movs	r0, #0
      break;
 8000f56:	e7eb      	b.n	8000f30 <LSM6DS0_G_Get_ODR+0x2c>
      *odr = 119.0f;
 8000f58:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <LSM6DS0_G_Get_ODR+0x80>)
 8000f5a:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8000f5c:	2000      	movs	r0, #0
      break;
 8000f5e:	e7e7      	b.n	8000f30 <LSM6DS0_G_Get_ODR+0x2c>
      *odr =  60.0f;
 8000f60:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <LSM6DS0_G_Get_ODR+0x84>)
 8000f62:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8000f64:	2000      	movs	r0, #0
      break;
 8000f66:	e7e3      	b.n	8000f30 <LSM6DS0_G_Get_ODR+0x2c>
      *odr = 238.0f;
 8000f68:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <LSM6DS0_G_Get_ODR+0x88>)
 8000f6a:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8000f6c:	2000      	movs	r0, #0
      break;
 8000f6e:	e7df      	b.n	8000f30 <LSM6DS0_G_Get_ODR+0x2c>
      *odr = 952.0f;
 8000f70:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <LSM6DS0_G_Get_ODR+0x8c>)
 8000f72:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8000f74:	2000      	movs	r0, #0
      break;
 8000f76:	e7db      	b.n	8000f30 <LSM6DS0_G_Get_ODR+0x2c>
 8000f78:	bf800000 	.word	0xbf800000
 8000f7c:	41700000 	.word	0x41700000
 8000f80:	43ee0000 	.word	0x43ee0000
 8000f84:	42ee0000 	.word	0x42ee0000
 8000f88:	42700000 	.word	0x42700000
 8000f8c:	436e0000 	.word	0x436e0000
 8000f90:	446e0000 	.word	0x446e0000

08000f94 <LSM6DS0_X_Set_Axes_Status>:
{
 8000f94:	b538      	push	{r3, r4, r5, lr}
  if ( LSM6DS0_ACC_GYRO_W_AccelerometerAxisX( (void *)handle,
 8000f96:	780b      	ldrb	r3, [r1, #0]
 8000f98:	2b01      	cmp	r3, #1
{
 8000f9a:	460c      	mov	r4, r1
  if ( LSM6DS0_ACC_GYRO_W_AccelerometerAxisX( (void *)handle,
 8000f9c:	bf0c      	ite	eq
 8000f9e:	2108      	moveq	r1, #8
 8000fa0:	2100      	movne	r1, #0
{
 8000fa2:	4605      	mov	r5, r0
  if ( LSM6DS0_ACC_GYRO_W_AccelerometerAxisX( (void *)handle,
 8000fa4:	f7ff fce6 	bl	8000974 <LSM6DS0_ACC_GYRO_W_AccelerometerAxisX>
 8000fa8:	b1a0      	cbz	r0, 8000fd4 <LSM6DS0_X_Set_Axes_Status+0x40>
  if ( LSM6DS0_ACC_GYRO_W_AccelerometerAxisY( (void *)handle,
 8000faa:	7863      	ldrb	r3, [r4, #1]
 8000fac:	2b01      	cmp	r3, #1
 8000fae:	bf0c      	ite	eq
 8000fb0:	2110      	moveq	r1, #16
 8000fb2:	2100      	movne	r1, #0
 8000fb4:	4628      	mov	r0, r5
 8000fb6:	f7ff fd0f 	bl	80009d8 <LSM6DS0_ACC_GYRO_W_AccelerometerAxisY>
 8000fba:	b158      	cbz	r0, 8000fd4 <LSM6DS0_X_Set_Axes_Status+0x40>
  if ( LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ( (void *)handle,
 8000fbc:	78a3      	ldrb	r3, [r4, #2]
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	4628      	mov	r0, r5
 8000fc2:	bf0c      	ite	eq
 8000fc4:	2120      	moveq	r1, #32
 8000fc6:	2100      	movne	r1, #0
 8000fc8:	f7ff fd38 	bl	8000a3c <LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ>
    return COMPONENT_ERROR;
 8000fcc:	fab0 f080 	clz	r0, r0
 8000fd0:	0940      	lsrs	r0, r0, #5
}
 8000fd2:	bd38      	pop	{r3, r4, r5, pc}
    return COMPONENT_ERROR;
 8000fd4:	2001      	movs	r0, #1
}
 8000fd6:	bd38      	pop	{r3, r4, r5, pc}

08000fd8 <LSM6DS0_X_Set_ODR_Value>:
{
 8000fd8:	b508      	push	{r3, lr}
  if(handle->isEnabled == 1)
 8000fda:	7983      	ldrb	r3, [r0, #6]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d02d      	beq.n	800103c <LSM6DS0_X_Set_ODR_Value+0x64>

  ACCELERO_Data_t *pData = ( ACCELERO_Data_t * )handle->pData;
  LSM6DS0_X_Data_t *pComponentData = ( LSM6DS0_X_Data_t * )pData->pComponentData;

  pComponentData->Previous_ODR = ( odr <=  10.0f ) ? 10.0f
                                 : ( odr <=  50.0f ) ? 50.0f
 8000fe0:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
  LSM6DS0_X_Data_t *pComponentData = ( LSM6DS0_X_Data_t * )pData->pComponentData;
 8000fe4:	6883      	ldr	r3, [r0, #8]
                                 : ( odr <=  50.0f ) ? 50.0f
 8000fe6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000fea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  LSM6DS0_X_Data_t *pComponentData = ( LSM6DS0_X_Data_t * )pData->pComponentData;
 8000fee:	681b      	ldr	r3, [r3, #0]
                                 : ( odr <=  50.0f ) ? 50.0f
 8000ff0:	d803      	bhi.n	8000ffa <LSM6DS0_X_Set_ODR_Value+0x22>
  pComponentData->Previous_ODR = ( odr <=  10.0f ) ? 10.0f
 8000ff2:	edc3 7a00 	vstr	s15, [r3]
  return COMPONENT_OK;
 8000ff6:	2000      	movs	r0, #0
}
 8000ff8:	bd08      	pop	{r3, pc}
                                 : ( odr <= 119.0f ) ? 119.0f
 8000ffa:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80010a4 <LSM6DS0_X_Set_ODR_Value+0xcc>
 8000ffe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001006:	d9f4      	bls.n	8000ff2 <LSM6DS0_X_Set_ODR_Value+0x1a>
                                 : ( odr <= 238.0f ) ? 238.0f
 8001008:	eddf 7a27 	vldr	s15, [pc, #156]	; 80010a8 <LSM6DS0_X_Set_ODR_Value+0xd0>
 800100c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001014:	d9ed      	bls.n	8000ff2 <LSM6DS0_X_Set_ODR_Value+0x1a>
                                 : ( odr <= 476.0f ) ? 476.0f
 8001016:	eddf 7a25 	vldr	s15, [pc, #148]	; 80010ac <LSM6DS0_X_Set_ODR_Value+0xd4>
 800101a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800101e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001022:	d9e6      	bls.n	8000ff2 <LSM6DS0_X_Set_ODR_Value+0x1a>
                                 :                     952.0f;
 8001024:	eddf 7a22 	vldr	s15, [pc, #136]	; 80010b0 <LSM6DS0_X_Set_ODR_Value+0xd8>
 8001028:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80010b4 <LSM6DS0_X_Set_ODR_Value+0xdc>
 800102c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001034:	bf88      	it	hi
 8001036:	eef0 7a47 	vmovhi.f32	s15, s14
 800103a:	e7da      	b.n	8000ff2 <LSM6DS0_X_Set_ODR_Value+0x1a>
            : ( odr <=  50.0f ) ? LSM6DS0_ACC_GYRO_ODR_XL_50Hz
 800103c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8001040:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001048:	d806      	bhi.n	8001058 <LSM6DS0_X_Set_ODR_Value+0x80>
 800104a:	2120      	movs	r1, #32
  if ( LSM6DS0_ACC_GYRO_W_AccelerometerDataRate( (void *)handle, new_odr ) == MEMS_ERROR )
 800104c:	f7ff fb50 	bl	80006f0 <LSM6DS0_ACC_GYRO_W_AccelerometerDataRate>
  return COMPONENT_OK;
 8001050:	fab0 f080 	clz	r0, r0
 8001054:	0940      	lsrs	r0, r0, #5
}
 8001056:	bd08      	pop	{r3, pc}
            : ( odr <=  50.0f ) ? LSM6DS0_ACC_GYRO_ODR_XL_50Hz
 8001058:	eddf 7a12 	vldr	s15, [pc, #72]	; 80010a4 <LSM6DS0_X_Set_ODR_Value+0xcc>
 800105c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001064:	d917      	bls.n	8001096 <LSM6DS0_X_Set_ODR_Value+0xbe>
 8001066:	eddf 7a10 	vldr	s15, [pc, #64]	; 80010a8 <LSM6DS0_X_Set_ODR_Value+0xd0>
 800106a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800106e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001072:	d912      	bls.n	800109a <LSM6DS0_X_Set_ODR_Value+0xc2>
 8001074:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80010ac <LSM6DS0_X_Set_ODR_Value+0xd4>
 8001078:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800107c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001080:	d90d      	bls.n	800109e <LSM6DS0_X_Set_ODR_Value+0xc6>
 8001082:	eddf 7a0b 	vldr	s15, [pc, #44]	; 80010b0 <LSM6DS0_X_Set_ODR_Value+0xd8>
 8001086:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800108a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800108e:	bf94      	ite	ls
 8001090:	21a0      	movls	r1, #160	; 0xa0
 8001092:	21c0      	movhi	r1, #192	; 0xc0
 8001094:	e7da      	b.n	800104c <LSM6DS0_X_Set_ODR_Value+0x74>
 8001096:	2140      	movs	r1, #64	; 0x40
 8001098:	e7d8      	b.n	800104c <LSM6DS0_X_Set_ODR_Value+0x74>
 800109a:	2160      	movs	r1, #96	; 0x60
 800109c:	e7d6      	b.n	800104c <LSM6DS0_X_Set_ODR_Value+0x74>
 800109e:	2180      	movs	r1, #128	; 0x80
 80010a0:	e7d4      	b.n	800104c <LSM6DS0_X_Set_ODR_Value+0x74>
 80010a2:	bf00      	nop
 80010a4:	42480000 	.word	0x42480000
 80010a8:	42ee0000 	.word	0x42ee0000
 80010ac:	436e0000 	.word	0x436e0000
 80010b0:	43ee0000 	.word	0x43ee0000
 80010b4:	446e0000 	.word	0x446e0000

080010b8 <LSM6DS0_X_Set_ODR>:
{
 80010b8:	b508      	push	{r3, lr}
  if(handle->isEnabled == 1)
 80010ba:	7983      	ldrb	r3, [r0, #6]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d010      	beq.n	80010e2 <LSM6DS0_X_Set_ODR+0x2a>
  LSM6DS0_X_Data_t *pComponentData = ( LSM6DS0_X_Data_t * )pData->pComponentData;
 80010c0:	6883      	ldr	r3, [r0, #8]
 80010c2:	681b      	ldr	r3, [r3, #0]
  switch( odr )
 80010c4:	2904      	cmp	r1, #4
 80010c6:	d822      	bhi.n	800110e <LSM6DS0_X_Set_ODR+0x56>
 80010c8:	e8df f001 	tbb	[pc, r1]
 80010cc:	03030707 	.word	0x03030707
 80010d0:	12          	.byte	0x12
 80010d1:	00          	.byte	0x00
      pComponentData->Previous_ODR = 50.0f;
 80010d2:	4a10      	ldr	r2, [pc, #64]	; (8001114 <LSM6DS0_X_Set_ODR+0x5c>)
 80010d4:	601a      	str	r2, [r3, #0]
  return COMPONENT_OK;
 80010d6:	2000      	movs	r0, #0
}
 80010d8:	bd08      	pop	{r3, pc}
      pComponentData->Previous_ODR = 10.0f;
 80010da:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <LSM6DS0_X_Set_ODR+0x60>)
 80010dc:	601a      	str	r2, [r3, #0]
  return COMPONENT_OK;
 80010de:	2000      	movs	r0, #0
}
 80010e0:	bd08      	pop	{r3, pc}
  switch( odr )
 80010e2:	2904      	cmp	r1, #4
 80010e4:	d813      	bhi.n	800110e <LSM6DS0_X_Set_ODR+0x56>
 80010e6:	e8df f001 	tbb	[pc, r1]
 80010ea:	0e0e      	.short	0x0e0e
 80010ec:	0707      	.short	0x0707
 80010ee:	10          	.byte	0x10
 80010ef:	00          	.byte	0x00
      pComponentData->Previous_ODR = 119.0f;
 80010f0:	4a0a      	ldr	r2, [pc, #40]	; (800111c <LSM6DS0_X_Set_ODR+0x64>)
 80010f2:	601a      	str	r2, [r3, #0]
  return COMPONENT_OK;
 80010f4:	2000      	movs	r0, #0
}
 80010f6:	bd08      	pop	{r3, pc}
      new_odr = LSM6DS0_ACC_GYRO_ODR_XL_50Hz;
 80010f8:	2140      	movs	r1, #64	; 0x40
  if ( LSM6DS0_ACC_GYRO_W_AccelerometerDataRate( (void *)handle, new_odr ) == MEMS_ERROR )
 80010fa:	f7ff faf9 	bl	80006f0 <LSM6DS0_ACC_GYRO_W_AccelerometerDataRate>
  return COMPONENT_OK;
 80010fe:	fab0 f080 	clz	r0, r0
 8001102:	0940      	lsrs	r0, r0, #5
}
 8001104:	bd08      	pop	{r3, pc}
      new_odr = LSM6DS0_ACC_GYRO_ODR_XL_10Hz;
 8001106:	2120      	movs	r1, #32
 8001108:	e7f7      	b.n	80010fa <LSM6DS0_X_Set_ODR+0x42>
      new_odr = LSM6DS0_ACC_GYRO_ODR_XL_119Hz;
 800110a:	2160      	movs	r1, #96	; 0x60
 800110c:	e7f5      	b.n	80010fa <LSM6DS0_X_Set_ODR+0x42>
      return COMPONENT_ERROR;
 800110e:	2001      	movs	r0, #1
}
 8001110:	bd08      	pop	{r3, pc}
 8001112:	bf00      	nop
 8001114:	42480000 	.word	0x42480000
 8001118:	41200000 	.word	0x41200000
 800111c:	42ee0000 	.word	0x42ee0000

08001120 <LSM6DS0_G_Set_Axes_Status>:
{
 8001120:	b538      	push	{r3, r4, r5, lr}
  if ( LSM6DS0_ACC_GYRO_W_GyroAxisX( (void *)handle,
 8001122:	780b      	ldrb	r3, [r1, #0]
 8001124:	2b01      	cmp	r3, #1
{
 8001126:	460c      	mov	r4, r1
  if ( LSM6DS0_ACC_GYRO_W_GyroAxisX( (void *)handle,
 8001128:	bf0c      	ite	eq
 800112a:	2108      	moveq	r1, #8
 800112c:	2100      	movne	r1, #0
{
 800112e:	4605      	mov	r5, r0
  if ( LSM6DS0_ACC_GYRO_W_GyroAxisX( (void *)handle,
 8001130:	f7ff fb8a 	bl	8000848 <LSM6DS0_ACC_GYRO_W_GyroAxisX>
 8001134:	b1a0      	cbz	r0, 8001160 <LSM6DS0_G_Set_Axes_Status+0x40>
  if ( LSM6DS0_ACC_GYRO_W_GyroAxisY( (void *)handle,
 8001136:	7863      	ldrb	r3, [r4, #1]
 8001138:	2b01      	cmp	r3, #1
 800113a:	bf0c      	ite	eq
 800113c:	2110      	moveq	r1, #16
 800113e:	2100      	movne	r1, #0
 8001140:	4628      	mov	r0, r5
 8001142:	f7ff fbb3 	bl	80008ac <LSM6DS0_ACC_GYRO_W_GyroAxisY>
 8001146:	b158      	cbz	r0, 8001160 <LSM6DS0_G_Set_Axes_Status+0x40>
  if ( LSM6DS0_ACC_GYRO_W_GyroAxisZ( (void *)handle,
 8001148:	78a3      	ldrb	r3, [r4, #2]
 800114a:	2b01      	cmp	r3, #1
 800114c:	4628      	mov	r0, r5
 800114e:	bf0c      	ite	eq
 8001150:	2120      	moveq	r1, #32
 8001152:	2100      	movne	r1, #0
 8001154:	f7ff fbdc 	bl	8000910 <LSM6DS0_ACC_GYRO_W_GyroAxisZ>
    return COMPONENT_ERROR;
 8001158:	fab0 f080 	clz	r0, r0
 800115c:	0940      	lsrs	r0, r0, #5
}
 800115e:	bd38      	pop	{r3, r4, r5, pc}
    return COMPONENT_ERROR;
 8001160:	2001      	movs	r0, #1
}
 8001162:	bd38      	pop	{r3, r4, r5, pc}

08001164 <LSM6DS0_G_Get_WhoAmI>:
 8001164:	b508      	push	{r3, lr}
 8001166:	f7ff fa23 	bl	80005b0 <LSM6DS0_ACC_GYRO_R_WHO_AM_I_>
 800116a:	fab0 f080 	clz	r0, r0
 800116e:	0940      	lsrs	r0, r0, #5
 8001170:	bd08      	pop	{r3, pc}
 8001172:	bf00      	nop

08001174 <LSM6DS0_G_Read_Reg>:
 8001174:	b508      	push	{r3, lr}
 8001176:	2301      	movs	r3, #1
 8001178:	f7ff fa12 	bl	80005a0 <LSM6DS0_ACC_GYRO_ReadReg>
 800117c:	fab0 f080 	clz	r0, r0
 8001180:	0940      	lsrs	r0, r0, #5
 8001182:	bd08      	pop	{r3, pc}

08001184 <LSM6DS0_G_Write_Reg>:
 8001184:	b510      	push	{r4, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	ac02      	add	r4, sp, #8
 800118a:	2301      	movs	r3, #1
 800118c:	f804 2d01 	strb.w	r2, [r4, #-1]!
 8001190:	4622      	mov	r2, r4
 8001192:	f7ff f9fd 	bl	8000590 <LSM6DS0_ACC_GYRO_WriteReg>
 8001196:	fab0 f080 	clz	r0, r0
 800119a:	0940      	lsrs	r0, r0, #5
 800119c:	b002      	add	sp, #8
 800119e:	bd10      	pop	{r4, pc}

080011a0 <LSM6DS0_X_Sensor_Enable>:
  if ( handle->isEnabled == 1 )
 80011a0:	7983      	ldrb	r3, [r0, #6]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d02b      	beq.n	80011fe <LSM6DS0_X_Sensor_Enable+0x5e>
  LSM6DS0_X_Data_t *pComponentData = ( LSM6DS0_X_Data_t * )pData->pComponentData;
 80011a6:	6883      	ldr	r3, [r0, #8]
  if ( LSM6DS0_X_Set_ODR_Value_When_Enabled( handle, pComponentData->Previous_ODR ) == COMPONENT_ERROR )
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	edd3 7a00 	vldr	s15, [r3]
            : ( odr <=  50.0f ) ? LSM6DS0_ACC_GYRO_ODR_XL_50Hz
 80011ae:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80011b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 80011ba:	b510      	push	{r4, lr}
            : ( odr <=  50.0f ) ? LSM6DS0_ACC_GYRO_ODR_XL_50Hz
 80011bc:	d808      	bhi.n	80011d0 <LSM6DS0_X_Sensor_Enable+0x30>
 80011be:	2120      	movs	r1, #32
 80011c0:	4604      	mov	r4, r0
  if ( LSM6DS0_ACC_GYRO_W_AccelerometerDataRate( (void *)handle, new_odr ) == MEMS_ERROR )
 80011c2:	f7ff fa95 	bl	80006f0 <LSM6DS0_ACC_GYRO_W_AccelerometerDataRate>
 80011c6:	b1e0      	cbz	r0, 8001202 <LSM6DS0_X_Sensor_Enable+0x62>
  handle->isEnabled = 1;
 80011c8:	2301      	movs	r3, #1
 80011ca:	71a3      	strb	r3, [r4, #6]
  return COMPONENT_OK;
 80011cc:	2000      	movs	r0, #0
}
 80011ce:	bd10      	pop	{r4, pc}
            : ( odr <=  50.0f ) ? LSM6DS0_ACC_GYRO_ODR_XL_50Hz
 80011d0:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001224 <LSM6DS0_X_Sensor_Enable+0x84>
 80011d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011dc:	d913      	bls.n	8001206 <LSM6DS0_X_Sensor_Enable+0x66>
 80011de:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001228 <LSM6DS0_X_Sensor_Enable+0x88>
 80011e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ea:	d90e      	bls.n	800120a <LSM6DS0_X_Sensor_Enable+0x6a>
 80011ec:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800122c <LSM6DS0_X_Sensor_Enable+0x8c>
 80011f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f8:	d809      	bhi.n	800120e <LSM6DS0_X_Sensor_Enable+0x6e>
 80011fa:	2180      	movs	r1, #128	; 0x80
 80011fc:	e7e0      	b.n	80011c0 <LSM6DS0_X_Sensor_Enable+0x20>
    return COMPONENT_OK;
 80011fe:	2000      	movs	r0, #0
}
 8001200:	4770      	bx	lr
    return COMPONENT_ERROR;
 8001202:	2001      	movs	r0, #1
}
 8001204:	bd10      	pop	{r4, pc}
            : ( odr <=  50.0f ) ? LSM6DS0_ACC_GYRO_ODR_XL_50Hz
 8001206:	2140      	movs	r1, #64	; 0x40
 8001208:	e7da      	b.n	80011c0 <LSM6DS0_X_Sensor_Enable+0x20>
 800120a:	2160      	movs	r1, #96	; 0x60
 800120c:	e7d8      	b.n	80011c0 <LSM6DS0_X_Sensor_Enable+0x20>
 800120e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001230 <LSM6DS0_X_Sensor_Enable+0x90>
 8001212:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121a:	bf94      	ite	ls
 800121c:	21a0      	movls	r1, #160	; 0xa0
 800121e:	21c0      	movhi	r1, #192	; 0xc0
 8001220:	e7ce      	b.n	80011c0 <LSM6DS0_X_Sensor_Enable+0x20>
 8001222:	bf00      	nop
 8001224:	42480000 	.word	0x42480000
 8001228:	42ee0000 	.word	0x42ee0000
 800122c:	436e0000 	.word	0x436e0000
 8001230:	43ee0000 	.word	0x43ee0000

08001234 <LSM6DS0_X_Get_AxesRaw>:
{
 8001234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001236:	b083      	sub	sp, #12
  uint8_t regValue[6] = {0, 0, 0, 0, 0, 0};
 8001238:	2400      	movs	r4, #0
{
 800123a:	460d      	mov	r5, r1
  if ( LSM6DS0_ACC_GYRO_Get_Acceleration( (void *)handle, ( uint8_t* )regValue ) == MEMS_ERROR )
 800123c:	4669      	mov	r1, sp
  uint8_t regValue[6] = {0, 0, 0, 0, 0, 0};
 800123e:	f8ad 4004 	strh.w	r4, [sp, #4]
 8001242:	9400      	str	r4, [sp, #0]
  if ( LSM6DS0_ACC_GYRO_Get_Acceleration( (void *)handle, ( uint8_t* )regValue ) == MEMS_ERROR )
 8001244:	f7ff fac4 	bl	80007d0 <LSM6DS0_ACC_GYRO_Get_Acceleration>
 8001248:	b1b8      	cbz	r0, 800127a <LSM6DS0_X_Get_AxesRaw+0x46>
  pData[2] = ( ( ( ( int16_t )regValue[5] ) << 8 ) + ( int16_t )regValue[4] );
 800124a:	f89d 0005 	ldrb.w	r0, [sp, #5]
  pData[0] = ( ( ( ( int16_t )regValue[1] ) << 8 ) + ( int16_t )regValue[0] );
 800124e:	f89d 7001 	ldrb.w	r7, [sp, #1]
 8001252:	f89d 1000 	ldrb.w	r1, [sp]
  pData[1] = ( ( ( ( int16_t )regValue[3] ) << 8 ) + ( int16_t )regValue[2] );
 8001256:	f89d 6003 	ldrb.w	r6, [sp, #3]
 800125a:	f89d 2002 	ldrb.w	r2, [sp, #2]
  pData[2] = ( ( ( ( int16_t )regValue[5] ) << 8 ) + ( int16_t )regValue[4] );
 800125e:	f89d 3004 	ldrb.w	r3, [sp, #4]
  pData[0] = ( ( ( ( int16_t )regValue[1] ) << 8 ) + ( int16_t )regValue[0] );
 8001262:	eb01 2107 	add.w	r1, r1, r7, lsl #8
  pData[2] = ( ( ( ( int16_t )regValue[5] ) << 8 ) + ( int16_t )regValue[4] );
 8001266:	eb03 2300 	add.w	r3, r3, r0, lsl #8
  pData[1] = ( ( ( ( int16_t )regValue[3] ) << 8 ) + ( int16_t )regValue[2] );
 800126a:	eb02 2206 	add.w	r2, r2, r6, lsl #8
  return COMPONENT_OK;
 800126e:	4620      	mov	r0, r4
  value->AXIS_X = dataRaw[0];
 8001270:	8029      	strh	r1, [r5, #0]
  value->AXIS_Y = dataRaw[1];
 8001272:	806a      	strh	r2, [r5, #2]
  value->AXIS_Z = dataRaw[2];
 8001274:	80ab      	strh	r3, [r5, #4]
}
 8001276:	b003      	add	sp, #12
 8001278:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return COMPONENT_ERROR;
 800127a:	2001      	movs	r0, #1
}
 800127c:	b003      	add	sp, #12
 800127e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001280 <LSM6DS0_G_Get_AxesRaw>:
{
 8001280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001282:	b083      	sub	sp, #12
 * @retval COMPONENT_ERROR in case of failure
 */
static DrvStatusTypeDef LSM6DS0_G_Get_Axes_Raw( DrvContextTypeDef *handle, int16_t *pData )
{

  uint8_t regValue[6] = {0, 0, 0, 0, 0, 0};
 8001284:	2400      	movs	r4, #0
{
 8001286:	460d      	mov	r5, r1

  /* Read output registers from LSM6DS0_ACC_GYRO_OUT_X_L_G to LSM6DS0_ACC_GYRO_OUT_Z_H_G. */
  if ( LSM6DS0_ACC_GYRO_Get_AngularRate( (void *)handle, ( uint8_t* )regValue ) == MEMS_ERROR )
 8001288:	4669      	mov	r1, sp
  uint8_t regValue[6] = {0, 0, 0, 0, 0, 0};
 800128a:	f8ad 4004 	strh.w	r4, [sp, #4]
 800128e:	9400      	str	r4, [sp, #0]
  if ( LSM6DS0_ACC_GYRO_Get_AngularRate( (void *)handle, ( uint8_t* )regValue ) == MEMS_ERROR )
 8001290:	f7ff fa82 	bl	8000798 <LSM6DS0_ACC_GYRO_Get_AngularRate>
 8001294:	b1b8      	cbz	r0, 80012c6 <LSM6DS0_G_Get_AxesRaw+0x46>
  }

  /* Format the data. */
  pData[0] = ( ( ( ( int16_t )regValue[1] ) << 8 ) + ( int16_t )regValue[0] );
  pData[1] = ( ( ( ( int16_t )regValue[3] ) << 8 ) + ( int16_t )regValue[2] );
  pData[2] = ( ( ( ( int16_t )regValue[5] ) << 8 ) + ( int16_t )regValue[4] );
 8001296:	f89d 0005 	ldrb.w	r0, [sp, #5]
  pData[0] = ( ( ( ( int16_t )regValue[1] ) << 8 ) + ( int16_t )regValue[0] );
 800129a:	f89d 7001 	ldrb.w	r7, [sp, #1]
 800129e:	f89d 1000 	ldrb.w	r1, [sp]
  pData[1] = ( ( ( ( int16_t )regValue[3] ) << 8 ) + ( int16_t )regValue[2] );
 80012a2:	f89d 6003 	ldrb.w	r6, [sp, #3]
 80012a6:	f89d 2002 	ldrb.w	r2, [sp, #2]
  pData[2] = ( ( ( ( int16_t )regValue[5] ) << 8 ) + ( int16_t )regValue[4] );
 80012aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
  pData[0] = ( ( ( ( int16_t )regValue[1] ) << 8 ) + ( int16_t )regValue[0] );
 80012ae:	eb01 2107 	add.w	r1, r1, r7, lsl #8
  pData[2] = ( ( ( ( int16_t )regValue[5] ) << 8 ) + ( int16_t )regValue[4] );
 80012b2:	eb03 2300 	add.w	r3, r3, r0, lsl #8
  pData[1] = ( ( ( ( int16_t )regValue[3] ) << 8 ) + ( int16_t )regValue[2] );
 80012b6:	eb02 2206 	add.w	r2, r2, r6, lsl #8
  return COMPONENT_OK;
 80012ba:	4620      	mov	r0, r4
  value->AXIS_X = dataRaw[0];
 80012bc:	8029      	strh	r1, [r5, #0]
  value->AXIS_Y = dataRaw[1];
 80012be:	806a      	strh	r2, [r5, #2]
  value->AXIS_Z = dataRaw[2];
 80012c0:	80ab      	strh	r3, [r5, #4]
}
 80012c2:	b003      	add	sp, #12
 80012c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return COMPONENT_ERROR;
 80012c6:	2001      	movs	r0, #1
}
 80012c8:	b003      	add	sp, #12
 80012ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012cc <LSM6DS0_G_Check_WhoAmI>:
 80012cc:	b510      	push	{r4, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	a902      	add	r1, sp, #8
 80012d2:	2300      	movs	r3, #0
 80012d4:	f801 3d01 	strb.w	r3, [r1, #-1]!
 80012d8:	4604      	mov	r4, r0
 80012da:	f7ff f969 	bl	80005b0 <LSM6DS0_ACC_GYRO_R_WHO_AM_I_>
 80012de:	b138      	cbz	r0, 80012f0 <LSM6DS0_G_Check_WhoAmI+0x24>
 80012e0:	7820      	ldrb	r0, [r4, #0]
 80012e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80012e6:	1ac0      	subs	r0, r0, r3
 80012e8:	bf18      	it	ne
 80012ea:	2001      	movne	r0, #1
 80012ec:	b002      	add	sp, #8
 80012ee:	bd10      	pop	{r4, pc}
 80012f0:	2001      	movs	r0, #1
 80012f2:	b002      	add	sp, #8
 80012f4:	bd10      	pop	{r4, pc}
 80012f6:	bf00      	nop

080012f8 <LSM6DS0_X_Check_WhoAmI>:
{
 80012f8:	b510      	push	{r4, lr}
 80012fa:	b082      	sub	sp, #8
  uint8_t who_am_i = 0x00;
 80012fc:	a902      	add	r1, sp, #8
 80012fe:	2300      	movs	r3, #0
 8001300:	f801 3d01 	strb.w	r3, [r1, #-1]!
{
 8001304:	4604      	mov	r4, r0
  if ( LSM6DS0_ACC_GYRO_R_WHO_AM_I_( (void *)handle, ( uint8_t* )who_am_i ) == MEMS_ERROR )
 8001306:	f7ff f953 	bl	80005b0 <LSM6DS0_ACC_GYRO_R_WHO_AM_I_>
 800130a:	b138      	cbz	r0, 800131c <LSM6DS0_X_Check_WhoAmI+0x24>
  if ( who_am_i != handle->who_am_i )
 800130c:	7820      	ldrb	r0, [r4, #0]
 800130e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    return COMPONENT_ERROR;
 8001312:	1ac0      	subs	r0, r0, r3
 8001314:	bf18      	it	ne
 8001316:	2001      	movne	r0, #1
}
 8001318:	b002      	add	sp, #8
 800131a:	bd10      	pop	{r4, pc}
    return COMPONENT_ERROR;
 800131c:	2001      	movs	r0, #1
}
 800131e:	b002      	add	sp, #8
 8001320:	bd10      	pop	{r4, pc}
 8001322:	bf00      	nop

08001324 <LSM6DS0_G_Get_Axes>:
{
 8001324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001328:	b082      	sub	sp, #8
  uint8_t regValue[6] = {0, 0, 0, 0, 0, 0};
 800132a:	2300      	movs	r3, #0
{
 800132c:	460e      	mov	r6, r1
  if ( LSM6DS0_ACC_GYRO_Get_AngularRate( (void *)handle, ( uint8_t* )regValue ) == MEMS_ERROR )
 800132e:	4669      	mov	r1, sp
  uint8_t regValue[6] = {0, 0, 0, 0, 0, 0};
 8001330:	f8ad 3004 	strh.w	r3, [sp, #4]
 8001334:	9300      	str	r3, [sp, #0]
{
 8001336:	4604      	mov	r4, r0
  if ( LSM6DS0_ACC_GYRO_Get_AngularRate( (void *)handle, ( uint8_t* )regValue ) == MEMS_ERROR )
 8001338:	f7ff fa2e 	bl	8000798 <LSM6DS0_ACC_GYRO_Get_AngularRate>
 800133c:	b1b8      	cbz	r0, 800136e <LSM6DS0_G_Get_Axes+0x4a>
  if ( LSM6DS0_ACC_GYRO_R_GyroFullScale( (void *)handle, &fullScale ) == MEMS_ERROR )
 800133e:	4620      	mov	r0, r4
 8001340:	4669      	mov	r1, sp
  pData[0] = ( ( ( ( int16_t )regValue[1] ) << 8 ) + ( int16_t )regValue[0] );
 8001342:	f89d a001 	ldrb.w	sl, [sp, #1]
 8001346:	f89d 7000 	ldrb.w	r7, [sp]
  pData[1] = ( ( ( ( int16_t )regValue[3] ) << 8 ) + ( int16_t )regValue[2] );
 800134a:	f89d 9003 	ldrb.w	r9, [sp, #3]
 800134e:	f89d 5002 	ldrb.w	r5, [sp, #2]
  pData[2] = ( ( ( ( int16_t )regValue[5] ) << 8 ) + ( int16_t )regValue[4] );
 8001352:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8001356:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if ( LSM6DS0_ACC_GYRO_R_GyroFullScale( (void *)handle, &fullScale ) == MEMS_ERROR )
 800135a:	f7ff f955 	bl	8000608 <LSM6DS0_ACC_GYRO_R_GyroFullScale>
 800135e:	b130      	cbz	r0, 800136e <LSM6DS0_G_Get_Axes+0x4a>
  switch( fullScale )
 8001360:	f89d 3000 	ldrb.w	r3, [sp]
 8001364:	2b08      	cmp	r3, #8
 8001366:	d036      	beq.n	80013d6 <LSM6DS0_G_Get_Axes+0xb2>
 8001368:	2b18      	cmp	r3, #24
 800136a:	d004      	beq.n	8001376 <LSM6DS0_G_Get_Axes+0x52>
 800136c:	b383      	cbz	r3, 80013d0 <LSM6DS0_G_Get_Axes+0xac>
    return COMPONENT_ERROR;
 800136e:	2001      	movs	r0, #1
}
 8001370:	b002      	add	sp, #8
 8001372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      *sensitivity = ( float )LSM6DS0_GYRO_SENSITIVITY_FOR_FS_2000DPS;
 8001376:	ed9f 6a19 	vldr	s12, [pc, #100]	; 80013dc <LSM6DS0_G_Get_Axes+0xb8>
  pData[0] = ( ( ( ( int16_t )regValue[1] ) << 8 ) + ( int16_t )regValue[0] );
 800137a:	eb07 270a 	add.w	r7, r7, sl, lsl #8
  angular_velocity->AXIS_X = ( int32_t )( dataRaw[0] * sensitivity );
 800137e:	b23f      	sxth	r7, r7
 8001380:	ee07 7a90 	vmov	s15, r7
  pData[1] = ( ( ( ( int16_t )regValue[3] ) << 8 ) + ( int16_t )regValue[2] );
 8001384:	eb05 2509 	add.w	r5, r5, r9, lsl #8
  angular_velocity->AXIS_Y = ( int32_t )( dataRaw[1] * sensitivity );
 8001388:	b22d      	sxth	r5, r5
  pData[2] = ( ( ( ( int16_t )regValue[5] ) << 8 ) + ( int16_t )regValue[4] );
 800138a:	eb04 2408 	add.w	r4, r4, r8, lsl #8
  angular_velocity->AXIS_X = ( int32_t )( dataRaw[0] * sensitivity );
 800138e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  angular_velocity->AXIS_Y = ( int32_t )( dataRaw[1] * sensitivity );
 8001392:	ee07 5a90 	vmov	s15, r5
  angular_velocity->AXIS_Z = ( int32_t )( dataRaw[2] * sensitivity );
 8001396:	b224      	sxth	r4, r4
  angular_velocity->AXIS_Y = ( int32_t )( dataRaw[1] * sensitivity );
 8001398:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  angular_velocity->AXIS_Z = ( int32_t )( dataRaw[2] * sensitivity );
 800139c:	ee07 4a90 	vmov	s15, r4
 80013a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  angular_velocity->AXIS_X = ( int32_t )( dataRaw[0] * sensitivity );
 80013a4:	ee66 6a86 	vmul.f32	s13, s13, s12
  angular_velocity->AXIS_Y = ( int32_t )( dataRaw[1] * sensitivity );
 80013a8:	ee27 7a06 	vmul.f32	s14, s14, s12
  angular_velocity->AXIS_Z = ( int32_t )( dataRaw[2] * sensitivity );
 80013ac:	ee67 7a86 	vmul.f32	s15, s15, s12
  angular_velocity->AXIS_X = ( int32_t )( dataRaw[0] * sensitivity );
 80013b0:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  angular_velocity->AXIS_Y = ( int32_t )( dataRaw[1] * sensitivity );
 80013b4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  angular_velocity->AXIS_Z = ( int32_t )( dataRaw[2] * sensitivity );
 80013b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  return COMPONENT_OK;
 80013bc:	2000      	movs	r0, #0
  angular_velocity->AXIS_X = ( int32_t )( dataRaw[0] * sensitivity );
 80013be:	edc6 6a00 	vstr	s13, [r6]
  angular_velocity->AXIS_Y = ( int32_t )( dataRaw[1] * sensitivity );
 80013c2:	ed86 7a01 	vstr	s14, [r6, #4]
  angular_velocity->AXIS_Z = ( int32_t )( dataRaw[2] * sensitivity );
 80013c6:	edc6 7a02 	vstr	s15, [r6, #8]
}
 80013ca:	b002      	add	sp, #8
 80013cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      *sensitivity = ( float )LSM6DS0_GYRO_SENSITIVITY_FOR_FS_245DPS;
 80013d0:	ed9f 6a03 	vldr	s12, [pc, #12]	; 80013e0 <LSM6DS0_G_Get_Axes+0xbc>
 80013d4:	e7d1      	b.n	800137a <LSM6DS0_G_Get_Axes+0x56>
      *sensitivity = ( float )LSM6DS0_GYRO_SENSITIVITY_FOR_FS_500DPS;
 80013d6:	ed9f 6a03 	vldr	s12, [pc, #12]	; 80013e4 <LSM6DS0_G_Get_Axes+0xc0>
 80013da:	e7ce      	b.n	800137a <LSM6DS0_G_Get_Axes+0x56>
 80013dc:	428c0000 	.word	0x428c0000
 80013e0:	410c0000 	.word	0x410c0000
 80013e4:	418c0000 	.word	0x418c0000

080013e8 <LSM6DS0_X_Get_ODR>:
  LSM6DS0_X_Data_t *pComponentData = ( LSM6DS0_X_Data_t * )pData->pComponentData;
 80013e8:	6883      	ldr	r3, [r0, #8]
  if(pComponentData->comboData->isGyroEnabled == 1)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	781a      	ldrb	r2, [r3, #0]
 80013f0:	2a01      	cmp	r2, #1
 80013f2:	d019      	beq.n	8001428 <LSM6DS0_X_Get_ODR+0x40>
{
 80013f4:	b510      	push	{r4, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	460c      	mov	r4, r1
  if ( LSM6DS0_ACC_GYRO_R_AccelerometerDataRate( (void *)handle, &odr_low_level ) == MEMS_ERROR )
 80013fa:	f10d 0107 	add.w	r1, sp, #7
 80013fe:	f7ff f999 	bl	8000734 <LSM6DS0_ACC_GYRO_R_AccelerometerDataRate>
 8001402:	b170      	cbz	r0, 8001422 <LSM6DS0_X_Get_ODR+0x3a>
  switch( odr_low_level )
 8001404:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001408:	2860      	cmp	r0, #96	; 0x60
 800140a:	d01e      	beq.n	800144a <LSM6DS0_X_Get_ODR+0x62>
 800140c:	d910      	bls.n	8001430 <LSM6DS0_X_Get_ODR+0x48>
 800140e:	28a0      	cmp	r0, #160	; 0xa0
 8001410:	d02b      	beq.n	800146a <LSM6DS0_X_Get_ODR+0x82>
 8001412:	28c0      	cmp	r0, #192	; 0xc0
 8001414:	d025      	beq.n	8001462 <LSM6DS0_X_Get_ODR+0x7a>
 8001416:	2880      	cmp	r0, #128	; 0x80
 8001418:	d013      	beq.n	8001442 <LSM6DS0_X_Get_ODR+0x5a>
      *odr =  -1.0f;
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <LSM6DS0_X_Get_ODR+0x8c>)
 800141c:	6023      	str	r3, [r4, #0]
      return COMPONENT_ERROR;
 800141e:	2001      	movs	r0, #1
 8001420:	e000      	b.n	8001424 <LSM6DS0_X_Get_ODR+0x3c>
    return COMPONENT_ERROR;
 8001422:	2001      	movs	r0, #1
}
 8001424:	b002      	add	sp, #8
 8001426:	bd10      	pop	{r4, pc}
    *odr = pComponentData->comboData->lastGyroODR;
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	600b      	str	r3, [r1, #0]
    return COMPONENT_OK;
 800142c:	2000      	movs	r0, #0
}
 800142e:	4770      	bx	lr
  switch( odr_low_level )
 8001430:	2820      	cmp	r0, #32
 8001432:	d012      	beq.n	800145a <LSM6DS0_X_Get_ODR+0x72>
 8001434:	2840      	cmp	r0, #64	; 0x40
 8001436:	d00c      	beq.n	8001452 <LSM6DS0_X_Get_ODR+0x6a>
 8001438:	2800      	cmp	r0, #0
 800143a:	d1ee      	bne.n	800141a <LSM6DS0_X_Get_ODR+0x32>
      *odr =   0.0f;
 800143c:	2300      	movs	r3, #0
 800143e:	6023      	str	r3, [r4, #0]
 8001440:	e7f0      	b.n	8001424 <LSM6DS0_X_Get_ODR+0x3c>
      *odr = 238.0f;
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <LSM6DS0_X_Get_ODR+0x90>)
 8001444:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8001446:	2000      	movs	r0, #0
 8001448:	e7ec      	b.n	8001424 <LSM6DS0_X_Get_ODR+0x3c>
      *odr = 119.0f;
 800144a:	4b0c      	ldr	r3, [pc, #48]	; (800147c <LSM6DS0_X_Get_ODR+0x94>)
 800144c:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 800144e:	2000      	movs	r0, #0
 8001450:	e7e8      	b.n	8001424 <LSM6DS0_X_Get_ODR+0x3c>
      *odr =  50.0f;
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <LSM6DS0_X_Get_ODR+0x98>)
 8001454:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8001456:	2000      	movs	r0, #0
 8001458:	e7e4      	b.n	8001424 <LSM6DS0_X_Get_ODR+0x3c>
      *odr =  10.0f;
 800145a:	4b0a      	ldr	r3, [pc, #40]	; (8001484 <LSM6DS0_X_Get_ODR+0x9c>)
 800145c:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 800145e:	2000      	movs	r0, #0
 8001460:	e7e0      	b.n	8001424 <LSM6DS0_X_Get_ODR+0x3c>
      *odr = 952.0f;
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <LSM6DS0_X_Get_ODR+0xa0>)
 8001464:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8001466:	2000      	movs	r0, #0
 8001468:	e7dc      	b.n	8001424 <LSM6DS0_X_Get_ODR+0x3c>
      *odr = 476.0f;
 800146a:	4b08      	ldr	r3, [pc, #32]	; (800148c <LSM6DS0_X_Get_ODR+0xa4>)
 800146c:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 800146e:	2000      	movs	r0, #0
 8001470:	e7d8      	b.n	8001424 <LSM6DS0_X_Get_ODR+0x3c>
 8001472:	bf00      	nop
 8001474:	bf800000 	.word	0xbf800000
 8001478:	436e0000 	.word	0x436e0000
 800147c:	42ee0000 	.word	0x42ee0000
 8001480:	42480000 	.word	0x42480000
 8001484:	41200000 	.word	0x41200000
 8001488:	446e0000 	.word	0x446e0000
 800148c:	43ee0000 	.word	0x43ee0000

08001490 <LSM6DS0_X_DeInit>:
{
 8001490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001492:	b083      	sub	sp, #12
  uint8_t who_am_i = 0x00;
 8001494:	ad02      	add	r5, sp, #8
  LSM6DS0_X_Data_t *pComponentData = ( LSM6DS0_X_Data_t * )pData->pComponentData;
 8001496:	6882      	ldr	r2, [r0, #8]
  uint8_t who_am_i = 0x00;
 8001498:	2300      	movs	r3, #0
  LSM6DS0_X_Data_t *pComponentData = ( LSM6DS0_X_Data_t * )pData->pComponentData;
 800149a:	6816      	ldr	r6, [r2, #0]
  uint8_t who_am_i = 0x00;
 800149c:	f805 3d01 	strb.w	r3, [r5, #-1]!
  if ( LSM6DS0_ACC_GYRO_R_WHO_AM_I_( (void *)handle, ( uint8_t* )who_am_i ) == MEMS_ERROR )
 80014a0:	4629      	mov	r1, r5
{
 80014a2:	4604      	mov	r4, r0
  if ( LSM6DS0_ACC_GYRO_R_WHO_AM_I_( (void *)handle, ( uint8_t* )who_am_i ) == MEMS_ERROR )
 80014a4:	f7ff f884 	bl	80005b0 <LSM6DS0_ACC_GYRO_R_WHO_AM_I_>
 80014a8:	b120      	cbz	r0, 80014b4 <LSM6DS0_X_DeInit+0x24>
  if ( who_am_i != handle->who_am_i )
 80014aa:	7822      	ldrb	r2, [r4, #0]
 80014ac:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d002      	beq.n	80014ba <LSM6DS0_X_DeInit+0x2a>
    return COMPONENT_ERROR;
 80014b4:	2001      	movs	r0, #1
}
 80014b6:	b003      	add	sp, #12
 80014b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ( handle->isEnabled == 0 )
 80014ba:	79a3      	ldrb	r3, [r4, #6]
 80014bc:	b17b      	cbz	r3, 80014de <LSM6DS0_X_DeInit+0x4e>
  LSM6DS0_X_Data_t *pComponentData = ( LSM6DS0_X_Data_t * )pData->pComponentData;
 80014be:	68a3      	ldr	r3, [r4, #8]
 80014c0:	681f      	ldr	r7, [r3, #0]
  if(pComponentData->comboData->isGyroEnabled == 1)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	781a      	ldrb	r2, [r3, #0]
 80014c6:	2a01      	cmp	r2, #1
 80014c8:	d110      	bne.n	80014ec <LSM6DS0_X_DeInit+0x5c>
    *odr = pComponentData->comboData->lastGyroODR;
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	603b      	str	r3, [r7, #0]
  if ( LSM6DS0_ACC_GYRO_W_AccelerometerDataRate( (void *)handle, LSM6DS0_ACC_GYRO_ODR_XL_POWER_DOWN ) == MEMS_ERROR )
 80014ce:	2100      	movs	r1, #0
 80014d0:	4620      	mov	r0, r4
 80014d2:	f7ff f90d 	bl	80006f0 <LSM6DS0_ACC_GYRO_W_AccelerometerDataRate>
 80014d6:	2800      	cmp	r0, #0
 80014d8:	d0ec      	beq.n	80014b4 <LSM6DS0_X_DeInit+0x24>
  handle->isEnabled = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	71a3      	strb	r3, [r4, #6]
  handle->isInitialized = 0;
 80014de:	2300      	movs	r3, #0
  pComponentData->Previous_ODR = 0.0f;
 80014e0:	2200      	movs	r2, #0
  return COMPONENT_OK;
 80014e2:	4618      	mov	r0, r3
  pComponentData->Previous_ODR = 0.0f;
 80014e4:	6032      	str	r2, [r6, #0]
  handle->isInitialized = 0;
 80014e6:	7163      	strb	r3, [r4, #5]
}
 80014e8:	b003      	add	sp, #12
 80014ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ( LSM6DS0_ACC_GYRO_R_AccelerometerDataRate( (void *)handle, &odr_low_level ) == MEMS_ERROR )
 80014ec:	4629      	mov	r1, r5
 80014ee:	4620      	mov	r0, r4
 80014f0:	f7ff f920 	bl	8000734 <LSM6DS0_ACC_GYRO_R_AccelerometerDataRate>
 80014f4:	2800      	cmp	r0, #0
 80014f6:	d0dd      	beq.n	80014b4 <LSM6DS0_X_DeInit+0x24>
  switch( odr_low_level )
 80014f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80014fc:	2b60      	cmp	r3, #96	; 0x60
 80014fe:	d012      	beq.n	8001526 <LSM6DS0_X_DeInit+0x96>
 8001500:	d908      	bls.n	8001514 <LSM6DS0_X_DeInit+0x84>
 8001502:	2ba0      	cmp	r3, #160	; 0xa0
 8001504:	d01e      	beq.n	8001544 <LSM6DS0_X_DeInit+0xb4>
 8001506:	2bc0      	cmp	r3, #192	; 0xc0
 8001508:	d019      	beq.n	800153e <LSM6DS0_X_DeInit+0xae>
 800150a:	2b80      	cmp	r3, #128	; 0x80
 800150c:	d107      	bne.n	800151e <LSM6DS0_X_DeInit+0x8e>
      *odr = 238.0f;
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <LSM6DS0_X_DeInit+0xbc>)
 8001510:	603b      	str	r3, [r7, #0]
 8001512:	e7dc      	b.n	80014ce <LSM6DS0_X_DeInit+0x3e>
  switch( odr_low_level )
 8001514:	2b20      	cmp	r3, #32
 8001516:	d00f      	beq.n	8001538 <LSM6DS0_X_DeInit+0xa8>
 8001518:	2b40      	cmp	r3, #64	; 0x40
 800151a:	d00a      	beq.n	8001532 <LSM6DS0_X_DeInit+0xa2>
 800151c:	b133      	cbz	r3, 800152c <LSM6DS0_X_DeInit+0x9c>
      *odr =  -1.0f;
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <LSM6DS0_X_DeInit+0xc0>)
 8001520:	603b      	str	r3, [r7, #0]
    return COMPONENT_ERROR;
 8001522:	2001      	movs	r0, #1
 8001524:	e7c7      	b.n	80014b6 <LSM6DS0_X_DeInit+0x26>
      *odr = 119.0f;
 8001526:	4b0b      	ldr	r3, [pc, #44]	; (8001554 <LSM6DS0_X_DeInit+0xc4>)
 8001528:	603b      	str	r3, [r7, #0]
 800152a:	e7d0      	b.n	80014ce <LSM6DS0_X_DeInit+0x3e>
      *odr =   0.0f;
 800152c:	2300      	movs	r3, #0
 800152e:	603b      	str	r3, [r7, #0]
 8001530:	e7cd      	b.n	80014ce <LSM6DS0_X_DeInit+0x3e>
      *odr =  50.0f;
 8001532:	4b09      	ldr	r3, [pc, #36]	; (8001558 <LSM6DS0_X_DeInit+0xc8>)
 8001534:	603b      	str	r3, [r7, #0]
 8001536:	e7ca      	b.n	80014ce <LSM6DS0_X_DeInit+0x3e>
      *odr =  10.0f;
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <LSM6DS0_X_DeInit+0xcc>)
 800153a:	603b      	str	r3, [r7, #0]
 800153c:	e7c7      	b.n	80014ce <LSM6DS0_X_DeInit+0x3e>
      *odr = 952.0f;
 800153e:	4b08      	ldr	r3, [pc, #32]	; (8001560 <LSM6DS0_X_DeInit+0xd0>)
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	e7c4      	b.n	80014ce <LSM6DS0_X_DeInit+0x3e>
      *odr = 476.0f;
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <LSM6DS0_X_DeInit+0xd4>)
 8001546:	603b      	str	r3, [r7, #0]
 8001548:	e7c1      	b.n	80014ce <LSM6DS0_X_DeInit+0x3e>
 800154a:	bf00      	nop
 800154c:	436e0000 	.word	0x436e0000
 8001550:	bf800000 	.word	0xbf800000
 8001554:	42ee0000 	.word	0x42ee0000
 8001558:	42480000 	.word	0x42480000
 800155c:	41200000 	.word	0x41200000
 8001560:	446e0000 	.word	0x446e0000
 8001564:	43ee0000 	.word	0x43ee0000

08001568 <LSM6DS0_X_Get_Axes>:
{
 8001568:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800156c:	b082      	sub	sp, #8
  uint8_t regValue[6] = {0, 0, 0, 0, 0, 0};
 800156e:	2300      	movs	r3, #0
{
 8001570:	460e      	mov	r6, r1
  if ( LSM6DS0_ACC_GYRO_Get_Acceleration( (void *)handle, ( uint8_t* )regValue ) == MEMS_ERROR )
 8001572:	4669      	mov	r1, sp
  uint8_t regValue[6] = {0, 0, 0, 0, 0, 0};
 8001574:	f8ad 3004 	strh.w	r3, [sp, #4]
 8001578:	9300      	str	r3, [sp, #0]
{
 800157a:	4604      	mov	r4, r0
  if ( LSM6DS0_ACC_GYRO_Get_Acceleration( (void *)handle, ( uint8_t* )regValue ) == MEMS_ERROR )
 800157c:	f7ff f928 	bl	80007d0 <LSM6DS0_ACC_GYRO_Get_Acceleration>
 8001580:	b318      	cbz	r0, 80015ca <LSM6DS0_X_Get_Axes+0x62>
  if ( LSM6DS0_ACC_GYRO_R_AccelerometerFullScale( (void *)handle, &fullScale ) == MEMS_ERROR )
 8001582:	4620      	mov	r0, r4
 8001584:	4669      	mov	r1, sp
  pData[0] = ( ( ( ( int16_t )regValue[1] ) << 8 ) + ( int16_t )regValue[0] );
 8001586:	f89d a001 	ldrb.w	sl, [sp, #1]
 800158a:	f89d 7000 	ldrb.w	r7, [sp]
  pData[1] = ( ( ( ( int16_t )regValue[3] ) << 8 ) + ( int16_t )regValue[2] );
 800158e:	f89d 9003 	ldrb.w	r9, [sp, #3]
 8001592:	f89d 5002 	ldrb.w	r5, [sp, #2]
  pData[2] = ( ( ( ( int16_t )regValue[5] ) << 8 ) + ( int16_t )regValue[4] );
 8001596:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800159a:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if ( LSM6DS0_ACC_GYRO_R_AccelerometerFullScale( (void *)handle, &fullScale ) == MEMS_ERROR )
 800159e:	f7ff f897 	bl	80006d0 <LSM6DS0_ACC_GYRO_R_AccelerometerFullScale>
 80015a2:	b190      	cbz	r0, 80015ca <LSM6DS0_X_Get_Axes+0x62>
  switch( fullScale )
 80015a4:	f89d 3000 	ldrb.w	r3, [sp]
 80015a8:	2b18      	cmp	r3, #24
 80015aa:	d80e      	bhi.n	80015ca <LSM6DS0_X_Get_Axes+0x62>
 80015ac:	e8df f003 	tbb	[pc, r3]
 80015b0:	0d0d0d44 	.word	0x0d0d0d44
 80015b4:	0d0d0d0d 	.word	0x0d0d0d0d
 80015b8:	0d0d0d41 	.word	0x0d0d0d41
 80015bc:	0d0d0d0d 	.word	0x0d0d0d0d
 80015c0:	0d0d0d3e 	.word	0x0d0d0d3e
 80015c4:	0d0d0d0d 	.word	0x0d0d0d0d
 80015c8:	11          	.byte	0x11
 80015c9:	00          	.byte	0x00
    return COMPONENT_ERROR;
 80015ca:	2001      	movs	r0, #1
}
 80015cc:	b002      	add	sp, #8
 80015ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      *sensitivity = ( float )LSM6DS0_ACC_SENSITIVITY_FOR_FS_8G;
 80015d2:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8001640 <LSM6DS0_X_Get_Axes+0xd8>
  pData[0] = ( ( ( ( int16_t )regValue[1] ) << 8 ) + ( int16_t )regValue[0] );
 80015d6:	eb07 270a 	add.w	r7, r7, sl, lsl #8
  acceleration->AXIS_X = ( int32_t )( dataRaw[0] * sensitivity );
 80015da:	b23f      	sxth	r7, r7
 80015dc:	ee07 7a90 	vmov	s15, r7
  pData[1] = ( ( ( ( int16_t )regValue[3] ) << 8 ) + ( int16_t )regValue[2] );
 80015e0:	eb05 2509 	add.w	r5, r5, r9, lsl #8
  acceleration->AXIS_Y = ( int32_t )( dataRaw[1] * sensitivity );
 80015e4:	b22d      	sxth	r5, r5
  pData[2] = ( ( ( ( int16_t )regValue[5] ) << 8 ) + ( int16_t )regValue[4] );
 80015e6:	eb04 2408 	add.w	r4, r4, r8, lsl #8
  acceleration->AXIS_X = ( int32_t )( dataRaw[0] * sensitivity );
 80015ea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  acceleration->AXIS_Y = ( int32_t )( dataRaw[1] * sensitivity );
 80015ee:	ee07 5a90 	vmov	s15, r5
  acceleration->AXIS_Z = ( int32_t )( dataRaw[2] * sensitivity );
 80015f2:	b224      	sxth	r4, r4
  acceleration->AXIS_Y = ( int32_t )( dataRaw[1] * sensitivity );
 80015f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  acceleration->AXIS_Z = ( int32_t )( dataRaw[2] * sensitivity );
 80015f8:	ee07 4a90 	vmov	s15, r4
 80015fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  acceleration->AXIS_X = ( int32_t )( dataRaw[0] * sensitivity );
 8001600:	ee66 6a86 	vmul.f32	s13, s13, s12
  acceleration->AXIS_Y = ( int32_t )( dataRaw[1] * sensitivity );
 8001604:	ee27 7a06 	vmul.f32	s14, s14, s12
  acceleration->AXIS_Z = ( int32_t )( dataRaw[2] * sensitivity );
 8001608:	ee67 7a86 	vmul.f32	s15, s15, s12
  acceleration->AXIS_X = ( int32_t )( dataRaw[0] * sensitivity );
 800160c:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  acceleration->AXIS_Y = ( int32_t )( dataRaw[1] * sensitivity );
 8001610:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  acceleration->AXIS_Z = ( int32_t )( dataRaw[2] * sensitivity );
 8001614:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  return COMPONENT_OK;
 8001618:	2000      	movs	r0, #0
  acceleration->AXIS_X = ( int32_t )( dataRaw[0] * sensitivity );
 800161a:	edc6 6a00 	vstr	s13, [r6]
  acceleration->AXIS_Y = ( int32_t )( dataRaw[1] * sensitivity );
 800161e:	ed86 7a01 	vstr	s14, [r6, #4]
  acceleration->AXIS_Z = ( int32_t )( dataRaw[2] * sensitivity );
 8001622:	edc6 7a02 	vstr	s15, [r6, #8]
}
 8001626:	b002      	add	sp, #8
 8001628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      *sensitivity = ( float )LSM6DS0_ACC_SENSITIVITY_FOR_FS_4G;
 800162c:	ed9f 6a05 	vldr	s12, [pc, #20]	; 8001644 <LSM6DS0_X_Get_Axes+0xdc>
 8001630:	e7d1      	b.n	80015d6 <LSM6DS0_X_Get_Axes+0x6e>
      *sensitivity = ( float )LSM6DS0_ACC_SENSITIVITY_FOR_FS_16G;
 8001632:	ed9f 6a05 	vldr	s12, [pc, #20]	; 8001648 <LSM6DS0_X_Get_Axes+0xe0>
 8001636:	e7ce      	b.n	80015d6 <LSM6DS0_X_Get_Axes+0x6e>
      *sensitivity = ( float )LSM6DS0_ACC_SENSITIVITY_FOR_FS_2G;
 8001638:	ed9f 6a04 	vldr	s12, [pc, #16]	; 800164c <LSM6DS0_X_Get_Axes+0xe4>
 800163c:	e7cb      	b.n	80015d6 <LSM6DS0_X_Get_Axes+0x6e>
 800163e:	bf00      	nop
 8001640:	3e79db23 	.word	0x3e79db23
 8001644:	3df9db23 	.word	0x3df9db23
 8001648:	3f3b645a 	.word	0x3f3b645a
 800164c:	3d79db23 	.word	0x3d79db23

08001650 <LSM6DS0_X_Sensor_Disable>:
  if ( handle->isEnabled == 0 )
 8001650:	7983      	ldrb	r3, [r0, #6]
 8001652:	b34b      	cbz	r3, 80016a8 <LSM6DS0_X_Sensor_Disable+0x58>
  LSM6DS0_X_Data_t *pComponentData = ( LSM6DS0_X_Data_t * )pData->pComponentData;
 8001654:	6883      	ldr	r3, [r0, #8]
{
 8001656:	b530      	push	{r4, r5, lr}
  LSM6DS0_X_Data_t *pComponentData = ( LSM6DS0_X_Data_t * )pData->pComponentData;
 8001658:	681d      	ldr	r5, [r3, #0]
  if(pComponentData->comboData->isGyroEnabled == 1)
 800165a:	686b      	ldr	r3, [r5, #4]
 800165c:	781a      	ldrb	r2, [r3, #0]
 800165e:	2a01      	cmp	r2, #1
{
 8001660:	b083      	sub	sp, #12
 8001662:	4604      	mov	r4, r0
  if(pComponentData->comboData->isGyroEnabled == 1)
 8001664:	d10b      	bne.n	800167e <LSM6DS0_X_Sensor_Disable+0x2e>
    *odr = pComponentData->comboData->lastGyroODR;
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	602b      	str	r3, [r5, #0]
  if ( LSM6DS0_ACC_GYRO_W_AccelerometerDataRate( (void *)handle, LSM6DS0_ACC_GYRO_ODR_XL_POWER_DOWN ) == MEMS_ERROR )
 800166a:	2100      	movs	r1, #0
 800166c:	4620      	mov	r0, r4
 800166e:	f7ff f83f 	bl	80006f0 <LSM6DS0_ACC_GYRO_W_AccelerometerDataRate>
 8001672:	b1b0      	cbz	r0, 80016a2 <LSM6DS0_X_Sensor_Disable+0x52>
  handle->isEnabled = 0;
 8001674:	2300      	movs	r3, #0
 8001676:	71a3      	strb	r3, [r4, #6]
  return COMPONENT_OK;
 8001678:	4618      	mov	r0, r3
}
 800167a:	b003      	add	sp, #12
 800167c:	bd30      	pop	{r4, r5, pc}
  if ( LSM6DS0_ACC_GYRO_R_AccelerometerDataRate( (void *)handle, &odr_low_level ) == MEMS_ERROR )
 800167e:	f10d 0107 	add.w	r1, sp, #7
 8001682:	f7ff f857 	bl	8000734 <LSM6DS0_ACC_GYRO_R_AccelerometerDataRate>
 8001686:	b160      	cbz	r0, 80016a2 <LSM6DS0_X_Sensor_Disable+0x52>
  switch( odr_low_level )
 8001688:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800168c:	2b60      	cmp	r3, #96	; 0x60
 800168e:	d020      	beq.n	80016d2 <LSM6DS0_X_Sensor_Disable+0x82>
 8001690:	d80c      	bhi.n	80016ac <LSM6DS0_X_Sensor_Disable+0x5c>
 8001692:	2b20      	cmp	r3, #32
 8001694:	d017      	beq.n	80016c6 <LSM6DS0_X_Sensor_Disable+0x76>
 8001696:	2b40      	cmp	r3, #64	; 0x40
 8001698:	d018      	beq.n	80016cc <LSM6DS0_X_Sensor_Disable+0x7c>
 800169a:	b96b      	cbnz	r3, 80016b8 <LSM6DS0_X_Sensor_Disable+0x68>
      *odr =   0.0f;
 800169c:	2300      	movs	r3, #0
 800169e:	602b      	str	r3, [r5, #0]
 80016a0:	e7e3      	b.n	800166a <LSM6DS0_X_Sensor_Disable+0x1a>
    return COMPONENT_ERROR;
 80016a2:	2001      	movs	r0, #1
}
 80016a4:	b003      	add	sp, #12
 80016a6:	bd30      	pop	{r4, r5, pc}
    return COMPONENT_OK;
 80016a8:	4618      	mov	r0, r3
}
 80016aa:	4770      	bx	lr
  switch( odr_low_level )
 80016ac:	2ba0      	cmp	r3, #160	; 0xa0
 80016ae:	d007      	beq.n	80016c0 <LSM6DS0_X_Sensor_Disable+0x70>
 80016b0:	2bc0      	cmp	r3, #192	; 0xc0
 80016b2:	d014      	beq.n	80016de <LSM6DS0_X_Sensor_Disable+0x8e>
 80016b4:	2b80      	cmp	r3, #128	; 0x80
 80016b6:	d00f      	beq.n	80016d8 <LSM6DS0_X_Sensor_Disable+0x88>
      *odr =  -1.0f;
 80016b8:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <LSM6DS0_X_Sensor_Disable+0x94>)
 80016ba:	602b      	str	r3, [r5, #0]
    return COMPONENT_ERROR;
 80016bc:	2001      	movs	r0, #1
 80016be:	e7dc      	b.n	800167a <LSM6DS0_X_Sensor_Disable+0x2a>
      *odr = 476.0f;
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <LSM6DS0_X_Sensor_Disable+0x98>)
 80016c2:	602b      	str	r3, [r5, #0]
 80016c4:	e7d1      	b.n	800166a <LSM6DS0_X_Sensor_Disable+0x1a>
      *odr =  10.0f;
 80016c6:	4b09      	ldr	r3, [pc, #36]	; (80016ec <LSM6DS0_X_Sensor_Disable+0x9c>)
 80016c8:	602b      	str	r3, [r5, #0]
 80016ca:	e7ce      	b.n	800166a <LSM6DS0_X_Sensor_Disable+0x1a>
      *odr =  50.0f;
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <LSM6DS0_X_Sensor_Disable+0xa0>)
 80016ce:	602b      	str	r3, [r5, #0]
 80016d0:	e7cb      	b.n	800166a <LSM6DS0_X_Sensor_Disable+0x1a>
      *odr = 119.0f;
 80016d2:	4b08      	ldr	r3, [pc, #32]	; (80016f4 <LSM6DS0_X_Sensor_Disable+0xa4>)
 80016d4:	602b      	str	r3, [r5, #0]
 80016d6:	e7c8      	b.n	800166a <LSM6DS0_X_Sensor_Disable+0x1a>
      *odr = 238.0f;
 80016d8:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <LSM6DS0_X_Sensor_Disable+0xa8>)
 80016da:	602b      	str	r3, [r5, #0]
 80016dc:	e7c5      	b.n	800166a <LSM6DS0_X_Sensor_Disable+0x1a>
      *odr = 952.0f;
 80016de:	4b07      	ldr	r3, [pc, #28]	; (80016fc <LSM6DS0_X_Sensor_Disable+0xac>)
 80016e0:	602b      	str	r3, [r5, #0]
 80016e2:	e7c2      	b.n	800166a <LSM6DS0_X_Sensor_Disable+0x1a>
 80016e4:	bf800000 	.word	0xbf800000
 80016e8:	43ee0000 	.word	0x43ee0000
 80016ec:	41200000 	.word	0x41200000
 80016f0:	42480000 	.word	0x42480000
 80016f4:	42ee0000 	.word	0x42ee0000
 80016f8:	436e0000 	.word	0x436e0000
 80016fc:	446e0000 	.word	0x446e0000

08001700 <LSM6DS0_G_Sensor_Disable>:
  if ( handle->isEnabled == 0 )
 8001700:	7983      	ldrb	r3, [r0, #6]
 8001702:	b90b      	cbnz	r3, 8001708 <LSM6DS0_G_Sensor_Disable+0x8>
    return COMPONENT_OK;
 8001704:	4618      	mov	r0, r3
}
 8001706:	4770      	bx	lr
{
 8001708:	b530      	push	{r4, r5, lr}
  LSM6DS0_G_Data_t *pComponentData = ( LSM6DS0_G_Data_t * )pData->pComponentData;
 800170a:	6883      	ldr	r3, [r0, #8]
{
 800170c:	b083      	sub	sp, #12
  if ( LSM6DS0_ACC_GYRO_R_GyroDataRate( (void *)handle, &odr_low_level ) == MEMS_ERROR )
 800170e:	f10d 0107 	add.w	r1, sp, #7
 8001712:	4604      	mov	r4, r0
  LSM6DS0_G_Data_t *pComponentData = ( LSM6DS0_G_Data_t * )pData->pComponentData;
 8001714:	681d      	ldr	r5, [r3, #0]
  if ( LSM6DS0_ACC_GYRO_R_GyroDataRate( (void *)handle, &odr_low_level ) == MEMS_ERROR )
 8001716:	f7fe ffa9 	bl	800066c <LSM6DS0_ACC_GYRO_R_GyroDataRate>
 800171a:	b1c8      	cbz	r0, 8001750 <LSM6DS0_G_Sensor_Disable+0x50>
  switch( odr_low_level )
 800171c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001720:	2b60      	cmp	r3, #96	; 0x60
 8001722:	d031      	beq.n	8001788 <LSM6DS0_G_Sensor_Disable+0x88>
 8001724:	d817      	bhi.n	8001756 <LSM6DS0_G_Sensor_Disable+0x56>
 8001726:	2b20      	cmp	r3, #32
 8001728:	d02b      	beq.n	8001782 <LSM6DS0_G_Sensor_Disable+0x82>
 800172a:	2b40      	cmp	r3, #64	; 0x40
 800172c:	d020      	beq.n	8001770 <LSM6DS0_G_Sensor_Disable+0x70>
 800172e:	b9c3      	cbnz	r3, 8001762 <LSM6DS0_G_Sensor_Disable+0x62>
      *odr =   0.0f;
 8001730:	2300      	movs	r3, #0
 8001732:	602b      	str	r3, [r5, #0]
  if ( LSM6DS0_ACC_GYRO_W_GyroDataRate( (void *)handle, LSM6DS0_ACC_GYRO_ODR_G_POWER_DOWN ) == MEMS_ERROR )
 8001734:	2100      	movs	r1, #0
 8001736:	4620      	mov	r0, r4
 8001738:	f7fe ff76 	bl	8000628 <LSM6DS0_ACC_GYRO_W_GyroDataRate>
 800173c:	b140      	cbz	r0, 8001750 <LSM6DS0_G_Sensor_Disable+0x50>
  pComponentData->comboData->isGyroEnabled = 0;
 800173e:	686a      	ldr	r2, [r5, #4]
 8001740:	2300      	movs	r3, #0
  pComponentData->comboData->lastGyroODR = 0.0f;
 8001742:	2100      	movs	r1, #0
  return COMPONENT_OK;
 8001744:	4618      	mov	r0, r3
  pComponentData->comboData->lastGyroODR = 0.0f;
 8001746:	6051      	str	r1, [r2, #4]
  pComponentData->comboData->isGyroEnabled = 0;
 8001748:	7013      	strb	r3, [r2, #0]
  handle->isEnabled = 0;
 800174a:	71a3      	strb	r3, [r4, #6]
}
 800174c:	b003      	add	sp, #12
 800174e:	bd30      	pop	{r4, r5, pc}
    return COMPONENT_ERROR;
 8001750:	2001      	movs	r0, #1
}
 8001752:	b003      	add	sp, #12
 8001754:	bd30      	pop	{r4, r5, pc}
  switch( odr_low_level )
 8001756:	2ba0      	cmp	r3, #160	; 0xa0
 8001758:	d010      	beq.n	800177c <LSM6DS0_G_Sensor_Disable+0x7c>
 800175a:	2bc0      	cmp	r3, #192	; 0xc0
 800175c:	d005      	beq.n	800176a <LSM6DS0_G_Sensor_Disable+0x6a>
 800175e:	2b80      	cmp	r3, #128	; 0x80
 8001760:	d009      	beq.n	8001776 <LSM6DS0_G_Sensor_Disable+0x76>
      *odr =  -1.0f;
 8001762:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <LSM6DS0_G_Sensor_Disable+0x90>)
 8001764:	602b      	str	r3, [r5, #0]
    return COMPONENT_ERROR;
 8001766:	2001      	movs	r0, #1
 8001768:	e7f3      	b.n	8001752 <LSM6DS0_G_Sensor_Disable+0x52>
      *odr = 952.0f;
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <LSM6DS0_G_Sensor_Disable+0x94>)
 800176c:	602b      	str	r3, [r5, #0]
 800176e:	e7e1      	b.n	8001734 <LSM6DS0_G_Sensor_Disable+0x34>
      *odr =  60.0f;
 8001770:	4b09      	ldr	r3, [pc, #36]	; (8001798 <LSM6DS0_G_Sensor_Disable+0x98>)
 8001772:	602b      	str	r3, [r5, #0]
 8001774:	e7de      	b.n	8001734 <LSM6DS0_G_Sensor_Disable+0x34>
      *odr = 238.0f;
 8001776:	4b09      	ldr	r3, [pc, #36]	; (800179c <LSM6DS0_G_Sensor_Disable+0x9c>)
 8001778:	602b      	str	r3, [r5, #0]
 800177a:	e7db      	b.n	8001734 <LSM6DS0_G_Sensor_Disable+0x34>
      *odr = 476.0f;
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <LSM6DS0_G_Sensor_Disable+0xa0>)
 800177e:	602b      	str	r3, [r5, #0]
 8001780:	e7d8      	b.n	8001734 <LSM6DS0_G_Sensor_Disable+0x34>
      *odr =  15.0f;
 8001782:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <LSM6DS0_G_Sensor_Disable+0xa4>)
 8001784:	602b      	str	r3, [r5, #0]
 8001786:	e7d5      	b.n	8001734 <LSM6DS0_G_Sensor_Disable+0x34>
      *odr = 119.0f;
 8001788:	4b07      	ldr	r3, [pc, #28]	; (80017a8 <LSM6DS0_G_Sensor_Disable+0xa8>)
 800178a:	602b      	str	r3, [r5, #0]
 800178c:	e7d2      	b.n	8001734 <LSM6DS0_G_Sensor_Disable+0x34>
 800178e:	bf00      	nop
 8001790:	bf800000 	.word	0xbf800000
 8001794:	446e0000 	.word	0x446e0000
 8001798:	42700000 	.word	0x42700000
 800179c:	436e0000 	.word	0x436e0000
 80017a0:	43ee0000 	.word	0x43ee0000
 80017a4:	41700000 	.word	0x41700000
 80017a8:	42ee0000 	.word	0x42ee0000

080017ac <LSM6DS0_G_DeInit>:
{
 80017ac:	b570      	push	{r4, r5, r6, lr}
 80017ae:	b082      	sub	sp, #8
  uint8_t who_am_i = 0x00;
 80017b0:	ac02      	add	r4, sp, #8
  LSM6DS0_G_Data_t *pComponentData = ( LSM6DS0_G_Data_t * )pData->pComponentData;
 80017b2:	6882      	ldr	r2, [r0, #8]
  uint8_t who_am_i = 0x00;
 80017b4:	2300      	movs	r3, #0
  LSM6DS0_G_Data_t *pComponentData = ( LSM6DS0_G_Data_t * )pData->pComponentData;
 80017b6:	6816      	ldr	r6, [r2, #0]
  uint8_t who_am_i = 0x00;
 80017b8:	f804 3d01 	strb.w	r3, [r4, #-1]!
  if ( LSM6DS0_ACC_GYRO_R_WHO_AM_I_( (void *)handle, ( uint8_t* )who_am_i ) == MEMS_ERROR )
 80017bc:	4621      	mov	r1, r4
{
 80017be:	4605      	mov	r5, r0
  if ( LSM6DS0_ACC_GYRO_R_WHO_AM_I_( (void *)handle, ( uint8_t* )who_am_i ) == MEMS_ERROR )
 80017c0:	f7fe fef6 	bl	80005b0 <LSM6DS0_ACC_GYRO_R_WHO_AM_I_>
 80017c4:	b120      	cbz	r0, 80017d0 <LSM6DS0_G_DeInit+0x24>
  if ( who_am_i != handle->who_am_i )
 80017c6:	782a      	ldrb	r2, [r5, #0]
 80017c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d002      	beq.n	80017d6 <LSM6DS0_G_DeInit+0x2a>
    return COMPONENT_ERROR;
 80017d0:	2001      	movs	r0, #1
}
 80017d2:	b002      	add	sp, #8
 80017d4:	bd70      	pop	{r4, r5, r6, pc}
  if ( handle->isEnabled == 0 )
 80017d6:	79ab      	ldrb	r3, [r5, #6]
 80017d8:	b933      	cbnz	r3, 80017e8 <LSM6DS0_G_DeInit+0x3c>
  handle->isInitialized = 0;
 80017da:	2300      	movs	r3, #0
  pComponentData->Previous_ODR = 0.0f;
 80017dc:	2200      	movs	r2, #0
  return COMPONENT_OK;
 80017de:	4618      	mov	r0, r3
  pComponentData->Previous_ODR = 0.0f;
 80017e0:	6032      	str	r2, [r6, #0]
  handle->isInitialized = 0;
 80017e2:	716b      	strb	r3, [r5, #5]
}
 80017e4:	b002      	add	sp, #8
 80017e6:	bd70      	pop	{r4, r5, r6, pc}
  LSM6DS0_G_Data_t *pComponentData = ( LSM6DS0_G_Data_t * )pData->pComponentData;
 80017e8:	68ab      	ldr	r3, [r5, #8]
  if ( LSM6DS0_ACC_GYRO_R_GyroDataRate( (void *)handle, &odr_low_level ) == MEMS_ERROR )
 80017ea:	4621      	mov	r1, r4
 80017ec:	4628      	mov	r0, r5
  LSM6DS0_G_Data_t *pComponentData = ( LSM6DS0_G_Data_t * )pData->pComponentData;
 80017ee:	681c      	ldr	r4, [r3, #0]
  if ( LSM6DS0_ACC_GYRO_R_GyroDataRate( (void *)handle, &odr_low_level ) == MEMS_ERROR )
 80017f0:	f7fe ff3c 	bl	800066c <LSM6DS0_ACC_GYRO_R_GyroDataRate>
 80017f4:	2800      	cmp	r0, #0
 80017f6:	d0eb      	beq.n	80017d0 <LSM6DS0_G_DeInit+0x24>
  switch( odr_low_level )
 80017f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80017fc:	2b60      	cmp	r3, #96	; 0x60
 80017fe:	d01e      	beq.n	800183e <LSM6DS0_G_DeInit+0x92>
 8001800:	d914      	bls.n	800182c <LSM6DS0_G_DeInit+0x80>
 8001802:	2ba0      	cmp	r3, #160	; 0xa0
 8001804:	d02a      	beq.n	800185c <LSM6DS0_G_DeInit+0xb0>
 8001806:	2bc0      	cmp	r3, #192	; 0xc0
 8001808:	d025      	beq.n	8001856 <LSM6DS0_G_DeInit+0xaa>
 800180a:	2b80      	cmp	r3, #128	; 0x80
 800180c:	d113      	bne.n	8001836 <LSM6DS0_G_DeInit+0x8a>
      *odr = 238.0f;
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <LSM6DS0_G_DeInit+0xb8>)
 8001810:	6023      	str	r3, [r4, #0]
  if ( LSM6DS0_ACC_GYRO_W_GyroDataRate( (void *)handle, LSM6DS0_ACC_GYRO_ODR_G_POWER_DOWN ) == MEMS_ERROR )
 8001812:	2100      	movs	r1, #0
 8001814:	4628      	mov	r0, r5
 8001816:	f7fe ff07 	bl	8000628 <LSM6DS0_ACC_GYRO_W_GyroDataRate>
 800181a:	2800      	cmp	r0, #0
 800181c:	d0d8      	beq.n	80017d0 <LSM6DS0_G_DeInit+0x24>
  pComponentData->comboData->isGyroEnabled = 0;
 800181e:	6862      	ldr	r2, [r4, #4]
 8001820:	2300      	movs	r3, #0
  pComponentData->comboData->lastGyroODR = 0.0f;
 8001822:	2100      	movs	r1, #0
 8001824:	6051      	str	r1, [r2, #4]
  pComponentData->comboData->isGyroEnabled = 0;
 8001826:	7013      	strb	r3, [r2, #0]
  handle->isEnabled = 0;
 8001828:	71ab      	strb	r3, [r5, #6]
 800182a:	e7d6      	b.n	80017da <LSM6DS0_G_DeInit+0x2e>
  switch( odr_low_level )
 800182c:	2b20      	cmp	r3, #32
 800182e:	d00f      	beq.n	8001850 <LSM6DS0_G_DeInit+0xa4>
 8001830:	2b40      	cmp	r3, #64	; 0x40
 8001832:	d00a      	beq.n	800184a <LSM6DS0_G_DeInit+0x9e>
 8001834:	b133      	cbz	r3, 8001844 <LSM6DS0_G_DeInit+0x98>
      *odr =  -1.0f;
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <LSM6DS0_G_DeInit+0xbc>)
 8001838:	6023      	str	r3, [r4, #0]
    return COMPONENT_ERROR;
 800183a:	2001      	movs	r0, #1
 800183c:	e7c9      	b.n	80017d2 <LSM6DS0_G_DeInit+0x26>
      *odr = 119.0f;
 800183e:	4b0b      	ldr	r3, [pc, #44]	; (800186c <LSM6DS0_G_DeInit+0xc0>)
 8001840:	6023      	str	r3, [r4, #0]
 8001842:	e7e6      	b.n	8001812 <LSM6DS0_G_DeInit+0x66>
      *odr =   0.0f;
 8001844:	2300      	movs	r3, #0
 8001846:	6023      	str	r3, [r4, #0]
 8001848:	e7e3      	b.n	8001812 <LSM6DS0_G_DeInit+0x66>
      *odr =  60.0f;
 800184a:	4b09      	ldr	r3, [pc, #36]	; (8001870 <LSM6DS0_G_DeInit+0xc4>)
 800184c:	6023      	str	r3, [r4, #0]
 800184e:	e7e0      	b.n	8001812 <LSM6DS0_G_DeInit+0x66>
      *odr =  15.0f;
 8001850:	4b08      	ldr	r3, [pc, #32]	; (8001874 <LSM6DS0_G_DeInit+0xc8>)
 8001852:	6023      	str	r3, [r4, #0]
 8001854:	e7dd      	b.n	8001812 <LSM6DS0_G_DeInit+0x66>
      *odr = 952.0f;
 8001856:	4b08      	ldr	r3, [pc, #32]	; (8001878 <LSM6DS0_G_DeInit+0xcc>)
 8001858:	6023      	str	r3, [r4, #0]
 800185a:	e7da      	b.n	8001812 <LSM6DS0_G_DeInit+0x66>
      *odr = 476.0f;
 800185c:	4b07      	ldr	r3, [pc, #28]	; (800187c <LSM6DS0_G_DeInit+0xd0>)
 800185e:	6023      	str	r3, [r4, #0]
 8001860:	e7d7      	b.n	8001812 <LSM6DS0_G_DeInit+0x66>
 8001862:	bf00      	nop
 8001864:	436e0000 	.word	0x436e0000
 8001868:	bf800000 	.word	0xbf800000
 800186c:	42ee0000 	.word	0x42ee0000
 8001870:	42700000 	.word	0x42700000
 8001874:	41700000 	.word	0x41700000
 8001878:	446e0000 	.word	0x446e0000
 800187c:	43ee0000 	.word	0x43ee0000

08001880 <LSM6DS0_G_Sensor_Enable>:
  if ( handle->isEnabled == 1 )
 8001880:	7983      	ldrb	r3, [r0, #6]
 8001882:	2b01      	cmp	r3, #1
 8001884:	d02b      	beq.n	80018de <LSM6DS0_G_Sensor_Enable+0x5e>
  LSM6DS0_G_Data_t *pComponentData = ( LSM6DS0_G_Data_t * )pData->pComponentData;
 8001886:	6883      	ldr	r3, [r0, #8]
{
 8001888:	b570      	push	{r4, r5, r6, lr}
  LSM6DS0_G_Data_t *pComponentData = ( LSM6DS0_G_Data_t * )pData->pComponentData;
 800188a:	681d      	ldr	r5, [r3, #0]
  if ( LSM6DS0_G_Set_ODR_Value_When_Enabled( handle, pComponentData->Previous_ODR ) == COMPONENT_ERROR )
 800188c:	edd5 7a00 	vldr	s15, [r5]
  LSM6DS0_ACC_GYRO_ODR_G_t new_odr;
  GYRO_Data_t *pData = ( GYRO_Data_t * )handle->pData;
  LSM6DS0_G_Data_t *pComponentData = ( LSM6DS0_G_Data_t * )pData->pComponentData;

  new_odr = ( odr <=  15.0f ) ? LSM6DS0_ACC_GYRO_ODR_G_15Hz
            : ( odr <=  60.0f ) ? LSM6DS0_ACC_GYRO_ODR_G_60Hz
 8001890:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001894:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 800189c:	b082      	sub	sp, #8
            : ( odr <=  60.0f ) ? LSM6DS0_ACC_GYRO_ODR_G_60Hz
 800189e:	d807      	bhi.n	80018b0 <LSM6DS0_G_Sensor_Enable+0x30>
 80018a0:	2120      	movs	r1, #32
 80018a2:	4604      	mov	r4, r0
            : ( odr <= 119.0f ) ? LSM6DS0_ACC_GYRO_ODR_G_119Hz
            : ( odr <= 238.0f ) ? LSM6DS0_ACC_GYRO_ODR_G_238Hz
            : ( odr <= 476.0f ) ? LSM6DS0_ACC_GYRO_ODR_G_476Hz
            :                     LSM6DS0_ACC_GYRO_ODR_G_952Hz;

  if ( LSM6DS0_ACC_GYRO_W_GyroDataRate( (void *)handle, new_odr ) == MEMS_ERROR )
 80018a4:	f7fe fec0 	bl	8000628 <LSM6DS0_ACC_GYRO_W_GyroDataRate>
 80018a8:	bb08      	cbnz	r0, 80018ee <LSM6DS0_G_Sensor_Enable+0x6e>
    return COMPONENT_ERROR;
 80018aa:	2001      	movs	r0, #1
}
 80018ac:	b002      	add	sp, #8
 80018ae:	bd70      	pop	{r4, r5, r6, pc}
            : ( odr <=  60.0f ) ? LSM6DS0_ACC_GYRO_ODR_G_60Hz
 80018b0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001974 <LSM6DS0_G_Sensor_Enable+0xf4>
 80018b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018bc:	d911      	bls.n	80018e2 <LSM6DS0_G_Sensor_Enable+0x62>
 80018be:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001978 <LSM6DS0_G_Sensor_Enable+0xf8>
 80018c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ca:	d92c      	bls.n	8001926 <LSM6DS0_G_Sensor_Enable+0xa6>
 80018cc:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800197c <LSM6DS0_G_Sensor_Enable+0xfc>
 80018d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018d8:	d830      	bhi.n	800193c <LSM6DS0_G_Sensor_Enable+0xbc>
 80018da:	2180      	movs	r1, #128	; 0x80
 80018dc:	e7e1      	b.n	80018a2 <LSM6DS0_G_Sensor_Enable+0x22>
    return COMPONENT_OK;
 80018de:	2000      	movs	r0, #0
}
 80018e0:	4770      	bx	lr
            : ( odr <=  60.0f ) ? LSM6DS0_ACC_GYRO_ODR_G_60Hz
 80018e2:	2140      	movs	r1, #64	; 0x40
 80018e4:	4604      	mov	r4, r0
  if ( LSM6DS0_ACC_GYRO_W_GyroDataRate( (void *)handle, new_odr ) == MEMS_ERROR )
 80018e6:	f7fe fe9f 	bl	8000628 <LSM6DS0_ACC_GYRO_W_GyroDataRate>
 80018ea:	2800      	cmp	r0, #0
 80018ec:	d0dd      	beq.n	80018aa <LSM6DS0_G_Sensor_Enable+0x2a>
  if ( LSM6DS0_ACC_GYRO_R_GyroDataRate( (void *)handle, &odr_low_level ) == MEMS_ERROR )
 80018ee:	f10d 0107 	add.w	r1, sp, #7
 80018f2:	4620      	mov	r0, r4
  {
    return COMPONENT_ERROR;
  }

  if(LSM6DS0_G_Get_ODR( handle, &pComponentData->comboData->lastGyroODR ) == COMPONENT_ERROR )
 80018f4:	686e      	ldr	r6, [r5, #4]
  if ( LSM6DS0_ACC_GYRO_R_GyroDataRate( (void *)handle, &odr_low_level ) == MEMS_ERROR )
 80018f6:	f7fe feb9 	bl	800066c <LSM6DS0_ACC_GYRO_R_GyroDataRate>
 80018fa:	2800      	cmp	r0, #0
 80018fc:	d0d5      	beq.n	80018aa <LSM6DS0_G_Sensor_Enable+0x2a>
  switch( odr_low_level )
 80018fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001902:	2b60      	cmp	r3, #96	; 0x60
 8001904:	d02a      	beq.n	800195c <LSM6DS0_G_Sensor_Enable+0xdc>
 8001906:	d910      	bls.n	800192a <LSM6DS0_G_Sensor_Enable+0xaa>
 8001908:	2ba0      	cmp	r3, #160	; 0xa0
 800190a:	d024      	beq.n	8001956 <LSM6DS0_G_Sensor_Enable+0xd6>
 800190c:	2bc0      	cmp	r3, #192	; 0xc0
 800190e:	d01f      	beq.n	8001950 <LSM6DS0_G_Sensor_Enable+0xd0>
 8001910:	2b80      	cmp	r3, #128	; 0x80
 8001912:	d10f      	bne.n	8001934 <LSM6DS0_G_Sensor_Enable+0xb4>
      *odr = 238.0f;
 8001914:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <LSM6DS0_G_Sensor_Enable+0x100>)
 8001916:	6073      	str	r3, [r6, #4]
  pComponentData->comboData->isGyroEnabled = 1;
 8001918:	686a      	ldr	r2, [r5, #4]
 800191a:	2301      	movs	r3, #1
  return COMPONENT_OK;
 800191c:	2000      	movs	r0, #0
  pComponentData->comboData->isGyroEnabled = 1;
 800191e:	7013      	strb	r3, [r2, #0]
  handle->isEnabled = 1;
 8001920:	71a3      	strb	r3, [r4, #6]
}
 8001922:	b002      	add	sp, #8
 8001924:	bd70      	pop	{r4, r5, r6, pc}
            : ( odr <=  60.0f ) ? LSM6DS0_ACC_GYRO_ODR_G_60Hz
 8001926:	2160      	movs	r1, #96	; 0x60
 8001928:	e7bb      	b.n	80018a2 <LSM6DS0_G_Sensor_Enable+0x22>
  switch( odr_low_level )
 800192a:	2b20      	cmp	r3, #32
 800192c:	d01f      	beq.n	800196e <LSM6DS0_G_Sensor_Enable+0xee>
 800192e:	2b40      	cmp	r3, #64	; 0x40
 8001930:	d01a      	beq.n	8001968 <LSM6DS0_G_Sensor_Enable+0xe8>
 8001932:	b1b3      	cbz	r3, 8001962 <LSM6DS0_G_Sensor_Enable+0xe2>
      *odr =  -1.0f;
 8001934:	4b13      	ldr	r3, [pc, #76]	; (8001984 <LSM6DS0_G_Sensor_Enable+0x104>)
 8001936:	6073      	str	r3, [r6, #4]
    return COMPONENT_ERROR;
 8001938:	2001      	movs	r0, #1
 800193a:	e7b7      	b.n	80018ac <LSM6DS0_G_Sensor_Enable+0x2c>
            : ( odr <=  60.0f ) ? LSM6DS0_ACC_GYRO_ODR_G_60Hz
 800193c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001988 <LSM6DS0_G_Sensor_Enable+0x108>
 8001940:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001944:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001948:	bf94      	ite	ls
 800194a:	21a0      	movls	r1, #160	; 0xa0
 800194c:	21c0      	movhi	r1, #192	; 0xc0
 800194e:	e7a8      	b.n	80018a2 <LSM6DS0_G_Sensor_Enable+0x22>
      *odr = 952.0f;
 8001950:	4b0e      	ldr	r3, [pc, #56]	; (800198c <LSM6DS0_G_Sensor_Enable+0x10c>)
 8001952:	6073      	str	r3, [r6, #4]
 8001954:	e7e0      	b.n	8001918 <LSM6DS0_G_Sensor_Enable+0x98>
      *odr = 476.0f;
 8001956:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <LSM6DS0_G_Sensor_Enable+0x110>)
 8001958:	6073      	str	r3, [r6, #4]
 800195a:	e7dd      	b.n	8001918 <LSM6DS0_G_Sensor_Enable+0x98>
      *odr = 119.0f;
 800195c:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <LSM6DS0_G_Sensor_Enable+0x114>)
 800195e:	6073      	str	r3, [r6, #4]
 8001960:	e7da      	b.n	8001918 <LSM6DS0_G_Sensor_Enable+0x98>
      *odr =   0.0f;
 8001962:	2300      	movs	r3, #0
 8001964:	6073      	str	r3, [r6, #4]
 8001966:	e7d7      	b.n	8001918 <LSM6DS0_G_Sensor_Enable+0x98>
      *odr =  60.0f;
 8001968:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <LSM6DS0_G_Sensor_Enable+0x118>)
 800196a:	6073      	str	r3, [r6, #4]
 800196c:	e7d4      	b.n	8001918 <LSM6DS0_G_Sensor_Enable+0x98>
      *odr =  15.0f;
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <LSM6DS0_G_Sensor_Enable+0x11c>)
 8001970:	6073      	str	r3, [r6, #4]
 8001972:	e7d1      	b.n	8001918 <LSM6DS0_G_Sensor_Enable+0x98>
 8001974:	42700000 	.word	0x42700000
 8001978:	42ee0000 	.word	0x42ee0000
 800197c:	436e0000 	.word	0x436e0000
 8001980:	436e0000 	.word	0x436e0000
 8001984:	bf800000 	.word	0xbf800000
 8001988:	43ee0000 	.word	0x43ee0000
 800198c:	446e0000 	.word	0x446e0000
 8001990:	43ee0000 	.word	0x43ee0000
 8001994:	42ee0000 	.word	0x42ee0000
 8001998:	42700000 	.word	0x42700000
 800199c:	41700000 	.word	0x41700000

080019a0 <LSM6DS0_X_Init>:
{
 80019a0:	b530      	push	{r4, r5, lr}
 80019a2:	b083      	sub	sp, #12
  uint8_t who_am_i = 0x00;
 80019a4:	a902      	add	r1, sp, #8
 80019a6:	2400      	movs	r4, #0
 80019a8:	f801 4d01 	strb.w	r4, [r1, #-1]!
{
 80019ac:	4605      	mov	r5, r0
  if ( LSM6DS0_ACC_GYRO_R_WHO_AM_I_( (void *)handle, ( uint8_t* )who_am_i ) == MEMS_ERROR )
 80019ae:	f7fe fdff 	bl	80005b0 <LSM6DS0_ACC_GYRO_R_WHO_AM_I_>
 80019b2:	b120      	cbz	r0, 80019be <LSM6DS0_X_Init+0x1e>
  if ( who_am_i != handle->who_am_i )
 80019b4:	782a      	ldrb	r2, [r5, #0]
 80019b6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d002      	beq.n	80019c4 <LSM6DS0_X_Init+0x24>
    return COMPONENT_ERROR;
 80019be:	2001      	movs	r0, #1
}
 80019c0:	b003      	add	sp, #12
 80019c2:	bd30      	pop	{r4, r5, pc}
  if ( LSM6DS0_ACC_GYRO_W_AutoIndexOnMultiAccess( (void *)handle, LSM6DS0_ACC_GYRO_IF_ADD_INC_ENABLE ) == MEMS_ERROR )
 80019c4:	2104      	movs	r1, #4
 80019c6:	4628      	mov	r0, r5
 80019c8:	f7ff f86a 	bl	8000aa0 <LSM6DS0_ACC_GYRO_W_AutoIndexOnMultiAccess>
 80019cc:	2800      	cmp	r0, #0
 80019ce:	d0f6      	beq.n	80019be <LSM6DS0_X_Init+0x1e>
  LSM6DS0_X_Data_t *pComponentData = ( LSM6DS0_X_Data_t * )pData->pComponentData;
 80019d0:	68ab      	ldr	r3, [r5, #8]
      pComponentData->Previous_ODR = 119.0f;
 80019d2:	4a15      	ldr	r2, [pc, #84]	; (8001a28 <LSM6DS0_X_Init+0x88>)
 80019d4:	681b      	ldr	r3, [r3, #0]
  if ( LSM6DS0_ACC_GYRO_W_BlockDataUpdate( (void *)handle, LSM6DS0_ACC_GYRO_BDU_ENABLE ) == MEMS_ERROR )
 80019d6:	2140      	movs	r1, #64	; 0x40
      pComponentData->Previous_ODR = 119.0f;
 80019d8:	601a      	str	r2, [r3, #0]
  if ( LSM6DS0_ACC_GYRO_W_BlockDataUpdate( (void *)handle, LSM6DS0_ACC_GYRO_BDU_ENABLE ) == MEMS_ERROR )
 80019da:	4628      	mov	r0, r5
 80019dc:	f7fe feba 	bl	8000754 <LSM6DS0_ACC_GYRO_W_BlockDataUpdate>
 80019e0:	2800      	cmp	r0, #0
 80019e2:	d0ec      	beq.n	80019be <LSM6DS0_X_Init+0x1e>
  if ( LSM6DS0_ACC_GYRO_W_AccelerometerDataRate( (void *)handle, LSM6DS0_ACC_GYRO_ODR_XL_POWER_DOWN ) == MEMS_ERROR )
 80019e4:	4621      	mov	r1, r4
 80019e6:	4628      	mov	r0, r5
 80019e8:	f7fe fe82 	bl	80006f0 <LSM6DS0_ACC_GYRO_W_AccelerometerDataRate>
 80019ec:	2800      	cmp	r0, #0
 80019ee:	d0e6      	beq.n	80019be <LSM6DS0_X_Init+0x1e>
  if ( LSM6DS0_ACC_GYRO_W_AccelerometerFullScale( (void *)handle, new_fs ) == MEMS_ERROR )
 80019f0:	4621      	mov	r1, r4
 80019f2:	4628      	mov	r0, r5
 80019f4:	f7fe fe4a 	bl	800068c <LSM6DS0_ACC_GYRO_W_AccelerometerFullScale>
 80019f8:	2800      	cmp	r0, #0
 80019fa:	d0e0      	beq.n	80019be <LSM6DS0_X_Init+0x1e>
  if ( LSM6DS0_ACC_GYRO_W_AccelerometerAxisX( (void *)handle,
 80019fc:	2108      	movs	r1, #8
 80019fe:	4628      	mov	r0, r5
 8001a00:	f7fe ffb8 	bl	8000974 <LSM6DS0_ACC_GYRO_W_AccelerometerAxisX>
 8001a04:	2800      	cmp	r0, #0
 8001a06:	d0da      	beq.n	80019be <LSM6DS0_X_Init+0x1e>
  if ( LSM6DS0_ACC_GYRO_W_AccelerometerAxisY( (void *)handle,
 8001a08:	2110      	movs	r1, #16
 8001a0a:	4628      	mov	r0, r5
 8001a0c:	f7fe ffe4 	bl	80009d8 <LSM6DS0_ACC_GYRO_W_AccelerometerAxisY>
 8001a10:	2800      	cmp	r0, #0
 8001a12:	d0d4      	beq.n	80019be <LSM6DS0_X_Init+0x1e>
  if ( LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ( (void *)handle,
 8001a14:	2120      	movs	r1, #32
 8001a16:	4628      	mov	r0, r5
 8001a18:	f7ff f810 	bl	8000a3c <LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ>
 8001a1c:	2800      	cmp	r0, #0
 8001a1e:	d0ce      	beq.n	80019be <LSM6DS0_X_Init+0x1e>
  handle->isInitialized = 1;
 8001a20:	2301      	movs	r3, #1
  return COMPONENT_OK;
 8001a22:	4620      	mov	r0, r4
  handle->isInitialized = 1;
 8001a24:	716b      	strb	r3, [r5, #5]
  return COMPONENT_OK;
 8001a26:	e7cb      	b.n	80019c0 <LSM6DS0_X_Init+0x20>
 8001a28:	42ee0000 	.word	0x42ee0000

08001a2c <LSM6DS0_G_Init>:
{
 8001a2c:	b530      	push	{r4, r5, lr}
 8001a2e:	b083      	sub	sp, #12
  uint8_t who_am_i = 0x00;
 8001a30:	a902      	add	r1, sp, #8
 8001a32:	2400      	movs	r4, #0
 8001a34:	f801 4d01 	strb.w	r4, [r1, #-1]!
{
 8001a38:	4605      	mov	r5, r0
  if ( LSM6DS0_ACC_GYRO_R_WHO_AM_I_( (void *)handle, ( uint8_t* )who_am_i ) == MEMS_ERROR )
 8001a3a:	f7fe fdb9 	bl	80005b0 <LSM6DS0_ACC_GYRO_R_WHO_AM_I_>
 8001a3e:	b120      	cbz	r0, 8001a4a <LSM6DS0_G_Init+0x1e>
  if ( who_am_i != handle->who_am_i )
 8001a40:	782a      	ldrb	r2, [r5, #0]
 8001a42:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d002      	beq.n	8001a50 <LSM6DS0_G_Init+0x24>
    return COMPONENT_ERROR;
 8001a4a:	2001      	movs	r0, #1
}
 8001a4c:	b003      	add	sp, #12
 8001a4e:	bd30      	pop	{r4, r5, pc}
  if ( LSM6DS0_ACC_GYRO_W_AutoIndexOnMultiAccess( (void *)handle, LSM6DS0_ACC_GYRO_IF_ADD_INC_ENABLE ) == MEMS_ERROR )
 8001a50:	2104      	movs	r1, #4
 8001a52:	4628      	mov	r0, r5
 8001a54:	f7ff f824 	bl	8000aa0 <LSM6DS0_ACC_GYRO_W_AutoIndexOnMultiAccess>
 8001a58:	2800      	cmp	r0, #0
 8001a5a:	d0f6      	beq.n	8001a4a <LSM6DS0_G_Init+0x1e>
  LSM6DS0_G_Data_t *pComponentData = ( LSM6DS0_G_Data_t * )pData->pComponentData;
 8001a5c:	68aa      	ldr	r2, [r5, #8]
      pComponentData->Previous_ODR = 119.0f;
 8001a5e:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <LSM6DS0_G_Init+0x8c>)
  LSM6DS0_G_Data_t *pComponentData = ( LSM6DS0_G_Data_t * )pData->pComponentData;
 8001a60:	6812      	ldr	r2, [r2, #0]
      pComponentData->comboData->lastGyroODR = 119.0f;
 8001a62:	6850      	ldr	r0, [r2, #4]
      pComponentData->Previous_ODR = 119.0f;
 8001a64:	6013      	str	r3, [r2, #0]
  if ( LSM6DS0_ACC_GYRO_W_BlockDataUpdate( (void *)handle, LSM6DS0_ACC_GYRO_BDU_ENABLE ) == MEMS_ERROR )
 8001a66:	2140      	movs	r1, #64	; 0x40
      pComponentData->comboData->lastGyroODR = 119.0f;
 8001a68:	6043      	str	r3, [r0, #4]
  if ( LSM6DS0_ACC_GYRO_W_BlockDataUpdate( (void *)handle, LSM6DS0_ACC_GYRO_BDU_ENABLE ) == MEMS_ERROR )
 8001a6a:	4628      	mov	r0, r5
 8001a6c:	f7fe fe72 	bl	8000754 <LSM6DS0_ACC_GYRO_W_BlockDataUpdate>
 8001a70:	2800      	cmp	r0, #0
 8001a72:	d0ea      	beq.n	8001a4a <LSM6DS0_G_Init+0x1e>
  if ( LSM6DS0_ACC_GYRO_W_GyroDataRate( (void *)handle, LSM6DS0_ACC_GYRO_ODR_G_POWER_DOWN ) == MEMS_ERROR )
 8001a74:	4621      	mov	r1, r4
 8001a76:	4628      	mov	r0, r5
 8001a78:	f7fe fdd6 	bl	8000628 <LSM6DS0_ACC_GYRO_W_GyroDataRate>
 8001a7c:	2800      	cmp	r0, #0
 8001a7e:	d0e4      	beq.n	8001a4a <LSM6DS0_G_Init+0x1e>
  if ( LSM6DS0_ACC_GYRO_W_GyroFullScale( (void *)handle, new_fs ) == MEMS_ERROR )
 8001a80:	2118      	movs	r1, #24
 8001a82:	4628      	mov	r0, r5
 8001a84:	f7fe fd9e 	bl	80005c4 <LSM6DS0_ACC_GYRO_W_GyroFullScale>
 8001a88:	2800      	cmp	r0, #0
 8001a8a:	d0de      	beq.n	8001a4a <LSM6DS0_G_Init+0x1e>
  if ( LSM6DS0_ACC_GYRO_W_GyroAxisX( (void *)handle,
 8001a8c:	2108      	movs	r1, #8
 8001a8e:	4628      	mov	r0, r5
 8001a90:	f7fe feda 	bl	8000848 <LSM6DS0_ACC_GYRO_W_GyroAxisX>
 8001a94:	2800      	cmp	r0, #0
 8001a96:	d0d8      	beq.n	8001a4a <LSM6DS0_G_Init+0x1e>
  if ( LSM6DS0_ACC_GYRO_W_GyroAxisY( (void *)handle,
 8001a98:	2110      	movs	r1, #16
 8001a9a:	4628      	mov	r0, r5
 8001a9c:	f7fe ff06 	bl	80008ac <LSM6DS0_ACC_GYRO_W_GyroAxisY>
 8001aa0:	2800      	cmp	r0, #0
 8001aa2:	d0d2      	beq.n	8001a4a <LSM6DS0_G_Init+0x1e>
  if ( LSM6DS0_ACC_GYRO_W_GyroAxisZ( (void *)handle,
 8001aa4:	2120      	movs	r1, #32
 8001aa6:	4628      	mov	r0, r5
 8001aa8:	f7fe ff32 	bl	8000910 <LSM6DS0_ACC_GYRO_W_GyroAxisZ>
 8001aac:	2800      	cmp	r0, #0
 8001aae:	d0cc      	beq.n	8001a4a <LSM6DS0_G_Init+0x1e>
  handle->isInitialized = 1;
 8001ab0:	2301      	movs	r3, #1
  return COMPONENT_OK;
 8001ab2:	4620      	mov	r0, r4
  handle->isInitialized = 1;
 8001ab4:	716b      	strb	r3, [r5, #5]
  return COMPONENT_OK;
 8001ab6:	e7c9      	b.n	8001a4c <LSM6DS0_G_Init+0x20>
 8001ab8:	42ee0000 	.word	0x42ee0000

08001abc <LSM6DS0_G_Set_ODR>:
{
 8001abc:	b530      	push	{r4, r5, lr}
  if(handle->isEnabled == 1)
 8001abe:	7983      	ldrb	r3, [r0, #6]
 8001ac0:	6882      	ldr	r2, [r0, #8]
 8001ac2:	2b01      	cmp	r3, #1
{
 8001ac4:	b083      	sub	sp, #12
 8001ac6:	6815      	ldr	r5, [r2, #0]
  if(handle->isEnabled == 1)
 8001ac8:	d014      	beq.n	8001af4 <LSM6DS0_G_Set_ODR+0x38>
  switch( odr )
 8001aca:	2904      	cmp	r1, #4
 8001acc:	d819      	bhi.n	8001b02 <LSM6DS0_G_Set_ODR+0x46>
 8001ace:	e8df f001 	tbb	[pc, r1]
 8001ad2:	0a0a      	.short	0x0a0a
 8001ad4:	0303      	.short	0x0303
 8001ad6:	37          	.byte	0x37
 8001ad7:	00          	.byte	0x00
      pComponentData->comboData->lastGyroODR = 60.0f;
 8001ad8:	686a      	ldr	r2, [r5, #4]
      pComponentData->Previous_ODR = 60.0f;
 8001ada:	4b2f      	ldr	r3, [pc, #188]	; (8001b98 <LSM6DS0_G_Set_ODR+0xdc>)
 8001adc:	602b      	str	r3, [r5, #0]
  return COMPONENT_OK;
 8001ade:	2000      	movs	r0, #0
      pComponentData->comboData->lastGyroODR = 60.0f;
 8001ae0:	6053      	str	r3, [r2, #4]
}
 8001ae2:	b003      	add	sp, #12
 8001ae4:	bd30      	pop	{r4, r5, pc}
      pComponentData->Previous_ODR = 15.0f;
 8001ae6:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <LSM6DS0_G_Set_ODR+0xe0>)
      pComponentData->comboData->lastGyroODR = 15.0f;
 8001ae8:	686a      	ldr	r2, [r5, #4]
      pComponentData->Previous_ODR = 15.0f;
 8001aea:	602b      	str	r3, [r5, #0]
  return COMPONENT_OK;
 8001aec:	2000      	movs	r0, #0
      pComponentData->comboData->lastGyroODR = 15.0f;
 8001aee:	6053      	str	r3, [r2, #4]
}
 8001af0:	b003      	add	sp, #12
 8001af2:	bd30      	pop	{r4, r5, pc}
  switch( odr )
 8001af4:	2904      	cmp	r1, #4
 8001af6:	d804      	bhi.n	8001b02 <LSM6DS0_G_Set_ODR+0x46>
 8001af8:	e8df f001 	tbb	[pc, r1]
 8001afc:	06062b2b 	.word	0x06062b2b
 8001b00:	29          	.byte	0x29
 8001b01:	00          	.byte	0x00
      return COMPONENT_ERROR;
 8001b02:	2001      	movs	r0, #1
}
 8001b04:	b003      	add	sp, #12
 8001b06:	bd30      	pop	{r4, r5, pc}
      new_odr = LSM6DS0_ACC_GYRO_ODR_G_60Hz;
 8001b08:	2140      	movs	r1, #64	; 0x40
 8001b0a:	4604      	mov	r4, r0
  if ( LSM6DS0_ACC_GYRO_W_GyroDataRate( (void *)handle, new_odr ) == MEMS_ERROR )
 8001b0c:	f7fe fd8c 	bl	8000628 <LSM6DS0_ACC_GYRO_W_GyroDataRate>
 8001b10:	2800      	cmp	r0, #0
 8001b12:	d0f6      	beq.n	8001b02 <LSM6DS0_G_Set_ODR+0x46>
  if ( LSM6DS0_ACC_GYRO_R_GyroDataRate( (void *)handle, &odr_low_level ) == MEMS_ERROR )
 8001b14:	4620      	mov	r0, r4
 8001b16:	f10d 0107 	add.w	r1, sp, #7
  if(LSM6DS0_G_Get_ODR( handle, &pComponentData->comboData->lastGyroODR ) == COMPONENT_ERROR )
 8001b1a:	686c      	ldr	r4, [r5, #4]
  if ( LSM6DS0_ACC_GYRO_R_GyroDataRate( (void *)handle, &odr_low_level ) == MEMS_ERROR )
 8001b1c:	f7fe fda6 	bl	800066c <LSM6DS0_ACC_GYRO_R_GyroDataRate>
 8001b20:	2800      	cmp	r0, #0
 8001b22:	d0ee      	beq.n	8001b02 <LSM6DS0_G_Set_ODR+0x46>
  switch( odr_low_level )
 8001b24:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001b28:	2860      	cmp	r0, #96	; 0x60
 8001b2a:	d014      	beq.n	8001b56 <LSM6DS0_G_Set_ODR+0x9a>
 8001b2c:	d817      	bhi.n	8001b5e <LSM6DS0_G_Set_ODR+0xa2>
 8001b2e:	2820      	cmp	r0, #32
 8001b30:	d01f      	beq.n	8001b72 <LSM6DS0_G_Set_ODR+0xb6>
 8001b32:	2840      	cmp	r0, #64	; 0x40
 8001b34:	d02c      	beq.n	8001b90 <LSM6DS0_G_Set_ODR+0xd4>
 8001b36:	b340      	cbz	r0, 8001b8a <LSM6DS0_G_Set_ODR+0xce>
      *odr =  -1.0f;
 8001b38:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <LSM6DS0_G_Set_ODR+0xe4>)
 8001b3a:	6063      	str	r3, [r4, #4]
      return COMPONENT_ERROR;
 8001b3c:	2001      	movs	r0, #1
 8001b3e:	e7d0      	b.n	8001ae2 <LSM6DS0_G_Set_ODR+0x26>
      pComponentData->Previous_ODR = 119.0f;
 8001b40:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <LSM6DS0_G_Set_ODR+0xe8>)
      pComponentData->comboData->lastGyroODR = 119.0f;
 8001b42:	686a      	ldr	r2, [r5, #4]
      pComponentData->Previous_ODR = 119.0f;
 8001b44:	602b      	str	r3, [r5, #0]
  return COMPONENT_OK;
 8001b46:	2000      	movs	r0, #0
      pComponentData->comboData->lastGyroODR = 119.0f;
 8001b48:	6053      	str	r3, [r2, #4]
}
 8001b4a:	b003      	add	sp, #12
 8001b4c:	bd30      	pop	{r4, r5, pc}
      new_odr = LSM6DS0_ACC_GYRO_ODR_G_119Hz;
 8001b4e:	2160      	movs	r1, #96	; 0x60
 8001b50:	e7db      	b.n	8001b0a <LSM6DS0_G_Set_ODR+0x4e>
      new_odr = LSM6DS0_ACC_GYRO_ODR_G_15Hz;
 8001b52:	2120      	movs	r1, #32
 8001b54:	e7d9      	b.n	8001b0a <LSM6DS0_G_Set_ODR+0x4e>
      *odr = 119.0f;
 8001b56:	4b13      	ldr	r3, [pc, #76]	; (8001ba4 <LSM6DS0_G_Set_ODR+0xe8>)
 8001b58:	6063      	str	r3, [r4, #4]
  return COMPONENT_OK;
 8001b5a:	2000      	movs	r0, #0
 8001b5c:	e7c1      	b.n	8001ae2 <LSM6DS0_G_Set_ODR+0x26>
  switch( odr_low_level )
 8001b5e:	28a0      	cmp	r0, #160	; 0xa0
 8001b60:	d00f      	beq.n	8001b82 <LSM6DS0_G_Set_ODR+0xc6>
 8001b62:	28c0      	cmp	r0, #192	; 0xc0
 8001b64:	d009      	beq.n	8001b7a <LSM6DS0_G_Set_ODR+0xbe>
 8001b66:	2880      	cmp	r0, #128	; 0x80
 8001b68:	d1e6      	bne.n	8001b38 <LSM6DS0_G_Set_ODR+0x7c>
      *odr = 238.0f;
 8001b6a:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <LSM6DS0_G_Set_ODR+0xec>)
 8001b6c:	6063      	str	r3, [r4, #4]
  return COMPONENT_OK;
 8001b6e:	2000      	movs	r0, #0
 8001b70:	e7b7      	b.n	8001ae2 <LSM6DS0_G_Set_ODR+0x26>
      *odr =  15.0f;
 8001b72:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <LSM6DS0_G_Set_ODR+0xe0>)
 8001b74:	6063      	str	r3, [r4, #4]
  return COMPONENT_OK;
 8001b76:	2000      	movs	r0, #0
 8001b78:	e7b3      	b.n	8001ae2 <LSM6DS0_G_Set_ODR+0x26>
      *odr = 952.0f;
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <LSM6DS0_G_Set_ODR+0xf0>)
 8001b7c:	6063      	str	r3, [r4, #4]
  return COMPONENT_OK;
 8001b7e:	2000      	movs	r0, #0
 8001b80:	e7af      	b.n	8001ae2 <LSM6DS0_G_Set_ODR+0x26>
      *odr = 476.0f;
 8001b82:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <LSM6DS0_G_Set_ODR+0xf4>)
 8001b84:	6063      	str	r3, [r4, #4]
  return COMPONENT_OK;
 8001b86:	2000      	movs	r0, #0
 8001b88:	e7ab      	b.n	8001ae2 <LSM6DS0_G_Set_ODR+0x26>
      *odr =   0.0f;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	6063      	str	r3, [r4, #4]
 8001b8e:	e7a8      	b.n	8001ae2 <LSM6DS0_G_Set_ODR+0x26>
      *odr =  60.0f;
 8001b90:	4b01      	ldr	r3, [pc, #4]	; (8001b98 <LSM6DS0_G_Set_ODR+0xdc>)
 8001b92:	6063      	str	r3, [r4, #4]
  return COMPONENT_OK;
 8001b94:	2000      	movs	r0, #0
 8001b96:	e7a4      	b.n	8001ae2 <LSM6DS0_G_Set_ODR+0x26>
 8001b98:	42700000 	.word	0x42700000
 8001b9c:	41700000 	.word	0x41700000
 8001ba0:	bf800000 	.word	0xbf800000
 8001ba4:	42ee0000 	.word	0x42ee0000
 8001ba8:	436e0000 	.word	0x436e0000
 8001bac:	446e0000 	.word	0x446e0000
 8001bb0:	43ee0000 	.word	0x43ee0000

08001bb4 <LSM6DS0_G_Set_ODR_Value>:
{
 8001bb4:	b530      	push	{r4, r5, lr}
  if(handle->isEnabled == 1)
 8001bb6:	7983      	ldrb	r3, [r0, #6]
 8001bb8:	6882      	ldr	r2, [r0, #8]
            : ( odr <=  60.0f ) ? LSM6DS0_ACC_GYRO_ODR_G_60Hz
 8001bba:	eef2 7a0e 	vmov.f32	s15, #46	; 0x41700000  15.0
  if(handle->isEnabled == 1)
 8001bbe:	2b01      	cmp	r3, #1
{
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	6815      	ldr	r5, [r2, #0]
            : ( odr <=  60.0f ) ? LSM6DS0_ACC_GYRO_ODR_G_60Hz
 8001bc4:	eeb4 0ae7 	vcmpe.f32	s0, s15
  if(handle->isEnabled == 1)
 8001bc8:	d02b      	beq.n	8001c22 <LSM6DS0_G_Set_ODR_Value+0x6e>

  GYRO_Data_t *pData = ( GYRO_Data_t * )handle->pData;
  LSM6DS0_G_Data_t *pComponentData = ( LSM6DS0_G_Data_t * )pData->pComponentData;

  pComponentData->Previous_ODR = ( odr <=  15.0f ) ? 15.0f
                                 : ( odr <=  60.0f ) ? 60.0f
 8001bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bce:	d807      	bhi.n	8001be0 <LSM6DS0_G_Set_ODR_Value+0x2c>
                                 : ( odr <= 119.0f ) ? 119.0f
                                 : ( odr <= 238.0f ) ? 238.0f
                                 : ( odr <= 476.0f ) ? 476.0f
                                 :                     952.0f;

  pComponentData->comboData->lastGyroODR = ( odr <=  15.0f ) ? 15.0f
 8001bd0:	686b      	ldr	r3, [r5, #4]
  pComponentData->Previous_ODR = ( odr <=  15.0f ) ? 15.0f
 8001bd2:	edc5 7a00 	vstr	s15, [r5]
  return COMPONENT_OK;
 8001bd6:	2000      	movs	r0, #0
  pComponentData->comboData->lastGyroODR = ( odr <=  15.0f ) ? 15.0f
 8001bd8:	edc3 7a01 	vstr	s15, [r3, #4]
}
 8001bdc:	b003      	add	sp, #12
 8001bde:	bd30      	pop	{r4, r5, pc}
                                 : ( odr <= 119.0f ) ? 119.0f
 8001be0:	eddf 7a43 	vldr	s15, [pc, #268]	; 8001cf0 <LSM6DS0_G_Set_ODR_Value+0x13c>
 8001be4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bec:	d9f0      	bls.n	8001bd0 <LSM6DS0_G_Set_ODR_Value+0x1c>
                                 : ( odr <= 238.0f ) ? 238.0f
 8001bee:	eddf 7a41 	vldr	s15, [pc, #260]	; 8001cf4 <LSM6DS0_G_Set_ODR_Value+0x140>
 8001bf2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bfa:	d9e9      	bls.n	8001bd0 <LSM6DS0_G_Set_ODR_Value+0x1c>
                                 : ( odr <= 476.0f ) ? 476.0f
 8001bfc:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8001cf8 <LSM6DS0_G_Set_ODR_Value+0x144>
 8001c00:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001c04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c08:	d9e2      	bls.n	8001bd0 <LSM6DS0_G_Set_ODR_Value+0x1c>
                                 :                     952.0f;
 8001c0a:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8001cfc <LSM6DS0_G_Set_ODR_Value+0x148>
 8001c0e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001d00 <LSM6DS0_G_Set_ODR_Value+0x14c>
 8001c12:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c1a:	bf88      	it	hi
 8001c1c:	eef0 7a47 	vmovhi.f32	s15, s14
 8001c20:	e7d6      	b.n	8001bd0 <LSM6DS0_G_Set_ODR_Value+0x1c>
            : ( odr <=  60.0f ) ? LSM6DS0_ACC_GYRO_ODR_G_60Hz
 8001c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c26:	d807      	bhi.n	8001c38 <LSM6DS0_G_Set_ODR_Value+0x84>
 8001c28:	2120      	movs	r1, #32
 8001c2a:	4604      	mov	r4, r0
  if ( LSM6DS0_ACC_GYRO_W_GyroDataRate( (void *)handle, new_odr ) == MEMS_ERROR )
 8001c2c:	f7fe fcfc 	bl	8000628 <LSM6DS0_ACC_GYRO_W_GyroDataRate>
 8001c30:	bb08      	cbnz	r0, 8001c76 <LSM6DS0_G_Set_ODR_Value+0xc2>
      return COMPONENT_ERROR;
 8001c32:	2001      	movs	r0, #1
}
 8001c34:	b003      	add	sp, #12
 8001c36:	bd30      	pop	{r4, r5, pc}
            : ( odr <=  60.0f ) ? LSM6DS0_ACC_GYRO_ODR_G_60Hz
 8001c38:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8001cf0 <LSM6DS0_G_Set_ODR_Value+0x13c>
 8001c3c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c44:	d92d      	bls.n	8001ca2 <LSM6DS0_G_Set_ODR_Value+0xee>
 8001c46:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8001cf4 <LSM6DS0_G_Set_ODR_Value+0x140>
 8001c4a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c52:	d928      	bls.n	8001ca6 <LSM6DS0_G_Set_ODR_Value+0xf2>
 8001c54:	eddf 7a28 	vldr	s15, [pc, #160]	; 8001cf8 <LSM6DS0_G_Set_ODR_Value+0x144>
 8001c58:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c60:	d92d      	bls.n	8001cbe <LSM6DS0_G_Set_ODR_Value+0x10a>
 8001c62:	eddf 7a26 	vldr	s15, [pc, #152]	; 8001cfc <LSM6DS0_G_Set_ODR_Value+0x148>
 8001c66:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8001c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6e:	bf94      	ite	ls
 8001c70:	21a0      	movls	r1, #160	; 0xa0
 8001c72:	21c0      	movhi	r1, #192	; 0xc0
 8001c74:	e7d9      	b.n	8001c2a <LSM6DS0_G_Set_ODR_Value+0x76>
  if ( LSM6DS0_ACC_GYRO_R_GyroDataRate( (void *)handle, &odr_low_level ) == MEMS_ERROR )
 8001c76:	4620      	mov	r0, r4
 8001c78:	f10d 0107 	add.w	r1, sp, #7
  if(LSM6DS0_G_Get_ODR( handle, &pComponentData->comboData->lastGyroODR ) == COMPONENT_ERROR )
 8001c7c:	686c      	ldr	r4, [r5, #4]
  if ( LSM6DS0_ACC_GYRO_R_GyroDataRate( (void *)handle, &odr_low_level ) == MEMS_ERROR )
 8001c7e:	f7fe fcf5 	bl	800066c <LSM6DS0_ACC_GYRO_R_GyroDataRate>
 8001c82:	2800      	cmp	r0, #0
 8001c84:	d0d5      	beq.n	8001c32 <LSM6DS0_G_Set_ODR_Value+0x7e>
  switch( odr_low_level )
 8001c86:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8001c8a:	2860      	cmp	r0, #96	; 0x60
 8001c8c:	d019      	beq.n	8001cc2 <LSM6DS0_G_Set_ODR_Value+0x10e>
 8001c8e:	d80c      	bhi.n	8001caa <LSM6DS0_G_Set_ODR_Value+0xf6>
 8001c90:	2820      	cmp	r0, #32
 8001c92:	d021      	beq.n	8001cd8 <LSM6DS0_G_Set_ODR_Value+0x124>
 8001c94:	2840      	cmp	r0, #64	; 0x40
 8001c96:	d01b      	beq.n	8001cd0 <LSM6DS0_G_Set_ODR_Value+0x11c>
 8001c98:	b1b8      	cbz	r0, 8001cca <LSM6DS0_G_Set_ODR_Value+0x116>
      *odr =  -1.0f;
 8001c9a:	4b1a      	ldr	r3, [pc, #104]	; (8001d04 <LSM6DS0_G_Set_ODR_Value+0x150>)
 8001c9c:	6063      	str	r3, [r4, #4]
      return COMPONENT_ERROR;
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	e79c      	b.n	8001bdc <LSM6DS0_G_Set_ODR_Value+0x28>
            : ( odr <=  60.0f ) ? LSM6DS0_ACC_GYRO_ODR_G_60Hz
 8001ca2:	2140      	movs	r1, #64	; 0x40
 8001ca4:	e7c1      	b.n	8001c2a <LSM6DS0_G_Set_ODR_Value+0x76>
 8001ca6:	2160      	movs	r1, #96	; 0x60
 8001ca8:	e7bf      	b.n	8001c2a <LSM6DS0_G_Set_ODR_Value+0x76>
  switch( odr_low_level )
 8001caa:	28a0      	cmp	r0, #160	; 0xa0
 8001cac:	d01c      	beq.n	8001ce8 <LSM6DS0_G_Set_ODR_Value+0x134>
 8001cae:	28c0      	cmp	r0, #192	; 0xc0
 8001cb0:	d016      	beq.n	8001ce0 <LSM6DS0_G_Set_ODR_Value+0x12c>
 8001cb2:	2880      	cmp	r0, #128	; 0x80
 8001cb4:	d1f1      	bne.n	8001c9a <LSM6DS0_G_Set_ODR_Value+0xe6>
      *odr = 238.0f;
 8001cb6:	4b14      	ldr	r3, [pc, #80]	; (8001d08 <LSM6DS0_G_Set_ODR_Value+0x154>)
 8001cb8:	6063      	str	r3, [r4, #4]
  return COMPONENT_OK;
 8001cba:	2000      	movs	r0, #0
 8001cbc:	e78e      	b.n	8001bdc <LSM6DS0_G_Set_ODR_Value+0x28>
            : ( odr <=  60.0f ) ? LSM6DS0_ACC_GYRO_ODR_G_60Hz
 8001cbe:	2180      	movs	r1, #128	; 0x80
 8001cc0:	e7b3      	b.n	8001c2a <LSM6DS0_G_Set_ODR_Value+0x76>
      *odr = 119.0f;
 8001cc2:	4b12      	ldr	r3, [pc, #72]	; (8001d0c <LSM6DS0_G_Set_ODR_Value+0x158>)
 8001cc4:	6063      	str	r3, [r4, #4]
  return COMPONENT_OK;
 8001cc6:	2000      	movs	r0, #0
 8001cc8:	e788      	b.n	8001bdc <LSM6DS0_G_Set_ODR_Value+0x28>
      *odr =   0.0f;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	6063      	str	r3, [r4, #4]
 8001cce:	e785      	b.n	8001bdc <LSM6DS0_G_Set_ODR_Value+0x28>
      *odr =  60.0f;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <LSM6DS0_G_Set_ODR_Value+0x15c>)
 8001cd2:	6063      	str	r3, [r4, #4]
  return COMPONENT_OK;
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	e781      	b.n	8001bdc <LSM6DS0_G_Set_ODR_Value+0x28>
      *odr =  15.0f;
 8001cd8:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <LSM6DS0_G_Set_ODR_Value+0x160>)
 8001cda:	6063      	str	r3, [r4, #4]
  return COMPONENT_OK;
 8001cdc:	2000      	movs	r0, #0
 8001cde:	e77d      	b.n	8001bdc <LSM6DS0_G_Set_ODR_Value+0x28>
      *odr = 952.0f;
 8001ce0:	4b0d      	ldr	r3, [pc, #52]	; (8001d18 <LSM6DS0_G_Set_ODR_Value+0x164>)
 8001ce2:	6063      	str	r3, [r4, #4]
  return COMPONENT_OK;
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	e779      	b.n	8001bdc <LSM6DS0_G_Set_ODR_Value+0x28>
      *odr = 476.0f;
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <LSM6DS0_G_Set_ODR_Value+0x168>)
 8001cea:	6063      	str	r3, [r4, #4]
  return COMPONENT_OK;
 8001cec:	2000      	movs	r0, #0
 8001cee:	e775      	b.n	8001bdc <LSM6DS0_G_Set_ODR_Value+0x28>
 8001cf0:	42700000 	.word	0x42700000
 8001cf4:	42ee0000 	.word	0x42ee0000
 8001cf8:	436e0000 	.word	0x436e0000
 8001cfc:	43ee0000 	.word	0x43ee0000
 8001d00:	446e0000 	.word	0x446e0000
 8001d04:	bf800000 	.word	0xbf800000
 8001d08:	436e0000 	.word	0x436e0000
 8001d0c:	42ee0000 	.word	0x42ee0000
 8001d10:	42700000 	.word	0x42700000
 8001d14:	41700000 	.word	0x41700000
 8001d18:	446e0000 	.word	0x446e0000
 8001d1c:	43ee0000 	.word	0x43ee0000

08001d20 <LSM6DS3_ACC_GYRO_WriteReg>:
*                                 length of buffer
* Output      : None
* Return      : None
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_WriteReg(void *handle, u8_t Reg, u8_t *Bufp, u16_t len)
{
 8001d20:	b508      	push	{r3, lr}

  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8001d22:	f003 fd37 	bl	8005794 <Sensor_IO_Write>
  }
  else
  {
    return MEMS_SUCCESS;
  }
}
 8001d26:	fab0 f080 	clz	r0, r0
 8001d2a:	0940      	lsrs	r0, r0, #5
 8001d2c:	bd08      	pop	{r3, pc}
 8001d2e:	bf00      	nop

08001d30 <LSM6DS3_ACC_GYRO_ReadReg>:
*                                 length of buffer
* Output      : None
* Return      : None
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_ReadReg(void *handle, u8_t Reg, u8_t *Bufp, u16_t len)
{
 8001d30:	b508      	push	{r3, lr}

  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8001d32:	f003 fd7d 	bl	8005830 <Sensor_IO_Read>
  }
  else
  {
    return MEMS_SUCCESS;
  }
}
 8001d36:	fab0 f080 	clz	r0, r0
 8001d3a:	0940      	lsrs	r0, r0, #5
 8001d3c:	bd08      	pop	{r3, pc}
 8001d3e:	bf00      	nop

08001d40 <LSM6DS3_ACC_GYRO_R_WHO_AM_I>:
* Input          : Pointer to u8_t
* Output         : Status of WHO_AM_I_BIT
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_WHO_AM_I(void *handle, u8_t *value)
{
 8001d40:	b508      	push	{r3, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8001d42:	460a      	mov	r2, r1
 8001d44:	2301      	movs	r3, #1
 8001d46:	210f      	movs	r1, #15
 8001d48:	f003 fd72 	bl	8005830 <Sensor_IO_Read>

  *value &= LSM6DS3_ACC_GYRO_WHO_AM_I_BIT_MASK; //coerce
  *value = *value >> LSM6DS3_ACC_GYRO_WHO_AM_I_BIT_POSITION; //mask

  return MEMS_SUCCESS;
}
 8001d4c:	fab0 f080 	clz	r0, r0
 8001d50:	0940      	lsrs	r0, r0, #5
 8001d52:	bd08      	pop	{r3, pc}

08001d54 <LSM6DS3_ACC_GYRO_W_BDU>:
* Input          : LSM6DS3_ACC_GYRO_BDU_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_BDU(void *handle, LSM6DS3_ACC_GYRO_BDU_t newValue)
{
 8001d54:	b530      	push	{r4, r5, lr}
 8001d56:	b083      	sub	sp, #12
 8001d58:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8001d5a:	f10d 0207 	add.w	r2, sp, #7
 8001d5e:	2301      	movs	r3, #1
 8001d60:	2112      	movs	r1, #18
{
 8001d62:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8001d64:	f003 fd64 	bl	8005830 <Sensor_IO_Read>
 8001d68:	b110      	cbz	r0, 8001d70 <LSM6DS3_ACC_GYRO_W_BDU+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL3_C, &value, 1) )
    return MEMS_ERROR;
 8001d6a:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL3_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8001d6c:	b003      	add	sp, #12
 8001d6e:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_BDU_MASK;
 8001d70:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  value |= newValue;
 8001d78:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8001d7a:	f10d 0207 	add.w	r2, sp, #7
 8001d7e:	4628      	mov	r0, r5
 8001d80:	2301      	movs	r3, #1
 8001d82:	2112      	movs	r1, #18
  value |= newValue;
 8001d84:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8001d88:	f003 fd04 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8001d8c:	fab0 f080 	clz	r0, r0
 8001d90:	0940      	lsrs	r0, r0, #5
}
 8001d92:	b003      	add	sp, #12
 8001d94:	bd30      	pop	{r4, r5, pc}
 8001d96:	bf00      	nop

08001d98 <LSM6DS3_ACC_GYRO_W_FS_XL>:
* Input          : LSM6DS3_ACC_GYRO_FS_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FS_XL(void *handle, LSM6DS3_ACC_GYRO_FS_XL_t newValue)
{
 8001d98:	b530      	push	{r4, r5, lr}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8001d9e:	f10d 0207 	add.w	r2, sp, #7
 8001da2:	2301      	movs	r3, #1
 8001da4:	2110      	movs	r1, #16
{
 8001da6:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8001da8:	f003 fd42 	bl	8005830 <Sensor_IO_Read>
 8001dac:	b110      	cbz	r0, 8001db4 <LSM6DS3_ACC_GYRO_W_FS_XL+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
    return MEMS_ERROR;
 8001dae:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8001db0:	b003      	add	sp, #12
 8001db2:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_FS_XL_MASK;
 8001db4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001db8:	f023 030c 	bic.w	r3, r3, #12
  value |= newValue;
 8001dbc:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8001dbe:	f10d 0207 	add.w	r2, sp, #7
 8001dc2:	4628      	mov	r0, r5
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	2110      	movs	r1, #16
  value |= newValue;
 8001dc8:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8001dcc:	f003 fce2 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8001dd0:	fab0 f080 	clz	r0, r0
 8001dd4:	0940      	lsrs	r0, r0, #5
}
 8001dd6:	b003      	add	sp, #12
 8001dd8:	bd30      	pop	{r4, r5, pc}
 8001dda:	bf00      	nop

08001ddc <LSM6DS3_ACC_GYRO_R_FS_XL>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_FS_XL_t
* Output         : Status of FS_XL see LSM6DS3_ACC_GYRO_FS_XL_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_FS_XL(void *handle, LSM6DS3_ACC_GYRO_FS_XL_t *value)
{
 8001ddc:	b510      	push	{r4, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8001dde:	460a      	mov	r2, r1
{
 8001de0:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8001de2:	2301      	movs	r3, #1
 8001de4:	2110      	movs	r1, #16
 8001de6:	f003 fd23 	bl	8005830 <Sensor_IO_Read>
 8001dea:	b928      	cbnz	r0, 8001df8 <LSM6DS3_ACC_GYRO_R_FS_XL+0x1c>
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_FS_XL_MASK; //mask
 8001dec:	7823      	ldrb	r3, [r4, #0]
 8001dee:	f003 030c 	and.w	r3, r3, #12
 8001df2:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 8001df4:	2001      	movs	r0, #1
}
 8001df6:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 8001df8:	2000      	movs	r0, #0
}
 8001dfa:	bd10      	pop	{r4, pc}

08001dfc <LSM6DS3_ACC_GYRO_GetRawAccData>:
* Input          : pointer to [u8_t]
* Output         : GetAccData buffer u8_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_GetRawAccData(void *handle, u8_t *buff)
{
 8001dfc:	b570      	push	{r4, r5, r6, lr}
 8001dfe:	4606      	mov	r6, r0
 8001e00:	460d      	mov	r5, r1
 8001e02:	2428      	movs	r4, #40	; 0x28
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8001e04:	462a      	mov	r2, r5
 8001e06:	2301      	movs	r3, #1
 8001e08:	4621      	mov	r1, r4
 8001e0a:	4630      	mov	r0, r6
 8001e0c:	f003 fd10 	bl	8005830 <Sensor_IO_Read>
  k = 0;
  for (i = 0; i < 3; i++ )
  {
    for (j = 0; j < numberOfByteForDimension; j++ )
    {
      if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_OUTX_L_XL + k, &buff[k], 1))
 8001e10:	1c61      	adds	r1, r4, #1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8001e12:	1c6a      	adds	r2, r5, #1
 8001e14:	2301      	movs	r3, #1
 8001e16:	b2c9      	uxtb	r1, r1
 8001e18:	3502      	adds	r5, #2
 8001e1a:	b948      	cbnz	r0, 8001e30 <LSM6DS3_ACC_GYRO_GetRawAccData+0x34>
 8001e1c:	4630      	mov	r0, r6
 8001e1e:	f003 fd07 	bl	8005830 <Sensor_IO_Read>
 8001e22:	3402      	adds	r4, #2
 8001e24:	b2e4      	uxtb	r4, r4
 8001e26:	b918      	cbnz	r0, 8001e30 <LSM6DS3_ACC_GYRO_GetRawAccData+0x34>
  for (i = 0; i < 3; i++ )
 8001e28:	2c2e      	cmp	r4, #46	; 0x2e
 8001e2a:	d1eb      	bne.n	8001e04 <LSM6DS3_ACC_GYRO_GetRawAccData+0x8>
        return MEMS_ERROR;
      k++;
    }
  }

  return MEMS_SUCCESS;
 8001e2c:	2001      	movs	r0, #1
}
 8001e2e:	bd70      	pop	{r4, r5, r6, pc}
        return MEMS_ERROR;
 8001e30:	2000      	movs	r0, #0
}
 8001e32:	bd70      	pop	{r4, r5, r6, pc}

08001e34 <LSM6DS3_ACC_GYRO_W_ODR_XL>:
* Input          : LSM6DS3_ACC_GYRO_ODR_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_ODR_XL(void *handle, LSM6DS3_ACC_GYRO_ODR_XL_t newValue)
{
 8001e34:	b530      	push	{r4, r5, lr}
 8001e36:	b083      	sub	sp, #12
 8001e38:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8001e3a:	f10d 0207 	add.w	r2, sp, #7
 8001e3e:	2301      	movs	r3, #1
 8001e40:	2110      	movs	r1, #16
{
 8001e42:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8001e44:	f003 fcf4 	bl	8005830 <Sensor_IO_Read>
 8001e48:	b110      	cbz	r0, 8001e50 <LSM6DS3_ACC_GYRO_W_ODR_XL+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
    return MEMS_ERROR;
 8001e4a:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8001e4c:	b003      	add	sp, #12
 8001e4e:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_ODR_XL_MASK;
 8001e50:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001e54:	f003 030f 	and.w	r3, r3, #15
  value |= newValue;
 8001e58:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8001e5a:	f10d 0207 	add.w	r2, sp, #7
 8001e5e:	4628      	mov	r0, r5
 8001e60:	2301      	movs	r3, #1
 8001e62:	2110      	movs	r1, #16
  value |= newValue;
 8001e64:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8001e68:	f003 fc94 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8001e6c:	fab0 f080 	clz	r0, r0
 8001e70:	0940      	lsrs	r0, r0, #5
}
 8001e72:	b003      	add	sp, #12
 8001e74:	bd30      	pop	{r4, r5, pc}
 8001e76:	bf00      	nop

08001e78 <LSM6DS3_ACC_GYRO_R_ODR_XL>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_ODR_XL_t
* Output         : Status of ODR_XL see LSM6DS3_ACC_GYRO_ODR_XL_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_ODR_XL(void *handle, LSM6DS3_ACC_GYRO_ODR_XL_t *value)
{
 8001e78:	b510      	push	{r4, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8001e7a:	460a      	mov	r2, r1
{
 8001e7c:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8001e7e:	2301      	movs	r3, #1
 8001e80:	2110      	movs	r1, #16
 8001e82:	f003 fcd5 	bl	8005830 <Sensor_IO_Read>
 8001e86:	b928      	cbnz	r0, 8001e94 <LSM6DS3_ACC_GYRO_R_ODR_XL+0x1c>
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL1_XL, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_ODR_XL_MASK; //mask
 8001e88:	7823      	ldrb	r3, [r4, #0]
 8001e8a:	f023 030f 	bic.w	r3, r3, #15
 8001e8e:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 8001e90:	2001      	movs	r0, #1
}
 8001e92:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 8001e94:	2000      	movs	r0, #0
}
 8001e96:	bd10      	pop	{r4, pc}

08001e98 <LSM6DS3_ACC_GYRO_W_FS_G>:
* Input          : LSM6DS3_ACC_GYRO_FS_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FS_G(void *handle, LSM6DS3_ACC_GYRO_FS_G_t newValue)
{
 8001e98:	b530      	push	{r4, r5, lr}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8001e9e:	f10d 0207 	add.w	r2, sp, #7
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	2111      	movs	r1, #17
{
 8001ea6:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8001ea8:	f003 fcc2 	bl	8005830 <Sensor_IO_Read>
 8001eac:	b110      	cbz	r0, 8001eb4 <LSM6DS3_ACC_GYRO_W_FS_G+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
    return MEMS_ERROR;
 8001eae:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8001eb0:	b003      	add	sp, #12
 8001eb2:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_FS_G_MASK;
 8001eb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001eb8:	f023 030c 	bic.w	r3, r3, #12
  value |= newValue;
 8001ebc:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8001ebe:	f10d 0207 	add.w	r2, sp, #7
 8001ec2:	4628      	mov	r0, r5
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	2111      	movs	r1, #17
  value |= newValue;
 8001ec8:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8001ecc:	f003 fc62 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8001ed0:	fab0 f080 	clz	r0, r0
 8001ed4:	0940      	lsrs	r0, r0, #5
}
 8001ed6:	b003      	add	sp, #12
 8001ed8:	bd30      	pop	{r4, r5, pc}
 8001eda:	bf00      	nop

08001edc <LSM6DS3_ACC_GYRO_R_FS_G>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_FS_G_t
* Output         : Status of FS_G see LSM6DS3_ACC_GYRO_FS_G_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_FS_G(void *handle, LSM6DS3_ACC_GYRO_FS_G_t *value)
{
 8001edc:	b510      	push	{r4, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8001ede:	460a      	mov	r2, r1
{
 8001ee0:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	2111      	movs	r1, #17
 8001ee6:	f003 fca3 	bl	8005830 <Sensor_IO_Read>
 8001eea:	b928      	cbnz	r0, 8001ef8 <LSM6DS3_ACC_GYRO_R_FS_G+0x1c>
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_FS_G_MASK; //mask
 8001eec:	7823      	ldrb	r3, [r4, #0]
 8001eee:	f003 030c 	and.w	r3, r3, #12
 8001ef2:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 8001ef4:	2001      	movs	r0, #1
}
 8001ef6:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 8001ef8:	2000      	movs	r0, #0
}
 8001efa:	bd10      	pop	{r4, pc}

08001efc <LSM6DS3_ACC_GYRO_W_ODR_G>:
* Input          : LSM6DS3_ACC_GYRO_ODR_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_ODR_G(void *handle, LSM6DS3_ACC_GYRO_ODR_G_t newValue)
{
 8001efc:	b530      	push	{r4, r5, lr}
 8001efe:	b083      	sub	sp, #12
 8001f00:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8001f02:	f10d 0207 	add.w	r2, sp, #7
 8001f06:	2301      	movs	r3, #1
 8001f08:	2111      	movs	r1, #17
{
 8001f0a:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8001f0c:	f003 fc90 	bl	8005830 <Sensor_IO_Read>
 8001f10:	b110      	cbz	r0, 8001f18 <LSM6DS3_ACC_GYRO_W_ODR_G+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
    return MEMS_ERROR;
 8001f12:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8001f14:	b003      	add	sp, #12
 8001f16:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_ODR_G_MASK;
 8001f18:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001f1c:	f003 030f 	and.w	r3, r3, #15
  value |= newValue;
 8001f20:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8001f22:	f10d 0207 	add.w	r2, sp, #7
 8001f26:	4628      	mov	r0, r5
 8001f28:	2301      	movs	r3, #1
 8001f2a:	2111      	movs	r1, #17
  value |= newValue;
 8001f2c:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8001f30:	f003 fc30 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8001f34:	fab0 f080 	clz	r0, r0
 8001f38:	0940      	lsrs	r0, r0, #5
}
 8001f3a:	b003      	add	sp, #12
 8001f3c:	bd30      	pop	{r4, r5, pc}
 8001f3e:	bf00      	nop

08001f40 <LSM6DS3_ACC_GYRO_R_ODR_G>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_ODR_G_t
* Output         : Status of ODR_G see LSM6DS3_ACC_GYRO_ODR_G_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_ODR_G(void *handle, LSM6DS3_ACC_GYRO_ODR_G_t *value)
{
 8001f40:	b510      	push	{r4, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8001f42:	460a      	mov	r2, r1
{
 8001f44:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8001f46:	2301      	movs	r3, #1
 8001f48:	2111      	movs	r1, #17
 8001f4a:	f003 fc71 	bl	8005830 <Sensor_IO_Read>
 8001f4e:	b928      	cbnz	r0, 8001f5c <LSM6DS3_ACC_GYRO_R_ODR_G+0x1c>
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_ODR_G_MASK; //mask
 8001f50:	7823      	ldrb	r3, [r4, #0]
 8001f52:	f023 030f 	bic.w	r3, r3, #15
 8001f56:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 8001f58:	2001      	movs	r0, #1
}
 8001f5a:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 8001f5c:	2000      	movs	r0, #0
}
 8001f5e:	bd10      	pop	{r4, pc}

08001f60 <LSM6DS3_ACC_GYRO_GetRawGyroData>:
* Input          : pointer to [u8_t]
* Output         : GetGyroData buffer u8_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_GetRawGyroData(void *handle, u8_t *buff)
{
 8001f60:	b570      	push	{r4, r5, r6, lr}
 8001f62:	4606      	mov	r6, r0
 8001f64:	460d      	mov	r5, r1
 8001f66:	2422      	movs	r4, #34	; 0x22
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8001f68:	462a      	mov	r2, r5
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	4621      	mov	r1, r4
 8001f6e:	4630      	mov	r0, r6
 8001f70:	f003 fc5e 	bl	8005830 <Sensor_IO_Read>
  k = 0;
  for (i = 0; i < 3; i++ )
  {
    for (j = 0; j < numberOfByteForDimension; j++ )
    {
      if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_OUTX_L_G + k, &buff[k], 1))
 8001f74:	1c61      	adds	r1, r4, #1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8001f76:	1c6a      	adds	r2, r5, #1
 8001f78:	2301      	movs	r3, #1
 8001f7a:	b2c9      	uxtb	r1, r1
 8001f7c:	3502      	adds	r5, #2
 8001f7e:	b948      	cbnz	r0, 8001f94 <LSM6DS3_ACC_GYRO_GetRawGyroData+0x34>
 8001f80:	4630      	mov	r0, r6
 8001f82:	f003 fc55 	bl	8005830 <Sensor_IO_Read>
 8001f86:	3402      	adds	r4, #2
 8001f88:	b2e4      	uxtb	r4, r4
 8001f8a:	b918      	cbnz	r0, 8001f94 <LSM6DS3_ACC_GYRO_GetRawGyroData+0x34>
  for (i = 0; i < 3; i++ )
 8001f8c:	2c28      	cmp	r4, #40	; 0x28
 8001f8e:	d1eb      	bne.n	8001f68 <LSM6DS3_ACC_GYRO_GetRawGyroData+0x8>
        return MEMS_ERROR;
      k++;
    }
  }

  return MEMS_SUCCESS;
 8001f90:	2001      	movs	r0, #1
}
 8001f92:	bd70      	pop	{r4, r5, r6, pc}
        return MEMS_ERROR;
 8001f94:	2000      	movs	r0, #0
}
 8001f96:	bd70      	pop	{r4, r5, r6, pc}

08001f98 <LSM6DS3_ACC_GYRO_W_FS_125>:
* Input          : LSM6DS3_ACC_GYRO_FS_125_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FS_125(void *handle, LSM6DS3_ACC_GYRO_FS_125_t newValue)
{
 8001f98:	b530      	push	{r4, r5, lr}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8001f9e:	f10d 0207 	add.w	r2, sp, #7
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	2111      	movs	r1, #17
{
 8001fa6:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8001fa8:	f003 fc42 	bl	8005830 <Sensor_IO_Read>
 8001fac:	b110      	cbz	r0, 8001fb4 <LSM6DS3_ACC_GYRO_W_FS_125+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
    return MEMS_ERROR;
 8001fae:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8001fb0:	b003      	add	sp, #12
 8001fb2:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_FS_125_MASK;
 8001fb4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001fb8:	f023 0302 	bic.w	r3, r3, #2
  value |= newValue;
 8001fbc:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8001fbe:	f10d 0207 	add.w	r2, sp, #7
 8001fc2:	4628      	mov	r0, r5
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	2111      	movs	r1, #17
  value |= newValue;
 8001fc8:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8001fcc:	f003 fbe2 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8001fd0:	fab0 f080 	clz	r0, r0
 8001fd4:	0940      	lsrs	r0, r0, #5
}
 8001fd6:	b003      	add	sp, #12
 8001fd8:	bd30      	pop	{r4, r5, pc}
 8001fda:	bf00      	nop

08001fdc <LSM6DS3_ACC_GYRO_R_FS_125>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_FS_125_t
* Output         : Status of FS_125 see LSM6DS3_ACC_GYRO_FS_125_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_FS_125(void *handle, LSM6DS3_ACC_GYRO_FS_125_t *value)
{
 8001fdc:	b510      	push	{r4, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8001fde:	460a      	mov	r2, r1
{
 8001fe0:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	2111      	movs	r1, #17
 8001fe6:	f003 fc23 	bl	8005830 <Sensor_IO_Read>
 8001fea:	b928      	cbnz	r0, 8001ff8 <LSM6DS3_ACC_GYRO_R_FS_125+0x1c>
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL2_G, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_FS_125_MASK; //mask
 8001fec:	7823      	ldrb	r3, [r4, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 8001ff4:	2001      	movs	r0, #1
}
 8001ff6:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 8001ff8:	2000      	movs	r0, #0
}
 8001ffa:	bd10      	pop	{r4, pc}

08001ffc <LSM6DS3_ACC_GYRO_W_FIFO_Watermark>:
* Input          : u16_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FIFO_Watermark(void *handle, u16_t newValue)
{
 8001ffc:	b530      	push	{r4, r5, lr}
 8001ffe:	b083      	sub	sp, #12
 8002000:	460d      	mov	r5, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002002:	f10d 0207 	add.w	r2, sp, #7
 8002006:	2301      	movs	r3, #1
 8002008:	2106      	movs	r1, #6
{
 800200a:	4604      	mov	r4, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 800200c:	f003 fc10 	bl	8005830 <Sensor_IO_Read>
 8002010:	b110      	cbz	r0, 8002018 <LSM6DS3_ACC_GYRO_W_FIFO_Watermark+0x1c>
  /* Low part goes in FIFO_CTRL1 */
  valueL = valueL << LSM6DS3_ACC_GYRO_WTM_FIFO_CTRL1_POSITION; //mask
  valueL &= LSM6DS3_ACC_GYRO_WTM_FIFO_CTRL1_MASK; //coerce

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL1, &value, 1) )
    return MEMS_ERROR;
 8002012:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL2, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002014:	b003      	add	sp, #12
 8002016:	bd30      	pop	{r4, r5, pc}
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002018:	2301      	movs	r3, #1
 800201a:	f10d 0207 	add.w	r2, sp, #7
 800201e:	2106      	movs	r1, #6
 8002020:	4620      	mov	r0, r4
  valueL = newValue & 0xFF;
 8002022:	f88d 5007 	strb.w	r5, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002026:	f003 fbb5 	bl	8005794 <Sensor_IO_Write>
 800202a:	2800      	cmp	r0, #0
 800202c:	d1f1      	bne.n	8002012 <LSM6DS3_ACC_GYRO_W_FIFO_Watermark+0x16>
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 800202e:	2301      	movs	r3, #1
 8002030:	f10d 0207 	add.w	r2, sp, #7
 8002034:	2107      	movs	r1, #7
 8002036:	4620      	mov	r0, r4
 8002038:	f003 fbfa 	bl	8005830 <Sensor_IO_Read>
 800203c:	2800      	cmp	r0, #0
 800203e:	d1e8      	bne.n	8002012 <LSM6DS3_ACC_GYRO_W_FIFO_Watermark+0x16>
  value &= ~LSM6DS3_ACC_GYRO_WTM_FIFO_CTRL2_MASK;
 8002040:	f89d 3007 	ldrb.w	r3, [sp, #7]
  valueH &= LSM6DS3_ACC_GYRO_WTM_FIFO_CTRL2_MASK; //coerce
 8002044:	f3c5 2503 	ubfx	r5, r5, #8, #4
  value &= ~LSM6DS3_ACC_GYRO_WTM_FIFO_CTRL2_MASK;
 8002048:	f023 030f 	bic.w	r3, r3, #15
  value |= valueH;
 800204c:	431d      	orrs	r5, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 800204e:	f10d 0207 	add.w	r2, sp, #7
 8002052:	4620      	mov	r0, r4
 8002054:	2301      	movs	r3, #1
 8002056:	2107      	movs	r1, #7
  value |= valueH;
 8002058:	f88d 5007 	strb.w	r5, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 800205c:	f003 fb9a 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002060:	fab0 f080 	clz	r0, r0
 8002064:	0940      	lsrs	r0, r0, #5
 8002066:	e7d5      	b.n	8002014 <LSM6DS3_ACC_GYRO_W_FIFO_Watermark+0x18>

08002068 <LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL>:
* Input          : LSM6DS3_ACC_GYRO_DEC_FIFO_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL(void *handle, LSM6DS3_ACC_GYRO_DEC_FIFO_XL_t newValue)
{
 8002068:	b530      	push	{r4, r5, lr}
 800206a:	b083      	sub	sp, #12
 800206c:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 800206e:	f10d 0207 	add.w	r2, sp, #7
 8002072:	2301      	movs	r3, #1
 8002074:	2108      	movs	r1, #8
{
 8002076:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002078:	f003 fbda 	bl	8005830 <Sensor_IO_Read>
 800207c:	b110      	cbz	r0, 8002084 <LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL3, &value, 1) )
    return MEMS_ERROR;
 800207e:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL3, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002080:	b003      	add	sp, #12
 8002082:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_DEC_FIFO_XL_MASK;
 8002084:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002088:	f023 0307 	bic.w	r3, r3, #7
  value |= newValue;
 800208c:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 800208e:	f10d 0207 	add.w	r2, sp, #7
 8002092:	4628      	mov	r0, r5
 8002094:	2301      	movs	r3, #1
 8002096:	2108      	movs	r1, #8
  value |= newValue;
 8002098:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 800209c:	f003 fb7a 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 80020a0:	fab0 f080 	clz	r0, r0
 80020a4:	0940      	lsrs	r0, r0, #5
}
 80020a6:	b003      	add	sp, #12
 80020a8:	bd30      	pop	{r4, r5, pc}
 80020aa:	bf00      	nop

080020ac <LSM6DS3_ACC_GYRO_W_DEC_FIFO_G>:
* Input          : LSM6DS3_ACC_GYRO_DEC_FIFO_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_DEC_FIFO_G(void *handle, LSM6DS3_ACC_GYRO_DEC_FIFO_G_t newValue)
{
 80020ac:	b530      	push	{r4, r5, lr}
 80020ae:	b083      	sub	sp, #12
 80020b0:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80020b2:	f10d 0207 	add.w	r2, sp, #7
 80020b6:	2301      	movs	r3, #1
 80020b8:	2108      	movs	r1, #8
{
 80020ba:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80020bc:	f003 fbb8 	bl	8005830 <Sensor_IO_Read>
 80020c0:	b110      	cbz	r0, 80020c8 <LSM6DS3_ACC_GYRO_W_DEC_FIFO_G+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL3, &value, 1) )
    return MEMS_ERROR;
 80020c2:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL3, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 80020c4:	b003      	add	sp, #12
 80020c6:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_DEC_FIFO_G_MASK;
 80020c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80020cc:	f023 0338 	bic.w	r3, r3, #56	; 0x38
  value |= newValue;
 80020d0:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 80020d2:	f10d 0207 	add.w	r2, sp, #7
 80020d6:	4628      	mov	r0, r5
 80020d8:	2301      	movs	r3, #1
 80020da:	2108      	movs	r1, #8
  value |= newValue;
 80020dc:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 80020e0:	f003 fb58 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 80020e4:	fab0 f080 	clz	r0, r0
 80020e8:	0940      	lsrs	r0, r0, #5
}
 80020ea:	b003      	add	sp, #12
 80020ec:	bd30      	pop	{r4, r5, pc}
 80020ee:	bf00      	nop

080020f0 <LSM6DS3_ACC_GYRO_W_FIFO_MODE>:
* Input          : LSM6DS3_ACC_GYRO_FIFO_MODE_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FIFO_MODE(void *handle, LSM6DS3_ACC_GYRO_FIFO_MODE_t newValue)
{
 80020f0:	b530      	push	{r4, r5, lr}
 80020f2:	b083      	sub	sp, #12
 80020f4:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80020f6:	f10d 0207 	add.w	r2, sp, #7
 80020fa:	2301      	movs	r3, #1
 80020fc:	210a      	movs	r1, #10
{
 80020fe:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002100:	f003 fb96 	bl	8005830 <Sensor_IO_Read>
 8002104:	b110      	cbz	r0, 800210c <LSM6DS3_ACC_GYRO_W_FIFO_MODE+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL5, &value, 1) )
    return MEMS_ERROR;
 8002106:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL5, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002108:	b003      	add	sp, #12
 800210a:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_FIFO_MODE_MASK;
 800210c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002110:	f023 0307 	bic.w	r3, r3, #7
  value |= newValue;
 8002114:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002116:	f10d 0207 	add.w	r2, sp, #7
 800211a:	4628      	mov	r0, r5
 800211c:	2301      	movs	r3, #1
 800211e:	210a      	movs	r1, #10
  value |= newValue;
 8002120:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002124:	f003 fb36 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002128:	fab0 f080 	clz	r0, r0
 800212c:	0940      	lsrs	r0, r0, #5
}
 800212e:	b003      	add	sp, #12
 8002130:	bd30      	pop	{r4, r5, pc}
 8002132:	bf00      	nop

08002134 <LSM6DS3_ACC_GYRO_W_ODR_FIFO>:
* Input          : LSM6DS3_ACC_GYRO_ODR_FIFO_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_ODR_FIFO(void *handle, LSM6DS3_ACC_GYRO_ODR_FIFO_t newValue)
{
 8002134:	b530      	push	{r4, r5, lr}
 8002136:	b083      	sub	sp, #12
 8002138:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 800213a:	f10d 0207 	add.w	r2, sp, #7
 800213e:	2301      	movs	r3, #1
 8002140:	210a      	movs	r1, #10
{
 8002142:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002144:	f003 fb74 	bl	8005830 <Sensor_IO_Read>
 8002148:	b110      	cbz	r0, 8002150 <LSM6DS3_ACC_GYRO_W_ODR_FIFO+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL5, &value, 1) )
    return MEMS_ERROR;
 800214a:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_FIFO_CTRL5, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800214c:	b003      	add	sp, #12
 800214e:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_ODR_FIFO_MASK;
 8002150:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002154:	f023 0378 	bic.w	r3, r3, #120	; 0x78
  value |= newValue;
 8002158:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 800215a:	f10d 0207 	add.w	r2, sp, #7
 800215e:	4628      	mov	r0, r5
 8002160:	2301      	movs	r3, #1
 8002162:	210a      	movs	r1, #10
  value |= newValue;
 8002164:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002168:	f003 fb14 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 800216c:	fab0 f080 	clz	r0, r0
 8002170:	0940      	lsrs	r0, r0, #5
}
 8002172:	b003      	add	sp, #12
 8002174:	bd30      	pop	{r4, r5, pc}
 8002176:	bf00      	nop

08002178 <LSM6DS3_ACC_GYRO_W_FSS5_on_INT1>:
* Input          : LSM6DS3_ACC_GYRO_INT1_FSS5_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FSS5_on_INT1(void *handle, LSM6DS3_ACC_GYRO_INT1_FSS5_t newValue)
{
 8002178:	b530      	push	{r4, r5, lr}
 800217a:	b083      	sub	sp, #12
 800217c:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 800217e:	f10d 0207 	add.w	r2, sp, #7
 8002182:	2301      	movs	r3, #1
 8002184:	210d      	movs	r1, #13
{
 8002186:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002188:	f003 fb52 	bl	8005830 <Sensor_IO_Read>
 800218c:	b110      	cbz	r0, 8002194 <LSM6DS3_ACC_GYRO_W_FSS5_on_INT1+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_INT1_CTRL, &value, 1) )
    return MEMS_ERROR;
 800218e:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_INT1_CTRL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002190:	b003      	add	sp, #12
 8002192:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_INT1_FSS5_MASK;
 8002194:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002198:	f023 0320 	bic.w	r3, r3, #32
  value |= newValue;
 800219c:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 800219e:	f10d 0207 	add.w	r2, sp, #7
 80021a2:	4628      	mov	r0, r5
 80021a4:	2301      	movs	r3, #1
 80021a6:	210d      	movs	r1, #13
  value |= newValue;
 80021a8:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 80021ac:	f003 faf2 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 80021b0:	fab0 f080 	clz	r0, r0
 80021b4:	0940      	lsrs	r0, r0, #5
}
 80021b6:	b003      	add	sp, #12
 80021b8:	bd30      	pop	{r4, r5, pc}
 80021ba:	bf00      	nop

080021bc <LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1>:
* Input          : LSM6DS3_ACC_GYRO_INT1_PEDO_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1(void *handle, LSM6DS3_ACC_GYRO_INT1_PEDO_t newValue)
{
 80021bc:	b530      	push	{r4, r5, lr}
 80021be:	b083      	sub	sp, #12
 80021c0:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80021c2:	f10d 0207 	add.w	r2, sp, #7
 80021c6:	2301      	movs	r3, #1
 80021c8:	210d      	movs	r1, #13
{
 80021ca:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80021cc:	f003 fb30 	bl	8005830 <Sensor_IO_Read>
 80021d0:	b110      	cbz	r0, 80021d8 <LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_INT1_CTRL, &value, 1) )
    return MEMS_ERROR;
 80021d2:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_INT1_CTRL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 80021d4:	b003      	add	sp, #12
 80021d6:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_INT1_PEDO_MASK;
 80021d8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80021dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  value |= newValue;
 80021e0:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 80021e2:	f10d 0207 	add.w	r2, sp, #7
 80021e6:	4628      	mov	r0, r5
 80021e8:	2301      	movs	r3, #1
 80021ea:	210d      	movs	r1, #13
  value |= newValue;
 80021ec:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 80021f0:	f003 fad0 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 80021f4:	fab0 f080 	clz	r0, r0
 80021f8:	0940      	lsrs	r0, r0, #5
}
 80021fa:	b003      	add	sp, #12
 80021fc:	bd30      	pop	{r4, r5, pc}
 80021fe:	bf00      	nop

08002200 <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr>:
* Input          : LSM6DS3_ACC_GYRO_IF_INC_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_IF_Addr_Incr(void *handle, LSM6DS3_ACC_GYRO_IF_INC_t newValue)
{
 8002200:	b530      	push	{r4, r5, lr}
 8002202:	b083      	sub	sp, #12
 8002204:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002206:	f10d 0207 	add.w	r2, sp, #7
 800220a:	2301      	movs	r3, #1
 800220c:	2112      	movs	r1, #18
{
 800220e:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002210:	f003 fb0e 	bl	8005830 <Sensor_IO_Read>
 8002214:	b110      	cbz	r0, 800221c <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL3_C, &value, 1) )
    return MEMS_ERROR;
 8002216:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL3_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002218:	b003      	add	sp, #12
 800221a:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_IF_INC_MASK;
 800221c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002220:	f023 0304 	bic.w	r3, r3, #4
  value |= newValue;
 8002224:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002226:	f10d 0207 	add.w	r2, sp, #7
 800222a:	4628      	mov	r0, r5
 800222c:	2301      	movs	r3, #1
 800222e:	2112      	movs	r1, #18
  value |= newValue;
 8002230:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002234:	f003 faae 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002238:	fab0 f080 	clz	r0, r0
 800223c:	0940      	lsrs	r0, r0, #5
}
 800223e:	b003      	add	sp, #12
 8002240:	bd30      	pop	{r4, r5, pc}
 8002242:	bf00      	nop

08002244 <LSM6DS3_ACC_GYRO_W_STOP_ON_FTH>:
* Input          : LSM6DS3_ACC_GYRO_STOP_ON_FTH_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_STOP_ON_FTH(void *handle, LSM6DS3_ACC_GYRO_STOP_ON_FTH_t newValue)
{
 8002244:	b530      	push	{r4, r5, lr}
 8002246:	b083      	sub	sp, #12
 8002248:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 800224a:	f10d 0207 	add.w	r2, sp, #7
 800224e:	2301      	movs	r3, #1
 8002250:	2113      	movs	r1, #19
{
 8002252:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002254:	f003 faec 	bl	8005830 <Sensor_IO_Read>
 8002258:	b110      	cbz	r0, 8002260 <LSM6DS3_ACC_GYRO_W_STOP_ON_FTH+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL4_C, &value, 1) )
    return MEMS_ERROR;
 800225a:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL4_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800225c:	b003      	add	sp, #12
 800225e:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_STOP_ON_FTH_MASK;
 8002260:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002264:	f023 0301 	bic.w	r3, r3, #1
  value |= newValue;
 8002268:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 800226a:	f10d 0207 	add.w	r2, sp, #7
 800226e:	4628      	mov	r0, r5
 8002270:	2301      	movs	r3, #1
 8002272:	2113      	movs	r1, #19
  value |= newValue;
 8002274:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002278:	f003 fa8c 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 800227c:	fab0 f080 	clz	r0, r0
 8002280:	0940      	lsrs	r0, r0, #5
}
 8002282:	b003      	add	sp, #12
 8002284:	bd30      	pop	{r4, r5, pc}
 8002286:	bf00      	nop

08002288 <LSM6DS3_ACC_GYRO_W_SelfTest_XL>:
* Input          : LSM6DS3_ACC_GYRO_ST_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_SelfTest_XL(void *handle, LSM6DS3_ACC_GYRO_ST_XL_t newValue)
{
 8002288:	b530      	push	{r4, r5, lr}
 800228a:	b083      	sub	sp, #12
 800228c:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 800228e:	f10d 0207 	add.w	r2, sp, #7
 8002292:	2301      	movs	r3, #1
 8002294:	2114      	movs	r1, #20
{
 8002296:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002298:	f003 faca 	bl	8005830 <Sensor_IO_Read>
 800229c:	b110      	cbz	r0, 80022a4 <LSM6DS3_ACC_GYRO_W_SelfTest_XL+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL5_C, &value, 1) )
    return MEMS_ERROR;
 800229e:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL5_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 80022a0:	b003      	add	sp, #12
 80022a2:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_ST_XL_MASK;
 80022a4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80022a8:	f023 0303 	bic.w	r3, r3, #3
  value |= newValue;
 80022ac:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 80022ae:	f10d 0207 	add.w	r2, sp, #7
 80022b2:	4628      	mov	r0, r5
 80022b4:	2301      	movs	r3, #1
 80022b6:	2114      	movs	r1, #20
  value |= newValue;
 80022b8:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 80022bc:	f003 fa6a 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 80022c0:	fab0 f080 	clz	r0, r0
 80022c4:	0940      	lsrs	r0, r0, #5
}
 80022c6:	b003      	add	sp, #12
 80022c8:	bd30      	pop	{r4, r5, pc}
 80022ca:	bf00      	nop

080022cc <LSM6DS3_ACC_GYRO_W_SelfTest_G>:
* Input          : LSM6DS3_ACC_GYRO_ST_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_SelfTest_G(void *handle, LSM6DS3_ACC_GYRO_ST_G_t newValue)
{
 80022cc:	b530      	push	{r4, r5, lr}
 80022ce:	b083      	sub	sp, #12
 80022d0:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80022d2:	f10d 0207 	add.w	r2, sp, #7
 80022d6:	2301      	movs	r3, #1
 80022d8:	2114      	movs	r1, #20
{
 80022da:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80022dc:	f003 faa8 	bl	8005830 <Sensor_IO_Read>
 80022e0:	b110      	cbz	r0, 80022e8 <LSM6DS3_ACC_GYRO_W_SelfTest_G+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL5_C, &value, 1) )
    return MEMS_ERROR;
 80022e2:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL5_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 80022e4:	b003      	add	sp, #12
 80022e6:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_ST_G_MASK;
 80022e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80022ec:	f023 030c 	bic.w	r3, r3, #12
  value |= newValue;
 80022f0:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 80022f2:	f10d 0207 	add.w	r2, sp, #7
 80022f6:	4628      	mov	r0, r5
 80022f8:	2301      	movs	r3, #1
 80022fa:	2114      	movs	r1, #20
  value |= newValue;
 80022fc:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002300:	f003 fa48 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002304:	fab0 f080 	clz	r0, r0
 8002308:	0940      	lsrs	r0, r0, #5
}
 800230a:	b003      	add	sp, #12
 800230c:	bd30      	pop	{r4, r5, pc}
 800230e:	bf00      	nop

08002310 <LSM6DS3_ACC_GYRO_W_XEN_XL>:
* Input          : LSM6DS3_ACC_GYRO_XEN_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_XEN_XL(void *handle, LSM6DS3_ACC_GYRO_XEN_XL_t newValue)
{
 8002310:	b530      	push	{r4, r5, lr}
 8002312:	b083      	sub	sp, #12
 8002314:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002316:	f10d 0207 	add.w	r2, sp, #7
 800231a:	2301      	movs	r3, #1
 800231c:	2118      	movs	r1, #24
{
 800231e:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002320:	f003 fa86 	bl	8005830 <Sensor_IO_Read>
 8002324:	b110      	cbz	r0, 800232c <LSM6DS3_ACC_GYRO_W_XEN_XL+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
    return MEMS_ERROR;
 8002326:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002328:	b003      	add	sp, #12
 800232a:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_XEN_XL_MASK;
 800232c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002330:	f023 0308 	bic.w	r3, r3, #8
  value |= newValue;
 8002334:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002336:	f10d 0207 	add.w	r2, sp, #7
 800233a:	4628      	mov	r0, r5
 800233c:	2301      	movs	r3, #1
 800233e:	2118      	movs	r1, #24
  value |= newValue;
 8002340:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002344:	f003 fa26 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002348:	fab0 f080 	clz	r0, r0
 800234c:	0940      	lsrs	r0, r0, #5
}
 800234e:	b003      	add	sp, #12
 8002350:	bd30      	pop	{r4, r5, pc}
 8002352:	bf00      	nop

08002354 <LSM6DS3_ACC_GYRO_R_XEN_XL>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_XEN_XL_t
* Output         : Status of XEN_XL see LSM6DS3_ACC_GYRO_XEN_XL_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_XEN_XL(void *handle, LSM6DS3_ACC_GYRO_XEN_XL_t *value)
{
 8002354:	b510      	push	{r4, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002356:	460a      	mov	r2, r1
{
 8002358:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 800235a:	2301      	movs	r3, #1
 800235c:	2118      	movs	r1, #24
 800235e:	f003 fa67 	bl	8005830 <Sensor_IO_Read>
 8002362:	b928      	cbnz	r0, 8002370 <LSM6DS3_ACC_GYRO_R_XEN_XL+0x1c>
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_XEN_XL_MASK; //mask
 8002364:	7823      	ldrb	r3, [r4, #0]
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 800236c:	2001      	movs	r0, #1
}
 800236e:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 8002370:	2000      	movs	r0, #0
}
 8002372:	bd10      	pop	{r4, pc}

08002374 <LSM6DS3_ACC_GYRO_W_YEN_XL>:
* Input          : LSM6DS3_ACC_GYRO_YEN_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_YEN_XL(void *handle, LSM6DS3_ACC_GYRO_YEN_XL_t newValue)
{
 8002374:	b530      	push	{r4, r5, lr}
 8002376:	b083      	sub	sp, #12
 8002378:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 800237a:	f10d 0207 	add.w	r2, sp, #7
 800237e:	2301      	movs	r3, #1
 8002380:	2118      	movs	r1, #24
{
 8002382:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002384:	f003 fa54 	bl	8005830 <Sensor_IO_Read>
 8002388:	b110      	cbz	r0, 8002390 <LSM6DS3_ACC_GYRO_W_YEN_XL+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
    return MEMS_ERROR;
 800238a:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800238c:	b003      	add	sp, #12
 800238e:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_YEN_XL_MASK;
 8002390:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002394:	f023 0310 	bic.w	r3, r3, #16
  value |= newValue;
 8002398:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 800239a:	f10d 0207 	add.w	r2, sp, #7
 800239e:	4628      	mov	r0, r5
 80023a0:	2301      	movs	r3, #1
 80023a2:	2118      	movs	r1, #24
  value |= newValue;
 80023a4:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 80023a8:	f003 f9f4 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 80023ac:	fab0 f080 	clz	r0, r0
 80023b0:	0940      	lsrs	r0, r0, #5
}
 80023b2:	b003      	add	sp, #12
 80023b4:	bd30      	pop	{r4, r5, pc}
 80023b6:	bf00      	nop

080023b8 <LSM6DS3_ACC_GYRO_R_YEN_XL>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_YEN_XL_t
* Output         : Status of YEN_XL see LSM6DS3_ACC_GYRO_YEN_XL_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_YEN_XL(void *handle, LSM6DS3_ACC_GYRO_YEN_XL_t *value)
{
 80023b8:	b510      	push	{r4, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80023ba:	460a      	mov	r2, r1
{
 80023bc:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80023be:	2301      	movs	r3, #1
 80023c0:	2118      	movs	r1, #24
 80023c2:	f003 fa35 	bl	8005830 <Sensor_IO_Read>
 80023c6:	b928      	cbnz	r0, 80023d4 <LSM6DS3_ACC_GYRO_R_YEN_XL+0x1c>
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_YEN_XL_MASK; //mask
 80023c8:	7823      	ldrb	r3, [r4, #0]
 80023ca:	f003 0310 	and.w	r3, r3, #16
 80023ce:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 80023d0:	2001      	movs	r0, #1
}
 80023d2:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 80023d4:	2000      	movs	r0, #0
}
 80023d6:	bd10      	pop	{r4, pc}

080023d8 <LSM6DS3_ACC_GYRO_W_ZEN_XL>:
* Input          : LSM6DS3_ACC_GYRO_ZEN_XL_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_ZEN_XL(void *handle, LSM6DS3_ACC_GYRO_ZEN_XL_t newValue)
{
 80023d8:	b530      	push	{r4, r5, lr}
 80023da:	b083      	sub	sp, #12
 80023dc:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80023de:	f10d 0207 	add.w	r2, sp, #7
 80023e2:	2301      	movs	r3, #1
 80023e4:	2118      	movs	r1, #24
{
 80023e6:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80023e8:	f003 fa22 	bl	8005830 <Sensor_IO_Read>
 80023ec:	b110      	cbz	r0, 80023f4 <LSM6DS3_ACC_GYRO_W_ZEN_XL+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
    return MEMS_ERROR;
 80023ee:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 80023f0:	b003      	add	sp, #12
 80023f2:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_ZEN_XL_MASK;
 80023f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80023f8:	f023 0320 	bic.w	r3, r3, #32
  value |= newValue;
 80023fc:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 80023fe:	f10d 0207 	add.w	r2, sp, #7
 8002402:	4628      	mov	r0, r5
 8002404:	2301      	movs	r3, #1
 8002406:	2118      	movs	r1, #24
  value |= newValue;
 8002408:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 800240c:	f003 f9c2 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002410:	fab0 f080 	clz	r0, r0
 8002414:	0940      	lsrs	r0, r0, #5
}
 8002416:	b003      	add	sp, #12
 8002418:	bd30      	pop	{r4, r5, pc}
 800241a:	bf00      	nop

0800241c <LSM6DS3_ACC_GYRO_R_ZEN_XL>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_ZEN_XL_t
* Output         : Status of ZEN_XL see LSM6DS3_ACC_GYRO_ZEN_XL_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_ZEN_XL(void *handle, LSM6DS3_ACC_GYRO_ZEN_XL_t *value)
{
 800241c:	b510      	push	{r4, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 800241e:	460a      	mov	r2, r1
{
 8002420:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002422:	2301      	movs	r3, #1
 8002424:	2118      	movs	r1, #24
 8002426:	f003 fa03 	bl	8005830 <Sensor_IO_Read>
 800242a:	b928      	cbnz	r0, 8002438 <LSM6DS3_ACC_GYRO_R_ZEN_XL+0x1c>
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL9_XL, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_ZEN_XL_MASK; //mask
 800242c:	7823      	ldrb	r3, [r4, #0]
 800242e:	f003 0320 	and.w	r3, r3, #32
 8002432:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 8002434:	2001      	movs	r0, #1
}
 8002436:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 8002438:	2000      	movs	r0, #0
}
 800243a:	bd10      	pop	{r4, pc}

0800243c <LSM6DS3_ACC_GYRO_W_PedoStepReset>:
* Input          : LSM6DS3_ACC_GYRO_PEDO_RST_STEP_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_PedoStepReset(void *handle, LSM6DS3_ACC_GYRO_PEDO_RST_STEP_t newValue)
{
 800243c:	b530      	push	{r4, r5, lr}
 800243e:	b083      	sub	sp, #12
 8002440:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002442:	f10d 0207 	add.w	r2, sp, #7
 8002446:	2301      	movs	r3, #1
 8002448:	2119      	movs	r1, #25
{
 800244a:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 800244c:	f003 f9f0 	bl	8005830 <Sensor_IO_Read>
 8002450:	b110      	cbz	r0, 8002458 <LSM6DS3_ACC_GYRO_W_PedoStepReset+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
    return MEMS_ERROR;
 8002452:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002454:	b003      	add	sp, #12
 8002456:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_PEDO_RST_STEP_MASK;
 8002458:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800245c:	f023 0302 	bic.w	r3, r3, #2
  value |= newValue;
 8002460:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002462:	f10d 0207 	add.w	r2, sp, #7
 8002466:	4628      	mov	r0, r5
 8002468:	2301      	movs	r3, #1
 800246a:	2119      	movs	r1, #25
  value |= newValue;
 800246c:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002470:	f003 f990 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002474:	fab0 f080 	clz	r0, r0
 8002478:	0940      	lsrs	r0, r0, #5
}
 800247a:	b003      	add	sp, #12
 800247c:	bd30      	pop	{r4, r5, pc}
 800247e:	bf00      	nop

08002480 <LSM6DS3_ACC_GYRO_W_XEN_G>:
* Input          : LSM6DS3_ACC_GYRO_XEN_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_XEN_G(void *handle, LSM6DS3_ACC_GYRO_XEN_G_t newValue)
{
 8002480:	b530      	push	{r4, r5, lr}
 8002482:	b083      	sub	sp, #12
 8002484:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002486:	f10d 0207 	add.w	r2, sp, #7
 800248a:	2301      	movs	r3, #1
 800248c:	2119      	movs	r1, #25
{
 800248e:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002490:	f003 f9ce 	bl	8005830 <Sensor_IO_Read>
 8002494:	b110      	cbz	r0, 800249c <LSM6DS3_ACC_GYRO_W_XEN_G+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
    return MEMS_ERROR;
 8002496:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002498:	b003      	add	sp, #12
 800249a:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_XEN_G_MASK;
 800249c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80024a0:	f023 0308 	bic.w	r3, r3, #8
  value |= newValue;
 80024a4:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 80024a6:	f10d 0207 	add.w	r2, sp, #7
 80024aa:	4628      	mov	r0, r5
 80024ac:	2301      	movs	r3, #1
 80024ae:	2119      	movs	r1, #25
  value |= newValue;
 80024b0:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 80024b4:	f003 f96e 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 80024b8:	fab0 f080 	clz	r0, r0
 80024bc:	0940      	lsrs	r0, r0, #5
}
 80024be:	b003      	add	sp, #12
 80024c0:	bd30      	pop	{r4, r5, pc}
 80024c2:	bf00      	nop

080024c4 <LSM6DS3_ACC_GYRO_R_XEN_G>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_XEN_G_t
* Output         : Status of XEN_G see LSM6DS3_ACC_GYRO_XEN_G_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_XEN_G(void *handle, LSM6DS3_ACC_GYRO_XEN_G_t *value)
{
 80024c4:	b510      	push	{r4, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80024c6:	460a      	mov	r2, r1
{
 80024c8:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80024ca:	2301      	movs	r3, #1
 80024cc:	2119      	movs	r1, #25
 80024ce:	f003 f9af 	bl	8005830 <Sensor_IO_Read>
 80024d2:	b928      	cbnz	r0, 80024e0 <LSM6DS3_ACC_GYRO_R_XEN_G+0x1c>
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_XEN_G_MASK; //mask
 80024d4:	7823      	ldrb	r3, [r4, #0]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 80024dc:	2001      	movs	r0, #1
}
 80024de:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 80024e0:	2000      	movs	r0, #0
}
 80024e2:	bd10      	pop	{r4, pc}

080024e4 <LSM6DS3_ACC_GYRO_W_YEN_G>:
* Input          : LSM6DS3_ACC_GYRO_YEN_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_YEN_G(void *handle, LSM6DS3_ACC_GYRO_YEN_G_t newValue)
{
 80024e4:	b530      	push	{r4, r5, lr}
 80024e6:	b083      	sub	sp, #12
 80024e8:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80024ea:	f10d 0207 	add.w	r2, sp, #7
 80024ee:	2301      	movs	r3, #1
 80024f0:	2119      	movs	r1, #25
{
 80024f2:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80024f4:	f003 f99c 	bl	8005830 <Sensor_IO_Read>
 80024f8:	b110      	cbz	r0, 8002500 <LSM6DS3_ACC_GYRO_W_YEN_G+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
    return MEMS_ERROR;
 80024fa:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 80024fc:	b003      	add	sp, #12
 80024fe:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_YEN_G_MASK;
 8002500:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002504:	f023 0310 	bic.w	r3, r3, #16
  value |= newValue;
 8002508:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 800250a:	f10d 0207 	add.w	r2, sp, #7
 800250e:	4628      	mov	r0, r5
 8002510:	2301      	movs	r3, #1
 8002512:	2119      	movs	r1, #25
  value |= newValue;
 8002514:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002518:	f003 f93c 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 800251c:	fab0 f080 	clz	r0, r0
 8002520:	0940      	lsrs	r0, r0, #5
}
 8002522:	b003      	add	sp, #12
 8002524:	bd30      	pop	{r4, r5, pc}
 8002526:	bf00      	nop

08002528 <LSM6DS3_ACC_GYRO_R_YEN_G>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_YEN_G_t
* Output         : Status of YEN_G see LSM6DS3_ACC_GYRO_YEN_G_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_YEN_G(void *handle, LSM6DS3_ACC_GYRO_YEN_G_t *value)
{
 8002528:	b510      	push	{r4, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 800252a:	460a      	mov	r2, r1
{
 800252c:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 800252e:	2301      	movs	r3, #1
 8002530:	2119      	movs	r1, #25
 8002532:	f003 f97d 	bl	8005830 <Sensor_IO_Read>
 8002536:	b928      	cbnz	r0, 8002544 <LSM6DS3_ACC_GYRO_R_YEN_G+0x1c>
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_YEN_G_MASK; //mask
 8002538:	7823      	ldrb	r3, [r4, #0]
 800253a:	f003 0310 	and.w	r3, r3, #16
 800253e:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 8002540:	2001      	movs	r0, #1
}
 8002542:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 8002544:	2000      	movs	r0, #0
}
 8002546:	bd10      	pop	{r4, pc}

08002548 <LSM6DS3_ACC_GYRO_W_ZEN_G>:
* Input          : LSM6DS3_ACC_GYRO_ZEN_G_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_ZEN_G(void *handle, LSM6DS3_ACC_GYRO_ZEN_G_t newValue)
{
 8002548:	b530      	push	{r4, r5, lr}
 800254a:	b083      	sub	sp, #12
 800254c:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 800254e:	f10d 0207 	add.w	r2, sp, #7
 8002552:	2301      	movs	r3, #1
 8002554:	2119      	movs	r1, #25
{
 8002556:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002558:	f003 f96a 	bl	8005830 <Sensor_IO_Read>
 800255c:	b110      	cbz	r0, 8002564 <LSM6DS3_ACC_GYRO_W_ZEN_G+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
    return MEMS_ERROR;
 800255e:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002560:	b003      	add	sp, #12
 8002562:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_ZEN_G_MASK;
 8002564:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002568:	f023 0320 	bic.w	r3, r3, #32
  value |= newValue;
 800256c:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 800256e:	f10d 0207 	add.w	r2, sp, #7
 8002572:	4628      	mov	r0, r5
 8002574:	2301      	movs	r3, #1
 8002576:	2119      	movs	r1, #25
  value |= newValue;
 8002578:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 800257c:	f003 f90a 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002580:	fab0 f080 	clz	r0, r0
 8002584:	0940      	lsrs	r0, r0, #5
}
 8002586:	b003      	add	sp, #12
 8002588:	bd30      	pop	{r4, r5, pc}
 800258a:	bf00      	nop

0800258c <LSM6DS3_ACC_GYRO_R_ZEN_G>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_ZEN_G_t
* Output         : Status of ZEN_G see LSM6DS3_ACC_GYRO_ZEN_G_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_ZEN_G(void *handle, LSM6DS3_ACC_GYRO_ZEN_G_t *value)
{
 800258c:	b510      	push	{r4, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 800258e:	460a      	mov	r2, r1
{
 8002590:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002592:	2301      	movs	r3, #1
 8002594:	2119      	movs	r1, #25
 8002596:	f003 f94b 	bl	8005830 <Sensor_IO_Read>
 800259a:	b928      	cbnz	r0, 80025a8 <LSM6DS3_ACC_GYRO_R_ZEN_G+0x1c>
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_ZEN_G_MASK; //mask
 800259c:	7823      	ldrb	r3, [r4, #0]
 800259e:	f003 0320 	and.w	r3, r3, #32
 80025a2:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 80025a4:	2001      	movs	r0, #1
}
 80025a6:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 80025a8:	2000      	movs	r0, #0
}
 80025aa:	bd10      	pop	{r4, pc}

080025ac <LSM6DS3_ACC_GYRO_W_FUNC_EN>:
* Input          : LSM6DS3_ACC_GYRO_FUNC_EN_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FUNC_EN(void *handle, LSM6DS3_ACC_GYRO_FUNC_EN_t newValue)
{
 80025ac:	b530      	push	{r4, r5, lr}
 80025ae:	b083      	sub	sp, #12
 80025b0:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80025b2:	f10d 0207 	add.w	r2, sp, #7
 80025b6:	2301      	movs	r3, #1
 80025b8:	2119      	movs	r1, #25
{
 80025ba:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80025bc:	f003 f938 	bl	8005830 <Sensor_IO_Read>
 80025c0:	b110      	cbz	r0, 80025c8 <LSM6DS3_ACC_GYRO_W_FUNC_EN+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
    return MEMS_ERROR;
 80025c2:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_CTRL10_C, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 80025c4:	b003      	add	sp, #12
 80025c6:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_FUNC_EN_MASK;
 80025c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80025cc:	f023 0304 	bic.w	r3, r3, #4
  value |= newValue;
 80025d0:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 80025d2:	f10d 0207 	add.w	r2, sp, #7
 80025d6:	4628      	mov	r0, r5
 80025d8:	2301      	movs	r3, #1
 80025da:	2119      	movs	r1, #25
  value |= newValue;
 80025dc:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 80025e0:	f003 f8d8 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 80025e4:	fab0 f080 	clz	r0, r0
 80025e8:	0940      	lsrs	r0, r0, #5
}
 80025ea:	b003      	add	sp, #12
 80025ec:	bd30      	pop	{r4, r5, pc}
 80025ee:	bf00      	nop

080025f0 <LSM6DS3_ACC_GYRO_R_WU_EV_STATUS>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_WU_EV_STATUS_t
* Output         : Status of WU_EV_STATUS see LSM6DS3_ACC_GYRO_WU_EV_STATUS_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_WU_EV_STATUS(void *handle, LSM6DS3_ACC_GYRO_WU_EV_STATUS_t *value)
{
 80025f0:	b510      	push	{r4, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80025f2:	460a      	mov	r2, r1
{
 80025f4:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80025f6:	2301      	movs	r3, #1
 80025f8:	211b      	movs	r1, #27
 80025fa:	f003 f919 	bl	8005830 <Sensor_IO_Read>
 80025fe:	b928      	cbnz	r0, 800260c <LSM6DS3_ACC_GYRO_R_WU_EV_STATUS+0x1c>
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_WAKE_UP_SRC, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_WU_EV_STATUS_MASK; //mask
 8002600:	7823      	ldrb	r3, [r4, #0]
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 8002608:	2001      	movs	r0, #1
}
 800260a:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 800260c:	2000      	movs	r0, #0
}
 800260e:	bd10      	pop	{r4, pc}

08002610 <LSM6DS3_ACC_GYRO_R_FF_EV_STATUS>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_FF_EV_STATUS_t
* Output         : Status of FF_EV_STATUS see LSM6DS3_ACC_GYRO_FF_EV_STATUS_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_FF_EV_STATUS(void *handle, LSM6DS3_ACC_GYRO_FF_EV_STATUS_t *value)
{
 8002610:	b510      	push	{r4, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002612:	460a      	mov	r2, r1
{
 8002614:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002616:	2301      	movs	r3, #1
 8002618:	211b      	movs	r1, #27
 800261a:	f003 f909 	bl	8005830 <Sensor_IO_Read>
 800261e:	b928      	cbnz	r0, 800262c <LSM6DS3_ACC_GYRO_R_FF_EV_STATUS+0x1c>
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_WAKE_UP_SRC, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_FF_EV_STATUS_MASK; //mask
 8002620:	7823      	ldrb	r3, [r4, #0]
 8002622:	f003 0320 	and.w	r3, r3, #32
 8002626:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 8002628:	2001      	movs	r0, #1
}
 800262a:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 800262c:	2000      	movs	r0, #0
}
 800262e:	bd10      	pop	{r4, pc}

08002630 <LSM6DS3_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_DOUBLE_TAP_EV_STATUS_t
* Output         : Status of DOUBLE_TAP_EV_STATUS see LSM6DS3_ACC_GYRO_DOUBLE_TAP_EV_STATUS_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS(void *handle, LSM6DS3_ACC_GYRO_DOUBLE_TAP_EV_STATUS_t *value)
{
 8002630:	b510      	push	{r4, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002632:	460a      	mov	r2, r1
{
 8002634:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002636:	2301      	movs	r3, #1
 8002638:	211c      	movs	r1, #28
 800263a:	f003 f8f9 	bl	8005830 <Sensor_IO_Read>
 800263e:	b928      	cbnz	r0, 800264c <LSM6DS3_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS+0x1c>
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_TAP_SRC, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_DOUBLE_TAP_EV_STATUS_MASK; //mask
 8002640:	7823      	ldrb	r3, [r4, #0]
 8002642:	f003 0310 	and.w	r3, r3, #16
 8002646:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 8002648:	2001      	movs	r0, #1
}
 800264a:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 800264c:	2000      	movs	r0, #0
}
 800264e:	bd10      	pop	{r4, pc}

08002650 <LSM6DS3_ACC_GYRO_R_SINGLE_TAP_EV_STATUS>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_SINGLE_TAP_EV_STATUS_t
* Output         : Status of SINGLE_TAP_EV_STATUS see LSM6DS3_ACC_GYRO_SINGLE_TAP_EV_STATUS_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_SINGLE_TAP_EV_STATUS(void *handle, LSM6DS3_ACC_GYRO_SINGLE_TAP_EV_STATUS_t *value)
{
 8002650:	b510      	push	{r4, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002652:	460a      	mov	r2, r1
{
 8002654:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002656:	2301      	movs	r3, #1
 8002658:	211c      	movs	r1, #28
 800265a:	f003 f8e9 	bl	8005830 <Sensor_IO_Read>
 800265e:	b928      	cbnz	r0, 800266c <LSM6DS3_ACC_GYRO_R_SINGLE_TAP_EV_STATUS+0x1c>
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_TAP_SRC, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_SINGLE_TAP_EV_STATUS_MASK; //mask
 8002660:	7823      	ldrb	r3, [r4, #0]
 8002662:	f003 0320 	and.w	r3, r3, #32
 8002666:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 8002668:	2001      	movs	r0, #1
}
 800266a:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 800266c:	2000      	movs	r0, #0
}
 800266e:	bd10      	pop	{r4, pc}

08002670 <LSM6DS3_ACC_GYRO_R_DSD_XL>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_DSD_XL_t
* Output         : Status of DSD_XL see LSM6DS3_ACC_GYRO_DSD_XL_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_DSD_XL(void *handle, LSM6DS3_ACC_GYRO_DSD_XL_t *value)
{
 8002670:	b510      	push	{r4, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002672:	460a      	mov	r2, r1
{
 8002674:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002676:	2301      	movs	r3, #1
 8002678:	211d      	movs	r1, #29
 800267a:	f003 f8d9 	bl	8005830 <Sensor_IO_Read>
 800267e:	b928      	cbnz	r0, 800268c <LSM6DS3_ACC_GYRO_R_DSD_XL+0x1c>
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_D6D_SRC, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_DSD_XL_MASK; //mask
 8002680:	7823      	ldrb	r3, [r4, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 8002688:	2001      	movs	r0, #1
}
 800268a:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 800268c:	2000      	movs	r0, #0
}
 800268e:	bd10      	pop	{r4, pc}

08002690 <LSM6DS3_ACC_GYRO_R_DSD_XH>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_DSD_XH_t
* Output         : Status of DSD_XH see LSM6DS3_ACC_GYRO_DSD_XH_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_DSD_XH(void *handle, LSM6DS3_ACC_GYRO_DSD_XH_t *value)
{
 8002690:	b510      	push	{r4, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002692:	460a      	mov	r2, r1
{
 8002694:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002696:	2301      	movs	r3, #1
 8002698:	211d      	movs	r1, #29
 800269a:	f003 f8c9 	bl	8005830 <Sensor_IO_Read>
 800269e:	b928      	cbnz	r0, 80026ac <LSM6DS3_ACC_GYRO_R_DSD_XH+0x1c>
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_D6D_SRC, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_DSD_XH_MASK; //mask
 80026a0:	7823      	ldrb	r3, [r4, #0]
 80026a2:	f003 0302 	and.w	r3, r3, #2
 80026a6:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 80026a8:	2001      	movs	r0, #1
}
 80026aa:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 80026ac:	2000      	movs	r0, #0
}
 80026ae:	bd10      	pop	{r4, pc}

080026b0 <LSM6DS3_ACC_GYRO_R_DSD_YL>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_DSD_YL_t
* Output         : Status of DSD_YL see LSM6DS3_ACC_GYRO_DSD_YL_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_DSD_YL(void *handle, LSM6DS3_ACC_GYRO_DSD_YL_t *value)
{
 80026b0:	b510      	push	{r4, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80026b2:	460a      	mov	r2, r1
{
 80026b4:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80026b6:	2301      	movs	r3, #1
 80026b8:	211d      	movs	r1, #29
 80026ba:	f003 f8b9 	bl	8005830 <Sensor_IO_Read>
 80026be:	b928      	cbnz	r0, 80026cc <LSM6DS3_ACC_GYRO_R_DSD_YL+0x1c>
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_D6D_SRC, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_DSD_YL_MASK; //mask
 80026c0:	7823      	ldrb	r3, [r4, #0]
 80026c2:	f003 0304 	and.w	r3, r3, #4
 80026c6:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 80026c8:	2001      	movs	r0, #1
}
 80026ca:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 80026cc:	2000      	movs	r0, #0
}
 80026ce:	bd10      	pop	{r4, pc}

080026d0 <LSM6DS3_ACC_GYRO_R_DSD_YH>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_DSD_YH_t
* Output         : Status of DSD_YH see LSM6DS3_ACC_GYRO_DSD_YH_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_DSD_YH(void *handle, LSM6DS3_ACC_GYRO_DSD_YH_t *value)
{
 80026d0:	b510      	push	{r4, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80026d2:	460a      	mov	r2, r1
{
 80026d4:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80026d6:	2301      	movs	r3, #1
 80026d8:	211d      	movs	r1, #29
 80026da:	f003 f8a9 	bl	8005830 <Sensor_IO_Read>
 80026de:	b928      	cbnz	r0, 80026ec <LSM6DS3_ACC_GYRO_R_DSD_YH+0x1c>
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_D6D_SRC, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_DSD_YH_MASK; //mask
 80026e0:	7823      	ldrb	r3, [r4, #0]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 80026e8:	2001      	movs	r0, #1
}
 80026ea:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 80026ec:	2000      	movs	r0, #0
}
 80026ee:	bd10      	pop	{r4, pc}

080026f0 <LSM6DS3_ACC_GYRO_R_DSD_ZL>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_DSD_ZL_t
* Output         : Status of DSD_ZL see LSM6DS3_ACC_GYRO_DSD_ZL_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_DSD_ZL(void *handle, LSM6DS3_ACC_GYRO_DSD_ZL_t *value)
{
 80026f0:	b510      	push	{r4, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80026f2:	460a      	mov	r2, r1
{
 80026f4:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80026f6:	2301      	movs	r3, #1
 80026f8:	211d      	movs	r1, #29
 80026fa:	f003 f899 	bl	8005830 <Sensor_IO_Read>
 80026fe:	b928      	cbnz	r0, 800270c <LSM6DS3_ACC_GYRO_R_DSD_ZL+0x1c>
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_D6D_SRC, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_DSD_ZL_MASK; //mask
 8002700:	7823      	ldrb	r3, [r4, #0]
 8002702:	f003 0310 	and.w	r3, r3, #16
 8002706:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 8002708:	2001      	movs	r0, #1
}
 800270a:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 800270c:	2000      	movs	r0, #0
}
 800270e:	bd10      	pop	{r4, pc}

08002710 <LSM6DS3_ACC_GYRO_R_DSD_ZH>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_DSD_ZH_t
* Output         : Status of DSD_ZH see LSM6DS3_ACC_GYRO_DSD_ZH_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_DSD_ZH(void *handle, LSM6DS3_ACC_GYRO_DSD_ZH_t *value)
{
 8002710:	b510      	push	{r4, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002712:	460a      	mov	r2, r1
{
 8002714:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002716:	2301      	movs	r3, #1
 8002718:	211d      	movs	r1, #29
 800271a:	f003 f889 	bl	8005830 <Sensor_IO_Read>
 800271e:	b928      	cbnz	r0, 800272c <LSM6DS3_ACC_GYRO_R_DSD_ZH+0x1c>
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_D6D_SRC, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_DSD_ZH_MASK; //mask
 8002720:	7823      	ldrb	r3, [r4, #0]
 8002722:	f003 0320 	and.w	r3, r3, #32
 8002726:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 8002728:	2001      	movs	r0, #1
}
 800272a:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 800272c:	2000      	movs	r0, #0
}
 800272e:	bd10      	pop	{r4, pc}

08002730 <LSM6DS3_ACC_GYRO_R_D6D_EV_STATUS>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_D6D_EV_STATUS_t
* Output         : Status of D6D_EV_STATUS see LSM6DS3_ACC_GYRO_D6D_EV_STATUS_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_D6D_EV_STATUS(void *handle, LSM6DS3_ACC_GYRO_D6D_EV_STATUS_t *value)
{
 8002730:	b510      	push	{r4, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002732:	460a      	mov	r2, r1
{
 8002734:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002736:	2301      	movs	r3, #1
 8002738:	211d      	movs	r1, #29
 800273a:	f003 f879 	bl	8005830 <Sensor_IO_Read>
 800273e:	b928      	cbnz	r0, 800274c <LSM6DS3_ACC_GYRO_R_D6D_EV_STATUS+0x1c>
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_D6D_SRC, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_D6D_EV_STATUS_MASK; //mask
 8002740:	7823      	ldrb	r3, [r4, #0]
 8002742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002746:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 8002748:	2001      	movs	r0, #1
}
 800274a:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 800274c:	2000      	movs	r0, #0
}
 800274e:	bd10      	pop	{r4, pc}

08002750 <LSM6DS3_ACC_GYRO_R_XLDA>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_XLDA_t
* Output         : Status of XLDA see LSM6DS3_ACC_GYRO_XLDA_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_XLDA(void *handle, LSM6DS3_ACC_GYRO_XLDA_t *value)
{
 8002750:	b510      	push	{r4, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002752:	460a      	mov	r2, r1
{
 8002754:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002756:	2301      	movs	r3, #1
 8002758:	211e      	movs	r1, #30
 800275a:	f003 f869 	bl	8005830 <Sensor_IO_Read>
 800275e:	b928      	cbnz	r0, 800276c <LSM6DS3_ACC_GYRO_R_XLDA+0x1c>
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_STATUS_REG, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_XLDA_MASK; //mask
 8002760:	7823      	ldrb	r3, [r4, #0]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 8002768:	2001      	movs	r0, #1
}
 800276a:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 800276c:	2000      	movs	r0, #0
}
 800276e:	bd10      	pop	{r4, pc}

08002770 <LSM6DS3_ACC_GYRO_R_GDA>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_GDA_t
* Output         : Status of GDA see LSM6DS3_ACC_GYRO_GDA_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_GDA(void *handle, LSM6DS3_ACC_GYRO_GDA_t *value)
{
 8002770:	b510      	push	{r4, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002772:	460a      	mov	r2, r1
{
 8002774:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002776:	2301      	movs	r3, #1
 8002778:	211e      	movs	r1, #30
 800277a:	f003 f859 	bl	8005830 <Sensor_IO_Read>
 800277e:	b928      	cbnz	r0, 800278c <LSM6DS3_ACC_GYRO_R_GDA+0x1c>
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_STATUS_REG, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_GDA_MASK; //mask
 8002780:	7823      	ldrb	r3, [r4, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 8002788:	2001      	movs	r0, #1
}
 800278a:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 800278c:	2000      	movs	r0, #0
}
 800278e:	bd10      	pop	{r4, pc}

08002790 <LSM6DS3_ACC_GYRO_R_FIFONumOfEntries>:
* Input          : Pointer to u16_t
* Output         : Status of DIFF_FIFO
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_FIFONumOfEntries(void *handle, u16_t *value)
{
 8002790:	b530      	push	{r4, r5, lr}
 8002792:	b083      	sub	sp, #12
 8002794:	460d      	mov	r5, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002796:	2301      	movs	r3, #1
 8002798:	f10d 0207 	add.w	r2, sp, #7
 800279c:	213a      	movs	r1, #58	; 0x3a
{
 800279e:	4604      	mov	r4, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80027a0:	f003 f846 	bl	8005830 <Sensor_IO_Read>
 80027a4:	b110      	cbz	r0, 80027ac <LSM6DS3_ACC_GYRO_R_FIFONumOfEntries+0x1c>
  u8_t valueH, valueL;

  /* Low part from FIFO_STATUS1 */
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_STATUS1, (u8_t *)&valueL, 1) )
    return MEMS_ERROR;
 80027a6:	2000      	movs	r0, #0
  valueH = valueH >> LSM6DS3_ACC_GYRO_DIFF_FIFO_STATUS2_POSITION; //mask

  *value = ((valueH << 8) & 0xFF00) | valueL;

  return MEMS_SUCCESS;
}
 80027a8:	b003      	add	sp, #12
 80027aa:	bd30      	pop	{r4, r5, pc}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80027ac:	4620      	mov	r0, r4
 80027ae:	2301      	movs	r3, #1
 80027b0:	f10d 0206 	add.w	r2, sp, #6
 80027b4:	213b      	movs	r1, #59	; 0x3b
 80027b6:	f003 f83b 	bl	8005830 <Sensor_IO_Read>
 80027ba:	2800      	cmp	r0, #0
 80027bc:	d1f3      	bne.n	80027a6 <LSM6DS3_ACC_GYRO_R_FIFONumOfEntries+0x16>
  valueH &= LSM6DS3_ACC_GYRO_DIFF_FIFO_STATUS2_MASK; //coerce
 80027be:	f89d 2006 	ldrb.w	r2, [sp, #6]
  *value = ((valueH << 8) & 0xFF00) | valueL;
 80027c2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80027c6:	f002 020f 	and.w	r2, r2, #15
 80027ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  return MEMS_SUCCESS;
 80027ce:	2001      	movs	r0, #1
  *value = ((valueH << 8) & 0xFF00) | valueL;
 80027d0:	802b      	strh	r3, [r5, #0]
}
 80027d2:	b003      	add	sp, #12
 80027d4:	bd30      	pop	{r4, r5, pc}
 80027d6:	bf00      	nop

080027d8 <LSM6DS3_ACC_GYRO_R_FIFOEmpty>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_FIFO_EMPTY_t
* Output         : Status of FIFO_EMPTY see LSM6DS3_ACC_GYRO_FIFO_EMPTY_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_FIFOEmpty(void *handle, LSM6DS3_ACC_GYRO_FIFO_EMPTY_t *value)
{
 80027d8:	b510      	push	{r4, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80027da:	460a      	mov	r2, r1
{
 80027dc:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80027de:	2301      	movs	r3, #1
 80027e0:	213b      	movs	r1, #59	; 0x3b
 80027e2:	f003 f825 	bl	8005830 <Sensor_IO_Read>
 80027e6:	b928      	cbnz	r0, 80027f4 <LSM6DS3_ACC_GYRO_R_FIFOEmpty+0x1c>
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_STATUS2, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_FIFO_EMPTY_MASK; //mask
 80027e8:	7823      	ldrb	r3, [r4, #0]
 80027ea:	f003 0310 	and.w	r3, r3, #16
 80027ee:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 80027f0:	2001      	movs	r0, #1
}
 80027f2:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 80027f4:	2000      	movs	r0, #0
}
 80027f6:	bd10      	pop	{r4, pc}

080027f8 <LSM6DS3_ACC_GYRO_R_FIFOFull>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_FIFO_FULL_t
* Output         : Status of FIFO_FULL see LSM6DS3_ACC_GYRO_FIFO_FULL_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_FIFOFull(void *handle, LSM6DS3_ACC_GYRO_FIFO_FULL_t *value)
{
 80027f8:	b510      	push	{r4, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80027fa:	460a      	mov	r2, r1
{
 80027fc:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80027fe:	2301      	movs	r3, #1
 8002800:	213b      	movs	r1, #59	; 0x3b
 8002802:	f003 f815 	bl	8005830 <Sensor_IO_Read>
 8002806:	b928      	cbnz	r0, 8002814 <LSM6DS3_ACC_GYRO_R_FIFOFull+0x1c>
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_STATUS2, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_FIFO_FULL_MASK; //mask
 8002808:	7823      	ldrb	r3, [r4, #0]
 800280a:	f003 0320 	and.w	r3, r3, #32
 800280e:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 8002810:	2001      	movs	r0, #1
}
 8002812:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 8002814:	2000      	movs	r0, #0
}
 8002816:	bd10      	pop	{r4, pc}

08002818 <LSM6DS3_ACC_GYRO_R_OVERRUN>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_OVERRUN_t
* Output         : Status of OVERRUN see LSM6DS3_ACC_GYRO_OVERRUN_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_OVERRUN(void *handle, LSM6DS3_ACC_GYRO_OVERRUN_t *value)
{
 8002818:	b510      	push	{r4, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 800281a:	460a      	mov	r2, r1
{
 800281c:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 800281e:	2301      	movs	r3, #1
 8002820:	213b      	movs	r1, #59	; 0x3b
 8002822:	f003 f805 	bl	8005830 <Sensor_IO_Read>
 8002826:	b928      	cbnz	r0, 8002834 <LSM6DS3_ACC_GYRO_R_OVERRUN+0x1c>
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_STATUS2, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_OVERRUN_MASK; //mask
 8002828:	7823      	ldrb	r3, [r4, #0]
 800282a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282e:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 8002830:	2001      	movs	r0, #1
}
 8002832:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 8002834:	2000      	movs	r0, #0
}
 8002836:	bd10      	pop	{r4, pc}

08002838 <LSM6DS3_ACC_GYRO_R_FIFOPattern>:
* Input          : Pointer to u16_t
* Output         : Status of FIFO_PATTERN
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_FIFOPattern(void *handle, u16_t *value)
{
 8002838:	b530      	push	{r4, r5, lr}
 800283a:	b083      	sub	sp, #12
 800283c:	460d      	mov	r5, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 800283e:	2301      	movs	r3, #1
 8002840:	f10d 0207 	add.w	r2, sp, #7
 8002844:	213c      	movs	r1, #60	; 0x3c
{
 8002846:	4604      	mov	r4, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002848:	f002 fff2 	bl	8005830 <Sensor_IO_Read>
 800284c:	b110      	cbz	r0, 8002854 <LSM6DS3_ACC_GYRO_R_FIFOPattern+0x1c>
  u8_t valueH, valueL;

  /* Low part from FIFO_STATUS3 */
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_STATUS3, (u8_t *)&valueL, 1) )
    return MEMS_ERROR;
 800284e:	2000      	movs	r0, #0
  valueH = valueH >> LSM6DS3_ACC_GYRO_FIFO_STATUS4_PATTERN_POSITION; //mask

  *value = ((valueH << 8) & 0xFF00) | valueL;

  return MEMS_SUCCESS;
}
 8002850:	b003      	add	sp, #12
 8002852:	bd30      	pop	{r4, r5, pc}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002854:	4620      	mov	r0, r4
 8002856:	2301      	movs	r3, #1
 8002858:	f10d 0206 	add.w	r2, sp, #6
 800285c:	213d      	movs	r1, #61	; 0x3d
 800285e:	f002 ffe7 	bl	8005830 <Sensor_IO_Read>
 8002862:	2800      	cmp	r0, #0
 8002864:	d1f3      	bne.n	800284e <LSM6DS3_ACC_GYRO_R_FIFOPattern+0x16>
  valueH &= LSM6DS3_ACC_GYRO_FIFO_STATUS4_PATTERN_MASK; //coerce
 8002866:	f89d 2006 	ldrb.w	r2, [sp, #6]
  *value = ((valueH << 8) & 0xFF00) | valueL;
 800286a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800286e:	f002 0203 	and.w	r2, r2, #3
 8002872:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
  return MEMS_SUCCESS;
 8002876:	2001      	movs	r0, #1
  *value = ((valueH << 8) & 0xFF00) | valueL;
 8002878:	802b      	strh	r3, [r5, #0]
}
 800287a:	b003      	add	sp, #12
 800287c:	bd30      	pop	{r4, r5, pc}
 800287e:	bf00      	nop

08002880 <LSM6DS3_ACC_GYRO_R_PEDO_EV_STATUS>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_PEDO_EV_STATUS_t
* Output         : Status of PEDO_EV_STATUS see LSM6DS3_ACC_GYRO_PEDO_EV_STATUS_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_PEDO_EV_STATUS(void *handle, LSM6DS3_ACC_GYRO_PEDO_EV_STATUS_t *value)
{
 8002880:	b510      	push	{r4, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002882:	460a      	mov	r2, r1
{
 8002884:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002886:	2301      	movs	r3, #1
 8002888:	2153      	movs	r1, #83	; 0x53
 800288a:	f002 ffd1 	bl	8005830 <Sensor_IO_Read>
 800288e:	b928      	cbnz	r0, 800289c <LSM6DS3_ACC_GYRO_R_PEDO_EV_STATUS+0x1c>
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FUNC_SRC, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_PEDO_EV_STATUS_MASK; //mask
 8002890:	7823      	ldrb	r3, [r4, #0]
 8002892:	f003 0310 	and.w	r3, r3, #16
 8002896:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 8002898:	2001      	movs	r0, #1
}
 800289a:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 800289c:	2000      	movs	r0, #0
}
 800289e:	bd10      	pop	{r4, pc}

080028a0 <LSM6DS3_ACC_GYRO_R_TILT_EV_STATUS>:
* Input          : Pointer to LSM6DS3_ACC_GYRO_TILT_EV_STATUS_t
* Output         : Status of TILT_EV_STATUS see LSM6DS3_ACC_GYRO_TILT_EV_STATUS_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_R_TILT_EV_STATUS(void *handle, LSM6DS3_ACC_GYRO_TILT_EV_STATUS_t *value)
{
 80028a0:	b510      	push	{r4, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80028a2:	460a      	mov	r2, r1
{
 80028a4:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80028a6:	2301      	movs	r3, #1
 80028a8:	2153      	movs	r1, #83	; 0x53
 80028aa:	f002 ffc1 	bl	8005830 <Sensor_IO_Read>
 80028ae:	b928      	cbnz	r0, 80028bc <LSM6DS3_ACC_GYRO_R_TILT_EV_STATUS+0x1c>
  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FUNC_SRC, (u8_t *)value, 1) )
    return MEMS_ERROR;

  *value &= LSM6DS3_ACC_GYRO_TILT_EV_STATUS_MASK; //mask
 80028b0:	7823      	ldrb	r3, [r4, #0]
 80028b2:	f003 0320 	and.w	r3, r3, #32
 80028b6:	7023      	strb	r3, [r4, #0]

  return MEMS_SUCCESS;
 80028b8:	2001      	movs	r0, #1
}
 80028ba:	bd10      	pop	{r4, pc}
    return MEMS_ERROR;
 80028bc:	2000      	movs	r0, #0
}
 80028be:	bd10      	pop	{r4, pc}

080028c0 <LSM6DS3_ACC_GYRO_W_LIR>:
* Input          : LSM6DS3_ACC_GYRO_LIR_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_LIR(void *handle, LSM6DS3_ACC_GYRO_LIR_t newValue)
{
 80028c0:	b530      	push	{r4, r5, lr}
 80028c2:	b083      	sub	sp, #12
 80028c4:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80028c6:	f10d 0207 	add.w	r2, sp, #7
 80028ca:	2301      	movs	r3, #1
 80028cc:	2158      	movs	r1, #88	; 0x58
{
 80028ce:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80028d0:	f002 ffae 	bl	8005830 <Sensor_IO_Read>
 80028d4:	b110      	cbz	r0, 80028dc <LSM6DS3_ACC_GYRO_W_LIR+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_TAP_CFG1, &value, 1) )
    return MEMS_ERROR;
 80028d6:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_TAP_CFG1, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 80028d8:	b003      	add	sp, #12
 80028da:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_LIR_MASK;
 80028dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80028e0:	f023 0301 	bic.w	r3, r3, #1
  value |= newValue;
 80028e4:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 80028e6:	f10d 0207 	add.w	r2, sp, #7
 80028ea:	4628      	mov	r0, r5
 80028ec:	2301      	movs	r3, #1
 80028ee:	2158      	movs	r1, #88	; 0x58
  value |= newValue;
 80028f0:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 80028f4:	f002 ff4e 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 80028f8:	fab0 f080 	clz	r0, r0
 80028fc:	0940      	lsrs	r0, r0, #5
}
 80028fe:	b003      	add	sp, #12
 8002900:	bd30      	pop	{r4, r5, pc}
 8002902:	bf00      	nop

08002904 <LSM6DS3_ACC_GYRO_W_TAP_Z_EN>:
* Input          : LSM6DS3_ACC_GYRO_TAP_Z_EN_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_TAP_Z_EN(void *handle, LSM6DS3_ACC_GYRO_TAP_Z_EN_t newValue)
{
 8002904:	b530      	push	{r4, r5, lr}
 8002906:	b083      	sub	sp, #12
 8002908:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 800290a:	f10d 0207 	add.w	r2, sp, #7
 800290e:	2301      	movs	r3, #1
 8002910:	2158      	movs	r1, #88	; 0x58
{
 8002912:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002914:	f002 ff8c 	bl	8005830 <Sensor_IO_Read>
 8002918:	b110      	cbz	r0, 8002920 <LSM6DS3_ACC_GYRO_W_TAP_Z_EN+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_TAP_CFG1, &value, 1) )
    return MEMS_ERROR;
 800291a:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_TAP_CFG1, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800291c:	b003      	add	sp, #12
 800291e:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_TAP_Z_EN_MASK;
 8002920:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002924:	f023 0302 	bic.w	r3, r3, #2
  value |= newValue;
 8002928:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 800292a:	f10d 0207 	add.w	r2, sp, #7
 800292e:	4628      	mov	r0, r5
 8002930:	2301      	movs	r3, #1
 8002932:	2158      	movs	r1, #88	; 0x58
  value |= newValue;
 8002934:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002938:	f002 ff2c 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 800293c:	fab0 f080 	clz	r0, r0
 8002940:	0940      	lsrs	r0, r0, #5
}
 8002942:	b003      	add	sp, #12
 8002944:	bd30      	pop	{r4, r5, pc}
 8002946:	bf00      	nop

08002948 <LSM6DS3_ACC_GYRO_W_TAP_Y_EN>:
* Input          : LSM6DS3_ACC_GYRO_TAP_Y_EN_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_TAP_Y_EN(void *handle, LSM6DS3_ACC_GYRO_TAP_Y_EN_t newValue)
{
 8002948:	b530      	push	{r4, r5, lr}
 800294a:	b083      	sub	sp, #12
 800294c:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 800294e:	f10d 0207 	add.w	r2, sp, #7
 8002952:	2301      	movs	r3, #1
 8002954:	2158      	movs	r1, #88	; 0x58
{
 8002956:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002958:	f002 ff6a 	bl	8005830 <Sensor_IO_Read>
 800295c:	b110      	cbz	r0, 8002964 <LSM6DS3_ACC_GYRO_W_TAP_Y_EN+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_TAP_CFG1, &value, 1) )
    return MEMS_ERROR;
 800295e:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_TAP_CFG1, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002960:	b003      	add	sp, #12
 8002962:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_TAP_Y_EN_MASK;
 8002964:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002968:	f023 0304 	bic.w	r3, r3, #4
  value |= newValue;
 800296c:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 800296e:	f10d 0207 	add.w	r2, sp, #7
 8002972:	4628      	mov	r0, r5
 8002974:	2301      	movs	r3, #1
 8002976:	2158      	movs	r1, #88	; 0x58
  value |= newValue;
 8002978:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 800297c:	f002 ff0a 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002980:	fab0 f080 	clz	r0, r0
 8002984:	0940      	lsrs	r0, r0, #5
}
 8002986:	b003      	add	sp, #12
 8002988:	bd30      	pop	{r4, r5, pc}
 800298a:	bf00      	nop

0800298c <LSM6DS3_ACC_GYRO_W_TAP_X_EN>:
* Input          : LSM6DS3_ACC_GYRO_TAP_X_EN_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_TAP_X_EN(void *handle, LSM6DS3_ACC_GYRO_TAP_X_EN_t newValue)
{
 800298c:	b530      	push	{r4, r5, lr}
 800298e:	b083      	sub	sp, #12
 8002990:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002992:	f10d 0207 	add.w	r2, sp, #7
 8002996:	2301      	movs	r3, #1
 8002998:	2158      	movs	r1, #88	; 0x58
{
 800299a:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 800299c:	f002 ff48 	bl	8005830 <Sensor_IO_Read>
 80029a0:	b110      	cbz	r0, 80029a8 <LSM6DS3_ACC_GYRO_W_TAP_X_EN+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_TAP_CFG1, &value, 1) )
    return MEMS_ERROR;
 80029a2:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_TAP_CFG1, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 80029a4:	b003      	add	sp, #12
 80029a6:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_TAP_X_EN_MASK;
 80029a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80029ac:	f023 0308 	bic.w	r3, r3, #8
  value |= newValue;
 80029b0:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 80029b2:	f10d 0207 	add.w	r2, sp, #7
 80029b6:	4628      	mov	r0, r5
 80029b8:	2301      	movs	r3, #1
 80029ba:	2158      	movs	r1, #88	; 0x58
  value |= newValue;
 80029bc:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 80029c0:	f002 fee8 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 80029c4:	fab0 f080 	clz	r0, r0
 80029c8:	0940      	lsrs	r0, r0, #5
}
 80029ca:	b003      	add	sp, #12
 80029cc:	bd30      	pop	{r4, r5, pc}
 80029ce:	bf00      	nop

080029d0 <LSM6DS3_ACC_GYRO_W_TILT_EN>:
* Input          : LSM6DS3_ACC_GYRO_TILT_EN_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_TILT_EN(void *handle, LSM6DS3_ACC_GYRO_TILT_EN_t newValue)
{
 80029d0:	b530      	push	{r4, r5, lr}
 80029d2:	b083      	sub	sp, #12
 80029d4:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80029d6:	f10d 0207 	add.w	r2, sp, #7
 80029da:	2301      	movs	r3, #1
 80029dc:	2158      	movs	r1, #88	; 0x58
{
 80029de:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80029e0:	f002 ff26 	bl	8005830 <Sensor_IO_Read>
 80029e4:	b110      	cbz	r0, 80029ec <LSM6DS3_ACC_GYRO_W_TILT_EN+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_TAP_CFG1, &value, 1) )
    return MEMS_ERROR;
 80029e6:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_TAP_CFG1, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 80029e8:	b003      	add	sp, #12
 80029ea:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_TILT_EN_MASK;
 80029ec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80029f0:	f023 0320 	bic.w	r3, r3, #32
  value |= newValue;
 80029f4:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 80029f6:	f10d 0207 	add.w	r2, sp, #7
 80029fa:	4628      	mov	r0, r5
 80029fc:	2301      	movs	r3, #1
 80029fe:	2158      	movs	r1, #88	; 0x58
  value |= newValue;
 8002a00:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002a04:	f002 fec6 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002a08:	fab0 f080 	clz	r0, r0
 8002a0c:	0940      	lsrs	r0, r0, #5
}
 8002a0e:	b003      	add	sp, #12
 8002a10:	bd30      	pop	{r4, r5, pc}
 8002a12:	bf00      	nop

08002a14 <LSM6DS3_ACC_GYRO_W_PEDO_EN>:
* Input          : LSM6DS3_ACC_GYRO_PEDO_EN_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_PEDO_EN(void *handle, LSM6DS3_ACC_GYRO_PEDO_EN_t newValue)
{
 8002a14:	b530      	push	{r4, r5, lr}
 8002a16:	b083      	sub	sp, #12
 8002a18:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002a1a:	f10d 0207 	add.w	r2, sp, #7
 8002a1e:	2301      	movs	r3, #1
 8002a20:	2158      	movs	r1, #88	; 0x58
{
 8002a22:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002a24:	f002 ff04 	bl	8005830 <Sensor_IO_Read>
 8002a28:	b110      	cbz	r0, 8002a30 <LSM6DS3_ACC_GYRO_W_PEDO_EN+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_TAP_CFG1, &value, 1) )
    return MEMS_ERROR;
 8002a2a:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_TAP_CFG1, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002a2c:	b003      	add	sp, #12
 8002a2e:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_PEDO_EN_MASK;
 8002a30:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002a34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  value |= newValue;
 8002a38:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002a3a:	f10d 0207 	add.w	r2, sp, #7
 8002a3e:	4628      	mov	r0, r5
 8002a40:	2301      	movs	r3, #1
 8002a42:	2158      	movs	r1, #88	; 0x58
  value |= newValue;
 8002a44:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002a48:	f002 fea4 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002a4c:	fab0 f080 	clz	r0, r0
 8002a50:	0940      	lsrs	r0, r0, #5
}
 8002a52:	b003      	add	sp, #12
 8002a54:	bd30      	pop	{r4, r5, pc}
 8002a56:	bf00      	nop

08002a58 <LSM6DS3_ACC_GYRO_W_TAP_THS>:
* Input          : u8_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_TAP_THS(void *handle, u8_t newValue)
{
 8002a58:	b570      	push	{r4, r5, r6, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	460d      	mov	r5, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002a5e:	f10d 0207 	add.w	r2, sp, #7
 8002a62:	2301      	movs	r3, #1
 8002a64:	2159      	movs	r1, #89	; 0x59
{
 8002a66:	4606      	mov	r6, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002a68:	f002 fee2 	bl	8005830 <Sensor_IO_Read>
 8002a6c:	b110      	cbz	r0, 8002a74 <LSM6DS3_ACC_GYRO_W_TAP_THS+0x1c>

  newValue = newValue << LSM6DS3_ACC_GYRO_TAP_THS_POSITION; //mask
  newValue &= LSM6DS3_ACC_GYRO_TAP_THS_MASK; //coerce

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_TAP_THS_6D, &value, 1) )
    return MEMS_ERROR;
 8002a6e:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_TAP_THS_6D, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002a70:	b002      	add	sp, #8
 8002a72:	bd70      	pop	{r4, r5, r6, pc}
  value &= ~LSM6DS3_ACC_GYRO_TAP_THS_MASK;
 8002a74:	f89d 4007 	ldrb.w	r4, [sp, #7]
  newValue &= LSM6DS3_ACC_GYRO_TAP_THS_MASK; //coerce
 8002a78:	f005 051f 	and.w	r5, r5, #31
  value &= ~LSM6DS3_ACC_GYRO_TAP_THS_MASK;
 8002a7c:	f024 041f 	bic.w	r4, r4, #31
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002a80:	f10d 0207 	add.w	r2, sp, #7
 8002a84:	4630      	mov	r0, r6
  value |= newValue;
 8002a86:	432c      	orrs	r4, r5
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002a88:	2301      	movs	r3, #1
 8002a8a:	2159      	movs	r1, #89	; 0x59
  value |= newValue;
 8002a8c:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002a90:	f002 fe80 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002a94:	fab0 f080 	clz	r0, r0
 8002a98:	0940      	lsrs	r0, r0, #5
}
 8002a9a:	b002      	add	sp, #8
 8002a9c:	bd70      	pop	{r4, r5, r6, pc}
 8002a9e:	bf00      	nop

08002aa0 <LSM6DS3_ACC_GYRO_W_SIXD_THS>:
* Input          : LSM6DS3_ACC_GYRO_SIXD_THS_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_SIXD_THS(void *handle, LSM6DS3_ACC_GYRO_SIXD_THS_t newValue)
{
 8002aa0:	b530      	push	{r4, r5, lr}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002aa6:	f10d 0207 	add.w	r2, sp, #7
 8002aaa:	2301      	movs	r3, #1
 8002aac:	2159      	movs	r1, #89	; 0x59
{
 8002aae:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002ab0:	f002 febe 	bl	8005830 <Sensor_IO_Read>
 8002ab4:	b110      	cbz	r0, 8002abc <LSM6DS3_ACC_GYRO_W_SIXD_THS+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_TAP_THS_6D, &value, 1) )
    return MEMS_ERROR;
 8002ab6:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_TAP_THS_6D, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002ab8:	b003      	add	sp, #12
 8002aba:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_SIXD_THS_MASK;
 8002abc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002ac0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
  value |= newValue;
 8002ac4:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002ac6:	f10d 0207 	add.w	r2, sp, #7
 8002aca:	4628      	mov	r0, r5
 8002acc:	2301      	movs	r3, #1
 8002ace:	2159      	movs	r1, #89	; 0x59
  value |= newValue;
 8002ad0:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002ad4:	f002 fe5e 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002ad8:	fab0 f080 	clz	r0, r0
 8002adc:	0940      	lsrs	r0, r0, #5
}
 8002ade:	b003      	add	sp, #12
 8002ae0:	bd30      	pop	{r4, r5, pc}
 8002ae2:	bf00      	nop

08002ae4 <LSM6DS3_ACC_GYRO_W_SHOCK_Duration>:
* Input          : u8_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_SHOCK_Duration(void *handle, u8_t newValue)
{
 8002ae4:	b570      	push	{r4, r5, r6, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	460d      	mov	r5, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002aea:	f10d 0207 	add.w	r2, sp, #7
 8002aee:	2301      	movs	r3, #1
 8002af0:	215a      	movs	r1, #90	; 0x5a
{
 8002af2:	4606      	mov	r6, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002af4:	f002 fe9c 	bl	8005830 <Sensor_IO_Read>
 8002af8:	b110      	cbz	r0, 8002b00 <LSM6DS3_ACC_GYRO_W_SHOCK_Duration+0x1c>

  newValue = newValue << LSM6DS3_ACC_GYRO_SHOCK_POSITION; //mask
  newValue &= LSM6DS3_ACC_GYRO_SHOCK_MASK; //coerce

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_INT_DUR2, &value, 1) )
    return MEMS_ERROR;
 8002afa:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_INT_DUR2, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002afc:	b002      	add	sp, #8
 8002afe:	bd70      	pop	{r4, r5, r6, pc}
  value &= ~LSM6DS3_ACC_GYRO_SHOCK_MASK;
 8002b00:	f89d 4007 	ldrb.w	r4, [sp, #7]
  newValue &= LSM6DS3_ACC_GYRO_SHOCK_MASK; //coerce
 8002b04:	f005 0503 	and.w	r5, r5, #3
  value &= ~LSM6DS3_ACC_GYRO_SHOCK_MASK;
 8002b08:	f024 0403 	bic.w	r4, r4, #3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002b0c:	f10d 0207 	add.w	r2, sp, #7
 8002b10:	4630      	mov	r0, r6
  value |= newValue;
 8002b12:	432c      	orrs	r4, r5
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002b14:	2301      	movs	r3, #1
 8002b16:	215a      	movs	r1, #90	; 0x5a
  value |= newValue;
 8002b18:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002b1c:	f002 fe3a 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002b20:	fab0 f080 	clz	r0, r0
 8002b24:	0940      	lsrs	r0, r0, #5
}
 8002b26:	b002      	add	sp, #8
 8002b28:	bd70      	pop	{r4, r5, r6, pc}
 8002b2a:	bf00      	nop

08002b2c <LSM6DS3_ACC_GYRO_W_QUIET_Duration>:
* Input          : u8_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_QUIET_Duration(void *handle, u8_t newValue)
{
 8002b2c:	b530      	push	{r4, r5, lr}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002b32:	f10d 0207 	add.w	r2, sp, #7
 8002b36:	2301      	movs	r3, #1
 8002b38:	215a      	movs	r1, #90	; 0x5a
{
 8002b3a:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002b3c:	f002 fe78 	bl	8005830 <Sensor_IO_Read>
 8002b40:	b110      	cbz	r0, 8002b48 <LSM6DS3_ACC_GYRO_W_QUIET_Duration+0x1c>

  newValue = newValue << LSM6DS3_ACC_GYRO_QUIET_POSITION; //mask
  newValue &= LSM6DS3_ACC_GYRO_QUIET_MASK; //coerce

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_INT_DUR2, &value, 1) )
    return MEMS_ERROR;
 8002b42:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_INT_DUR2, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002b44:	b003      	add	sp, #12
 8002b46:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_QUIET_MASK;
 8002b48:	f89d 3007 	ldrb.w	r3, [sp, #7]
  newValue = newValue << LSM6DS3_ACC_GYRO_QUIET_POSITION; //mask
 8002b4c:	00a4      	lsls	r4, r4, #2
  value &= ~LSM6DS3_ACC_GYRO_QUIET_MASK;
 8002b4e:	f023 030c 	bic.w	r3, r3, #12
  newValue &= LSM6DS3_ACC_GYRO_QUIET_MASK; //coerce
 8002b52:	f004 040c 	and.w	r4, r4, #12
  value |= newValue;
 8002b56:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002b58:	f10d 0207 	add.w	r2, sp, #7
 8002b5c:	4628      	mov	r0, r5
 8002b5e:	2301      	movs	r3, #1
 8002b60:	215a      	movs	r1, #90	; 0x5a
  value |= newValue;
 8002b62:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002b66:	f002 fe15 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002b6a:	fab0 f080 	clz	r0, r0
 8002b6e:	0940      	lsrs	r0, r0, #5
}
 8002b70:	b003      	add	sp, #12
 8002b72:	bd30      	pop	{r4, r5, pc}

08002b74 <LSM6DS3_ACC_GYRO_W_DUR>:
* Input          : u8_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_DUR(void *handle, u8_t newValue)
{
 8002b74:	b570      	push	{r4, r5, r6, lr}
 8002b76:	b082      	sub	sp, #8
 8002b78:	460d      	mov	r5, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002b7a:	f10d 0207 	add.w	r2, sp, #7
 8002b7e:	2301      	movs	r3, #1
 8002b80:	215a      	movs	r1, #90	; 0x5a
{
 8002b82:	4606      	mov	r6, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002b84:	f002 fe54 	bl	8005830 <Sensor_IO_Read>
 8002b88:	b110      	cbz	r0, 8002b90 <LSM6DS3_ACC_GYRO_W_DUR+0x1c>

  newValue = newValue << LSM6DS3_ACC_GYRO_DUR_POSITION; //mask
  newValue &= LSM6DS3_ACC_GYRO_DUR_MASK; //coerce

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_INT_DUR2, &value, 1) )
    return MEMS_ERROR;
 8002b8a:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_INT_DUR2, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002b8c:	b002      	add	sp, #8
 8002b8e:	bd70      	pop	{r4, r5, r6, pc}
  value &= ~LSM6DS3_ACC_GYRO_DUR_MASK;
 8002b90:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8002b94:	f004 040f 	and.w	r4, r4, #15
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002b98:	f10d 0207 	add.w	r2, sp, #7
 8002b9c:	4630      	mov	r0, r6
  value |= newValue;
 8002b9e:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	215a      	movs	r1, #90	; 0x5a
  value |= newValue;
 8002ba6:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002baa:	f002 fdf3 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002bae:	fab0 f080 	clz	r0, r0
 8002bb2:	0940      	lsrs	r0, r0, #5
}
 8002bb4:	b002      	add	sp, #8
 8002bb6:	bd70      	pop	{r4, r5, r6, pc}

08002bb8 <LSM6DS3_ACC_GYRO_W_WK_THS>:
* Input          : u8_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_WK_THS(void *handle, u8_t newValue)
{
 8002bb8:	b570      	push	{r4, r5, r6, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	460d      	mov	r5, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002bbe:	f10d 0207 	add.w	r2, sp, #7
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	215b      	movs	r1, #91	; 0x5b
{
 8002bc6:	4606      	mov	r6, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002bc8:	f002 fe32 	bl	8005830 <Sensor_IO_Read>
 8002bcc:	b110      	cbz	r0, 8002bd4 <LSM6DS3_ACC_GYRO_W_WK_THS+0x1c>

  newValue = newValue << LSM6DS3_ACC_GYRO_WK_THS_POSITION; //mask
  newValue &= LSM6DS3_ACC_GYRO_WK_THS_MASK; //coerce

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_WAKE_UP_THS, &value, 1) )
    return MEMS_ERROR;
 8002bce:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_WAKE_UP_THS, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002bd0:	b002      	add	sp, #8
 8002bd2:	bd70      	pop	{r4, r5, r6, pc}
  value &= ~LSM6DS3_ACC_GYRO_WK_THS_MASK;
 8002bd4:	f89d 4007 	ldrb.w	r4, [sp, #7]
  newValue &= LSM6DS3_ACC_GYRO_WK_THS_MASK; //coerce
 8002bd8:	f005 053f 	and.w	r5, r5, #63	; 0x3f
  value &= ~LSM6DS3_ACC_GYRO_WK_THS_MASK;
 8002bdc:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002be0:	f10d 0207 	add.w	r2, sp, #7
 8002be4:	4630      	mov	r0, r6
  value |= newValue;
 8002be6:	432c      	orrs	r4, r5
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002be8:	2301      	movs	r3, #1
 8002bea:	215b      	movs	r1, #91	; 0x5b
  value |= newValue;
 8002bec:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002bf0:	f002 fdd0 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002bf4:	fab0 f080 	clz	r0, r0
 8002bf8:	0940      	lsrs	r0, r0, #5
}
 8002bfa:	b002      	add	sp, #8
 8002bfc:	bd70      	pop	{r4, r5, r6, pc}
 8002bfe:	bf00      	nop

08002c00 <LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV>:
* Input          : LSM6DS3_ACC_GYRO_SINGLE_DOUBLE_TAP_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV(void *handle, LSM6DS3_ACC_GYRO_SINGLE_DOUBLE_TAP_t newValue)
{
 8002c00:	b530      	push	{r4, r5, lr}
 8002c02:	b083      	sub	sp, #12
 8002c04:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002c06:	f10d 0207 	add.w	r2, sp, #7
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	215b      	movs	r1, #91	; 0x5b
{
 8002c0e:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002c10:	f002 fe0e 	bl	8005830 <Sensor_IO_Read>
 8002c14:	b110      	cbz	r0, 8002c1c <LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_WAKE_UP_THS, &value, 1) )
    return MEMS_ERROR;
 8002c16:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_WAKE_UP_THS, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002c18:	b003      	add	sp, #12
 8002c1a:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_SINGLE_DOUBLE_TAP_MASK;
 8002c1c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  value |= newValue;
 8002c24:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002c26:	f10d 0207 	add.w	r2, sp, #7
 8002c2a:	4628      	mov	r0, r5
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	215b      	movs	r1, #91	; 0x5b
  value |= newValue;
 8002c30:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002c34:	f002 fdae 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002c38:	fab0 f080 	clz	r0, r0
 8002c3c:	0940      	lsrs	r0, r0, #5
}
 8002c3e:	b003      	add	sp, #12
 8002c40:	bd30      	pop	{r4, r5, pc}
 8002c42:	bf00      	nop

08002c44 <LSM6DS3_ACC_GYRO_W_SLEEP_DUR>:
* Input          : u8_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_SLEEP_DUR(void *handle, u8_t newValue)
{
 8002c44:	b570      	push	{r4, r5, r6, lr}
 8002c46:	b082      	sub	sp, #8
 8002c48:	460d      	mov	r5, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002c4a:	f10d 0207 	add.w	r2, sp, #7
 8002c4e:	2301      	movs	r3, #1
 8002c50:	215c      	movs	r1, #92	; 0x5c
{
 8002c52:	4606      	mov	r6, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002c54:	f002 fdec 	bl	8005830 <Sensor_IO_Read>
 8002c58:	b110      	cbz	r0, 8002c60 <LSM6DS3_ACC_GYRO_W_SLEEP_DUR+0x1c>

  newValue = newValue << LSM6DS3_ACC_GYRO_SLEEP_DUR_POSITION; //mask
  newValue &= LSM6DS3_ACC_GYRO_SLEEP_DUR_MASK; //coerce

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_WAKE_UP_DUR, &value, 1) )
    return MEMS_ERROR;
 8002c5a:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_WAKE_UP_DUR, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002c5c:	b002      	add	sp, #8
 8002c5e:	bd70      	pop	{r4, r5, r6, pc}
  value &= ~LSM6DS3_ACC_GYRO_SLEEP_DUR_MASK;
 8002c60:	f89d 4007 	ldrb.w	r4, [sp, #7]
  newValue &= LSM6DS3_ACC_GYRO_SLEEP_DUR_MASK; //coerce
 8002c64:	f005 050f 	and.w	r5, r5, #15
  value &= ~LSM6DS3_ACC_GYRO_SLEEP_DUR_MASK;
 8002c68:	f024 040f 	bic.w	r4, r4, #15
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002c6c:	f10d 0207 	add.w	r2, sp, #7
 8002c70:	4630      	mov	r0, r6
  value |= newValue;
 8002c72:	432c      	orrs	r4, r5
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002c74:	2301      	movs	r3, #1
 8002c76:	215c      	movs	r1, #92	; 0x5c
  value |= newValue;
 8002c78:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002c7c:	f002 fd8a 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002c80:	fab0 f080 	clz	r0, r0
 8002c84:	0940      	lsrs	r0, r0, #5
}
 8002c86:	b002      	add	sp, #8
 8002c88:	bd70      	pop	{r4, r5, r6, pc}
 8002c8a:	bf00      	nop

08002c8c <LSM6DS3_ACC_GYRO_W_TIMER_HR>:
* Input          : LSM6DS3_ACC_GYRO_TIMER_HR_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_TIMER_HR(void *handle, LSM6DS3_ACC_GYRO_TIMER_HR_t newValue)
{
 8002c8c:	b530      	push	{r4, r5, lr}
 8002c8e:	b083      	sub	sp, #12
 8002c90:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002c92:	f10d 0207 	add.w	r2, sp, #7
 8002c96:	2301      	movs	r3, #1
 8002c98:	215c      	movs	r1, #92	; 0x5c
{
 8002c9a:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002c9c:	f002 fdc8 	bl	8005830 <Sensor_IO_Read>
 8002ca0:	b110      	cbz	r0, 8002ca8 <LSM6DS3_ACC_GYRO_W_TIMER_HR+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_WAKE_UP_DUR, &value, 1) )
    return MEMS_ERROR;
 8002ca2:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_WAKE_UP_DUR, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002ca4:	b003      	add	sp, #12
 8002ca6:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_TIMER_HR_MASK;
 8002ca8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002cac:	f023 0310 	bic.w	r3, r3, #16
  value |= newValue;
 8002cb0:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002cb2:	f10d 0207 	add.w	r2, sp, #7
 8002cb6:	4628      	mov	r0, r5
 8002cb8:	2301      	movs	r3, #1
 8002cba:	215c      	movs	r1, #92	; 0x5c
  value |= newValue;
 8002cbc:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002cc0:	f002 fd68 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002cc4:	fab0 f080 	clz	r0, r0
 8002cc8:	0940      	lsrs	r0, r0, #5
}
 8002cca:	b003      	add	sp, #12
 8002ccc:	bd30      	pop	{r4, r5, pc}
 8002cce:	bf00      	nop

08002cd0 <LSM6DS3_ACC_GYRO_W_WAKE_DUR>:
* Input          : u8_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_WAKE_DUR(void *handle, u8_t newValue)
{
 8002cd0:	b530      	push	{r4, r5, lr}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002cd6:	f10d 0207 	add.w	r2, sp, #7
 8002cda:	2301      	movs	r3, #1
 8002cdc:	215c      	movs	r1, #92	; 0x5c
{
 8002cde:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002ce0:	f002 fda6 	bl	8005830 <Sensor_IO_Read>
 8002ce4:	b110      	cbz	r0, 8002cec <LSM6DS3_ACC_GYRO_W_WAKE_DUR+0x1c>

  newValue = newValue << LSM6DS3_ACC_GYRO_WAKE_DUR_POSITION; //mask
  newValue &= LSM6DS3_ACC_GYRO_WAKE_DUR_MASK; //coerce

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_WAKE_UP_DUR, &value, 1) )
    return MEMS_ERROR;
 8002ce6:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_WAKE_UP_DUR, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002ce8:	b003      	add	sp, #12
 8002cea:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_WAKE_DUR_MASK;
 8002cec:	f89d 3007 	ldrb.w	r3, [sp, #7]
  newValue = newValue << LSM6DS3_ACC_GYRO_WAKE_DUR_POSITION; //mask
 8002cf0:	0164      	lsls	r4, r4, #5
  value &= ~LSM6DS3_ACC_GYRO_WAKE_DUR_MASK;
 8002cf2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
  newValue &= LSM6DS3_ACC_GYRO_WAKE_DUR_MASK; //coerce
 8002cf6:	f004 0460 	and.w	r4, r4, #96	; 0x60
  value |= newValue;
 8002cfa:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002cfc:	f10d 0207 	add.w	r2, sp, #7
 8002d00:	4628      	mov	r0, r5
 8002d02:	2301      	movs	r3, #1
 8002d04:	215c      	movs	r1, #92	; 0x5c
  value |= newValue;
 8002d06:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002d0a:	f002 fd43 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002d0e:	fab0 f080 	clz	r0, r0
 8002d12:	0940      	lsrs	r0, r0, #5
}
 8002d14:	b003      	add	sp, #12
 8002d16:	bd30      	pop	{r4, r5, pc}

08002d18 <LSM6DS3_ACC_GYRO_W_FF_THS>:
* Input          : LSM6DS3_ACC_GYRO_FF_THS_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FF_THS(void *handle, LSM6DS3_ACC_GYRO_FF_THS_t newValue)
{
 8002d18:	b530      	push	{r4, r5, lr}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002d1e:	f10d 0207 	add.w	r2, sp, #7
 8002d22:	2301      	movs	r3, #1
 8002d24:	215d      	movs	r1, #93	; 0x5d
{
 8002d26:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002d28:	f002 fd82 	bl	8005830 <Sensor_IO_Read>
 8002d2c:	b110      	cbz	r0, 8002d34 <LSM6DS3_ACC_GYRO_W_FF_THS+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FREE_FALL, &value, 1) )
    return MEMS_ERROR;
 8002d2e:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_FREE_FALL, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002d30:	b003      	add	sp, #12
 8002d32:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_FF_THS_MASK;
 8002d34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002d38:	f023 0307 	bic.w	r3, r3, #7
  value |= newValue;
 8002d3c:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002d3e:	f10d 0207 	add.w	r2, sp, #7
 8002d42:	4628      	mov	r0, r5
 8002d44:	2301      	movs	r3, #1
 8002d46:	215d      	movs	r1, #93	; 0x5d
  value |= newValue;
 8002d48:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002d4c:	f002 fd22 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002d50:	fab0 f080 	clz	r0, r0
 8002d54:	0940      	lsrs	r0, r0, #5
}
 8002d56:	b003      	add	sp, #12
 8002d58:	bd30      	pop	{r4, r5, pc}
 8002d5a:	bf00      	nop

08002d5c <LSM6DS3_ACC_GYRO_W_FF_Duration>:
* Input          : u8_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FF_Duration(void *handle, u8_t newValue)
{
 8002d5c:	b570      	push	{r4, r5, r6, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	460e      	mov	r6, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002d62:	f10d 0207 	add.w	r2, sp, #7
 8002d66:	2301      	movs	r3, #1
 8002d68:	215d      	movs	r1, #93	; 0x5d
{
 8002d6a:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002d6c:	f002 fd60 	bl	8005830 <Sensor_IO_Read>
 8002d70:	b110      	cbz	r0, 8002d78 <LSM6DS3_ACC_GYRO_W_FF_Duration+0x1c>
  /* Low part in FREE_FALL reg */
  valueL = valueL << LSM6DS3_ACC_GYRO_FF_FREE_FALL_DUR_POSITION; //mask
  valueL &= LSM6DS3_ACC_GYRO_FF_FREE_FALL_DUR_MASK; //coerce

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FREE_FALL, &value, 1) )
    return MEMS_ERROR;
 8002d72:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_WAKE_UP_DUR, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002d74:	b002      	add	sp, #8
 8002d76:	bd70      	pop	{r4, r5, r6, pc}
  value &= ~LSM6DS3_ACC_GYRO_FF_FREE_FALL_DUR_MASK;
 8002d78:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8002d7c:	f004 0407 	and.w	r4, r4, #7
  value |= valueL;
 8002d80:	ea44 04c6 	orr.w	r4, r4, r6, lsl #3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002d84:	2301      	movs	r3, #1
 8002d86:	f10d 0207 	add.w	r2, sp, #7
 8002d8a:	215d      	movs	r1, #93	; 0x5d
 8002d8c:	4628      	mov	r0, r5
  value |= valueL;
 8002d8e:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002d92:	f002 fcff 	bl	8005794 <Sensor_IO_Write>
 8002d96:	2800      	cmp	r0, #0
 8002d98:	d1eb      	bne.n	8002d72 <LSM6DS3_ACC_GYRO_W_FF_Duration+0x16>
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	f10d 0207 	add.w	r2, sp, #7
 8002da0:	215c      	movs	r1, #92	; 0x5c
 8002da2:	4628      	mov	r0, r5
 8002da4:	f002 fd44 	bl	8005830 <Sensor_IO_Read>
 8002da8:	2800      	cmp	r0, #0
 8002daa:	d1e2      	bne.n	8002d72 <LSM6DS3_ACC_GYRO_W_FF_Duration+0x16>
  value &= ~LSM6DS3_ACC_GYRO_FF_WAKE_UP_DUR_MASK;
 8002dac:	f89d 3007 	ldrb.w	r3, [sp, #7]
  valueH = (newValue >> 5) & 0x1;
 8002db0:	0976      	lsrs	r6, r6, #5
  value &= ~LSM6DS3_ACC_GYRO_FF_WAKE_UP_DUR_MASK;
 8002db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
  value |= valueH;
 8002db6:	ea43 16c6 	orr.w	r6, r3, r6, lsl #7
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002dba:	f10d 0207 	add.w	r2, sp, #7
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	215c      	movs	r1, #92	; 0x5c
  value |= valueH;
 8002dc4:	f88d 6007 	strb.w	r6, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002dc8:	f002 fce4 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002dcc:	fab0 f080 	clz	r0, r0
 8002dd0:	0940      	lsrs	r0, r0, #5
 8002dd2:	e7cf      	b.n	8002d74 <LSM6DS3_ACC_GYRO_W_FF_Duration+0x18>

08002dd4 <LSM6DS3_ACC_GYRO_W_TiltEvOnInt1>:
* Input          : LSM6DS3_ACC_GYRO_INT1_TILT_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_TiltEvOnInt1(void *handle, LSM6DS3_ACC_GYRO_INT1_TILT_t newValue)
{
 8002dd4:	b530      	push	{r4, r5, lr}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002dda:	f10d 0207 	add.w	r2, sp, #7
 8002dde:	2301      	movs	r3, #1
 8002de0:	215e      	movs	r1, #94	; 0x5e
{
 8002de2:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002de4:	f002 fd24 	bl	8005830 <Sensor_IO_Read>
 8002de8:	b110      	cbz	r0, 8002df0 <LSM6DS3_ACC_GYRO_W_TiltEvOnInt1+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_MD1_CFG, &value, 1) )
    return MEMS_ERROR;
 8002dea:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_MD1_CFG, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002dec:	b003      	add	sp, #12
 8002dee:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_INT1_TILT_MASK;
 8002df0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002df4:	f023 0302 	bic.w	r3, r3, #2
  value |= newValue;
 8002df8:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002dfa:	f10d 0207 	add.w	r2, sp, #7
 8002dfe:	4628      	mov	r0, r5
 8002e00:	2301      	movs	r3, #1
 8002e02:	215e      	movs	r1, #94	; 0x5e
  value |= newValue;
 8002e04:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002e08:	f002 fcc4 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002e0c:	fab0 f080 	clz	r0, r0
 8002e10:	0940      	lsrs	r0, r0, #5
}
 8002e12:	b003      	add	sp, #12
 8002e14:	bd30      	pop	{r4, r5, pc}
 8002e16:	bf00      	nop

08002e18 <LSM6DS3_ACC_GYRO_W_6DEvOnInt1>:
* Input          : LSM6DS3_ACC_GYRO_INT1_6D_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_6DEvOnInt1(void *handle, LSM6DS3_ACC_GYRO_INT1_6D_t newValue)
{
 8002e18:	b530      	push	{r4, r5, lr}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002e1e:	f10d 0207 	add.w	r2, sp, #7
 8002e22:	2301      	movs	r3, #1
 8002e24:	215e      	movs	r1, #94	; 0x5e
{
 8002e26:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002e28:	f002 fd02 	bl	8005830 <Sensor_IO_Read>
 8002e2c:	b110      	cbz	r0, 8002e34 <LSM6DS3_ACC_GYRO_W_6DEvOnInt1+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_MD1_CFG, &value, 1) )
    return MEMS_ERROR;
 8002e2e:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_MD1_CFG, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002e30:	b003      	add	sp, #12
 8002e32:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_INT1_6D_MASK;
 8002e34:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002e38:	f023 0304 	bic.w	r3, r3, #4
  value |= newValue;
 8002e3c:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002e3e:	f10d 0207 	add.w	r2, sp, #7
 8002e42:	4628      	mov	r0, r5
 8002e44:	2301      	movs	r3, #1
 8002e46:	215e      	movs	r1, #94	; 0x5e
  value |= newValue;
 8002e48:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002e4c:	f002 fca2 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002e50:	fab0 f080 	clz	r0, r0
 8002e54:	0940      	lsrs	r0, r0, #5
}
 8002e56:	b003      	add	sp, #12
 8002e58:	bd30      	pop	{r4, r5, pc}
 8002e5a:	bf00      	nop

08002e5c <LSM6DS3_ACC_GYRO_W_TapEvOnInt1>:
* Input          : LSM6DS3_ACC_GYRO_INT1_TAP_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_TapEvOnInt1(void *handle, LSM6DS3_ACC_GYRO_INT1_TAP_t newValue)
{
 8002e5c:	b530      	push	{r4, r5, lr}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002e62:	f10d 0207 	add.w	r2, sp, #7
 8002e66:	2301      	movs	r3, #1
 8002e68:	215e      	movs	r1, #94	; 0x5e
{
 8002e6a:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002e6c:	f002 fce0 	bl	8005830 <Sensor_IO_Read>
 8002e70:	b110      	cbz	r0, 8002e78 <LSM6DS3_ACC_GYRO_W_TapEvOnInt1+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_MD1_CFG, &value, 1) )
    return MEMS_ERROR;
 8002e72:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_MD1_CFG, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002e74:	b003      	add	sp, #12
 8002e76:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_INT1_TAP_MASK;
 8002e78:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002e7c:	f023 0308 	bic.w	r3, r3, #8
  value |= newValue;
 8002e80:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002e82:	f10d 0207 	add.w	r2, sp, #7
 8002e86:	4628      	mov	r0, r5
 8002e88:	2301      	movs	r3, #1
 8002e8a:	215e      	movs	r1, #94	; 0x5e
  value |= newValue;
 8002e8c:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002e90:	f002 fc80 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002e94:	fab0 f080 	clz	r0, r0
 8002e98:	0940      	lsrs	r0, r0, #5
}
 8002e9a:	b003      	add	sp, #12
 8002e9c:	bd30      	pop	{r4, r5, pc}
 8002e9e:	bf00      	nop

08002ea0 <LSM6DS3_ACC_GYRO_W_FFEvOnInt1>:
* Input          : LSM6DS3_ACC_GYRO_INT1_FF_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FFEvOnInt1(void *handle, LSM6DS3_ACC_GYRO_INT1_FF_t newValue)
{
 8002ea0:	b530      	push	{r4, r5, lr}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002ea6:	f10d 0207 	add.w	r2, sp, #7
 8002eaa:	2301      	movs	r3, #1
 8002eac:	215e      	movs	r1, #94	; 0x5e
{
 8002eae:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002eb0:	f002 fcbe 	bl	8005830 <Sensor_IO_Read>
 8002eb4:	b110      	cbz	r0, 8002ebc <LSM6DS3_ACC_GYRO_W_FFEvOnInt1+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_MD1_CFG, &value, 1) )
    return MEMS_ERROR;
 8002eb6:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_MD1_CFG, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002eb8:	b003      	add	sp, #12
 8002eba:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_INT1_FF_MASK;
 8002ebc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002ec0:	f023 0310 	bic.w	r3, r3, #16
  value |= newValue;
 8002ec4:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002ec6:	f10d 0207 	add.w	r2, sp, #7
 8002eca:	4628      	mov	r0, r5
 8002ecc:	2301      	movs	r3, #1
 8002ece:	215e      	movs	r1, #94	; 0x5e
  value |= newValue;
 8002ed0:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002ed4:	f002 fc5e 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002ed8:	fab0 f080 	clz	r0, r0
 8002edc:	0940      	lsrs	r0, r0, #5
}
 8002ede:	b003      	add	sp, #12
 8002ee0:	bd30      	pop	{r4, r5, pc}
 8002ee2:	bf00      	nop

08002ee4 <LSM6DS3_ACC_GYRO_W_WUEvOnInt1>:
* Input          : LSM6DS3_ACC_GYRO_INT1_WU_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_WUEvOnInt1(void *handle, LSM6DS3_ACC_GYRO_INT1_WU_t newValue)
{
 8002ee4:	b530      	push	{r4, r5, lr}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002eea:	f10d 0207 	add.w	r2, sp, #7
 8002eee:	2301      	movs	r3, #1
 8002ef0:	215e      	movs	r1, #94	; 0x5e
{
 8002ef2:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002ef4:	f002 fc9c 	bl	8005830 <Sensor_IO_Read>
 8002ef8:	b110      	cbz	r0, 8002f00 <LSM6DS3_ACC_GYRO_W_WUEvOnInt1+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_MD1_CFG, &value, 1) )
    return MEMS_ERROR;
 8002efa:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_MD1_CFG, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002efc:	b003      	add	sp, #12
 8002efe:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_INT1_WU_MASK;
 8002f00:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002f04:	f023 0320 	bic.w	r3, r3, #32
  value |= newValue;
 8002f08:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002f0a:	f10d 0207 	add.w	r2, sp, #7
 8002f0e:	4628      	mov	r0, r5
 8002f10:	2301      	movs	r3, #1
 8002f12:	215e      	movs	r1, #94	; 0x5e
  value |= newValue;
 8002f14:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002f18:	f002 fc3c 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002f1c:	fab0 f080 	clz	r0, r0
 8002f20:	0940      	lsrs	r0, r0, #5
}
 8002f22:	b003      	add	sp, #12
 8002f24:	bd30      	pop	{r4, r5, pc}
 8002f26:	bf00      	nop

08002f28 <LSM6DS3_ACC_GYRO_W_SingleTapOnInt1>:
* Input          : LSM6DS3_ACC_GYRO_INT1_SINGLE_TAP_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_SingleTapOnInt1(void *handle, LSM6DS3_ACC_GYRO_INT1_SINGLE_TAP_t newValue)
{
 8002f28:	b530      	push	{r4, r5, lr}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002f2e:	f10d 0207 	add.w	r2, sp, #7
 8002f32:	2301      	movs	r3, #1
 8002f34:	215e      	movs	r1, #94	; 0x5e
{
 8002f36:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002f38:	f002 fc7a 	bl	8005830 <Sensor_IO_Read>
 8002f3c:	b110      	cbz	r0, 8002f44 <LSM6DS3_ACC_GYRO_W_SingleTapOnInt1+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_MD1_CFG, &value, 1) )
    return MEMS_ERROR;
 8002f3e:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_MD1_CFG, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002f40:	b003      	add	sp, #12
 8002f42:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_INT1_SINGLE_TAP_MASK;
 8002f44:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002f48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  value |= newValue;
 8002f4c:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002f4e:	f10d 0207 	add.w	r2, sp, #7
 8002f52:	4628      	mov	r0, r5
 8002f54:	2301      	movs	r3, #1
 8002f56:	215e      	movs	r1, #94	; 0x5e
  value |= newValue;
 8002f58:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002f5c:	f002 fc1a 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002f60:	fab0 f080 	clz	r0, r0
 8002f64:	0940      	lsrs	r0, r0, #5
}
 8002f66:	b003      	add	sp, #12
 8002f68:	bd30      	pop	{r4, r5, pc}
 8002f6a:	bf00      	nop

08002f6c <LSM6DS3_ACC_GYRO_W_TiltEvOnInt2>:
* Input          : LSM6DS3_ACC_GYRO_INT2_TILT_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_TiltEvOnInt2(void *handle, LSM6DS3_ACC_GYRO_INT2_TILT_t newValue)
{
 8002f6c:	b530      	push	{r4, r5, lr}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002f72:	f10d 0207 	add.w	r2, sp, #7
 8002f76:	2301      	movs	r3, #1
 8002f78:	215f      	movs	r1, #95	; 0x5f
{
 8002f7a:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002f7c:	f002 fc58 	bl	8005830 <Sensor_IO_Read>
 8002f80:	b110      	cbz	r0, 8002f88 <LSM6DS3_ACC_GYRO_W_TiltEvOnInt2+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_MD2_CFG, &value, 1) )
    return MEMS_ERROR;
 8002f82:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_MD2_CFG, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002f84:	b003      	add	sp, #12
 8002f86:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_INT2_TILT_MASK;
 8002f88:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002f8c:	f023 0302 	bic.w	r3, r3, #2
  value |= newValue;
 8002f90:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002f92:	f10d 0207 	add.w	r2, sp, #7
 8002f96:	4628      	mov	r0, r5
 8002f98:	2301      	movs	r3, #1
 8002f9a:	215f      	movs	r1, #95	; 0x5f
  value |= newValue;
 8002f9c:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002fa0:	f002 fbf8 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002fa4:	fab0 f080 	clz	r0, r0
 8002fa8:	0940      	lsrs	r0, r0, #5
}
 8002faa:	b003      	add	sp, #12
 8002fac:	bd30      	pop	{r4, r5, pc}
 8002fae:	bf00      	nop

08002fb0 <LSM6DS3_ACC_GYRO_W_6DEvOnInt2>:
* Input          : LSM6DS3_ACC_GYRO_INT2_6D_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_6DEvOnInt2(void *handle, LSM6DS3_ACC_GYRO_INT2_6D_t newValue)
{
 8002fb0:	b530      	push	{r4, r5, lr}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002fb6:	f10d 0207 	add.w	r2, sp, #7
 8002fba:	2301      	movs	r3, #1
 8002fbc:	215f      	movs	r1, #95	; 0x5f
{
 8002fbe:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002fc0:	f002 fc36 	bl	8005830 <Sensor_IO_Read>
 8002fc4:	b110      	cbz	r0, 8002fcc <LSM6DS3_ACC_GYRO_W_6DEvOnInt2+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_MD2_CFG, &value, 1) )
    return MEMS_ERROR;
 8002fc6:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_MD2_CFG, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8002fc8:	b003      	add	sp, #12
 8002fca:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_INT2_6D_MASK;
 8002fcc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002fd0:	f023 0304 	bic.w	r3, r3, #4
  value |= newValue;
 8002fd4:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002fd6:	f10d 0207 	add.w	r2, sp, #7
 8002fda:	4628      	mov	r0, r5
 8002fdc:	2301      	movs	r3, #1
 8002fde:	215f      	movs	r1, #95	; 0x5f
  value |= newValue;
 8002fe0:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8002fe4:	f002 fbd6 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8002fe8:	fab0 f080 	clz	r0, r0
 8002fec:	0940      	lsrs	r0, r0, #5
}
 8002fee:	b003      	add	sp, #12
 8002ff0:	bd30      	pop	{r4, r5, pc}
 8002ff2:	bf00      	nop

08002ff4 <LSM6DS3_ACC_GYRO_W_TapEvOnInt2>:
* Input          : LSM6DS3_ACC_GYRO_INT2_TAP_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_TapEvOnInt2(void *handle, LSM6DS3_ACC_GYRO_INT2_TAP_t newValue)
{
 8002ff4:	b530      	push	{r4, r5, lr}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8002ffa:	f10d 0207 	add.w	r2, sp, #7
 8002ffe:	2301      	movs	r3, #1
 8003000:	215f      	movs	r1, #95	; 0x5f
{
 8003002:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8003004:	f002 fc14 	bl	8005830 <Sensor_IO_Read>
 8003008:	b110      	cbz	r0, 8003010 <LSM6DS3_ACC_GYRO_W_TapEvOnInt2+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_MD2_CFG, &value, 1) )
    return MEMS_ERROR;
 800300a:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_MD2_CFG, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 800300c:	b003      	add	sp, #12
 800300e:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_INT2_TAP_MASK;
 8003010:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003014:	f023 0308 	bic.w	r3, r3, #8
  value |= newValue;
 8003018:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 800301a:	f10d 0207 	add.w	r2, sp, #7
 800301e:	4628      	mov	r0, r5
 8003020:	2301      	movs	r3, #1
 8003022:	215f      	movs	r1, #95	; 0x5f
  value |= newValue;
 8003024:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8003028:	f002 fbb4 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 800302c:	fab0 f080 	clz	r0, r0
 8003030:	0940      	lsrs	r0, r0, #5
}
 8003032:	b003      	add	sp, #12
 8003034:	bd30      	pop	{r4, r5, pc}
 8003036:	bf00      	nop

08003038 <LSM6DS3_ACC_GYRO_W_FFEvOnInt2>:
* Input          : LSM6DS3_ACC_GYRO_INT2_FF_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_FFEvOnInt2(void *handle, LSM6DS3_ACC_GYRO_INT2_FF_t newValue)
{
 8003038:	b530      	push	{r4, r5, lr}
 800303a:	b083      	sub	sp, #12
 800303c:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 800303e:	f10d 0207 	add.w	r2, sp, #7
 8003042:	2301      	movs	r3, #1
 8003044:	215f      	movs	r1, #95	; 0x5f
{
 8003046:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8003048:	f002 fbf2 	bl	8005830 <Sensor_IO_Read>
 800304c:	b110      	cbz	r0, 8003054 <LSM6DS3_ACC_GYRO_W_FFEvOnInt2+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_MD2_CFG, &value, 1) )
    return MEMS_ERROR;
 800304e:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_MD2_CFG, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8003050:	b003      	add	sp, #12
 8003052:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_INT2_FF_MASK;
 8003054:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003058:	f023 0310 	bic.w	r3, r3, #16
  value |= newValue;
 800305c:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 800305e:	f10d 0207 	add.w	r2, sp, #7
 8003062:	4628      	mov	r0, r5
 8003064:	2301      	movs	r3, #1
 8003066:	215f      	movs	r1, #95	; 0x5f
  value |= newValue;
 8003068:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 800306c:	f002 fb92 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 8003070:	fab0 f080 	clz	r0, r0
 8003074:	0940      	lsrs	r0, r0, #5
}
 8003076:	b003      	add	sp, #12
 8003078:	bd30      	pop	{r4, r5, pc}
 800307a:	bf00      	nop

0800307c <LSM6DS3_ACC_GYRO_W_WUEvOnInt2>:
* Input          : LSM6DS3_ACC_GYRO_INT2_WU_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_WUEvOnInt2(void *handle, LSM6DS3_ACC_GYRO_INT2_WU_t newValue)
{
 800307c:	b530      	push	{r4, r5, lr}
 800307e:	b083      	sub	sp, #12
 8003080:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8003082:	f10d 0207 	add.w	r2, sp, #7
 8003086:	2301      	movs	r3, #1
 8003088:	215f      	movs	r1, #95	; 0x5f
{
 800308a:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 800308c:	f002 fbd0 	bl	8005830 <Sensor_IO_Read>
 8003090:	b110      	cbz	r0, 8003098 <LSM6DS3_ACC_GYRO_W_WUEvOnInt2+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_MD2_CFG, &value, 1) )
    return MEMS_ERROR;
 8003092:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_MD2_CFG, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 8003094:	b003      	add	sp, #12
 8003096:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_INT2_WU_MASK;
 8003098:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800309c:	f023 0320 	bic.w	r3, r3, #32
  value |= newValue;
 80030a0:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 80030a2:	f10d 0207 	add.w	r2, sp, #7
 80030a6:	4628      	mov	r0, r5
 80030a8:	2301      	movs	r3, #1
 80030aa:	215f      	movs	r1, #95	; 0x5f
  value |= newValue;
 80030ac:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 80030b0:	f002 fb70 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 80030b4:	fab0 f080 	clz	r0, r0
 80030b8:	0940      	lsrs	r0, r0, #5
}
 80030ba:	b003      	add	sp, #12
 80030bc:	bd30      	pop	{r4, r5, pc}
 80030be:	bf00      	nop

080030c0 <LSM6DS3_ACC_GYRO_W_SingleTapOnInt2>:
* Input          : LSM6DS3_ACC_GYRO_INT2_SINGLE_TAP_t
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_SingleTapOnInt2(void *handle, LSM6DS3_ACC_GYRO_INT2_SINGLE_TAP_t newValue)
{
 80030c0:	b530      	push	{r4, r5, lr}
 80030c2:	b083      	sub	sp, #12
 80030c4:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80030c6:	f10d 0207 	add.w	r2, sp, #7
 80030ca:	2301      	movs	r3, #1
 80030cc:	215f      	movs	r1, #95	; 0x5f
{
 80030ce:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80030d0:	f002 fbae 	bl	8005830 <Sensor_IO_Read>
 80030d4:	b110      	cbz	r0, 80030dc <LSM6DS3_ACC_GYRO_W_SingleTapOnInt2+0x1c>
  u8_t value;

  if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_MD2_CFG, &value, 1) )
    return MEMS_ERROR;
 80030d6:	2000      	movs	r0, #0

  if( !LSM6DS3_ACC_GYRO_WriteReg(handle, LSM6DS3_ACC_GYRO_MD2_CFG, &value, 1) )
    return MEMS_ERROR;

  return MEMS_SUCCESS;
}
 80030d8:	b003      	add	sp, #12
 80030da:	bd30      	pop	{r4, r5, pc}
  value &= ~LSM6DS3_ACC_GYRO_INT2_SINGLE_TAP_MASK;
 80030dc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80030e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  value |= newValue;
 80030e4:	431c      	orrs	r4, r3
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 80030e6:	f10d 0207 	add.w	r2, sp, #7
 80030ea:	4628      	mov	r0, r5
 80030ec:	2301      	movs	r3, #1
 80030ee:	215f      	movs	r1, #95	; 0x5f
  value |= newValue;
 80030f0:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 80030f4:	f002 fb4e 	bl	8005794 <Sensor_IO_Write>
    return MEMS_ERROR;
 80030f8:	fab0 f080 	clz	r0, r0
 80030fc:	0940      	lsrs	r0, r0, #5
}
 80030fe:	b003      	add	sp, #12
 8003100:	bd30      	pop	{r4, r5, pc}
 8003102:	bf00      	nop

08003104 <LSM6DS3_ACC_GYRO_Get_GetFIFOData>:
* Input          : pointer to [u8_t]
* Output         : GetFIFOData buffer u8_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_Get_GetFIFOData(void *handle, u8_t *buff)
{
 8003104:	b538      	push	{r3, r4, r5, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8003106:	460a      	mov	r2, r1
{
 8003108:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 800310a:	2301      	movs	r3, #1
 800310c:	213e      	movs	r1, #62	; 0x3e
{
 800310e:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8003110:	f002 fb8e 	bl	8005830 <Sensor_IO_Read>
 8003114:	b948      	cbnz	r0, 800312a <LSM6DS3_ACC_GYRO_Get_GetFIFOData+0x26>
 8003116:	1c62      	adds	r2, r4, #1
 8003118:	4628      	mov	r0, r5
 800311a:	2301      	movs	r3, #1
 800311c:	213f      	movs	r1, #63	; 0x3f
 800311e:	f002 fb87 	bl	8005830 <Sensor_IO_Read>
  for (i = 0; i < 1; i++ )
  {
    for (j = 0; j < numberOfByteForDimension; j++ )
    {
      if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_FIFO_DATA_OUT_L + k, &buff[k], 1))
        return MEMS_ERROR;
 8003122:	fab0 f080 	clz	r0, r0
 8003126:	0940      	lsrs	r0, r0, #5
      k++;
    }
  }

  return MEMS_SUCCESS;
}
 8003128:	bd38      	pop	{r3, r4, r5, pc}
        return MEMS_ERROR;
 800312a:	2000      	movs	r0, #0
}
 800312c:	bd38      	pop	{r3, r4, r5, pc}
 800312e:	bf00      	nop

08003130 <LSM6DS3_ACC_GYRO_Get_GetStepCounter>:
* Input          : pointer to [u8_t]
* Output         : GetStepCounter buffer u8_t
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t LSM6DS3_ACC_GYRO_Get_GetStepCounter(void *handle, u8_t *buff)
{
 8003130:	b538      	push	{r3, r4, r5, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8003132:	460a      	mov	r2, r1
{
 8003134:	460c      	mov	r4, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8003136:	2301      	movs	r3, #1
 8003138:	214b      	movs	r1, #75	; 0x4b
{
 800313a:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 800313c:	f002 fb78 	bl	8005830 <Sensor_IO_Read>
 8003140:	b948      	cbnz	r0, 8003156 <LSM6DS3_ACC_GYRO_Get_GetStepCounter+0x26>
 8003142:	1c62      	adds	r2, r4, #1
 8003144:	4628      	mov	r0, r5
 8003146:	2301      	movs	r3, #1
 8003148:	214c      	movs	r1, #76	; 0x4c
 800314a:	f002 fb71 	bl	8005830 <Sensor_IO_Read>
  for (i = 0; i < 1; i++ )
  {
    for (j = 0; j < numberOfByteForDimension; j++ )
    {
      if( !LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_STEP_COUNTER_L + k, &buff[k], 1))
        return MEMS_ERROR;
 800314e:	fab0 f080 	clz	r0, r0
 8003152:	0940      	lsrs	r0, r0, #5
      k++;
    }
  }

  return MEMS_SUCCESS;
}
 8003154:	bd38      	pop	{r3, r4, r5, pc}
        return MEMS_ERROR;
 8003156:	2000      	movs	r0, #0
}
 8003158:	bd38      	pop	{r3, r4, r5, pc}
 800315a:	bf00      	nop

0800315c <LSM6DS3_ACC_GYRO_W_PedoThreshold>:
* Input          : pointer to [u8_t]
* Output         : None
* Return         : Status [MEMS_ERROR, MEMS_SUCCESS]
*******************************************************************************/
status_t  LSM6DS3_ACC_GYRO_W_PedoThreshold(void *handle, u8_t newValue)
{
 800315c:	b570      	push	{r4, r5, r6, lr}
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 800315e:	2301      	movs	r3, #1
{
 8003160:	b082      	sub	sp, #8
 8003162:	460e      	mov	r6, r1
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 8003164:	f10d 0207 	add.w	r2, sp, #7
 8003168:	4619      	mov	r1, r3
{
 800316a:	4605      	mov	r5, r0
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 800316c:	f002 fb60 	bl	8005830 <Sensor_IO_Read>
 8003170:	b960      	cbnz	r0, 800318c <LSM6DS3_ACC_GYRO_W_PedoThreshold+0x30>
  value &= ~LSM6DSM_ACC_GYRO_EMB_ACC_MASK;
 8003172:	f89d 4007 	ldrb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8003176:	2301      	movs	r3, #1
  value |= newValue;
 8003178:	f064 047f 	orn	r4, r4, #127	; 0x7f
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 800317c:	4619      	mov	r1, r3
 800317e:	f10d 0207 	add.w	r2, sp, #7
 8003182:	4628      	mov	r0, r5
  value |= newValue;
 8003184:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 8003188:	f002 fb04 	bl	8005794 <Sensor_IO_Write>
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 800318c:	f10d 0206 	add.w	r2, sp, #6
 8003190:	2301      	movs	r3, #1
 8003192:	210f      	movs	r1, #15
 8003194:	4628      	mov	r0, r5
 8003196:	f002 fb4b 	bl	8005830 <Sensor_IO_Read>
  LSM6DS3_ACC_GYRO_W_EmbeddedAccess(handle, LSM6DS3H_ACC_GYRO_FUNC_CFG_ENABLED);

  /* read current value */
  LSM6DS3_ACC_GYRO_ReadReg(handle, LSM6DS3_ACC_GYRO_CONFIG_PEDO_THS_MIN, &value, 1);

  value &= ~0x1F;
 800319a:	f89d 4006 	ldrb.w	r4, [sp, #6]
  value |= (newValue & 0x1F);
 800319e:	f006 061f 	and.w	r6, r6, #31
  value &= ~0x1F;
 80031a2:	f024 041f 	bic.w	r4, r4, #31
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 80031a6:	f10d 0206 	add.w	r2, sp, #6
 80031aa:	2301      	movs	r3, #1
 80031ac:	210f      	movs	r1, #15
  value |= (newValue & 0x1F);
 80031ae:	4334      	orrs	r4, r6
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 80031b0:	4628      	mov	r0, r5
  value |= (newValue & 0x1F);
 80031b2:	f88d 4006 	strb.w	r4, [sp, #6]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 80031b6:	f002 faed 	bl	8005794 <Sensor_IO_Write>
  if (Sensor_IO_Read(handle, Reg, Bufp, len))
 80031ba:	2301      	movs	r3, #1
 80031bc:	4619      	mov	r1, r3
 80031be:	f10d 0207 	add.w	r2, sp, #7
 80031c2:	4628      	mov	r0, r5
 80031c4:	f002 fb34 	bl	8005830 <Sensor_IO_Read>
 80031c8:	b960      	cbnz	r0, 80031e4 <LSM6DS3_ACC_GYRO_W_PedoThreshold+0x88>
  value &= ~LSM6DSM_ACC_GYRO_EMB_ACC_MASK;
 80031ca:	f89d 4007 	ldrb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 80031ce:	2301      	movs	r3, #1
  value &= ~LSM6DSM_ACC_GYRO_EMB_ACC_MASK;
 80031d0:	f004 047f 	and.w	r4, r4, #127	; 0x7f
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 80031d4:	f10d 0207 	add.w	r2, sp, #7
 80031d8:	4628      	mov	r0, r5
 80031da:	4619      	mov	r1, r3
  value |= newValue;
 80031dc:	f88d 4007 	strb.w	r4, [sp, #7]
  if (Sensor_IO_Write(handle, Reg, Bufp, len))
 80031e0:	f002 fad8 	bl	8005794 <Sensor_IO_Write>

  /* Close Embedded Function Register page*/
  LSM6DS3_ACC_GYRO_W_EmbeddedAccess(handle, LSM6DS3H_ACC_GYRO_FUNC_CFG_DISABLED);

  return MEMS_SUCCESS;
}
 80031e4:	2001      	movs	r0, #1
 80031e6:	b002      	add	sp, #8
 80031e8:	bd70      	pop	{r4, r5, r6, pc}
 80031ea:	bf00      	nop

080031ec <LSM6DS3_FIFO_Set_Watermark_Level>:
 * @param watermark FIFO watermark level
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
*/
static DrvStatusTypeDef LSM6DS3_FIFO_Set_Watermark_Level( DrvContextTypeDef *handle, uint16_t watermark )
{
 80031ec:	b508      	push	{r3, lr}

  if ( LSM6DS3_ACC_GYRO_W_FIFO_Watermark( handle, watermark ) == MEMS_ERROR )
 80031ee:	f7fe ff05 	bl	8001ffc <LSM6DS3_ACC_GYRO_W_FIFO_Watermark>
  {
    return COMPONENT_ERROR;
  }

  return COMPONENT_OK;
}
 80031f2:	fab0 f080 	clz	r0, r0
 80031f6:	0940      	lsrs	r0, r0, #5
 80031f8:	bd08      	pop	{r3, pc}
 80031fa:	bf00      	nop

080031fc <LSM6DS3_X_Get_Sensitivity>:
{
 80031fc:	b510      	push	{r4, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	460c      	mov	r4, r1
  if ( LSM6DS3_ACC_GYRO_R_FS_XL( (void *)handle, &fullScale ) == MEMS_ERROR )
 8003202:	f10d 0107 	add.w	r1, sp, #7
 8003206:	f7fe fde9 	bl	8001ddc <LSM6DS3_ACC_GYRO_R_FS_XL>
 800320a:	b160      	cbz	r0, 8003226 <LSM6DS3_X_Get_Sensitivity+0x2a>
  switch( fullScale )
 800320c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003210:	2b0c      	cmp	r3, #12
 8003212:	d81f      	bhi.n	8003254 <LSM6DS3_X_Get_Sensitivity+0x58>
 8003214:	e8df f003 	tbb	[pc, r3]
 8003218:	1e1e1e0f 	.word	0x1e1e1e0f
 800321c:	1e1e1e14 	.word	0x1e1e1e14
 8003220:	1e1e1e19 	.word	0x1e1e1e19
 8003224:	0a          	.byte	0x0a
 8003225:	00          	.byte	0x00
    return COMPONENT_ERROR;
 8003226:	2001      	movs	r0, #1
}
 8003228:	b002      	add	sp, #8
 800322a:	bd10      	pop	{r4, pc}
      *sensitivity = ( float )LSM6DS3_ACC_SENSITIVITY_FOR_FS_8G;
 800322c:	4b0c      	ldr	r3, [pc, #48]	; (8003260 <LSM6DS3_X_Get_Sensitivity+0x64>)
 800322e:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8003230:	2000      	movs	r0, #0
}
 8003232:	b002      	add	sp, #8
 8003234:	bd10      	pop	{r4, pc}
      *sensitivity = ( float )LSM6DS3_ACC_SENSITIVITY_FOR_FS_2G;
 8003236:	4b0b      	ldr	r3, [pc, #44]	; (8003264 <LSM6DS3_X_Get_Sensitivity+0x68>)
 8003238:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 800323a:	2000      	movs	r0, #0
}
 800323c:	b002      	add	sp, #8
 800323e:	bd10      	pop	{r4, pc}
      *sensitivity = ( float )LSM6DS3_ACC_SENSITIVITY_FOR_FS_16G;
 8003240:	4b09      	ldr	r3, [pc, #36]	; (8003268 <LSM6DS3_X_Get_Sensitivity+0x6c>)
 8003242:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8003244:	2000      	movs	r0, #0
}
 8003246:	b002      	add	sp, #8
 8003248:	bd10      	pop	{r4, pc}
      *sensitivity = ( float )LSM6DS3_ACC_SENSITIVITY_FOR_FS_4G;
 800324a:	4b08      	ldr	r3, [pc, #32]	; (800326c <LSM6DS3_X_Get_Sensitivity+0x70>)
 800324c:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 800324e:	2000      	movs	r0, #0
}
 8003250:	b002      	add	sp, #8
 8003252:	bd10      	pop	{r4, pc}
      *sensitivity = -1.0f;
 8003254:	4b06      	ldr	r3, [pc, #24]	; (8003270 <LSM6DS3_X_Get_Sensitivity+0x74>)
 8003256:	6023      	str	r3, [r4, #0]
      return COMPONENT_ERROR;
 8003258:	2001      	movs	r0, #1
}
 800325a:	b002      	add	sp, #8
 800325c:	bd10      	pop	{r4, pc}
 800325e:	bf00      	nop
 8003260:	3e79db23 	.word	0x3e79db23
 8003264:	3d79db23 	.word	0x3d79db23
 8003268:	3ef9db23 	.word	0x3ef9db23
 800326c:	3df9db23 	.word	0x3df9db23
 8003270:	bf800000 	.word	0xbf800000

08003274 <LSM6DS3_X_Get_FS>:
{
 8003274:	b510      	push	{r4, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	460c      	mov	r4, r1
  if ( LSM6DS3_ACC_GYRO_R_FS_XL( (void *)handle, &fs_low_level ) == MEMS_ERROR )
 800327a:	f10d 0107 	add.w	r1, sp, #7
 800327e:	f7fe fdad 	bl	8001ddc <LSM6DS3_ACC_GYRO_R_FS_XL>
 8003282:	b160      	cbz	r0, 800329e <LSM6DS3_X_Get_FS+0x2a>
  switch( fs_low_level )
 8003284:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003288:	2b0c      	cmp	r3, #12
 800328a:	d823      	bhi.n	80032d4 <LSM6DS3_X_Get_FS+0x60>
 800328c:	e8df f003 	tbb	[pc, r3]
 8003290:	22222210 	.word	0x22222210
 8003294:	22222216 	.word	0x22222216
 8003298:	2222221c 	.word	0x2222221c
 800329c:	0a          	.byte	0x0a
 800329d:	00          	.byte	0x00
    return COMPONENT_ERROR;
 800329e:	2001      	movs	r0, #1
}
 80032a0:	b002      	add	sp, #8
 80032a2:	bd10      	pop	{r4, pc}
      *fullScale =  8.0f;
 80032a4:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
  return COMPONENT_OK;
 80032a8:	2000      	movs	r0, #0
      *fullScale =  8.0f;
 80032aa:	6023      	str	r3, [r4, #0]
}
 80032ac:	b002      	add	sp, #8
 80032ae:	bd10      	pop	{r4, pc}
      *fullScale =  2.0f;
 80032b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  return COMPONENT_OK;
 80032b4:	2000      	movs	r0, #0
      *fullScale =  2.0f;
 80032b6:	6023      	str	r3, [r4, #0]
}
 80032b8:	b002      	add	sp, #8
 80032ba:	bd10      	pop	{r4, pc}
      *fullScale = 16.0f;
 80032bc:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
  return COMPONENT_OK;
 80032c0:	2000      	movs	r0, #0
      *fullScale = 16.0f;
 80032c2:	6023      	str	r3, [r4, #0]
}
 80032c4:	b002      	add	sp, #8
 80032c6:	bd10      	pop	{r4, pc}
      *fullScale =  4.0f;
 80032c8:	f04f 4381 	mov.w	r3, #1082130432	; 0x40800000
  return COMPONENT_OK;
 80032cc:	2000      	movs	r0, #0
      *fullScale =  4.0f;
 80032ce:	6023      	str	r3, [r4, #0]
}
 80032d0:	b002      	add	sp, #8
 80032d2:	bd10      	pop	{r4, pc}
      *fullScale = -1.0f;
 80032d4:	4b02      	ldr	r3, [pc, #8]	; (80032e0 <LSM6DS3_X_Get_FS+0x6c>)
 80032d6:	6023      	str	r3, [r4, #0]
      return COMPONENT_ERROR;
 80032d8:	2001      	movs	r0, #1
}
 80032da:	b002      	add	sp, #8
 80032dc:	bd10      	pop	{r4, pc}
 80032de:	bf00      	nop
 80032e0:	bf800000 	.word	0xbf800000

080032e4 <LSM6DS3_FIFO_Get_Num_Of_Samples>:
{
 80032e4:	b508      	push	{r3, lr}
  if ( LSM6DS3_ACC_GYRO_R_FIFONumOfEntries( handle, nSamples ) == MEMS_ERROR )
 80032e6:	f7ff fa53 	bl	8002790 <LSM6DS3_ACC_GYRO_R_FIFONumOfEntries>
}
 80032ea:	fab0 f080 	clz	r0, r0
 80032ee:	0940      	lsrs	r0, r0, #5
 80032f0:	bd08      	pop	{r3, pc}
 80032f2:	bf00      	nop

080032f4 <LSM6DS3_FIFO_Get_Data>:
{
 80032f4:	b508      	push	{r3, lr}
  if ( LSM6DS3_ACC_GYRO_Get_GetFIFOData( handle, aData ) == MEMS_ERROR )
 80032f6:	f7ff ff05 	bl	8003104 <LSM6DS3_ACC_GYRO_Get_GetFIFOData>
}
 80032fa:	fab0 f080 	clz	r0, r0
 80032fe:	0940      	lsrs	r0, r0, #5
 8003300:	bd08      	pop	{r3, pc}
 8003302:	bf00      	nop

08003304 <LSM6DS3_FIFO_Get_Pattern>:
{
 8003304:	b508      	push	{r3, lr}
  if ( LSM6DS3_ACC_GYRO_R_FIFOPattern( handle, pattern ) == MEMS_ERROR )
 8003306:	f7ff fa97 	bl	8002838 <LSM6DS3_ACC_GYRO_R_FIFOPattern>
}
 800330a:	fab0 f080 	clz	r0, r0
 800330e:	0940      	lsrs	r0, r0, #5
 8003310:	bd08      	pop	{r3, pc}
 8003312:	bf00      	nop

08003314 <LSM6DS3_FIFO_Get_Overrun_Status>:
{
 8003314:	b510      	push	{r4, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	460c      	mov	r4, r1
  if ( LSM6DS3_ACC_GYRO_R_OVERRUN( handle, &status_raw ) == MEMS_ERROR )
 800331a:	f10d 0107 	add.w	r1, sp, #7
 800331e:	f7ff fa7b 	bl	8002818 <LSM6DS3_ACC_GYRO_R_OVERRUN>
 8003322:	b120      	cbz	r0, 800332e <LSM6DS3_FIFO_Get_Overrun_Status+0x1a>
  switch( status_raw )
 8003324:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003328:	b148      	cbz	r0, 800333e <LSM6DS3_FIFO_Get_Overrun_Status+0x2a>
 800332a:	2840      	cmp	r0, #64	; 0x40
 800332c:	d002      	beq.n	8003334 <LSM6DS3_FIFO_Get_Overrun_Status+0x20>
      return COMPONENT_ERROR;
 800332e:	2001      	movs	r0, #1
}
 8003330:	b002      	add	sp, #8
 8003332:	bd10      	pop	{r4, pc}
      *status = 1;
 8003334:	2301      	movs	r3, #1
  return COMPONENT_OK;
 8003336:	2000      	movs	r0, #0
      *status = 1;
 8003338:	7023      	strb	r3, [r4, #0]
}
 800333a:	b002      	add	sp, #8
 800333c:	bd10      	pop	{r4, pc}
      *status = 0;
 800333e:	7020      	strb	r0, [r4, #0]
}
 8003340:	b002      	add	sp, #8
 8003342:	bd10      	pop	{r4, pc}

08003344 <LSM6DS3_FIFO_Get_Empty_Status>:
{
 8003344:	b510      	push	{r4, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	460c      	mov	r4, r1
  if ( LSM6DS3_ACC_GYRO_R_FIFOEmpty( handle, &status_raw ) == MEMS_ERROR )
 800334a:	f10d 0107 	add.w	r1, sp, #7
 800334e:	f7ff fa43 	bl	80027d8 <LSM6DS3_ACC_GYRO_R_FIFOEmpty>
 8003352:	b120      	cbz	r0, 800335e <LSM6DS3_FIFO_Get_Empty_Status+0x1a>
  switch( status_raw )
 8003354:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003358:	b148      	cbz	r0, 800336e <LSM6DS3_FIFO_Get_Empty_Status+0x2a>
 800335a:	2810      	cmp	r0, #16
 800335c:	d002      	beq.n	8003364 <LSM6DS3_FIFO_Get_Empty_Status+0x20>
      return COMPONENT_ERROR;
 800335e:	2001      	movs	r0, #1
}
 8003360:	b002      	add	sp, #8
 8003362:	bd10      	pop	{r4, pc}
      *status = 1;
 8003364:	2301      	movs	r3, #1
  return COMPONENT_OK;
 8003366:	2000      	movs	r0, #0
      *status = 1;
 8003368:	7023      	strb	r3, [r4, #0]
}
 800336a:	b002      	add	sp, #8
 800336c:	bd10      	pop	{r4, pc}
      *status = 0;
 800336e:	7020      	strb	r0, [r4, #0]
}
 8003370:	b002      	add	sp, #8
 8003372:	bd10      	pop	{r4, pc}

08003374 <LSM6DS3_FIFO_Get_Full_Status>:
{
 8003374:	b510      	push	{r4, lr}
 8003376:	b082      	sub	sp, #8
 8003378:	460c      	mov	r4, r1
  if ( LSM6DS3_ACC_GYRO_R_FIFOFull( handle, &status_raw ) == MEMS_ERROR )
 800337a:	f10d 0107 	add.w	r1, sp, #7
 800337e:	f7ff fa3b 	bl	80027f8 <LSM6DS3_ACC_GYRO_R_FIFOFull>
 8003382:	b120      	cbz	r0, 800338e <LSM6DS3_FIFO_Get_Full_Status+0x1a>
  switch( status_raw )
 8003384:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003388:	b148      	cbz	r0, 800339e <LSM6DS3_FIFO_Get_Full_Status+0x2a>
 800338a:	2820      	cmp	r0, #32
 800338c:	d002      	beq.n	8003394 <LSM6DS3_FIFO_Get_Full_Status+0x20>
      return COMPONENT_ERROR;
 800338e:	2001      	movs	r0, #1
}
 8003390:	b002      	add	sp, #8
 8003392:	bd10      	pop	{r4, pc}
      *status = 1;
 8003394:	2301      	movs	r3, #1
  return COMPONENT_OK;
 8003396:	2000      	movs	r0, #0
      *status = 1;
 8003398:	7023      	strb	r3, [r4, #0]
}
 800339a:	b002      	add	sp, #8
 800339c:	bd10      	pop	{r4, pc}
      *status = 0;
 800339e:	7020      	strb	r0, [r4, #0]
}
 80033a0:	b002      	add	sp, #8
 80033a2:	bd10      	pop	{r4, pc}

080033a4 <LSM6DS3_FIFO_Set_ODR_Value>:
            : ( odr <=   25.0f ) ? LSM6DS3_ACC_GYRO_ODR_FIFO_25Hz
 80033a4:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80033a8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80033ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 80033b0:	b508      	push	{r3, lr}
            : ( odr <=   25.0f ) ? LSM6DS3_ACC_GYRO_ODR_FIFO_25Hz
 80033b2:	d90d      	bls.n	80033d0 <LSM6DS3_FIFO_Set_ODR_Value+0x2c>
 80033b4:	eef3 7a09 	vmov.f32	s15, #57	; 0x41c80000  25.0
 80033b8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80033bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c0:	d80d      	bhi.n	80033de <LSM6DS3_FIFO_Set_ODR_Value+0x3a>
 80033c2:	2110      	movs	r1, #16
  if ( LSM6DS3_ACC_GYRO_W_ODR_FIFO( handle, new_odr ) == MEMS_ERROR )
 80033c4:	f7fe feb6 	bl	8002134 <LSM6DS3_ACC_GYRO_W_ODR_FIFO>
}
 80033c8:	fab0 f080 	clz	r0, r0
 80033cc:	0940      	lsrs	r0, r0, #5
 80033ce:	bd08      	pop	{r3, pc}
            : ( odr <=   25.0f ) ? LSM6DS3_ACC_GYRO_ODR_FIFO_25Hz
 80033d0:	2108      	movs	r1, #8
  if ( LSM6DS3_ACC_GYRO_W_ODR_FIFO( handle, new_odr ) == MEMS_ERROR )
 80033d2:	f7fe feaf 	bl	8002134 <LSM6DS3_ACC_GYRO_W_ODR_FIFO>
}
 80033d6:	fab0 f080 	clz	r0, r0
 80033da:	0940      	lsrs	r0, r0, #5
 80033dc:	bd08      	pop	{r3, pc}
            : ( odr <=   25.0f ) ? LSM6DS3_ACC_GYRO_ODR_FIFO_25Hz
 80033de:	eddf 7a22 	vldr	s15, [pc, #136]	; 8003468 <LSM6DS3_FIFO_Set_ODR_Value+0xc4>
 80033e2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80033e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ea:	d92c      	bls.n	8003446 <LSM6DS3_FIFO_Set_ODR_Value+0xa2>
 80033ec:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800346c <LSM6DS3_FIFO_Set_ODR_Value+0xc8>
 80033f0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80033f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f8:	d92c      	bls.n	8003454 <LSM6DS3_FIFO_Set_ODR_Value+0xb0>
 80033fa:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8003470 <LSM6DS3_FIFO_Set_ODR_Value+0xcc>
 80033fe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003402:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003406:	d927      	bls.n	8003458 <LSM6DS3_FIFO_Set_ODR_Value+0xb4>
 8003408:	eddf 7a1a 	vldr	s15, [pc, #104]	; 8003474 <LSM6DS3_FIFO_Set_ODR_Value+0xd0>
 800340c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003414:	d922      	bls.n	800345c <LSM6DS3_FIFO_Set_ODR_Value+0xb8>
 8003416:	eddf 7a18 	vldr	s15, [pc, #96]	; 8003478 <LSM6DS3_FIFO_Set_ODR_Value+0xd4>
 800341a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800341e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003422:	d91d      	bls.n	8003460 <LSM6DS3_FIFO_Set_ODR_Value+0xbc>
 8003424:	eddf 7a15 	vldr	s15, [pc, #84]	; 800347c <LSM6DS3_FIFO_Set_ODR_Value+0xd8>
 8003428:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800342c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003430:	d918      	bls.n	8003464 <LSM6DS3_FIFO_Set_ODR_Value+0xc0>
 8003432:	eddf 7a13 	vldr	s15, [pc, #76]	; 8003480 <LSM6DS3_FIFO_Set_ODR_Value+0xdc>
 8003436:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800343a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800343e:	bf94      	ite	ls
 8003440:	2148      	movls	r1, #72	; 0x48
 8003442:	2150      	movhi	r1, #80	; 0x50
 8003444:	e7c5      	b.n	80033d2 <LSM6DS3_FIFO_Set_ODR_Value+0x2e>
 8003446:	2118      	movs	r1, #24
  if ( LSM6DS3_ACC_GYRO_W_ODR_FIFO( handle, new_odr ) == MEMS_ERROR )
 8003448:	f7fe fe74 	bl	8002134 <LSM6DS3_ACC_GYRO_W_ODR_FIFO>
}
 800344c:	fab0 f080 	clz	r0, r0
 8003450:	0940      	lsrs	r0, r0, #5
 8003452:	bd08      	pop	{r3, pc}
            : ( odr <=   25.0f ) ? LSM6DS3_ACC_GYRO_ODR_FIFO_25Hz
 8003454:	2120      	movs	r1, #32
 8003456:	e7bc      	b.n	80033d2 <LSM6DS3_FIFO_Set_ODR_Value+0x2e>
 8003458:	2128      	movs	r1, #40	; 0x28
 800345a:	e7ba      	b.n	80033d2 <LSM6DS3_FIFO_Set_ODR_Value+0x2e>
 800345c:	2130      	movs	r1, #48	; 0x30
 800345e:	e7b8      	b.n	80033d2 <LSM6DS3_FIFO_Set_ODR_Value+0x2e>
 8003460:	2138      	movs	r1, #56	; 0x38
 8003462:	e7b6      	b.n	80033d2 <LSM6DS3_FIFO_Set_ODR_Value+0x2e>
 8003464:	2140      	movs	r1, #64	; 0x40
 8003466:	e7b4      	b.n	80033d2 <LSM6DS3_FIFO_Set_ODR_Value+0x2e>
 8003468:	42480000 	.word	0x42480000
 800346c:	42c80000 	.word	0x42c80000
 8003470:	43480000 	.word	0x43480000
 8003474:	43c80000 	.word	0x43c80000
 8003478:	44480000 	.word	0x44480000
 800347c:	44c80000 	.word	0x44c80000
 8003480:	454e4000 	.word	0x454e4000

08003484 <LSM6DS3_X_Read_Reg>:
{
 8003484:	b508      	push	{r3, lr}
  if ( LSM6DS3_ACC_GYRO_ReadReg( (void *)handle, reg, data, 1 ) == MEMS_ERROR )
 8003486:	2301      	movs	r3, #1
 8003488:	f7fe fc52 	bl	8001d30 <LSM6DS3_ACC_GYRO_ReadReg>
}
 800348c:	fab0 f080 	clz	r0, r0
 8003490:	0940      	lsrs	r0, r0, #5
 8003492:	bd08      	pop	{r3, pc}

08003494 <LSM6DS3_X_Get_Event_Status>:
{
 8003494:	b530      	push	{r4, r5, lr}
  if ( LSM6DS3_ACC_GYRO_ReadReg( (void *)handle, reg, data, 1 ) == MEMS_ERROR )
 8003496:	2301      	movs	r3, #1
{
 8003498:	b083      	sub	sp, #12
  uint8_t Wake_Up_Src = 0, Tap_Src = 0, D6D_Src = 0, Func_Src = 0, Md1_Cfg = 0, Md2_Cfg = 0, Int1_Ctrl = 0;
 800349a:	2400      	movs	r4, #0
  memset((void *)status, 0x0, sizeof(ACCELERO_Event_Status_t));
 800349c:	600c      	str	r4, [r1, #0]
{
 800349e:	460d      	mov	r5, r1
  if ( LSM6DS3_ACC_GYRO_ReadReg( (void *)handle, reg, data, 1 ) == MEMS_ERROR )
 80034a0:	eb0d 0203 	add.w	r2, sp, r3
 80034a4:	211b      	movs	r1, #27
  uint8_t Wake_Up_Src = 0, Tap_Src = 0, D6D_Src = 0, Func_Src = 0, Md1_Cfg = 0, Md2_Cfg = 0, Int1_Ctrl = 0;
 80034a6:	f88d 4001 	strb.w	r4, [sp, #1]
 80034aa:	f88d 4002 	strb.w	r4, [sp, #2]
 80034ae:	f88d 4003 	strb.w	r4, [sp, #3]
 80034b2:	f88d 4004 	strb.w	r4, [sp, #4]
 80034b6:	f88d 4005 	strb.w	r4, [sp, #5]
 80034ba:	f88d 4006 	strb.w	r4, [sp, #6]
 80034be:	f88d 4007 	strb.w	r4, [sp, #7]
{
 80034c2:	4604      	mov	r4, r0
  if ( LSM6DS3_ACC_GYRO_ReadReg( (void *)handle, reg, data, 1 ) == MEMS_ERROR )
 80034c4:	f7fe fc34 	bl	8001d30 <LSM6DS3_ACC_GYRO_ReadReg>
 80034c8:	b910      	cbnz	r0, 80034d0 <LSM6DS3_X_Get_Event_Status+0x3c>
    return COMPONENT_ERROR;
 80034ca:	2001      	movs	r0, #1
}
 80034cc:	b003      	add	sp, #12
 80034ce:	bd30      	pop	{r4, r5, pc}
  if ( LSM6DS3_ACC_GYRO_ReadReg( (void *)handle, reg, data, 1 ) == MEMS_ERROR )
 80034d0:	2301      	movs	r3, #1
 80034d2:	f10d 0202 	add.w	r2, sp, #2
 80034d6:	211c      	movs	r1, #28
 80034d8:	4620      	mov	r0, r4
 80034da:	f7fe fc29 	bl	8001d30 <LSM6DS3_ACC_GYRO_ReadReg>
 80034de:	2800      	cmp	r0, #0
 80034e0:	d0f3      	beq.n	80034ca <LSM6DS3_X_Get_Event_Status+0x36>
 80034e2:	2301      	movs	r3, #1
 80034e4:	f10d 0203 	add.w	r2, sp, #3
 80034e8:	211d      	movs	r1, #29
 80034ea:	4620      	mov	r0, r4
 80034ec:	f7fe fc20 	bl	8001d30 <LSM6DS3_ACC_GYRO_ReadReg>
 80034f0:	2800      	cmp	r0, #0
 80034f2:	d0ea      	beq.n	80034ca <LSM6DS3_X_Get_Event_Status+0x36>
 80034f4:	2301      	movs	r3, #1
 80034f6:	aa01      	add	r2, sp, #4
 80034f8:	2153      	movs	r1, #83	; 0x53
 80034fa:	4620      	mov	r0, r4
 80034fc:	f7fe fc18 	bl	8001d30 <LSM6DS3_ACC_GYRO_ReadReg>
 8003500:	2800      	cmp	r0, #0
 8003502:	d0e2      	beq.n	80034ca <LSM6DS3_X_Get_Event_Status+0x36>
 8003504:	2301      	movs	r3, #1
 8003506:	f10d 0205 	add.w	r2, sp, #5
 800350a:	215e      	movs	r1, #94	; 0x5e
 800350c:	4620      	mov	r0, r4
 800350e:	f7fe fc0f 	bl	8001d30 <LSM6DS3_ACC_GYRO_ReadReg>
 8003512:	2800      	cmp	r0, #0
 8003514:	d0d9      	beq.n	80034ca <LSM6DS3_X_Get_Event_Status+0x36>
 8003516:	2301      	movs	r3, #1
 8003518:	f10d 0206 	add.w	r2, sp, #6
 800351c:	215f      	movs	r1, #95	; 0x5f
 800351e:	4620      	mov	r0, r4
 8003520:	f7fe fc06 	bl	8001d30 <LSM6DS3_ACC_GYRO_ReadReg>
 8003524:	2800      	cmp	r0, #0
 8003526:	d0d0      	beq.n	80034ca <LSM6DS3_X_Get_Event_Status+0x36>
 8003528:	4620      	mov	r0, r4
 800352a:	2301      	movs	r3, #1
 800352c:	f10d 0207 	add.w	r2, sp, #7
 8003530:	210d      	movs	r1, #13
 8003532:	f7fe fbfd 	bl	8001d30 <LSM6DS3_ACC_GYRO_ReadReg>
 8003536:	2800      	cmp	r0, #0
 8003538:	d0c7      	beq.n	80034ca <LSM6DS3_X_Get_Event_Status+0x36>
  if((Md1_Cfg & LSM6DS3_ACC_GYRO_INT1_FF_MASK) || (Md2_Cfg & LSM6DS3_ACC_GYRO_INT2_FF_MASK))
 800353a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800353e:	06dc      	lsls	r4, r3, #27
 8003540:	d403      	bmi.n	800354a <LSM6DS3_X_Get_Event_Status+0xb6>
 8003542:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8003546:	06d0      	lsls	r0, r2, #27
 8003548:	d507      	bpl.n	800355a <LSM6DS3_X_Get_Event_Status+0xc6>
    if((Wake_Up_Src & LSM6DS3_ACC_GYRO_FF_EV_STATUS_MASK))
 800354a:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800354e:	0691      	lsls	r1, r2, #26
 8003550:	d503      	bpl.n	800355a <LSM6DS3_X_Get_Event_Status+0xc6>
      status->FreeFallStatus = 1;  
 8003552:	782a      	ldrb	r2, [r5, #0]
 8003554:	f042 0201 	orr.w	r2, r2, #1
 8003558:	702a      	strb	r2, [r5, #0]
  if((Md1_Cfg & LSM6DS3_ACC_GYRO_INT1_WU_MASK) || (Md2_Cfg & LSM6DS3_ACC_GYRO_INT2_WU_MASK))
 800355a:	069a      	lsls	r2, r3, #26
 800355c:	d403      	bmi.n	8003566 <LSM6DS3_X_Get_Event_Status+0xd2>
 800355e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8003562:	0694      	lsls	r4, r2, #26
 8003564:	d507      	bpl.n	8003576 <LSM6DS3_X_Get_Event_Status+0xe2>
    if((Wake_Up_Src & LSM6DS3_ACC_GYRO_WU_EV_STATUS_MASK))
 8003566:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800356a:	0710      	lsls	r0, r2, #28
 800356c:	d503      	bpl.n	8003576 <LSM6DS3_X_Get_Event_Status+0xe2>
      status->WakeUpStatus = 1;  
 800356e:	782a      	ldrb	r2, [r5, #0]
 8003570:	f042 0208 	orr.w	r2, r2, #8
 8003574:	702a      	strb	r2, [r5, #0]
  if((Md1_Cfg & LSM6DS3_ACC_GYRO_INT1_SINGLE_TAP_MASK) || (Md2_Cfg & LSM6DS3_ACC_GYRO_INT2_SINGLE_TAP_MASK))
 8003576:	0659      	lsls	r1, r3, #25
 8003578:	d403      	bmi.n	8003582 <LSM6DS3_X_Get_Event_Status+0xee>
 800357a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800357e:	0652      	lsls	r2, r2, #25
 8003580:	d507      	bpl.n	8003592 <LSM6DS3_X_Get_Event_Status+0xfe>
    if((Tap_Src & LSM6DS3_ACC_GYRO_SINGLE_TAP_EV_STATUS_MASK))
 8003582:	f89d 2002 	ldrb.w	r2, [sp, #2]
 8003586:	0694      	lsls	r4, r2, #26
 8003588:	d503      	bpl.n	8003592 <LSM6DS3_X_Get_Event_Status+0xfe>
      status->TapStatus = 1;  
 800358a:	782a      	ldrb	r2, [r5, #0]
 800358c:	f042 0202 	orr.w	r2, r2, #2
 8003590:	702a      	strb	r2, [r5, #0]
  if((Md1_Cfg & LSM6DS3_ACC_GYRO_INT1_TAP_MASK) || (Md2_Cfg & LSM6DS3_ACC_GYRO_INT2_TAP_MASK))
 8003592:	0718      	lsls	r0, r3, #28
 8003594:	d403      	bmi.n	800359e <LSM6DS3_X_Get_Event_Status+0x10a>
 8003596:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800359a:	0711      	lsls	r1, r2, #28
 800359c:	d507      	bpl.n	80035ae <LSM6DS3_X_Get_Event_Status+0x11a>
    if((Tap_Src & LSM6DS3_ACC_GYRO_DOUBLE_TAP_EV_STATUS_MASK))
 800359e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 80035a2:	06d2      	lsls	r2, r2, #27
 80035a4:	d503      	bpl.n	80035ae <LSM6DS3_X_Get_Event_Status+0x11a>
      status->DoubleTapStatus = 1;  
 80035a6:	782a      	ldrb	r2, [r5, #0]
 80035a8:	f042 0204 	orr.w	r2, r2, #4
 80035ac:	702a      	strb	r2, [r5, #0]
  if((Md1_Cfg & LSM6DS3_ACC_GYRO_INT1_6D_MASK) || (Md2_Cfg & LSM6DS3_ACC_GYRO_INT2_6D_MASK))
 80035ae:	075c      	lsls	r4, r3, #29
 80035b0:	d403      	bmi.n	80035ba <LSM6DS3_X_Get_Event_Status+0x126>
 80035b2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80035b6:	0750      	lsls	r0, r2, #29
 80035b8:	d507      	bpl.n	80035ca <LSM6DS3_X_Get_Event_Status+0x136>
    if((D6D_Src & LSM6DS3_ACC_GYRO_D6D_EV_STATUS_MASK))
 80035ba:	f89d 2003 	ldrb.w	r2, [sp, #3]
 80035be:	0651      	lsls	r1, r2, #25
 80035c0:	d503      	bpl.n	80035ca <LSM6DS3_X_Get_Event_Status+0x136>
      status->D6DOrientationStatus = 1;  
 80035c2:	782a      	ldrb	r2, [r5, #0]
 80035c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035c8:	702a      	strb	r2, [r5, #0]
  if((Int1_Ctrl & LSM6DS3_ACC_GYRO_INT1_PEDO_MASK))
 80035ca:	f99d 2007 	ldrsb.w	r2, [sp, #7]
 80035ce:	2a00      	cmp	r2, #0
 80035d0:	db11      	blt.n	80035f6 <LSM6DS3_X_Get_Event_Status+0x162>
  if((Md1_Cfg & LSM6DS3_ACC_GYRO_INT1_TILT_MASK) || (Md2_Cfg & LSM6DS3_ACC_GYRO_INT2_TILT_MASK))
 80035d2:	079b      	lsls	r3, r3, #30
 80035d4:	d404      	bmi.n	80035e0 <LSM6DS3_X_Get_Event_Status+0x14c>
 80035d6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80035da:	f013 0302 	ands.w	r3, r3, #2
 80035de:	d008      	beq.n	80035f2 <LSM6DS3_X_Get_Event_Status+0x15e>
    if((Func_Src & LSM6DS3_ACC_GYRO_TILT_EV_STATUS_MASK))
 80035e0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80035e4:	f013 0320 	ands.w	r3, r3, #32
 80035e8:	d00e      	beq.n	8003608 <LSM6DS3_X_Get_Event_Status+0x174>
      status->TiltStatus = 1;  
 80035ea:	782b      	ldrb	r3, [r5, #0]
 80035ec:	f043 0320 	orr.w	r3, r3, #32
 80035f0:	702b      	strb	r3, [r5, #0]
  return COMPONENT_OK;
 80035f2:	2000      	movs	r0, #0
 80035f4:	e76a      	b.n	80034cc <LSM6DS3_X_Get_Event_Status+0x38>
    if((Func_Src & LSM6DS3_ACC_GYRO_PEDO_EV_STATUS_MASK))
 80035f6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80035fa:	06d2      	lsls	r2, r2, #27
 80035fc:	d5e9      	bpl.n	80035d2 <LSM6DS3_X_Get_Event_Status+0x13e>
      status->StepStatus = 1;  
 80035fe:	782a      	ldrb	r2, [r5, #0]
 8003600:	f042 0210 	orr.w	r2, r2, #16
 8003604:	702a      	strb	r2, [r5, #0]
 8003606:	e7e4      	b.n	80035d2 <LSM6DS3_X_Get_Event_Status+0x13e>
  return COMPONENT_OK;
 8003608:	4618      	mov	r0, r3
 800360a:	e75f      	b.n	80034cc <LSM6DS3_X_Get_Event_Status+0x38>

0800360c <LSM6DS3_X_Get_6D_Orientation_ZH>:
{
 800360c:	b510      	push	{r4, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	460c      	mov	r4, r1
  if ( LSM6DS3_ACC_GYRO_R_DSD_ZH( (void *)handle, &zh_raw ) == MEMS_ERROR )
 8003612:	f10d 0107 	add.w	r1, sp, #7
 8003616:	f7ff f87b 	bl	8002710 <LSM6DS3_ACC_GYRO_R_DSD_ZH>
 800361a:	b120      	cbz	r0, 8003626 <LSM6DS3_X_Get_6D_Orientation_ZH+0x1a>
  switch( zh_raw )
 800361c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003620:	b148      	cbz	r0, 8003636 <LSM6DS3_X_Get_6D_Orientation_ZH+0x2a>
 8003622:	2820      	cmp	r0, #32
 8003624:	d002      	beq.n	800362c <LSM6DS3_X_Get_6D_Orientation_ZH+0x20>
      return COMPONENT_ERROR;
 8003626:	2001      	movs	r0, #1
}
 8003628:	b002      	add	sp, #8
 800362a:	bd10      	pop	{r4, pc}
      *zh = 1;
 800362c:	2301      	movs	r3, #1
  return COMPONENT_OK;
 800362e:	2000      	movs	r0, #0
      *zh = 1;
 8003630:	7023      	strb	r3, [r4, #0]
}
 8003632:	b002      	add	sp, #8
 8003634:	bd10      	pop	{r4, pc}
      *zh = 0;
 8003636:	7020      	strb	r0, [r4, #0]
}
 8003638:	b002      	add	sp, #8
 800363a:	bd10      	pop	{r4, pc}

0800363c <LSM6DS3_X_Get_6D_Orientation_ZL>:
{
 800363c:	b510      	push	{r4, lr}
 800363e:	b082      	sub	sp, #8
 8003640:	460c      	mov	r4, r1
  if ( LSM6DS3_ACC_GYRO_R_DSD_ZL( (void *)handle, &zl_raw ) == MEMS_ERROR )
 8003642:	f10d 0107 	add.w	r1, sp, #7
 8003646:	f7ff f853 	bl	80026f0 <LSM6DS3_ACC_GYRO_R_DSD_ZL>
 800364a:	b120      	cbz	r0, 8003656 <LSM6DS3_X_Get_6D_Orientation_ZL+0x1a>
  switch( zl_raw )
 800364c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003650:	b148      	cbz	r0, 8003666 <LSM6DS3_X_Get_6D_Orientation_ZL+0x2a>
 8003652:	2810      	cmp	r0, #16
 8003654:	d002      	beq.n	800365c <LSM6DS3_X_Get_6D_Orientation_ZL+0x20>
      return COMPONENT_ERROR;
 8003656:	2001      	movs	r0, #1
}
 8003658:	b002      	add	sp, #8
 800365a:	bd10      	pop	{r4, pc}
      *zl = 1;
 800365c:	2301      	movs	r3, #1
  return COMPONENT_OK;
 800365e:	2000      	movs	r0, #0
      *zl = 1;
 8003660:	7023      	strb	r3, [r4, #0]
}
 8003662:	b002      	add	sp, #8
 8003664:	bd10      	pop	{r4, pc}
      *zl = 0;
 8003666:	7020      	strb	r0, [r4, #0]
}
 8003668:	b002      	add	sp, #8
 800366a:	bd10      	pop	{r4, pc}

0800366c <LSM6DS3_X_Get_6D_Orientation_YH>:
{
 800366c:	b510      	push	{r4, lr}
 800366e:	b082      	sub	sp, #8
 8003670:	460c      	mov	r4, r1
  if ( LSM6DS3_ACC_GYRO_R_DSD_YH( (void *)handle, &yh_raw ) == MEMS_ERROR )
 8003672:	f10d 0107 	add.w	r1, sp, #7
 8003676:	f7ff f82b 	bl	80026d0 <LSM6DS3_ACC_GYRO_R_DSD_YH>
 800367a:	b120      	cbz	r0, 8003686 <LSM6DS3_X_Get_6D_Orientation_YH+0x1a>
  switch( yh_raw )
 800367c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003680:	b148      	cbz	r0, 8003696 <LSM6DS3_X_Get_6D_Orientation_YH+0x2a>
 8003682:	2808      	cmp	r0, #8
 8003684:	d002      	beq.n	800368c <LSM6DS3_X_Get_6D_Orientation_YH+0x20>
      return COMPONENT_ERROR;
 8003686:	2001      	movs	r0, #1
}
 8003688:	b002      	add	sp, #8
 800368a:	bd10      	pop	{r4, pc}
      *yh = 1;
 800368c:	2301      	movs	r3, #1
  return COMPONENT_OK;
 800368e:	2000      	movs	r0, #0
      *yh = 1;
 8003690:	7023      	strb	r3, [r4, #0]
}
 8003692:	b002      	add	sp, #8
 8003694:	bd10      	pop	{r4, pc}
      *yh = 0;
 8003696:	7020      	strb	r0, [r4, #0]
}
 8003698:	b002      	add	sp, #8
 800369a:	bd10      	pop	{r4, pc}

0800369c <LSM6DS3_X_Get_6D_Orientation_YL>:
{
 800369c:	b510      	push	{r4, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	460c      	mov	r4, r1
  if ( LSM6DS3_ACC_GYRO_R_DSD_YL( (void *)handle, &yl_raw ) == MEMS_ERROR )
 80036a2:	f10d 0107 	add.w	r1, sp, #7
 80036a6:	f7ff f803 	bl	80026b0 <LSM6DS3_ACC_GYRO_R_DSD_YL>
 80036aa:	b120      	cbz	r0, 80036b6 <LSM6DS3_X_Get_6D_Orientation_YL+0x1a>
  switch( yl_raw )
 80036ac:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80036b0:	b148      	cbz	r0, 80036c6 <LSM6DS3_X_Get_6D_Orientation_YL+0x2a>
 80036b2:	2804      	cmp	r0, #4
 80036b4:	d002      	beq.n	80036bc <LSM6DS3_X_Get_6D_Orientation_YL+0x20>
      return COMPONENT_ERROR;
 80036b6:	2001      	movs	r0, #1
}
 80036b8:	b002      	add	sp, #8
 80036ba:	bd10      	pop	{r4, pc}
      *yl = 1;
 80036bc:	2301      	movs	r3, #1
  return COMPONENT_OK;
 80036be:	2000      	movs	r0, #0
      *yl = 1;
 80036c0:	7023      	strb	r3, [r4, #0]
}
 80036c2:	b002      	add	sp, #8
 80036c4:	bd10      	pop	{r4, pc}
      *yl = 0;
 80036c6:	7020      	strb	r0, [r4, #0]
}
 80036c8:	b002      	add	sp, #8
 80036ca:	bd10      	pop	{r4, pc}

080036cc <LSM6DS3_X_Get_6D_Orientation_XH>:
{
 80036cc:	b510      	push	{r4, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	460c      	mov	r4, r1
  if ( LSM6DS3_ACC_GYRO_R_DSD_XH( (void *)handle, &xh_raw ) == MEMS_ERROR )
 80036d2:	f10d 0107 	add.w	r1, sp, #7
 80036d6:	f7fe ffdb 	bl	8002690 <LSM6DS3_ACC_GYRO_R_DSD_XH>
 80036da:	b120      	cbz	r0, 80036e6 <LSM6DS3_X_Get_6D_Orientation_XH+0x1a>
  switch( xh_raw )
 80036dc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80036e0:	b148      	cbz	r0, 80036f6 <LSM6DS3_X_Get_6D_Orientation_XH+0x2a>
 80036e2:	2802      	cmp	r0, #2
 80036e4:	d002      	beq.n	80036ec <LSM6DS3_X_Get_6D_Orientation_XH+0x20>
      return COMPONENT_ERROR;
 80036e6:	2001      	movs	r0, #1
}
 80036e8:	b002      	add	sp, #8
 80036ea:	bd10      	pop	{r4, pc}
      *xh = 1;
 80036ec:	2301      	movs	r3, #1
  return COMPONENT_OK;
 80036ee:	2000      	movs	r0, #0
      *xh = 1;
 80036f0:	7023      	strb	r3, [r4, #0]
}
 80036f2:	b002      	add	sp, #8
 80036f4:	bd10      	pop	{r4, pc}
      *xh = 0;
 80036f6:	7020      	strb	r0, [r4, #0]
}
 80036f8:	b002      	add	sp, #8
 80036fa:	bd10      	pop	{r4, pc}

080036fc <LSM6DS3_X_Get_6D_Orientation_XL>:
{
 80036fc:	b510      	push	{r4, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	460c      	mov	r4, r1
  if ( LSM6DS3_ACC_GYRO_R_DSD_XL( (void *)handle, &xl_raw ) == MEMS_ERROR )
 8003702:	f10d 0107 	add.w	r1, sp, #7
 8003706:	f7fe ffb3 	bl	8002670 <LSM6DS3_ACC_GYRO_R_DSD_XL>
 800370a:	b120      	cbz	r0, 8003716 <LSM6DS3_X_Get_6D_Orientation_XL+0x1a>
  switch( xl_raw )
 800370c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003710:	b140      	cbz	r0, 8003724 <LSM6DS3_X_Get_6D_Orientation_XL+0x28>
 8003712:	2801      	cmp	r0, #1
 8003714:	d002      	beq.n	800371c <LSM6DS3_X_Get_6D_Orientation_XL+0x20>
      return COMPONENT_ERROR;
 8003716:	2001      	movs	r0, #1
}
 8003718:	b002      	add	sp, #8
 800371a:	bd10      	pop	{r4, pc}
      *xl = 1;
 800371c:	7020      	strb	r0, [r4, #0]
  return COMPONENT_OK;
 800371e:	2000      	movs	r0, #0
}
 8003720:	b002      	add	sp, #8
 8003722:	bd10      	pop	{r4, pc}
      *xl = 0;
 8003724:	7020      	strb	r0, [r4, #0]
}
 8003726:	b002      	add	sp, #8
 8003728:	bd10      	pop	{r4, pc}
 800372a:	bf00      	nop

0800372c <LSM6DS3_X_Get_6D_Orientation_Status>:
{
 800372c:	b510      	push	{r4, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	460c      	mov	r4, r1
  if ( LSM6DS3_ACC_GYRO_R_D6D_EV_STATUS( (void *)handle, &status_raw ) == MEMS_ERROR )
 8003732:	f10d 0107 	add.w	r1, sp, #7
 8003736:	f7fe fffb 	bl	8002730 <LSM6DS3_ACC_GYRO_R_D6D_EV_STATUS>
 800373a:	b120      	cbz	r0, 8003746 <LSM6DS3_X_Get_6D_Orientation_Status+0x1a>
  switch( status_raw )
 800373c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003740:	b148      	cbz	r0, 8003756 <LSM6DS3_X_Get_6D_Orientation_Status+0x2a>
 8003742:	2840      	cmp	r0, #64	; 0x40
 8003744:	d002      	beq.n	800374c <LSM6DS3_X_Get_6D_Orientation_Status+0x20>
      return COMPONENT_ERROR;
 8003746:	2001      	movs	r0, #1
}
 8003748:	b002      	add	sp, #8
 800374a:	bd10      	pop	{r4, pc}
      *status = 1;
 800374c:	2301      	movs	r3, #1
  return COMPONENT_OK;
 800374e:	2000      	movs	r0, #0
      *status = 1;
 8003750:	7023      	strb	r3, [r4, #0]
}
 8003752:	b002      	add	sp, #8
 8003754:	bd10      	pop	{r4, pc}
      *status = 0;
 8003756:	7020      	strb	r0, [r4, #0]
}
 8003758:	b002      	add	sp, #8
 800375a:	bd10      	pop	{r4, pc}

0800375c <LSM6DS3_X_Set_FS_Value>:
           : ( fullScale <= 4.0f ) ? LSM6DS3_ACC_GYRO_FS_XL_4g
 800375c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8003760:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8003768:	b508      	push	{r3, lr}
           : ( fullScale <= 4.0f ) ? LSM6DS3_ACC_GYRO_FS_XL_4g
 800376a:	d90d      	bls.n	8003788 <LSM6DS3_X_Set_FS_Value+0x2c>
 800376c:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
 8003770:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8003774:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003778:	d80d      	bhi.n	8003796 <LSM6DS3_X_Set_FS_Value+0x3a>
 800377a:	2108      	movs	r1, #8
  if ( LSM6DS3_ACC_GYRO_W_FS_XL( (void *)handle, new_fs ) == MEMS_ERROR )
 800377c:	f7fe fb0c 	bl	8001d98 <LSM6DS3_ACC_GYRO_W_FS_XL>
}
 8003780:	fab0 f080 	clz	r0, r0
 8003784:	0940      	lsrs	r0, r0, #5
 8003786:	bd08      	pop	{r3, pc}
           : ( fullScale <= 4.0f ) ? LSM6DS3_ACC_GYRO_FS_XL_4g
 8003788:	2100      	movs	r1, #0
  if ( LSM6DS3_ACC_GYRO_W_FS_XL( (void *)handle, new_fs ) == MEMS_ERROR )
 800378a:	f7fe fb05 	bl	8001d98 <LSM6DS3_ACC_GYRO_W_FS_XL>
}
 800378e:	fab0 f080 	clz	r0, r0
 8003792:	0940      	lsrs	r0, r0, #5
 8003794:	bd08      	pop	{r3, pc}
           : ( fullScale <= 4.0f ) ? LSM6DS3_ACC_GYRO_FS_XL_4g
 8003796:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800379a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800379e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037a2:	bf94      	ite	ls
 80037a4:	210c      	movls	r1, #12
 80037a6:	2104      	movhi	r1, #4
  if ( LSM6DS3_ACC_GYRO_W_FS_XL( (void *)handle, new_fs ) == MEMS_ERROR )
 80037a8:	f7fe faf6 	bl	8001d98 <LSM6DS3_ACC_GYRO_W_FS_XL>
}
 80037ac:	fab0 f080 	clz	r0, r0
 80037b0:	0940      	lsrs	r0, r0, #5
 80037b2:	bd08      	pop	{r3, pc}

080037b4 <LSM6DS3_X_Set_FS>:
  switch( fullScale )
 80037b4:	2902      	cmp	r1, #2
 80037b6:	d00c      	beq.n	80037d2 <LSM6DS3_X_Set_FS+0x1e>
 80037b8:	2904      	cmp	r1, #4
 80037ba:	d002      	beq.n	80037c2 <LSM6DS3_X_Set_FS+0xe>
 80037bc:	b111      	cbz	r1, 80037c4 <LSM6DS3_X_Set_FS+0x10>
      return COMPONENT_ERROR;
 80037be:	2001      	movs	r0, #1
}
 80037c0:	4770      	bx	lr
      new_fs = LSM6DS3_ACC_GYRO_FS_XL_8g;
 80037c2:	210c      	movs	r1, #12
{
 80037c4:	b508      	push	{r3, lr}
  if ( LSM6DS3_ACC_GYRO_W_FS_XL( (void *)handle, new_fs ) == MEMS_ERROR )
 80037c6:	f7fe fae7 	bl	8001d98 <LSM6DS3_ACC_GYRO_W_FS_XL>
      return COMPONENT_ERROR;
 80037ca:	fab0 f080 	clz	r0, r0
 80037ce:	0940      	lsrs	r0, r0, #5
}
 80037d0:	bd08      	pop	{r3, pc}
      new_fs = LSM6DS3_ACC_GYRO_FS_XL_4g;
 80037d2:	2108      	movs	r1, #8
{
 80037d4:	b508      	push	{r3, lr}
  if ( LSM6DS3_ACC_GYRO_W_FS_XL( (void *)handle, new_fs ) == MEMS_ERROR )
 80037d6:	f7fe fadf 	bl	8001d98 <LSM6DS3_ACC_GYRO_W_FS_XL>
      return COMPONENT_ERROR;
 80037da:	fab0 f080 	clz	r0, r0
 80037de:	0940      	lsrs	r0, r0, #5
}
 80037e0:	bd08      	pop	{r3, pc}
 80037e2:	bf00      	nop

080037e4 <LSM6DS3_X_Set_Tap_Duration_Time>:
{
 80037e4:	b508      	push	{r3, lr}
  if ( LSM6DS3_ACC_GYRO_W_DUR( (void *)handle, time ) == MEMS_ERROR )
 80037e6:	f7ff f9c5 	bl	8002b74 <LSM6DS3_ACC_GYRO_W_DUR>
}
 80037ea:	fab0 f080 	clz	r0, r0
 80037ee:	0940      	lsrs	r0, r0, #5
 80037f0:	bd08      	pop	{r3, pc}
 80037f2:	bf00      	nop

080037f4 <LSM6DS3_X_Set_Tap_Quiet_Time>:
{
 80037f4:	b508      	push	{r3, lr}
  if ( LSM6DS3_ACC_GYRO_W_QUIET_Duration( (void *)handle, time ) == MEMS_ERROR )
 80037f6:	f7ff f999 	bl	8002b2c <LSM6DS3_ACC_GYRO_W_QUIET_Duration>
}
 80037fa:	fab0 f080 	clz	r0, r0
 80037fe:	0940      	lsrs	r0, r0, #5
 8003800:	bd08      	pop	{r3, pc}
 8003802:	bf00      	nop

08003804 <LSM6DS3_X_Set_Tap_Shock_Time>:
{
 8003804:	b508      	push	{r3, lr}
  if ( LSM6DS3_ACC_GYRO_W_SHOCK_Duration( (void *)handle, time ) == MEMS_ERROR )
 8003806:	f7ff f96d 	bl	8002ae4 <LSM6DS3_ACC_GYRO_W_SHOCK_Duration>
}
 800380a:	fab0 f080 	clz	r0, r0
 800380e:	0940      	lsrs	r0, r0, #5
 8003810:	bd08      	pop	{r3, pc}
 8003812:	bf00      	nop

08003814 <LSM6DS3_X_Set_Tap_Threshold>:
{
 8003814:	b508      	push	{r3, lr}
  if ( LSM6DS3_ACC_GYRO_W_TAP_THS( (void *)handle, thr ) == MEMS_ERROR )
 8003816:	f7ff f91f 	bl	8002a58 <LSM6DS3_ACC_GYRO_W_TAP_THS>
}
 800381a:	fab0 f080 	clz	r0, r0
 800381e:	0940      	lsrs	r0, r0, #5
 8003820:	bd08      	pop	{r3, pc}
 8003822:	bf00      	nop

08003824 <LSM6DS3_X_Get_Double_Tap_Detection_Status>:
{
 8003824:	b510      	push	{r4, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	460c      	mov	r4, r1
  if ( LSM6DS3_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS( (void *)handle, &tap_status ) == MEMS_ERROR )
 800382a:	f10d 0107 	add.w	r1, sp, #7
 800382e:	f7fe feff 	bl	8002630 <LSM6DS3_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS>
 8003832:	b120      	cbz	r0, 800383e <LSM6DS3_X_Get_Double_Tap_Detection_Status+0x1a>
  switch( tap_status )
 8003834:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003838:	b148      	cbz	r0, 800384e <LSM6DS3_X_Get_Double_Tap_Detection_Status+0x2a>
 800383a:	2810      	cmp	r0, #16
 800383c:	d002      	beq.n	8003844 <LSM6DS3_X_Get_Double_Tap_Detection_Status+0x20>
      return COMPONENT_ERROR;
 800383e:	2001      	movs	r0, #1
}
 8003840:	b002      	add	sp, #8
 8003842:	bd10      	pop	{r4, pc}
      *status = 1;
 8003844:	2301      	movs	r3, #1
  return COMPONENT_OK;
 8003846:	2000      	movs	r0, #0
      *status = 1;
 8003848:	7023      	strb	r3, [r4, #0]
}
 800384a:	b002      	add	sp, #8
 800384c:	bd10      	pop	{r4, pc}
      *status = 0;
 800384e:	7020      	strb	r0, [r4, #0]
}
 8003850:	b002      	add	sp, #8
 8003852:	bd10      	pop	{r4, pc}

08003854 <LSM6DS3_X_Get_Single_Tap_Detection_Status>:
{
 8003854:	b510      	push	{r4, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	460c      	mov	r4, r1
  if ( LSM6DS3_ACC_GYRO_R_SINGLE_TAP_EV_STATUS( (void *)handle, &tap_status ) == MEMS_ERROR )
 800385a:	f10d 0107 	add.w	r1, sp, #7
 800385e:	f7fe fef7 	bl	8002650 <LSM6DS3_ACC_GYRO_R_SINGLE_TAP_EV_STATUS>
 8003862:	b120      	cbz	r0, 800386e <LSM6DS3_X_Get_Single_Tap_Detection_Status+0x1a>
  switch( tap_status )
 8003864:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003868:	b148      	cbz	r0, 800387e <LSM6DS3_X_Get_Single_Tap_Detection_Status+0x2a>
 800386a:	2820      	cmp	r0, #32
 800386c:	d002      	beq.n	8003874 <LSM6DS3_X_Get_Single_Tap_Detection_Status+0x20>
      return COMPONENT_ERROR;
 800386e:	2001      	movs	r0, #1
}
 8003870:	b002      	add	sp, #8
 8003872:	bd10      	pop	{r4, pc}
      *status = 1;
 8003874:	2301      	movs	r3, #1
  return COMPONENT_OK;
 8003876:	2000      	movs	r0, #0
      *status = 1;
 8003878:	7023      	strb	r3, [r4, #0]
}
 800387a:	b002      	add	sp, #8
 800387c:	bd10      	pop	{r4, pc}
      *status = 0;
 800387e:	7020      	strb	r0, [r4, #0]
}
 8003880:	b002      	add	sp, #8
 8003882:	bd10      	pop	{r4, pc}

08003884 <LSM6DS3_X_Set_Wake_Up_Threshold>:
{
 8003884:	b508      	push	{r3, lr}
  if ( LSM6DS3_ACC_GYRO_W_WK_THS( (void *)handle, thr ) == MEMS_ERROR )
 8003886:	f7ff f997 	bl	8002bb8 <LSM6DS3_ACC_GYRO_W_WK_THS>
}
 800388a:	fab0 f080 	clz	r0, r0
 800388e:	0940      	lsrs	r0, r0, #5
 8003890:	bd08      	pop	{r3, pc}
 8003892:	bf00      	nop

08003894 <LSM6DS3_X_Get_Wake_Up_Detection_Status>:
{
 8003894:	b510      	push	{r4, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	460c      	mov	r4, r1
  if ( LSM6DS3_ACC_GYRO_R_WU_EV_STATUS( (void *)handle, &wake_up_status ) == MEMS_ERROR )
 800389a:	f10d 0107 	add.w	r1, sp, #7
 800389e:	f7fe fea7 	bl	80025f0 <LSM6DS3_ACC_GYRO_R_WU_EV_STATUS>
 80038a2:	b120      	cbz	r0, 80038ae <LSM6DS3_X_Get_Wake_Up_Detection_Status+0x1a>
  switch( wake_up_status )
 80038a4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80038a8:	b148      	cbz	r0, 80038be <LSM6DS3_X_Get_Wake_Up_Detection_Status+0x2a>
 80038aa:	2808      	cmp	r0, #8
 80038ac:	d002      	beq.n	80038b4 <LSM6DS3_X_Get_Wake_Up_Detection_Status+0x20>
      return COMPONENT_ERROR;
 80038ae:	2001      	movs	r0, #1
}
 80038b0:	b002      	add	sp, #8
 80038b2:	bd10      	pop	{r4, pc}
      *status = 1;
 80038b4:	2301      	movs	r3, #1
  return COMPONENT_OK;
 80038b6:	2000      	movs	r0, #0
      *status = 1;
 80038b8:	7023      	strb	r3, [r4, #0]
}
 80038ba:	b002      	add	sp, #8
 80038bc:	bd10      	pop	{r4, pc}
      *status = 0;
 80038be:	7020      	strb	r0, [r4, #0]
}
 80038c0:	b002      	add	sp, #8
 80038c2:	bd10      	pop	{r4, pc}

080038c4 <LSM6DS3_X_Get_Tilt_Detection_Status>:
{
 80038c4:	b510      	push	{r4, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	460c      	mov	r4, r1
  if ( LSM6DS3_ACC_GYRO_R_TILT_EV_STATUS( (void *)handle, &tilt_status ) == MEMS_ERROR )
 80038ca:	f10d 0107 	add.w	r1, sp, #7
 80038ce:	f7fe ffe7 	bl	80028a0 <LSM6DS3_ACC_GYRO_R_TILT_EV_STATUS>
 80038d2:	b120      	cbz	r0, 80038de <LSM6DS3_X_Get_Tilt_Detection_Status+0x1a>
  switch( tilt_status )
 80038d4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80038d8:	b148      	cbz	r0, 80038ee <LSM6DS3_X_Get_Tilt_Detection_Status+0x2a>
 80038da:	2820      	cmp	r0, #32
 80038dc:	d002      	beq.n	80038e4 <LSM6DS3_X_Get_Tilt_Detection_Status+0x20>
      return COMPONENT_ERROR;
 80038de:	2001      	movs	r0, #1
}
 80038e0:	b002      	add	sp, #8
 80038e2:	bd10      	pop	{r4, pc}
      *status = 1;
 80038e4:	2301      	movs	r3, #1
  return COMPONENT_OK;
 80038e6:	2000      	movs	r0, #0
      *status = 1;
 80038e8:	7023      	strb	r3, [r4, #0]
}
 80038ea:	b002      	add	sp, #8
 80038ec:	bd10      	pop	{r4, pc}
      *status = 0;
 80038ee:	7020      	strb	r0, [r4, #0]
}
 80038f0:	b002      	add	sp, #8
 80038f2:	bd10      	pop	{r4, pc}

080038f4 <LSM6DS3_X_Set_Pedometer_Threshold>:
{
 80038f4:	b508      	push	{r3, lr}
  if ( LSM6DS3_ACC_GYRO_W_PedoThreshold( (void *)handle, thr ) == MEMS_ERROR )
 80038f6:	f7ff fc31 	bl	800315c <LSM6DS3_ACC_GYRO_W_PedoThreshold>
}
 80038fa:	fab0 f080 	clz	r0, r0
 80038fe:	0940      	lsrs	r0, r0, #5
 8003900:	bd08      	pop	{r3, pc}
 8003902:	bf00      	nop

08003904 <LSM6DS3_X_Disable_Step_Counter_Reset>:
{
 8003904:	b508      	push	{r3, lr}
  if ( LSM6DS3_ACC_GYRO_W_PedoStepReset( (void *)handle, LSM6DS3_ACC_GYRO_PEDO_RST_STEP_DISABLED ) == MEMS_ERROR )
 8003906:	2100      	movs	r1, #0
 8003908:	f7fe fd98 	bl	800243c <LSM6DS3_ACC_GYRO_W_PedoStepReset>
}
 800390c:	fab0 f080 	clz	r0, r0
 8003910:	0940      	lsrs	r0, r0, #5
 8003912:	bd08      	pop	{r3, pc}

08003914 <LSM6DS3_X_Enable_Step_Counter_Reset>:
{
 8003914:	b508      	push	{r3, lr}
  if ( LSM6DS3_ACC_GYRO_W_PedoStepReset( (void *)handle, LSM6DS3_ACC_GYRO_PEDO_RST_STEP_ENABLED ) == MEMS_ERROR )
 8003916:	2102      	movs	r1, #2
 8003918:	f7fe fd90 	bl	800243c <LSM6DS3_ACC_GYRO_W_PedoStepReset>
}
 800391c:	fab0 f080 	clz	r0, r0
 8003920:	0940      	lsrs	r0, r0, #5
 8003922:	bd08      	pop	{r3, pc}

08003924 <LSM6DS3_X_Get_Step_Count>:
{
 8003924:	b508      	push	{r3, lr}
  if ( LSM6DS3_ACC_GYRO_Get_GetStepCounter( (void *)handle, ( uint8_t* )step_count ) == MEMS_ERROR )
 8003926:	f7ff fc03 	bl	8003130 <LSM6DS3_ACC_GYRO_Get_GetStepCounter>
}
 800392a:	fab0 f080 	clz	r0, r0
 800392e:	0940      	lsrs	r0, r0, #5
 8003930:	bd08      	pop	{r3, pc}
 8003932:	bf00      	nop

08003934 <LSM6DS3_X_Get_Pedometer_Status>:
{
 8003934:	b510      	push	{r4, lr}
 8003936:	b082      	sub	sp, #8
 8003938:	460c      	mov	r4, r1
  if ( LSM6DS3_ACC_GYRO_R_PEDO_EV_STATUS( (void *)handle, &pedometer_status ) == MEMS_ERROR )
 800393a:	f10d 0107 	add.w	r1, sp, #7
 800393e:	f7fe ff9f 	bl	8002880 <LSM6DS3_ACC_GYRO_R_PEDO_EV_STATUS>
 8003942:	b120      	cbz	r0, 800394e <LSM6DS3_X_Get_Pedometer_Status+0x1a>
  switch( pedometer_status )
 8003944:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003948:	b148      	cbz	r0, 800395e <LSM6DS3_X_Get_Pedometer_Status+0x2a>
 800394a:	2810      	cmp	r0, #16
 800394c:	d002      	beq.n	8003954 <LSM6DS3_X_Get_Pedometer_Status+0x20>
      return COMPONENT_ERROR;
 800394e:	2001      	movs	r0, #1
}
 8003950:	b002      	add	sp, #8
 8003952:	bd10      	pop	{r4, pc}
      *status = 1;
 8003954:	2301      	movs	r3, #1
  return COMPONENT_OK;
 8003956:	2000      	movs	r0, #0
      *status = 1;
 8003958:	7023      	strb	r3, [r4, #0]
}
 800395a:	b002      	add	sp, #8
 800395c:	bd10      	pop	{r4, pc}
      *status = 0;
 800395e:	7020      	strb	r0, [r4, #0]
}
 8003960:	b002      	add	sp, #8
 8003962:	bd10      	pop	{r4, pc}

08003964 <LSM6DS3_X_Set_Free_Fall_Threshold>:
{
 8003964:	b508      	push	{r3, lr}
  if ( LSM6DS3_ACC_GYRO_W_FF_THS( (void *)handle, (LSM6DS3_ACC_GYRO_FF_THS_t)thr ) == MEMS_ERROR )
 8003966:	f7ff f9d7 	bl	8002d18 <LSM6DS3_ACC_GYRO_W_FF_THS>
}
 800396a:	fab0 f080 	clz	r0, r0
 800396e:	0940      	lsrs	r0, r0, #5
 8003970:	bd08      	pop	{r3, pc}
 8003972:	bf00      	nop

08003974 <LSM6DS3_X_Get_Free_Fall_Detection_Status>:
{
 8003974:	b510      	push	{r4, lr}
 8003976:	b082      	sub	sp, #8
 8003978:	460c      	mov	r4, r1
  if ( LSM6DS3_ACC_GYRO_R_FF_EV_STATUS( (void *)handle, &free_fall_status ) == MEMS_ERROR )
 800397a:	f10d 0107 	add.w	r1, sp, #7
 800397e:	f7fe fe47 	bl	8002610 <LSM6DS3_ACC_GYRO_R_FF_EV_STATUS>
 8003982:	b120      	cbz	r0, 800398e <LSM6DS3_X_Get_Free_Fall_Detection_Status+0x1a>
  switch( free_fall_status )
 8003984:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003988:	b148      	cbz	r0, 800399e <LSM6DS3_X_Get_Free_Fall_Detection_Status+0x2a>
 800398a:	2820      	cmp	r0, #32
 800398c:	d002      	beq.n	8003994 <LSM6DS3_X_Get_Free_Fall_Detection_Status+0x20>
      return COMPONENT_ERROR;
 800398e:	2001      	movs	r0, #1
}
 8003990:	b002      	add	sp, #8
 8003992:	bd10      	pop	{r4, pc}
      *status = 1;
 8003994:	2301      	movs	r3, #1
  return COMPONENT_OK;
 8003996:	2000      	movs	r0, #0
      *status = 1;
 8003998:	7023      	strb	r3, [r4, #0]
}
 800399a:	b002      	add	sp, #8
 800399c:	bd10      	pop	{r4, pc}
      *status = 0;
 800399e:	7020      	strb	r0, [r4, #0]
}
 80039a0:	b002      	add	sp, #8
 80039a2:	bd10      	pop	{r4, pc}

080039a4 <LSM6DS3_G_Get_FS>:
{
 80039a4:	b530      	push	{r4, r5, lr}
 80039a6:	b083      	sub	sp, #12
 80039a8:	460d      	mov	r5, r1
  if ( LSM6DS3_ACC_GYRO_R_FS_125( (void *)handle, &fs_125 ) == MEMS_ERROR )
 80039aa:	f10d 0107 	add.w	r1, sp, #7
{
 80039ae:	4604      	mov	r4, r0
  if ( LSM6DS3_ACC_GYRO_R_FS_125( (void *)handle, &fs_125 ) == MEMS_ERROR )
 80039b0:	f7fe fb14 	bl	8001fdc <LSM6DS3_ACC_GYRO_R_FS_125>
 80039b4:	b910      	cbnz	r0, 80039bc <LSM6DS3_G_Get_FS+0x18>
        return COMPONENT_ERROR;
 80039b6:	2001      	movs	r0, #1
}
 80039b8:	b003      	add	sp, #12
 80039ba:	bd30      	pop	{r4, r5, pc}
  if ( LSM6DS3_ACC_GYRO_R_FS_G( (void *)handle, &fs_low_level ) == MEMS_ERROR )
 80039bc:	4620      	mov	r0, r4
 80039be:	f10d 0106 	add.w	r1, sp, #6
 80039c2:	f7fe fa8b 	bl	8001edc <LSM6DS3_ACC_GYRO_R_FS_G>
 80039c6:	2800      	cmp	r0, #0
 80039c8:	d0f5      	beq.n	80039b6 <LSM6DS3_G_Get_FS+0x12>
  if ( fs_125 == LSM6DS3_ACC_GYRO_FS_125_ENABLED )
 80039ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d00c      	beq.n	80039ec <LSM6DS3_G_Get_FS+0x48>
    switch( fs_low_level )
 80039d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80039d6:	2b0c      	cmp	r3, #12
 80039d8:	d81c      	bhi.n	8003a14 <LSM6DS3_G_Get_FS+0x70>
 80039da:	e8df f003 	tbb	[pc, r3]
 80039de:	1b17      	.short	0x1b17
 80039e0:	1b131b1b 	.word	0x1b131b1b
 80039e4:	1b0f1b1b 	.word	0x1b0f1b1b
 80039e8:	1b1b      	.short	0x1b1b
 80039ea:	0b          	.byte	0x0b
 80039eb:	00          	.byte	0x00
    *fullScale = 125.0f;
 80039ec:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <LSM6DS3_G_Get_FS+0x78>)
 80039ee:	602b      	str	r3, [r5, #0]
  return COMPONENT_OK;
 80039f0:	2000      	movs	r0, #0
 80039f2:	e7e1      	b.n	80039b8 <LSM6DS3_G_Get_FS+0x14>
        *fullScale = 2000.0f;
 80039f4:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <LSM6DS3_G_Get_FS+0x7c>)
 80039f6:	602b      	str	r3, [r5, #0]
  return COMPONENT_OK;
 80039f8:	2000      	movs	r0, #0
        break;
 80039fa:	e7dd      	b.n	80039b8 <LSM6DS3_G_Get_FS+0x14>
        *fullScale = 1000.0f;
 80039fc:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <LSM6DS3_G_Get_FS+0x80>)
 80039fe:	602b      	str	r3, [r5, #0]
  return COMPONENT_OK;
 8003a00:	2000      	movs	r0, #0
        break;
 8003a02:	e7d9      	b.n	80039b8 <LSM6DS3_G_Get_FS+0x14>
        *fullScale =  500.0f;
 8003a04:	4b08      	ldr	r3, [pc, #32]	; (8003a28 <LSM6DS3_G_Get_FS+0x84>)
 8003a06:	602b      	str	r3, [r5, #0]
  return COMPONENT_OK;
 8003a08:	2000      	movs	r0, #0
        break;
 8003a0a:	e7d5      	b.n	80039b8 <LSM6DS3_G_Get_FS+0x14>
        *fullScale =  245.0f;
 8003a0c:	4b07      	ldr	r3, [pc, #28]	; (8003a2c <LSM6DS3_G_Get_FS+0x88>)
 8003a0e:	602b      	str	r3, [r5, #0]
  return COMPONENT_OK;
 8003a10:	2000      	movs	r0, #0
        break;
 8003a12:	e7d1      	b.n	80039b8 <LSM6DS3_G_Get_FS+0x14>
        *fullScale =   -1.0f;
 8003a14:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <LSM6DS3_G_Get_FS+0x8c>)
 8003a16:	602b      	str	r3, [r5, #0]
 8003a18:	e7cd      	b.n	80039b6 <LSM6DS3_G_Get_FS+0x12>
 8003a1a:	bf00      	nop
 8003a1c:	42fa0000 	.word	0x42fa0000
 8003a20:	44fa0000 	.word	0x44fa0000
 8003a24:	447a0000 	.word	0x447a0000
 8003a28:	43fa0000 	.word	0x43fa0000
 8003a2c:	43750000 	.word	0x43750000
 8003a30:	bf800000 	.word	0xbf800000

08003a34 <LSM6DS3_X_Get_DRDY_Status>:
{
 8003a34:	b510      	push	{r4, lr}
 8003a36:	b082      	sub	sp, #8
 8003a38:	460c      	mov	r4, r1
  if ( LSM6DS3_ACC_GYRO_R_XLDA( (void *)handle, &status_raw ) == MEMS_ERROR )
 8003a3a:	f10d 0107 	add.w	r1, sp, #7
 8003a3e:	f7fe fe87 	bl	8002750 <LSM6DS3_ACC_GYRO_R_XLDA>
 8003a42:	b120      	cbz	r0, 8003a4e <LSM6DS3_X_Get_DRDY_Status+0x1a>
  switch( status_raw )
 8003a44:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003a48:	b140      	cbz	r0, 8003a5c <LSM6DS3_X_Get_DRDY_Status+0x28>
 8003a4a:	2801      	cmp	r0, #1
 8003a4c:	d002      	beq.n	8003a54 <LSM6DS3_X_Get_DRDY_Status+0x20>
      return COMPONENT_ERROR;
 8003a4e:	2001      	movs	r0, #1
}
 8003a50:	b002      	add	sp, #8
 8003a52:	bd10      	pop	{r4, pc}
      *status = 1;
 8003a54:	7020      	strb	r0, [r4, #0]
  return COMPONENT_OK;
 8003a56:	2000      	movs	r0, #0
}
 8003a58:	b002      	add	sp, #8
 8003a5a:	bd10      	pop	{r4, pc}
      *status = 0;
 8003a5c:	7020      	strb	r0, [r4, #0]
}
 8003a5e:	b002      	add	sp, #8
 8003a60:	bd10      	pop	{r4, pc}
 8003a62:	bf00      	nop

08003a64 <LSM6DS3_X_Write_Reg>:
{
 8003a64:	b510      	push	{r4, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	ac02      	add	r4, sp, #8
  if ( LSM6DS3_ACC_GYRO_WriteReg( (void *)handle, reg, &data, 1 ) == MEMS_ERROR )
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	f804 2d01 	strb.w	r2, [r4, #-1]!
 8003a70:	4622      	mov	r2, r4
 8003a72:	f7fe f955 	bl	8001d20 <LSM6DS3_ACC_GYRO_WriteReg>
}
 8003a76:	fab0 f080 	clz	r0, r0
 8003a7a:	0940      	lsrs	r0, r0, #5
 8003a7c:	b002      	add	sp, #8
 8003a7e:	bd10      	pop	{r4, pc}

08003a80 <LSM6DS3_X_Get_Axes_Status>:
{
 8003a80:	b530      	push	{r4, r5, lr}
 8003a82:	b083      	sub	sp, #12
 8003a84:	460d      	mov	r5, r1
  if ( LSM6DS3_ACC_GYRO_R_XEN_XL( (void *)handle, &xStatus ) == MEMS_ERROR )
 8003a86:	f10d 0105 	add.w	r1, sp, #5
{
 8003a8a:	4604      	mov	r4, r0
  if ( LSM6DS3_ACC_GYRO_R_XEN_XL( (void *)handle, &xStatus ) == MEMS_ERROR )
 8003a8c:	f7fe fc62 	bl	8002354 <LSM6DS3_ACC_GYRO_R_XEN_XL>
 8003a90:	b910      	cbnz	r0, 8003a98 <LSM6DS3_X_Get_Axes_Status+0x18>
    return COMPONENT_ERROR;
 8003a92:	2001      	movs	r0, #1
}
 8003a94:	b003      	add	sp, #12
 8003a96:	bd30      	pop	{r4, r5, pc}
  if ( LSM6DS3_ACC_GYRO_R_YEN_XL( (void *)handle, &yStatus ) == MEMS_ERROR )
 8003a98:	f10d 0106 	add.w	r1, sp, #6
 8003a9c:	4620      	mov	r0, r4
 8003a9e:	f7fe fc8b 	bl	80023b8 <LSM6DS3_ACC_GYRO_R_YEN_XL>
 8003aa2:	2800      	cmp	r0, #0
 8003aa4:	d0f5      	beq.n	8003a92 <LSM6DS3_X_Get_Axes_Status+0x12>
  if ( LSM6DS3_ACC_GYRO_R_ZEN_XL( (void *)handle, &zStatus ) == MEMS_ERROR )
 8003aa6:	4620      	mov	r0, r4
 8003aa8:	f10d 0107 	add.w	r1, sp, #7
 8003aac:	f7fe fcb6 	bl	800241c <LSM6DS3_ACC_GYRO_R_ZEN_XL>
 8003ab0:	2800      	cmp	r0, #0
 8003ab2:	d0ee      	beq.n	8003a92 <LSM6DS3_X_Get_Axes_Status+0x12>
  xyz_enabled[0] = ( xStatus == LSM6DS3_ACC_GYRO_XEN_XL_ENABLED ) ? 1 : 0;
 8003ab4:	f89d 1005 	ldrb.w	r1, [sp, #5]
  xyz_enabled[1] = ( yStatus == LSM6DS3_ACC_GYRO_YEN_XL_ENABLED ) ? 1 : 0;
 8003ab8:	f89d 2006 	ldrb.w	r2, [sp, #6]
  xyz_enabled[2] = ( zStatus == LSM6DS3_ACC_GYRO_ZEN_XL_ENABLED ) ? 1 : 0;
 8003abc:	f89d 3007 	ldrb.w	r3, [sp, #7]
  xyz_enabled[0] = ( xStatus == LSM6DS3_ACC_GYRO_XEN_XL_ENABLED ) ? 1 : 0;
 8003ac0:	f1a1 0108 	sub.w	r1, r1, #8
  xyz_enabled[1] = ( yStatus == LSM6DS3_ACC_GYRO_YEN_XL_ENABLED ) ? 1 : 0;
 8003ac4:	f1a2 0210 	sub.w	r2, r2, #16
  xyz_enabled[2] = ( zStatus == LSM6DS3_ACC_GYRO_ZEN_XL_ENABLED ) ? 1 : 0;
 8003ac8:	f1a3 0320 	sub.w	r3, r3, #32
  xyz_enabled[0] = ( xStatus == LSM6DS3_ACC_GYRO_XEN_XL_ENABLED ) ? 1 : 0;
 8003acc:	fab1 f181 	clz	r1, r1
  xyz_enabled[1] = ( yStatus == LSM6DS3_ACC_GYRO_YEN_XL_ENABLED ) ? 1 : 0;
 8003ad0:	fab2 f282 	clz	r2, r2
  xyz_enabled[2] = ( zStatus == LSM6DS3_ACC_GYRO_ZEN_XL_ENABLED ) ? 1 : 0;
 8003ad4:	fab3 f383 	clz	r3, r3
  xyz_enabled[0] = ( xStatus == LSM6DS3_ACC_GYRO_XEN_XL_ENABLED ) ? 1 : 0;
 8003ad8:	0949      	lsrs	r1, r1, #5
  xyz_enabled[1] = ( yStatus == LSM6DS3_ACC_GYRO_YEN_XL_ENABLED ) ? 1 : 0;
 8003ada:	0952      	lsrs	r2, r2, #5
  xyz_enabled[2] = ( zStatus == LSM6DS3_ACC_GYRO_ZEN_XL_ENABLED ) ? 1 : 0;
 8003adc:	095b      	lsrs	r3, r3, #5
  xyz_enabled[0] = ( xStatus == LSM6DS3_ACC_GYRO_XEN_XL_ENABLED ) ? 1 : 0;
 8003ade:	7029      	strb	r1, [r5, #0]
  xyz_enabled[1] = ( yStatus == LSM6DS3_ACC_GYRO_YEN_XL_ENABLED ) ? 1 : 0;
 8003ae0:	706a      	strb	r2, [r5, #1]
  xyz_enabled[2] = ( zStatus == LSM6DS3_ACC_GYRO_ZEN_XL_ENABLED ) ? 1 : 0;
 8003ae2:	70ab      	strb	r3, [r5, #2]
  return COMPONENT_OK;
 8003ae4:	2000      	movs	r0, #0
 8003ae6:	e7d5      	b.n	8003a94 <LSM6DS3_X_Get_Axes_Status+0x14>

08003ae8 <LSM6DS3_X_Get_ODR>:
{
 8003ae8:	b510      	push	{r4, lr}
 8003aea:	b082      	sub	sp, #8
 8003aec:	460c      	mov	r4, r1
  if ( LSM6DS3_ACC_GYRO_R_ODR_XL( (void *)handle, &odr_low_level ) == MEMS_ERROR )
 8003aee:	f10d 0107 	add.w	r1, sp, #7
 8003af2:	f7fe f9c1 	bl	8001e78 <LSM6DS3_ACC_GYRO_R_ODR_XL>
 8003af6:	b178      	cbz	r0, 8003b18 <LSM6DS3_X_Get_ODR+0x30>
  switch( odr_low_level )
 8003af8:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003afc:	2850      	cmp	r0, #80	; 0x50
 8003afe:	d028      	beq.n	8003b52 <LSM6DS3_X_Get_ODR+0x6a>
 8003b00:	d80d      	bhi.n	8003b1e <LSM6DS3_X_Get_ODR+0x36>
 8003b02:	2820      	cmp	r0, #32
 8003b04:	d035      	beq.n	8003b72 <LSM6DS3_X_Get_ODR+0x8a>
 8003b06:	d91d      	bls.n	8003b44 <LSM6DS3_X_Get_ODR+0x5c>
 8003b08:	2830      	cmp	r0, #48	; 0x30
 8003b0a:	d03a      	beq.n	8003b82 <LSM6DS3_X_Get_ODR+0x9a>
 8003b0c:	2840      	cmp	r0, #64	; 0x40
 8003b0e:	d124      	bne.n	8003b5a <LSM6DS3_X_Get_ODR+0x72>
      *odr =   104.0f;
 8003b10:	4b1f      	ldr	r3, [pc, #124]	; (8003b90 <LSM6DS3_X_Get_ODR+0xa8>)
 8003b12:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8003b14:	2000      	movs	r0, #0
      break;
 8003b16:	e000      	b.n	8003b1a <LSM6DS3_X_Get_ODR+0x32>
    return COMPONENT_ERROR;
 8003b18:	2001      	movs	r0, #1
}
 8003b1a:	b002      	add	sp, #8
 8003b1c:	bd10      	pop	{r4, pc}
  switch( odr_low_level )
 8003b1e:	2880      	cmp	r0, #128	; 0x80
 8003b20:	d023      	beq.n	8003b6a <LSM6DS3_X_Get_ODR+0x82>
 8003b22:	d907      	bls.n	8003b34 <LSM6DS3_X_Get_ODR+0x4c>
 8003b24:	2890      	cmp	r0, #144	; 0x90
 8003b26:	d028      	beq.n	8003b7a <LSM6DS3_X_Get_ODR+0x92>
 8003b28:	28a0      	cmp	r0, #160	; 0xa0
 8003b2a:	d116      	bne.n	8003b5a <LSM6DS3_X_Get_ODR+0x72>
      *odr =  6660.0f;
 8003b2c:	4b19      	ldr	r3, [pc, #100]	; (8003b94 <LSM6DS3_X_Get_ODR+0xac>)
 8003b2e:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8003b30:	2000      	movs	r0, #0
      break;
 8003b32:	e7f2      	b.n	8003b1a <LSM6DS3_X_Get_ODR+0x32>
  switch( odr_low_level )
 8003b34:	2860      	cmp	r0, #96	; 0x60
 8003b36:	d014      	beq.n	8003b62 <LSM6DS3_X_Get_ODR+0x7a>
 8003b38:	2870      	cmp	r0, #112	; 0x70
 8003b3a:	d10e      	bne.n	8003b5a <LSM6DS3_X_Get_ODR+0x72>
      *odr =   833.0f;
 8003b3c:	4b16      	ldr	r3, [pc, #88]	; (8003b98 <LSM6DS3_X_Get_ODR+0xb0>)
 8003b3e:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8003b40:	2000      	movs	r0, #0
      break;
 8003b42:	e7ea      	b.n	8003b1a <LSM6DS3_X_Get_ODR+0x32>
  switch( odr_low_level )
 8003b44:	b308      	cbz	r0, 8003b8a <LSM6DS3_X_Get_ODR+0xa2>
 8003b46:	2810      	cmp	r0, #16
 8003b48:	d107      	bne.n	8003b5a <LSM6DS3_X_Get_ODR+0x72>
      *odr =    13.0f;
 8003b4a:	4b14      	ldr	r3, [pc, #80]	; (8003b9c <LSM6DS3_X_Get_ODR+0xb4>)
 8003b4c:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8003b4e:	2000      	movs	r0, #0
      break;
 8003b50:	e7e3      	b.n	8003b1a <LSM6DS3_X_Get_ODR+0x32>
      *odr =   208.0f;
 8003b52:	4b13      	ldr	r3, [pc, #76]	; (8003ba0 <LSM6DS3_X_Get_ODR+0xb8>)
 8003b54:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8003b56:	2000      	movs	r0, #0
      break;
 8003b58:	e7df      	b.n	8003b1a <LSM6DS3_X_Get_ODR+0x32>
      *odr =    -1.0f;
 8003b5a:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <LSM6DS3_X_Get_ODR+0xbc>)
 8003b5c:	6023      	str	r3, [r4, #0]
      return COMPONENT_ERROR;
 8003b5e:	2001      	movs	r0, #1
 8003b60:	e7db      	b.n	8003b1a <LSM6DS3_X_Get_ODR+0x32>
      *odr =   416.0f;
 8003b62:	4b11      	ldr	r3, [pc, #68]	; (8003ba8 <LSM6DS3_X_Get_ODR+0xc0>)
 8003b64:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8003b66:	2000      	movs	r0, #0
      break;
 8003b68:	e7d7      	b.n	8003b1a <LSM6DS3_X_Get_ODR+0x32>
      *odr =  1660.0f;
 8003b6a:	4b10      	ldr	r3, [pc, #64]	; (8003bac <LSM6DS3_X_Get_ODR+0xc4>)
 8003b6c:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8003b6e:	2000      	movs	r0, #0
      break;
 8003b70:	e7d3      	b.n	8003b1a <LSM6DS3_X_Get_ODR+0x32>
      *odr =    26.0f;
 8003b72:	4b0f      	ldr	r3, [pc, #60]	; (8003bb0 <LSM6DS3_X_Get_ODR+0xc8>)
 8003b74:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8003b76:	2000      	movs	r0, #0
      break;
 8003b78:	e7cf      	b.n	8003b1a <LSM6DS3_X_Get_ODR+0x32>
      *odr =  3330.0f;
 8003b7a:	4b0e      	ldr	r3, [pc, #56]	; (8003bb4 <LSM6DS3_X_Get_ODR+0xcc>)
 8003b7c:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8003b7e:	2000      	movs	r0, #0
      break;
 8003b80:	e7cb      	b.n	8003b1a <LSM6DS3_X_Get_ODR+0x32>
      *odr =    52.0f;
 8003b82:	4b0d      	ldr	r3, [pc, #52]	; (8003bb8 <LSM6DS3_X_Get_ODR+0xd0>)
 8003b84:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8003b86:	2000      	movs	r0, #0
      break;
 8003b88:	e7c7      	b.n	8003b1a <LSM6DS3_X_Get_ODR+0x32>
      *odr =     0.0f;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	6023      	str	r3, [r4, #0]
      break;
 8003b8e:	e7c4      	b.n	8003b1a <LSM6DS3_X_Get_ODR+0x32>
 8003b90:	42d00000 	.word	0x42d00000
 8003b94:	45d02000 	.word	0x45d02000
 8003b98:	44504000 	.word	0x44504000
 8003b9c:	41500000 	.word	0x41500000
 8003ba0:	43500000 	.word	0x43500000
 8003ba4:	bf800000 	.word	0xbf800000
 8003ba8:	43d00000 	.word	0x43d00000
 8003bac:	44cf8000 	.word	0x44cf8000
 8003bb0:	41d00000 	.word	0x41d00000
 8003bb4:	45502000 	.word	0x45502000
 8003bb8:	42500000 	.word	0x42500000

08003bbc <LSM6DS3_X_Get_WhoAmI>:
{
 8003bbc:	b508      	push	{r3, lr}
  if ( LSM6DS3_ACC_GYRO_R_WHO_AM_I( (void *)handle, ( uint8_t* )who_am_i ) == MEMS_ERROR )
 8003bbe:	f7fe f8bf 	bl	8001d40 <LSM6DS3_ACC_GYRO_R_WHO_AM_I>
}
 8003bc2:	fab0 f080 	clz	r0, r0
 8003bc6:	0940      	lsrs	r0, r0, #5
 8003bc8:	bd08      	pop	{r3, pc}
 8003bca:	bf00      	nop

08003bcc <LSM6DS3_G_Get_DRDY_Status>:
{
 8003bcc:	b510      	push	{r4, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	460c      	mov	r4, r1
  if ( LSM6DS3_ACC_GYRO_R_GDA( (void *)handle, &status_raw ) == MEMS_ERROR )
 8003bd2:	f10d 0107 	add.w	r1, sp, #7
 8003bd6:	f7fe fdcb 	bl	8002770 <LSM6DS3_ACC_GYRO_R_GDA>
 8003bda:	b120      	cbz	r0, 8003be6 <LSM6DS3_G_Get_DRDY_Status+0x1a>
  switch( status_raw )
 8003bdc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003be0:	b148      	cbz	r0, 8003bf6 <LSM6DS3_G_Get_DRDY_Status+0x2a>
 8003be2:	2802      	cmp	r0, #2
 8003be4:	d002      	beq.n	8003bec <LSM6DS3_G_Get_DRDY_Status+0x20>
      return COMPONENT_ERROR;
 8003be6:	2001      	movs	r0, #1
}
 8003be8:	b002      	add	sp, #8
 8003bea:	bd10      	pop	{r4, pc}
      *status = 1;
 8003bec:	2301      	movs	r3, #1
  return COMPONENT_OK;
 8003bee:	2000      	movs	r0, #0
      *status = 1;
 8003bf0:	7023      	strb	r3, [r4, #0]
}
 8003bf2:	b002      	add	sp, #8
 8003bf4:	bd10      	pop	{r4, pc}
      *status = 0;
 8003bf6:	7020      	strb	r0, [r4, #0]
}
 8003bf8:	b002      	add	sp, #8
 8003bfa:	bd10      	pop	{r4, pc}

08003bfc <LSM6DS3_G_Get_Axes_Status>:
{
 8003bfc:	b530      	push	{r4, r5, lr}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	460d      	mov	r5, r1
  if ( LSM6DS3_ACC_GYRO_R_XEN_G( (void *)handle, &xStatus ) == MEMS_ERROR )
 8003c02:	f10d 0105 	add.w	r1, sp, #5
{
 8003c06:	4604      	mov	r4, r0
  if ( LSM6DS3_ACC_GYRO_R_XEN_G( (void *)handle, &xStatus ) == MEMS_ERROR )
 8003c08:	f7fe fc5c 	bl	80024c4 <LSM6DS3_ACC_GYRO_R_XEN_G>
 8003c0c:	b910      	cbnz	r0, 8003c14 <LSM6DS3_G_Get_Axes_Status+0x18>
    return COMPONENT_ERROR;
 8003c0e:	2001      	movs	r0, #1
}
 8003c10:	b003      	add	sp, #12
 8003c12:	bd30      	pop	{r4, r5, pc}
  if ( LSM6DS3_ACC_GYRO_R_YEN_G( (void *)handle, &yStatus ) == MEMS_ERROR )
 8003c14:	f10d 0106 	add.w	r1, sp, #6
 8003c18:	4620      	mov	r0, r4
 8003c1a:	f7fe fc85 	bl	8002528 <LSM6DS3_ACC_GYRO_R_YEN_G>
 8003c1e:	2800      	cmp	r0, #0
 8003c20:	d0f5      	beq.n	8003c0e <LSM6DS3_G_Get_Axes_Status+0x12>
  if ( LSM6DS3_ACC_GYRO_R_ZEN_G( (void *)handle, &zStatus ) == MEMS_ERROR )
 8003c22:	4620      	mov	r0, r4
 8003c24:	f10d 0107 	add.w	r1, sp, #7
 8003c28:	f7fe fcb0 	bl	800258c <LSM6DS3_ACC_GYRO_R_ZEN_G>
 8003c2c:	2800      	cmp	r0, #0
 8003c2e:	d0ee      	beq.n	8003c0e <LSM6DS3_G_Get_Axes_Status+0x12>
  xyz_enabled[0] = ( xStatus == LSM6DS3_ACC_GYRO_XEN_G_ENABLED ) ? 1 : 0;
 8003c30:	f89d 1005 	ldrb.w	r1, [sp, #5]
  xyz_enabled[1] = ( yStatus == LSM6DS3_ACC_GYRO_YEN_G_ENABLED ) ? 1 : 0;
 8003c34:	f89d 2006 	ldrb.w	r2, [sp, #6]
  xyz_enabled[2] = ( zStatus == LSM6DS3_ACC_GYRO_ZEN_G_ENABLED ) ? 1 : 0;
 8003c38:	f89d 3007 	ldrb.w	r3, [sp, #7]
  xyz_enabled[0] = ( xStatus == LSM6DS3_ACC_GYRO_XEN_G_ENABLED ) ? 1 : 0;
 8003c3c:	f1a1 0108 	sub.w	r1, r1, #8
  xyz_enabled[1] = ( yStatus == LSM6DS3_ACC_GYRO_YEN_G_ENABLED ) ? 1 : 0;
 8003c40:	f1a2 0210 	sub.w	r2, r2, #16
  xyz_enabled[2] = ( zStatus == LSM6DS3_ACC_GYRO_ZEN_G_ENABLED ) ? 1 : 0;
 8003c44:	f1a3 0320 	sub.w	r3, r3, #32
  xyz_enabled[0] = ( xStatus == LSM6DS3_ACC_GYRO_XEN_G_ENABLED ) ? 1 : 0;
 8003c48:	fab1 f181 	clz	r1, r1
  xyz_enabled[1] = ( yStatus == LSM6DS3_ACC_GYRO_YEN_G_ENABLED ) ? 1 : 0;
 8003c4c:	fab2 f282 	clz	r2, r2
  xyz_enabled[2] = ( zStatus == LSM6DS3_ACC_GYRO_ZEN_G_ENABLED ) ? 1 : 0;
 8003c50:	fab3 f383 	clz	r3, r3
  xyz_enabled[0] = ( xStatus == LSM6DS3_ACC_GYRO_XEN_G_ENABLED ) ? 1 : 0;
 8003c54:	0949      	lsrs	r1, r1, #5
  xyz_enabled[1] = ( yStatus == LSM6DS3_ACC_GYRO_YEN_G_ENABLED ) ? 1 : 0;
 8003c56:	0952      	lsrs	r2, r2, #5
  xyz_enabled[2] = ( zStatus == LSM6DS3_ACC_GYRO_ZEN_G_ENABLED ) ? 1 : 0;
 8003c58:	095b      	lsrs	r3, r3, #5
  xyz_enabled[0] = ( xStatus == LSM6DS3_ACC_GYRO_XEN_G_ENABLED ) ? 1 : 0;
 8003c5a:	7029      	strb	r1, [r5, #0]
  xyz_enabled[1] = ( yStatus == LSM6DS3_ACC_GYRO_YEN_G_ENABLED ) ? 1 : 0;
 8003c5c:	706a      	strb	r2, [r5, #1]
  xyz_enabled[2] = ( zStatus == LSM6DS3_ACC_GYRO_ZEN_G_ENABLED ) ? 1 : 0;
 8003c5e:	70ab      	strb	r3, [r5, #2]
  return COMPONENT_OK;
 8003c60:	2000      	movs	r0, #0
 8003c62:	e7d5      	b.n	8003c10 <LSM6DS3_G_Get_Axes_Status+0x14>

08003c64 <LSM6DS3_G_Set_FS>:
  switch( fullScale )
 8003c64:	2902      	cmp	r1, #2
 8003c66:	d00c      	beq.n	8003c82 <LSM6DS3_G_Set_FS+0x1e>
 8003c68:	2904      	cmp	r1, #4
 8003c6a:	d002      	beq.n	8003c72 <LSM6DS3_G_Set_FS+0xe>
 8003c6c:	b111      	cbz	r1, 8003c74 <LSM6DS3_G_Set_FS+0x10>
      return COMPONENT_ERROR;
 8003c6e:	2001      	movs	r0, #1
}
 8003c70:	4770      	bx	lr
      new_fs = LSM6DS3_ACC_GYRO_FS_G_2000dps;
 8003c72:	210c      	movs	r1, #12
{
 8003c74:	b508      	push	{r3, lr}
  if ( LSM6DS3_ACC_GYRO_W_FS_G( (void *)handle, new_fs ) == MEMS_ERROR )
 8003c76:	f7fe f90f 	bl	8001e98 <LSM6DS3_ACC_GYRO_W_FS_G>
      return COMPONENT_ERROR;
 8003c7a:	fab0 f080 	clz	r0, r0
 8003c7e:	0940      	lsrs	r0, r0, #5
}
 8003c80:	bd08      	pop	{r3, pc}
      new_fs = LSM6DS3_ACC_GYRO_FS_G_500dps;
 8003c82:	2104      	movs	r1, #4
{
 8003c84:	b508      	push	{r3, lr}
  if ( LSM6DS3_ACC_GYRO_W_FS_G( (void *)handle, new_fs ) == MEMS_ERROR )
 8003c86:	f7fe f907 	bl	8001e98 <LSM6DS3_ACC_GYRO_W_FS_G>
      return COMPONENT_ERROR;
 8003c8a:	fab0 f080 	clz	r0, r0
 8003c8e:	0940      	lsrs	r0, r0, #5
}
 8003c90:	bd08      	pop	{r3, pc}
 8003c92:	bf00      	nop

08003c94 <LSM6DS3_G_Get_ODR>:
{
 8003c94:	b510      	push	{r4, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	460c      	mov	r4, r1
  if ( LSM6DS3_ACC_GYRO_R_ODR_G( (void *)handle, &odr_low_level ) == MEMS_ERROR )
 8003c9a:	f10d 0107 	add.w	r1, sp, #7
 8003c9e:	f7fe f94f 	bl	8001f40 <LSM6DS3_ACC_GYRO_R_ODR_G>
 8003ca2:	b178      	cbz	r0, 8003cc4 <LSM6DS3_G_Get_ODR+0x30>
  switch( odr_low_level )
 8003ca4:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8003ca8:	2840      	cmp	r0, #64	; 0x40
 8003caa:	d01d      	beq.n	8003ce8 <LSM6DS3_G_Get_ODR+0x54>
 8003cac:	d80d      	bhi.n	8003cca <LSM6DS3_G_Get_ODR+0x36>
 8003cae:	2810      	cmp	r0, #16
 8003cb0:	d01e      	beq.n	8003cf0 <LSM6DS3_G_Get_ODR+0x5c>
 8003cb2:	d921      	bls.n	8003cf8 <LSM6DS3_G_Get_ODR+0x64>
 8003cb4:	2820      	cmp	r0, #32
 8003cb6:	d031      	beq.n	8003d1c <LSM6DS3_G_Get_ODR+0x88>
 8003cb8:	2830      	cmp	r0, #48	; 0x30
 8003cba:	d12b      	bne.n	8003d14 <LSM6DS3_G_Get_ODR+0x80>
      *odr =   52.0f;
 8003cbc:	4b19      	ldr	r3, [pc, #100]	; (8003d24 <LSM6DS3_G_Get_ODR+0x90>)
 8003cbe:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8003cc0:	2000      	movs	r0, #0
      break;
 8003cc2:	e000      	b.n	8003cc6 <LSM6DS3_G_Get_ODR+0x32>
    return COMPONENT_ERROR;
 8003cc4:	2001      	movs	r0, #1
}
 8003cc6:	b002      	add	sp, #8
 8003cc8:	bd10      	pop	{r4, pc}
  switch( odr_low_level )
 8003cca:	2860      	cmp	r0, #96	; 0x60
 8003ccc:	d008      	beq.n	8003ce0 <LSM6DS3_G_Get_ODR+0x4c>
 8003cce:	d917      	bls.n	8003d00 <LSM6DS3_G_Get_ODR+0x6c>
 8003cd0:	2870      	cmp	r0, #112	; 0x70
 8003cd2:	d01b      	beq.n	8003d0c <LSM6DS3_G_Get_ODR+0x78>
 8003cd4:	2880      	cmp	r0, #128	; 0x80
 8003cd6:	d11d      	bne.n	8003d14 <LSM6DS3_G_Get_ODR+0x80>
      *odr = 1660.0f;
 8003cd8:	4b13      	ldr	r3, [pc, #76]	; (8003d28 <LSM6DS3_G_Get_ODR+0x94>)
 8003cda:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8003cdc:	2000      	movs	r0, #0
      break;
 8003cde:	e7f2      	b.n	8003cc6 <LSM6DS3_G_Get_ODR+0x32>
      *odr =  416.0f;
 8003ce0:	4b12      	ldr	r3, [pc, #72]	; (8003d2c <LSM6DS3_G_Get_ODR+0x98>)
 8003ce2:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8003ce4:	2000      	movs	r0, #0
      break;
 8003ce6:	e7ee      	b.n	8003cc6 <LSM6DS3_G_Get_ODR+0x32>
      *odr =  104.0f;
 8003ce8:	4b11      	ldr	r3, [pc, #68]	; (8003d30 <LSM6DS3_G_Get_ODR+0x9c>)
 8003cea:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8003cec:	2000      	movs	r0, #0
      break;
 8003cee:	e7ea      	b.n	8003cc6 <LSM6DS3_G_Get_ODR+0x32>
      *odr =   13.0f;
 8003cf0:	4b10      	ldr	r3, [pc, #64]	; (8003d34 <LSM6DS3_G_Get_ODR+0xa0>)
 8003cf2:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8003cf4:	2000      	movs	r0, #0
      break;
 8003cf6:	e7e6      	b.n	8003cc6 <LSM6DS3_G_Get_ODR+0x32>
  switch( odr_low_level )
 8003cf8:	b960      	cbnz	r0, 8003d14 <LSM6DS3_G_Get_ODR+0x80>
      *odr =    0.0f;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	6023      	str	r3, [r4, #0]
      break;
 8003cfe:	e7e2      	b.n	8003cc6 <LSM6DS3_G_Get_ODR+0x32>
  switch( odr_low_level )
 8003d00:	2850      	cmp	r0, #80	; 0x50
 8003d02:	d107      	bne.n	8003d14 <LSM6DS3_G_Get_ODR+0x80>
      *odr =  208.0f;
 8003d04:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <LSM6DS3_G_Get_ODR+0xa4>)
 8003d06:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8003d08:	2000      	movs	r0, #0
      break;
 8003d0a:	e7dc      	b.n	8003cc6 <LSM6DS3_G_Get_ODR+0x32>
      *odr =  833.0f;
 8003d0c:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <LSM6DS3_G_Get_ODR+0xa8>)
 8003d0e:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8003d10:	2000      	movs	r0, #0
      break;
 8003d12:	e7d8      	b.n	8003cc6 <LSM6DS3_G_Get_ODR+0x32>
      *odr =   -1.0f;
 8003d14:	4b0a      	ldr	r3, [pc, #40]	; (8003d40 <LSM6DS3_G_Get_ODR+0xac>)
 8003d16:	6023      	str	r3, [r4, #0]
      return COMPONENT_ERROR;
 8003d18:	2001      	movs	r0, #1
 8003d1a:	e7d4      	b.n	8003cc6 <LSM6DS3_G_Get_ODR+0x32>
      *odr =   26.0f;
 8003d1c:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <LSM6DS3_G_Get_ODR+0xb0>)
 8003d1e:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 8003d20:	2000      	movs	r0, #0
      break;
 8003d22:	e7d0      	b.n	8003cc6 <LSM6DS3_G_Get_ODR+0x32>
 8003d24:	42500000 	.word	0x42500000
 8003d28:	44cf8000 	.word	0x44cf8000
 8003d2c:	43d00000 	.word	0x43d00000
 8003d30:	42d00000 	.word	0x42d00000
 8003d34:	41500000 	.word	0x41500000
 8003d38:	43500000 	.word	0x43500000
 8003d3c:	44504000 	.word	0x44504000
 8003d40:	bf800000 	.word	0xbf800000
 8003d44:	41d00000 	.word	0x41d00000

08003d48 <LSM6DS3_X_Set_SelfTest>:
*/
static DrvStatusTypeDef LSM6DS3_X_Set_SelfTest( DrvContextTypeDef *handle, uint8_t status )
{

  /* Verify that the passed parameter contains one of the valid values. */
  switch ( ( LSM6DS3_ACC_GYRO_ST_XL_t )status )
 8003d48:	2903      	cmp	r1, #3
 8003d4a:	d901      	bls.n	8003d50 <LSM6DS3_X_Set_SelfTest+0x8>
    case LSM6DS3_ACC_GYRO_ST_XL_POS_SIGN_TEST:
    case LSM6DS3_ACC_GYRO_ST_XL_NEG_SIGN_TEST:
    case LSM6DS3_ACC_GYRO_ST_XL_NA:
      break;
    default:
      return COMPONENT_ERROR;
 8003d4c:	2001      	movs	r0, #1
  {
    return COMPONENT_ERROR;
  }

  return COMPONENT_OK;
}
 8003d4e:	4770      	bx	lr
{
 8003d50:	b508      	push	{r3, lr}
  if ( LSM6DS3_ACC_GYRO_W_SelfTest_XL( handle, ( LSM6DS3_ACC_GYRO_ST_XL_t )status ) == MEMS_ERROR )
 8003d52:	f7fe fa99 	bl	8002288 <LSM6DS3_ACC_GYRO_W_SelfTest_XL>
      return COMPONENT_ERROR;
 8003d56:	fab0 f080 	clz	r0, r0
 8003d5a:	0940      	lsrs	r0, r0, #5
}
 8003d5c:	bd08      	pop	{r3, pc}
 8003d5e:	bf00      	nop

08003d60 <LSM6DS3_X_Set_Interrupt_Latch>:
  switch ( ( LSM6DS3_ACC_GYRO_LIR_t )status )
 8003d60:	2901      	cmp	r1, #1
 8003d62:	d901      	bls.n	8003d68 <LSM6DS3_X_Set_Interrupt_Latch+0x8>
      return COMPONENT_ERROR;
 8003d64:	2001      	movs	r0, #1
}
 8003d66:	4770      	bx	lr
{
 8003d68:	b508      	push	{r3, lr}
  if ( LSM6DS3_ACC_GYRO_W_LIR( handle, ( LSM6DS3_ACC_GYRO_LIR_t )status ) == MEMS_ERROR )
 8003d6a:	f7fe fda9 	bl	80028c0 <LSM6DS3_ACC_GYRO_W_LIR>
      return COMPONENT_ERROR;
 8003d6e:	fab0 f080 	clz	r0, r0
 8003d72:	0940      	lsrs	r0, r0, #5
}
 8003d74:	bd08      	pop	{r3, pc}
 8003d76:	bf00      	nop

08003d78 <LSM6DS3_FIFO_Set_Stop_On_Fth>:
  switch ( ( LSM6DS3_ACC_GYRO_STOP_ON_FTH_t )status )
 8003d78:	2901      	cmp	r1, #1
 8003d7a:	d901      	bls.n	8003d80 <LSM6DS3_FIFO_Set_Stop_On_Fth+0x8>
      return COMPONENT_ERROR;
 8003d7c:	2001      	movs	r0, #1
}
 8003d7e:	4770      	bx	lr
{
 8003d80:	b508      	push	{r3, lr}
  if ( LSM6DS3_ACC_GYRO_W_STOP_ON_FTH( handle, ( LSM6DS3_ACC_GYRO_STOP_ON_FTH_t )status ) == MEMS_ERROR )
 8003d82:	f7fe fa5f 	bl	8002244 <LSM6DS3_ACC_GYRO_W_STOP_ON_FTH>
      return COMPONENT_ERROR;
 8003d86:	fab0 f080 	clz	r0, r0
 8003d8a:	0940      	lsrs	r0, r0, #5
}
 8003d8c:	bd08      	pop	{r3, pc}
 8003d8e:	bf00      	nop

08003d90 <LSM6DS3_FIFO_Set_INT1_FIFO_Full>:
  switch ( ( LSM6DS3_ACC_GYRO_INT1_FSS5_t )status )
 8003d90:	b119      	cbz	r1, 8003d9a <LSM6DS3_FIFO_Set_INT1_FIFO_Full+0xa>
 8003d92:	2920      	cmp	r1, #32
 8003d94:	d001      	beq.n	8003d9a <LSM6DS3_FIFO_Set_INT1_FIFO_Full+0xa>
      return COMPONENT_ERROR;
 8003d96:	2001      	movs	r0, #1
}
 8003d98:	4770      	bx	lr
{
 8003d9a:	b508      	push	{r3, lr}
  if ( LSM6DS3_ACC_GYRO_W_FSS5_on_INT1( handle, ( LSM6DS3_ACC_GYRO_INT1_FSS5_t )status ) == MEMS_ERROR )
 8003d9c:	f7fe f9ec 	bl	8002178 <LSM6DS3_ACC_GYRO_W_FSS5_on_INT1>
      return COMPONENT_ERROR;
 8003da0:	fab0 f080 	clz	r0, r0
 8003da4:	0940      	lsrs	r0, r0, #5
}
 8003da6:	bd08      	pop	{r3, pc}

08003da8 <LSM6DS3_FIFO_Set_Mode>:
{
 8003da8:	2906      	cmp	r1, #6
 8003daa:	d808      	bhi.n	8003dbe <LSM6DS3_FIFO_Set_Mode+0x16>
 8003dac:	b508      	push	{r3, lr}
 8003dae:	2301      	movs	r3, #1
 8003db0:	fa03 f201 	lsl.w	r2, r3, r1
 8003db4:	f012 0f5b 	tst.w	r2, #91	; 0x5b
 8003db8:	d103      	bne.n	8003dc2 <LSM6DS3_FIFO_Set_Mode+0x1a>
      return COMPONENT_ERROR;
 8003dba:	4618      	mov	r0, r3
}
 8003dbc:	bd08      	pop	{r3, pc}
      return COMPONENT_ERROR;
 8003dbe:	2001      	movs	r0, #1
}
 8003dc0:	4770      	bx	lr
  if ( LSM6DS3_ACC_GYRO_W_FIFO_MODE( handle, ( LSM6DS3_ACC_GYRO_FIFO_MODE_t )mode ) == MEMS_ERROR )
 8003dc2:	f7fe f995 	bl	80020f0 <LSM6DS3_ACC_GYRO_W_FIFO_MODE>
      return COMPONENT_ERROR;
 8003dc6:	fab0 f080 	clz	r0, r0
 8003dca:	0940      	lsrs	r0, r0, #5
}
 8003dcc:	bd08      	pop	{r3, pc}
 8003dce:	bf00      	nop

08003dd0 <LSM6DS3_FIFO_X_Set_Decimation>:
  switch ( ( LSM6DS3_ACC_GYRO_DEC_FIFO_XL_t )decimation )
 8003dd0:	2907      	cmp	r1, #7
 8003dd2:	d901      	bls.n	8003dd8 <LSM6DS3_FIFO_X_Set_Decimation+0x8>
      return COMPONENT_ERROR;
 8003dd4:	2001      	movs	r0, #1
}
 8003dd6:	4770      	bx	lr
{
 8003dd8:	b508      	push	{r3, lr}
  if ( LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL( handle, ( LSM6DS3_ACC_GYRO_DEC_FIFO_XL_t )decimation ) == MEMS_ERROR )
 8003dda:	f7fe f945 	bl	8002068 <LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL>
      return COMPONENT_ERROR;
 8003dde:	fab0 f080 	clz	r0, r0
 8003de2:	0940      	lsrs	r0, r0, #5
}
 8003de4:	bd08      	pop	{r3, pc}
 8003de6:	bf00      	nop

08003de8 <LSM6DS3_X_Disable_6D_Orientation>:
{
 8003de8:	b510      	push	{r4, lr}
  if ( LSM6DS3_ACC_GYRO_W_6DEvOnInt1( (void *)handle, LSM6DS3_ACC_GYRO_INT1_6D_DISABLED ) == MEMS_ERROR )
 8003dea:	2100      	movs	r1, #0
{
 8003dec:	4604      	mov	r4, r0
  if ( LSM6DS3_ACC_GYRO_W_6DEvOnInt1( (void *)handle, LSM6DS3_ACC_GYRO_INT1_6D_DISABLED ) == MEMS_ERROR )
 8003dee:	f7ff f813 	bl	8002e18 <LSM6DS3_ACC_GYRO_W_6DEvOnInt1>
 8003df2:	b908      	cbnz	r0, 8003df8 <LSM6DS3_X_Disable_6D_Orientation+0x10>
    return COMPONENT_ERROR;
 8003df4:	2001      	movs	r0, #1
}
 8003df6:	bd10      	pop	{r4, pc}
  if ( LSM6DS3_ACC_GYRO_W_6DEvOnInt2( (void *)handle, LSM6DS3_ACC_GYRO_INT2_6D_DISABLED ) == MEMS_ERROR )
 8003df8:	2100      	movs	r1, #0
 8003dfa:	4620      	mov	r0, r4
 8003dfc:	f7ff f8d8 	bl	8002fb0 <LSM6DS3_ACC_GYRO_W_6DEvOnInt2>
 8003e00:	2800      	cmp	r0, #0
 8003e02:	d0f7      	beq.n	8003df4 <LSM6DS3_X_Disable_6D_Orientation+0xc>
  if ( LSM6DS3_ACC_GYRO_W_SIXD_THS( (void *)handle, LSM6DS3_ACC_GYRO_SIXD_THS_80_degree ) == MEMS_ERROR )
 8003e04:	4620      	mov	r0, r4
 8003e06:	2100      	movs	r1, #0
 8003e08:	f7fe fe4a 	bl	8002aa0 <LSM6DS3_ACC_GYRO_W_SIXD_THS>
    return COMPONENT_ERROR;
 8003e0c:	fab0 f080 	clz	r0, r0
 8003e10:	0940      	lsrs	r0, r0, #5
}
 8003e12:	bd10      	pop	{r4, pc}

08003e14 <LSM6DS3_X_Set_ODR>:
{
 8003e14:	b508      	push	{r3, lr}
  if(handle->isEnabled == 1)
 8003e16:	7983      	ldrb	r3, [r0, #6]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d00c      	beq.n	8003e36 <LSM6DS3_X_Set_ODR+0x22>
  LSM6DS3_X_Data_t *pComponentData = ( LSM6DS3_X_Data_t * )pData->pComponentData;
 8003e1c:	6883      	ldr	r3, [r0, #8]
 8003e1e:	681b      	ldr	r3, [r3, #0]
  switch( odr )
 8003e20:	2904      	cmp	r1, #4
 8003e22:	d828      	bhi.n	8003e76 <LSM6DS3_X_Set_ODR+0x62>
 8003e24:	e8df f001 	tbb	[pc, r1]
 8003e28:	16120303 	.word	0x16120303
 8003e2c:	0e          	.byte	0x0e
 8003e2d:	00          	.byte	0x00
      pComponentData->Previous_ODR = 13.0f;
 8003e2e:	4a13      	ldr	r2, [pc, #76]	; (8003e7c <LSM6DS3_X_Set_ODR+0x68>)
 8003e30:	601a      	str	r2, [r3, #0]
  return COMPONENT_OK;
 8003e32:	2000      	movs	r0, #0
}
 8003e34:	bd08      	pop	{r3, pc}
  switch( odr )
 8003e36:	2904      	cmp	r1, #4
 8003e38:	d81d      	bhi.n	8003e76 <LSM6DS3_X_Set_ODR+0x62>
 8003e3a:	e8df f001 	tbb	[pc, r1]
 8003e3e:	0f0f      	.short	0x0f0f
 8003e40:	1a18      	.short	0x1a18
 8003e42:	16          	.byte	0x16
 8003e43:	00          	.byte	0x00
      pComponentData->Previous_ODR = 104.0f;
 8003e44:	4a0e      	ldr	r2, [pc, #56]	; (8003e80 <LSM6DS3_X_Set_ODR+0x6c>)
 8003e46:	601a      	str	r2, [r3, #0]
  return COMPONENT_OK;
 8003e48:	2000      	movs	r0, #0
}
 8003e4a:	bd08      	pop	{r3, pc}
      pComponentData->Previous_ODR = 26.0f;
 8003e4c:	4a0d      	ldr	r2, [pc, #52]	; (8003e84 <LSM6DS3_X_Set_ODR+0x70>)
 8003e4e:	601a      	str	r2, [r3, #0]
  return COMPONENT_OK;
 8003e50:	2000      	movs	r0, #0
}
 8003e52:	bd08      	pop	{r3, pc}
      pComponentData->Previous_ODR = 52.0f;
 8003e54:	4a0c      	ldr	r2, [pc, #48]	; (8003e88 <LSM6DS3_X_Set_ODR+0x74>)
 8003e56:	601a      	str	r2, [r3, #0]
  return COMPONENT_OK;
 8003e58:	2000      	movs	r0, #0
}
 8003e5a:	bd08      	pop	{r3, pc}
      new_odr = LSM6DS3_ACC_GYRO_ODR_XL_13Hz;
 8003e5c:	2110      	movs	r1, #16
  if ( LSM6DS3_ACC_GYRO_W_ODR_XL( (void *)handle, new_odr ) == MEMS_ERROR )
 8003e5e:	f7fd ffe9 	bl	8001e34 <LSM6DS3_ACC_GYRO_W_ODR_XL>
  return COMPONENT_OK;
 8003e62:	fab0 f080 	clz	r0, r0
 8003e66:	0940      	lsrs	r0, r0, #5
}
 8003e68:	bd08      	pop	{r3, pc}
      new_odr = LSM6DS3_ACC_GYRO_ODR_XL_104Hz;
 8003e6a:	2140      	movs	r1, #64	; 0x40
 8003e6c:	e7f7      	b.n	8003e5e <LSM6DS3_X_Set_ODR+0x4a>
      new_odr = LSM6DS3_ACC_GYRO_ODR_XL_26Hz;
 8003e6e:	2120      	movs	r1, #32
 8003e70:	e7f5      	b.n	8003e5e <LSM6DS3_X_Set_ODR+0x4a>
      new_odr = LSM6DS3_ACC_GYRO_ODR_XL_52Hz;
 8003e72:	2130      	movs	r1, #48	; 0x30
 8003e74:	e7f3      	b.n	8003e5e <LSM6DS3_X_Set_ODR+0x4a>
      return COMPONENT_ERROR;
 8003e76:	2001      	movs	r0, #1
}
 8003e78:	bd08      	pop	{r3, pc}
 8003e7a:	bf00      	nop
 8003e7c:	41500000 	.word	0x41500000
 8003e80:	42d00000 	.word	0x42d00000
 8003e84:	41d00000 	.word	0x41d00000
 8003e88:	42500000 	.word	0x42500000

08003e8c <LSM6DS3_X_Disable_Double_Tap_Detection>:
{
 8003e8c:	b510      	push	{r4, lr}
  if ( LSM6DS3_ACC_GYRO_W_TapEvOnInt1( (void *)handle, LSM6DS3_ACC_GYRO_INT1_TAP_DISABLED ) == MEMS_ERROR )
 8003e8e:	2100      	movs	r1, #0
{
 8003e90:	4604      	mov	r4, r0
  if ( LSM6DS3_ACC_GYRO_W_TapEvOnInt1( (void *)handle, LSM6DS3_ACC_GYRO_INT1_TAP_DISABLED ) == MEMS_ERROR )
 8003e92:	f7fe ffe3 	bl	8002e5c <LSM6DS3_ACC_GYRO_W_TapEvOnInt1>
 8003e96:	b908      	cbnz	r0, 8003e9c <LSM6DS3_X_Disable_Double_Tap_Detection+0x10>
    return COMPONENT_ERROR;
 8003e98:	2001      	movs	r0, #1
}
 8003e9a:	bd10      	pop	{r4, pc}
  if ( LSM6DS3_ACC_GYRO_W_TapEvOnInt2( (void *)handle, LSM6DS3_ACC_GYRO_INT2_TAP_DISABLED ) == MEMS_ERROR )
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	f7ff f8a8 	bl	8002ff4 <LSM6DS3_ACC_GYRO_W_TapEvOnInt2>
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	d0f7      	beq.n	8003e98 <LSM6DS3_X_Disable_Double_Tap_Detection+0xc>
  if ( LSM6DS3_ACC_GYRO_W_TAP_THS( (void *)handle, thr ) == MEMS_ERROR )
 8003ea8:	2100      	movs	r1, #0
 8003eaa:	4620      	mov	r0, r4
 8003eac:	f7fe fdd4 	bl	8002a58 <LSM6DS3_ACC_GYRO_W_TAP_THS>
 8003eb0:	2800      	cmp	r0, #0
 8003eb2:	d0f1      	beq.n	8003e98 <LSM6DS3_X_Disable_Double_Tap_Detection+0xc>
  if ( LSM6DS3_ACC_GYRO_W_SHOCK_Duration( (void *)handle, time ) == MEMS_ERROR )
 8003eb4:	2100      	movs	r1, #0
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	f7fe fe14 	bl	8002ae4 <LSM6DS3_ACC_GYRO_W_SHOCK_Duration>
 8003ebc:	2800      	cmp	r0, #0
 8003ebe:	d0eb      	beq.n	8003e98 <LSM6DS3_X_Disable_Double_Tap_Detection+0xc>
  if ( LSM6DS3_ACC_GYRO_W_QUIET_Duration( (void *)handle, time ) == MEMS_ERROR )
 8003ec0:	2100      	movs	r1, #0
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	f7fe fe32 	bl	8002b2c <LSM6DS3_ACC_GYRO_W_QUIET_Duration>
 8003ec8:	2800      	cmp	r0, #0
 8003eca:	d0e5      	beq.n	8003e98 <LSM6DS3_X_Disable_Double_Tap_Detection+0xc>
  if ( LSM6DS3_ACC_GYRO_W_DUR( (void *)handle, time ) == MEMS_ERROR )
 8003ecc:	2100      	movs	r1, #0
 8003ece:	4620      	mov	r0, r4
 8003ed0:	f7fe fe50 	bl	8002b74 <LSM6DS3_ACC_GYRO_W_DUR>
 8003ed4:	2800      	cmp	r0, #0
 8003ed6:	d0df      	beq.n	8003e98 <LSM6DS3_X_Disable_Double_Tap_Detection+0xc>
  if ( LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV( (void *)handle,
 8003ed8:	2100      	movs	r1, #0
 8003eda:	4620      	mov	r0, r4
 8003edc:	f7fe fe90 	bl	8002c00 <LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV>
 8003ee0:	2800      	cmp	r0, #0
 8003ee2:	d0d9      	beq.n	8003e98 <LSM6DS3_X_Disable_Double_Tap_Detection+0xc>
  if ( LSM6DS3_ACC_GYRO_W_TAP_Z_EN( (void *)handle, LSM6DS3_ACC_GYRO_TAP_Z_EN_DISABLED ) == MEMS_ERROR )
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	4620      	mov	r0, r4
 8003ee8:	f7fe fd0c 	bl	8002904 <LSM6DS3_ACC_GYRO_W_TAP_Z_EN>
 8003eec:	2800      	cmp	r0, #0
 8003eee:	d0d3      	beq.n	8003e98 <LSM6DS3_X_Disable_Double_Tap_Detection+0xc>
  if ( LSM6DS3_ACC_GYRO_W_TAP_Y_EN( (void *)handle, LSM6DS3_ACC_GYRO_TAP_Y_EN_DISABLED ) == MEMS_ERROR )
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	f7fe fd28 	bl	8002948 <LSM6DS3_ACC_GYRO_W_TAP_Y_EN>
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	d0cd      	beq.n	8003e98 <LSM6DS3_X_Disable_Double_Tap_Detection+0xc>
  if ( LSM6DS3_ACC_GYRO_W_TAP_X_EN( (void *)handle, LSM6DS3_ACC_GYRO_TAP_X_EN_DISABLED ) == MEMS_ERROR )
 8003efc:	4620      	mov	r0, r4
 8003efe:	2100      	movs	r1, #0
 8003f00:	f7fe fd44 	bl	800298c <LSM6DS3_ACC_GYRO_W_TAP_X_EN>
    return COMPONENT_ERROR;
 8003f04:	fab0 f080 	clz	r0, r0
 8003f08:	0940      	lsrs	r0, r0, #5
}
 8003f0a:	bd10      	pop	{r4, pc}

08003f0c <LSM6DS3_X_Disable_Single_Tap_Detection>:
{
 8003f0c:	b510      	push	{r4, lr}
  if ( LSM6DS3_ACC_GYRO_W_SingleTapOnInt1( (void *)handle, LSM6DS3_ACC_GYRO_INT1_SINGLE_TAP_DISABLED ) == MEMS_ERROR )
 8003f0e:	2100      	movs	r1, #0
{
 8003f10:	4604      	mov	r4, r0
  if ( LSM6DS3_ACC_GYRO_W_SingleTapOnInt1( (void *)handle, LSM6DS3_ACC_GYRO_INT1_SINGLE_TAP_DISABLED ) == MEMS_ERROR )
 8003f12:	f7ff f809 	bl	8002f28 <LSM6DS3_ACC_GYRO_W_SingleTapOnInt1>
 8003f16:	b908      	cbnz	r0, 8003f1c <LSM6DS3_X_Disable_Single_Tap_Detection+0x10>
    return COMPONENT_ERROR;
 8003f18:	2001      	movs	r0, #1
}
 8003f1a:	bd10      	pop	{r4, pc}
  if ( LSM6DS3_ACC_GYRO_W_SingleTapOnInt2( (void *)handle, LSM6DS3_ACC_GYRO_INT2_SINGLE_TAP_DISABLED ) == MEMS_ERROR )
 8003f1c:	2100      	movs	r1, #0
 8003f1e:	4620      	mov	r0, r4
 8003f20:	f7ff f8ce 	bl	80030c0 <LSM6DS3_ACC_GYRO_W_SingleTapOnInt2>
 8003f24:	2800      	cmp	r0, #0
 8003f26:	d0f7      	beq.n	8003f18 <LSM6DS3_X_Disable_Single_Tap_Detection+0xc>
  if ( LSM6DS3_ACC_GYRO_W_TAP_THS( (void *)handle, thr ) == MEMS_ERROR )
 8003f28:	2100      	movs	r1, #0
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	f7fe fd94 	bl	8002a58 <LSM6DS3_ACC_GYRO_W_TAP_THS>
 8003f30:	2800      	cmp	r0, #0
 8003f32:	d0f1      	beq.n	8003f18 <LSM6DS3_X_Disable_Single_Tap_Detection+0xc>
  if ( LSM6DS3_ACC_GYRO_W_SHOCK_Duration( (void *)handle, time ) == MEMS_ERROR )
 8003f34:	2100      	movs	r1, #0
 8003f36:	4620      	mov	r0, r4
 8003f38:	f7fe fdd4 	bl	8002ae4 <LSM6DS3_ACC_GYRO_W_SHOCK_Duration>
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	d0eb      	beq.n	8003f18 <LSM6DS3_X_Disable_Single_Tap_Detection+0xc>
  if ( LSM6DS3_ACC_GYRO_W_QUIET_Duration( (void *)handle, time ) == MEMS_ERROR )
 8003f40:	2100      	movs	r1, #0
 8003f42:	4620      	mov	r0, r4
 8003f44:	f7fe fdf2 	bl	8002b2c <LSM6DS3_ACC_GYRO_W_QUIET_Duration>
 8003f48:	2800      	cmp	r0, #0
 8003f4a:	d0e5      	beq.n	8003f18 <LSM6DS3_X_Disable_Single_Tap_Detection+0xc>
  if ( LSM6DS3_ACC_GYRO_W_TAP_Z_EN( (void *)handle, LSM6DS3_ACC_GYRO_TAP_Z_EN_DISABLED ) == MEMS_ERROR )
 8003f4c:	2100      	movs	r1, #0
 8003f4e:	4620      	mov	r0, r4
 8003f50:	f7fe fcd8 	bl	8002904 <LSM6DS3_ACC_GYRO_W_TAP_Z_EN>
 8003f54:	2800      	cmp	r0, #0
 8003f56:	d0df      	beq.n	8003f18 <LSM6DS3_X_Disable_Single_Tap_Detection+0xc>
  if ( LSM6DS3_ACC_GYRO_W_TAP_Y_EN( (void *)handle, LSM6DS3_ACC_GYRO_TAP_Y_EN_DISABLED ) == MEMS_ERROR )
 8003f58:	2100      	movs	r1, #0
 8003f5a:	4620      	mov	r0, r4
 8003f5c:	f7fe fcf4 	bl	8002948 <LSM6DS3_ACC_GYRO_W_TAP_Y_EN>
 8003f60:	2800      	cmp	r0, #0
 8003f62:	d0d9      	beq.n	8003f18 <LSM6DS3_X_Disable_Single_Tap_Detection+0xc>
  if ( LSM6DS3_ACC_GYRO_W_TAP_X_EN( (void *)handle, LSM6DS3_ACC_GYRO_TAP_X_EN_DISABLED ) == MEMS_ERROR )
 8003f64:	4620      	mov	r0, r4
 8003f66:	2100      	movs	r1, #0
 8003f68:	f7fe fd10 	bl	800298c <LSM6DS3_ACC_GYRO_W_TAP_X_EN>
    return COMPONENT_ERROR;
 8003f6c:	fab0 f080 	clz	r0, r0
 8003f70:	0940      	lsrs	r0, r0, #5
}
 8003f72:	bd10      	pop	{r4, pc}

08003f74 <LSM6DS3_X_Disable_Wake_Up_Detection>:
{
 8003f74:	b510      	push	{r4, lr}
  if ( LSM6DS3_ACC_GYRO_W_WUEvOnInt1( (void *)handle, LSM6DS3_ACC_GYRO_INT1_WU_DISABLED ) == MEMS_ERROR )
 8003f76:	2100      	movs	r1, #0
{
 8003f78:	4604      	mov	r4, r0
  if ( LSM6DS3_ACC_GYRO_W_WUEvOnInt1( (void *)handle, LSM6DS3_ACC_GYRO_INT1_WU_DISABLED ) == MEMS_ERROR )
 8003f7a:	f7fe ffb3 	bl	8002ee4 <LSM6DS3_ACC_GYRO_W_WUEvOnInt1>
 8003f7e:	b908      	cbnz	r0, 8003f84 <LSM6DS3_X_Disable_Wake_Up_Detection+0x10>
    return COMPONENT_ERROR;
 8003f80:	2001      	movs	r0, #1
}
 8003f82:	bd10      	pop	{r4, pc}
  if ( LSM6DS3_ACC_GYRO_W_WUEvOnInt2( (void *)handle, LSM6DS3_ACC_GYRO_INT2_WU_DISABLED ) == MEMS_ERROR )
 8003f84:	2100      	movs	r1, #0
 8003f86:	4620      	mov	r0, r4
 8003f88:	f7ff f878 	bl	800307c <LSM6DS3_ACC_GYRO_W_WUEvOnInt2>
 8003f8c:	2800      	cmp	r0, #0
 8003f8e:	d0f7      	beq.n	8003f80 <LSM6DS3_X_Disable_Wake_Up_Detection+0xc>
  if ( LSM6DS3_ACC_GYRO_W_WAKE_DUR( (void *)handle, 0x00 ) == MEMS_ERROR )
 8003f90:	2100      	movs	r1, #0
 8003f92:	4620      	mov	r0, r4
 8003f94:	f7fe fe9c 	bl	8002cd0 <LSM6DS3_ACC_GYRO_W_WAKE_DUR>
 8003f98:	2800      	cmp	r0, #0
 8003f9a:	d0f1      	beq.n	8003f80 <LSM6DS3_X_Disable_Wake_Up_Detection+0xc>
  if ( LSM6DS3_ACC_GYRO_W_WK_THS( (void *)handle, 0x00 ) == MEMS_ERROR )
 8003f9c:	4620      	mov	r0, r4
 8003f9e:	2100      	movs	r1, #0
 8003fa0:	f7fe fe0a 	bl	8002bb8 <LSM6DS3_ACC_GYRO_W_WK_THS>
    return COMPONENT_ERROR;
 8003fa4:	fab0 f080 	clz	r0, r0
 8003fa8:	0940      	lsrs	r0, r0, #5
}
 8003faa:	bd10      	pop	{r4, pc}

08003fac <LSM6DS3_X_Disable_Tilt_Detection>:
{
 8003fac:	b510      	push	{r4, lr}
  if ( LSM6DS3_ACC_GYRO_W_TiltEvOnInt1( (void *)handle, LSM6DS3_ACC_GYRO_INT1_TILT_DISABLED ) == MEMS_ERROR )
 8003fae:	2100      	movs	r1, #0
{
 8003fb0:	4604      	mov	r4, r0
  if ( LSM6DS3_ACC_GYRO_W_TiltEvOnInt1( (void *)handle, LSM6DS3_ACC_GYRO_INT1_TILT_DISABLED ) == MEMS_ERROR )
 8003fb2:	f7fe ff0f 	bl	8002dd4 <LSM6DS3_ACC_GYRO_W_TiltEvOnInt1>
 8003fb6:	b908      	cbnz	r0, 8003fbc <LSM6DS3_X_Disable_Tilt_Detection+0x10>
    return COMPONENT_ERROR;
 8003fb8:	2001      	movs	r0, #1
}
 8003fba:	bd10      	pop	{r4, pc}
  if ( LSM6DS3_ACC_GYRO_W_TiltEvOnInt2( (void *)handle, LSM6DS3_ACC_GYRO_INT2_TILT_DISABLED ) == MEMS_ERROR )
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4620      	mov	r0, r4
 8003fc0:	f7fe ffd4 	bl	8002f6c <LSM6DS3_ACC_GYRO_W_TiltEvOnInt2>
 8003fc4:	2800      	cmp	r0, #0
 8003fc6:	d0f7      	beq.n	8003fb8 <LSM6DS3_X_Disable_Tilt_Detection+0xc>
  if ( LSM6DS3_ACC_GYRO_W_TILT_EN( (void *)handle, LSM6DS3_ACC_GYRO_TILT_EN_DISABLED ) == MEMS_ERROR )
 8003fc8:	2100      	movs	r1, #0
 8003fca:	4620      	mov	r0, r4
 8003fcc:	f7fe fd00 	bl	80029d0 <LSM6DS3_ACC_GYRO_W_TILT_EN>
 8003fd0:	2800      	cmp	r0, #0
 8003fd2:	d0f1      	beq.n	8003fb8 <LSM6DS3_X_Disable_Tilt_Detection+0xc>
  if ( LSM6DS3_ACC_GYRO_W_FUNC_EN( (void *)handle, LSM6DS3_ACC_GYRO_FUNC_EN_DISABLED ) == MEMS_ERROR )
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	2100      	movs	r1, #0
 8003fd8:	f7fe fae8 	bl	80025ac <LSM6DS3_ACC_GYRO_W_FUNC_EN>
    return COMPONENT_ERROR;
 8003fdc:	fab0 f080 	clz	r0, r0
 8003fe0:	0940      	lsrs	r0, r0, #5
}
 8003fe2:	bd10      	pop	{r4, pc}

08003fe4 <LSM6DS3_X_Disable_Pedometer>:
{
 8003fe4:	b510      	push	{r4, lr}
  if ( LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1( (void *)handle, LSM6DS3_ACC_GYRO_INT1_PEDO_DISABLED ) == MEMS_ERROR )
 8003fe6:	2100      	movs	r1, #0
{
 8003fe8:	4604      	mov	r4, r0
  if ( LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1( (void *)handle, LSM6DS3_ACC_GYRO_INT1_PEDO_DISABLED ) == MEMS_ERROR )
 8003fea:	f7fe f8e7 	bl	80021bc <LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1>
 8003fee:	b908      	cbnz	r0, 8003ff4 <LSM6DS3_X_Disable_Pedometer+0x10>
    return COMPONENT_ERROR;
 8003ff0:	2001      	movs	r0, #1
}
 8003ff2:	bd10      	pop	{r4, pc}
  if ( LSM6DS3_ACC_GYRO_W_PEDO_EN( (void *)handle, LSM6DS3_ACC_GYRO_PEDO_EN_DISABLED ) == MEMS_ERROR )
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	4620      	mov	r0, r4
 8003ff8:	f7fe fd0c 	bl	8002a14 <LSM6DS3_ACC_GYRO_W_PEDO_EN>
 8003ffc:	2800      	cmp	r0, #0
 8003ffe:	d0f7      	beq.n	8003ff0 <LSM6DS3_X_Disable_Pedometer+0xc>
  if ( LSM6DS3_ACC_GYRO_W_FUNC_EN( (void *)handle, LSM6DS3_ACC_GYRO_FUNC_EN_DISABLED ) == MEMS_ERROR )
 8004000:	2100      	movs	r1, #0
 8004002:	4620      	mov	r0, r4
 8004004:	f7fe fad2 	bl	80025ac <LSM6DS3_ACC_GYRO_W_FUNC_EN>
 8004008:	2800      	cmp	r0, #0
 800400a:	d0f1      	beq.n	8003ff0 <LSM6DS3_X_Disable_Pedometer+0xc>
  if ( LSM6DS3_ACC_GYRO_W_PedoThreshold( (void *)handle, thr ) == MEMS_ERROR )
 800400c:	4620      	mov	r0, r4
 800400e:	2100      	movs	r1, #0
 8004010:	f7ff f8a4 	bl	800315c <LSM6DS3_ACC_GYRO_W_PedoThreshold>
    return COMPONENT_ERROR;
 8004014:	fab0 f080 	clz	r0, r0
 8004018:	0940      	lsrs	r0, r0, #5
}
 800401a:	bd10      	pop	{r4, pc}

0800401c <LSM6DS3_X_Disable_Free_Fall_Detection>:
{
 800401c:	b510      	push	{r4, lr}
  if ( LSM6DS3_ACC_GYRO_W_FFEvOnInt1( (void *)handle, LSM6DS3_ACC_GYRO_INT1_FF_DISABLED ) == MEMS_ERROR )
 800401e:	2100      	movs	r1, #0
{
 8004020:	4604      	mov	r4, r0
  if ( LSM6DS3_ACC_GYRO_W_FFEvOnInt1( (void *)handle, LSM6DS3_ACC_GYRO_INT1_FF_DISABLED ) == MEMS_ERROR )
 8004022:	f7fe ff3d 	bl	8002ea0 <LSM6DS3_ACC_GYRO_W_FFEvOnInt1>
 8004026:	b908      	cbnz	r0, 800402c <LSM6DS3_X_Disable_Free_Fall_Detection+0x10>
    return COMPONENT_ERROR;
 8004028:	2001      	movs	r0, #1
}
 800402a:	bd10      	pop	{r4, pc}
  if ( LSM6DS3_ACC_GYRO_W_FFEvOnInt2( (void *)handle, LSM6DS3_ACC_GYRO_INT2_FF_DISABLED ) == MEMS_ERROR )
 800402c:	2100      	movs	r1, #0
 800402e:	4620      	mov	r0, r4
 8004030:	f7ff f802 	bl	8003038 <LSM6DS3_ACC_GYRO_W_FFEvOnInt2>
 8004034:	2800      	cmp	r0, #0
 8004036:	d0f7      	beq.n	8004028 <LSM6DS3_X_Disable_Free_Fall_Detection+0xc>
  if ( LSM6DS3_ACC_GYRO_W_FF_Duration( (void *)handle, 0x00 ) == MEMS_ERROR )
 8004038:	2100      	movs	r1, #0
 800403a:	4620      	mov	r0, r4
 800403c:	f7fe fe8e 	bl	8002d5c <LSM6DS3_ACC_GYRO_W_FF_Duration>
 8004040:	2800      	cmp	r0, #0
 8004042:	d0f1      	beq.n	8004028 <LSM6DS3_X_Disable_Free_Fall_Detection+0xc>
  if ( LSM6DS3_ACC_GYRO_W_FF_THS( (void *)handle, LSM6DS3_ACC_GYRO_FF_THS_5 ) == MEMS_ERROR )
 8004044:	4620      	mov	r0, r4
 8004046:	2100      	movs	r1, #0
 8004048:	f7fe fe66 	bl	8002d18 <LSM6DS3_ACC_GYRO_W_FF_THS>
    return COMPONENT_ERROR;
 800404c:	fab0 f080 	clz	r0, r0
 8004050:	0940      	lsrs	r0, r0, #5
}
 8004052:	bd10      	pop	{r4, pc}

08004054 <LSM6DS3_G_Set_SelfTest>:
 * @param status self-test enable/disable
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
*/
static DrvStatusTypeDef LSM6DS3_G_Set_SelfTest( DrvContextTypeDef *handle, uint8_t status )
{
 8004054:	290c      	cmp	r1, #12
 8004056:	d809      	bhi.n	800406c <LSM6DS3_G_Set_SelfTest+0x18>
 8004058:	2301      	movs	r3, #1
 800405a:	b510      	push	{r4, lr}
 800405c:	fa03 f201 	lsl.w	r2, r3, r1
 8004060:	f241 1411 	movw	r4, #4369	; 0x1111
 8004064:	4222      	tst	r2, r4
 8004066:	d103      	bne.n	8004070 <LSM6DS3_G_Set_SelfTest+0x1c>
    case LSM6DS3_ACC_GYRO_ST_G_POS_SIGN_TEST:
    case LSM6DS3_ACC_GYRO_ST_G_NA:
    case LSM6DS3_ACC_GYRO_ST_G_NEG_SIGN_TEST:
      break;
    default:
      return COMPONENT_ERROR;
 8004068:	4618      	mov	r0, r3
  {
    return COMPONENT_ERROR;
  }

  return COMPONENT_OK;
}
 800406a:	bd10      	pop	{r4, pc}
      return COMPONENT_ERROR;
 800406c:	2001      	movs	r0, #1
}
 800406e:	4770      	bx	lr
  if ( LSM6DS3_ACC_GYRO_W_SelfTest_G( handle, ( LSM6DS3_ACC_GYRO_ST_G_t )status ) == MEMS_ERROR )
 8004070:	f7fe f92c 	bl	80022cc <LSM6DS3_ACC_GYRO_W_SelfTest_G>
      return COMPONENT_ERROR;
 8004074:	fab0 f080 	clz	r0, r0
 8004078:	0940      	lsrs	r0, r0, #5
}
 800407a:	bd10      	pop	{r4, pc}

0800407c <LSM6DS3_G_Get_Sensitivity>:
{
 800407c:	b530      	push	{r4, r5, lr}
 800407e:	b083      	sub	sp, #12
 8004080:	460c      	mov	r4, r1
  if ( LSM6DS3_ACC_GYRO_R_FS_125( (void *)handle, &fullScale125 ) == MEMS_ERROR )
 8004082:	f10d 0106 	add.w	r1, sp, #6
{
 8004086:	4605      	mov	r5, r0
  if ( LSM6DS3_ACC_GYRO_R_FS_125( (void *)handle, &fullScale125 ) == MEMS_ERROR )
 8004088:	f7fd ffa8 	bl	8001fdc <LSM6DS3_ACC_GYRO_R_FS_125>
 800408c:	b1b0      	cbz	r0, 80040bc <LSM6DS3_G_Get_Sensitivity+0x40>
  if ( fullScale125 == LSM6DS3_ACC_GYRO_FS_125_ENABLED )
 800408e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004092:	2b02      	cmp	r3, #2
 8004094:	d015      	beq.n	80040c2 <LSM6DS3_G_Get_Sensitivity+0x46>
    if ( LSM6DS3_ACC_GYRO_R_FS_G( (void *)handle, &fullScale ) == MEMS_ERROR )
 8004096:	4628      	mov	r0, r5
 8004098:	f10d 0107 	add.w	r1, sp, #7
 800409c:	f7fd ff1e 	bl	8001edc <LSM6DS3_ACC_GYRO_R_FS_G>
 80040a0:	b160      	cbz	r0, 80040bc <LSM6DS3_G_Get_Sensitivity+0x40>
    switch( fullScale )
 80040a2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80040a6:	2b0c      	cmp	r3, #12
 80040a8:	d820      	bhi.n	80040ec <LSM6DS3_G_Get_Sensitivity+0x70>
 80040aa:	e8df f003 	tbb	[pc, r3]
 80040ae:	1f1b      	.short	0x1f1b
 80040b0:	1f171f1f 	.word	0x1f171f1f
 80040b4:	1f131f1f 	.word	0x1f131f1f
 80040b8:	1f1f      	.short	0x1f1f
 80040ba:	0f          	.byte	0x0f
 80040bb:	00          	.byte	0x00
    return COMPONENT_ERROR;
 80040bc:	2001      	movs	r0, #1
}
 80040be:	b003      	add	sp, #12
 80040c0:	bd30      	pop	{r4, r5, pc}
    *sensitivity = ( float )LSM6DS3_GYRO_SENSITIVITY_FOR_FS_125DPS;
 80040c2:	4b0c      	ldr	r3, [pc, #48]	; (80040f4 <LSM6DS3_G_Get_Sensitivity+0x78>)
 80040c4:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 80040c6:	2000      	movs	r0, #0
}
 80040c8:	b003      	add	sp, #12
 80040ca:	bd30      	pop	{r4, r5, pc}
        *sensitivity = ( float )LSM6DS3_GYRO_SENSITIVITY_FOR_FS_2000DPS;
 80040cc:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <LSM6DS3_G_Get_Sensitivity+0x7c>)
 80040ce:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 80040d0:	2000      	movs	r0, #0
 80040d2:	e7f4      	b.n	80040be <LSM6DS3_G_Get_Sensitivity+0x42>
        *sensitivity = ( float )LSM6DS3_GYRO_SENSITIVITY_FOR_FS_1000DPS;
 80040d4:	4b09      	ldr	r3, [pc, #36]	; (80040fc <LSM6DS3_G_Get_Sensitivity+0x80>)
 80040d6:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 80040d8:	2000      	movs	r0, #0
 80040da:	e7f0      	b.n	80040be <LSM6DS3_G_Get_Sensitivity+0x42>
        *sensitivity = ( float )LSM6DS3_GYRO_SENSITIVITY_FOR_FS_500DPS;
 80040dc:	4b08      	ldr	r3, [pc, #32]	; (8004100 <LSM6DS3_G_Get_Sensitivity+0x84>)
 80040de:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 80040e0:	2000      	movs	r0, #0
 80040e2:	e7ec      	b.n	80040be <LSM6DS3_G_Get_Sensitivity+0x42>
        *sensitivity = ( float )LSM6DS3_GYRO_SENSITIVITY_FOR_FS_245DPS;
 80040e4:	4b07      	ldr	r3, [pc, #28]	; (8004104 <LSM6DS3_G_Get_Sensitivity+0x88>)
 80040e6:	6023      	str	r3, [r4, #0]
  return COMPONENT_OK;
 80040e8:	2000      	movs	r0, #0
 80040ea:	e7e8      	b.n	80040be <LSM6DS3_G_Get_Sensitivity+0x42>
        *sensitivity = -1.0f;
 80040ec:	4b06      	ldr	r3, [pc, #24]	; (8004108 <LSM6DS3_G_Get_Sensitivity+0x8c>)
 80040ee:	6023      	str	r3, [r4, #0]
        return COMPONENT_ERROR;
 80040f0:	2001      	movs	r0, #1
 80040f2:	e7e4      	b.n	80040be <LSM6DS3_G_Get_Sensitivity+0x42>
 80040f4:	408c0000 	.word	0x408c0000
 80040f8:	428c0000 	.word	0x428c0000
 80040fc:	420c0000 	.word	0x420c0000
 8004100:	418c0000 	.word	0x418c0000
 8004104:	410c0000 	.word	0x410c0000
 8004108:	bf800000 	.word	0xbf800000

0800410c <LSM6DS3_FIFO_G_Set_Decimation>:
{
 800410c:	b508      	push	{r3, lr}
  switch ( ( LSM6DS3_ACC_GYRO_DEC_FIFO_G_t )decimation )
 800410e:	2938      	cmp	r1, #56	; 0x38
 8004110:	d81e      	bhi.n	8004150 <LSM6DS3_FIFO_G_Set_Decimation+0x44>
 8004112:	e8df f001 	tbb	[pc, r1]
 8004116:	1d1f      	.short	0x1d1f
 8004118:	1d1d1d1d 	.word	0x1d1d1d1d
 800411c:	1d1f1d1d 	.word	0x1d1f1d1d
 8004120:	1d1d1d1d 	.word	0x1d1d1d1d
 8004124:	1d1f1d1d 	.word	0x1d1f1d1d
 8004128:	1d1d1d1d 	.word	0x1d1d1d1d
 800412c:	1d1f1d1d 	.word	0x1d1f1d1d
 8004130:	1d1d1d1d 	.word	0x1d1d1d1d
 8004134:	1d1f1d1d 	.word	0x1d1f1d1d
 8004138:	1d1d1d1d 	.word	0x1d1d1d1d
 800413c:	1d1f1d1d 	.word	0x1d1f1d1d
 8004140:	1d1d1d1d 	.word	0x1d1d1d1d
 8004144:	1d1f1d1d 	.word	0x1d1f1d1d
 8004148:	1d1d1d1d 	.word	0x1d1d1d1d
 800414c:	1d1d      	.short	0x1d1d
 800414e:	1f          	.byte	0x1f
 800414f:	00          	.byte	0x00
      return COMPONENT_ERROR;
 8004150:	2001      	movs	r0, #1
}
 8004152:	bd08      	pop	{r3, pc}
  if ( LSM6DS3_ACC_GYRO_W_DEC_FIFO_G( handle, ( LSM6DS3_ACC_GYRO_DEC_FIFO_G_t )decimation ) == MEMS_ERROR )
 8004154:	f7fd ffaa 	bl	80020ac <LSM6DS3_ACC_GYRO_W_DEC_FIFO_G>
      return COMPONENT_ERROR;
 8004158:	fab0 f080 	clz	r0, r0
 800415c:	0940      	lsrs	r0, r0, #5
}
 800415e:	bd08      	pop	{r3, pc}

08004160 <LSM6DS3_X_Set_Axes_Status>:
{
 8004160:	b538      	push	{r3, r4, r5, lr}
  if ( LSM6DS3_ACC_GYRO_W_XEN_XL( (void *)handle,
 8004162:	780b      	ldrb	r3, [r1, #0]
 8004164:	2b01      	cmp	r3, #1
{
 8004166:	460c      	mov	r4, r1
  if ( LSM6DS3_ACC_GYRO_W_XEN_XL( (void *)handle,
 8004168:	bf0c      	ite	eq
 800416a:	2108      	moveq	r1, #8
 800416c:	2100      	movne	r1, #0
{
 800416e:	4605      	mov	r5, r0
  if ( LSM6DS3_ACC_GYRO_W_XEN_XL( (void *)handle,
 8004170:	f7fe f8ce 	bl	8002310 <LSM6DS3_ACC_GYRO_W_XEN_XL>
 8004174:	b1a0      	cbz	r0, 80041a0 <LSM6DS3_X_Set_Axes_Status+0x40>
  if ( LSM6DS3_ACC_GYRO_W_YEN_XL( (void *)handle,
 8004176:	7863      	ldrb	r3, [r4, #1]
 8004178:	2b01      	cmp	r3, #1
 800417a:	bf0c      	ite	eq
 800417c:	2110      	moveq	r1, #16
 800417e:	2100      	movne	r1, #0
 8004180:	4628      	mov	r0, r5
 8004182:	f7fe f8f7 	bl	8002374 <LSM6DS3_ACC_GYRO_W_YEN_XL>
 8004186:	b158      	cbz	r0, 80041a0 <LSM6DS3_X_Set_Axes_Status+0x40>
  if ( LSM6DS3_ACC_GYRO_W_ZEN_XL( (void *)handle,
 8004188:	78a3      	ldrb	r3, [r4, #2]
 800418a:	2b01      	cmp	r3, #1
 800418c:	4628      	mov	r0, r5
 800418e:	bf0c      	ite	eq
 8004190:	2120      	moveq	r1, #32
 8004192:	2100      	movne	r1, #0
 8004194:	f7fe f920 	bl	80023d8 <LSM6DS3_ACC_GYRO_W_ZEN_XL>
    return COMPONENT_ERROR;
 8004198:	fab0 f080 	clz	r0, r0
 800419c:	0940      	lsrs	r0, r0, #5
}
 800419e:	bd38      	pop	{r3, r4, r5, pc}
    return COMPONENT_ERROR;
 80041a0:	2001      	movs	r0, #1
}
 80041a2:	bd38      	pop	{r3, r4, r5, pc}

080041a4 <LSM6DS3_G_Set_Axes_Status>:
{
 80041a4:	b538      	push	{r3, r4, r5, lr}
  if ( LSM6DS3_ACC_GYRO_W_XEN_G( (void *)handle,
 80041a6:	780b      	ldrb	r3, [r1, #0]
 80041a8:	2b01      	cmp	r3, #1
{
 80041aa:	460c      	mov	r4, r1
  if ( LSM6DS3_ACC_GYRO_W_XEN_G( (void *)handle,
 80041ac:	bf0c      	ite	eq
 80041ae:	2108      	moveq	r1, #8
 80041b0:	2100      	movne	r1, #0
{
 80041b2:	4605      	mov	r5, r0
  if ( LSM6DS3_ACC_GYRO_W_XEN_G( (void *)handle,
 80041b4:	f7fe f964 	bl	8002480 <LSM6DS3_ACC_GYRO_W_XEN_G>
 80041b8:	b1a0      	cbz	r0, 80041e4 <LSM6DS3_G_Set_Axes_Status+0x40>
  if ( LSM6DS3_ACC_GYRO_W_YEN_G( (void *)handle,
 80041ba:	7863      	ldrb	r3, [r4, #1]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	bf0c      	ite	eq
 80041c0:	2110      	moveq	r1, #16
 80041c2:	2100      	movne	r1, #0
 80041c4:	4628      	mov	r0, r5
 80041c6:	f7fe f98d 	bl	80024e4 <LSM6DS3_ACC_GYRO_W_YEN_G>
 80041ca:	b158      	cbz	r0, 80041e4 <LSM6DS3_G_Set_Axes_Status+0x40>
  if ( LSM6DS3_ACC_GYRO_W_ZEN_G( (void *)handle,
 80041cc:	78a3      	ldrb	r3, [r4, #2]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	4628      	mov	r0, r5
 80041d2:	bf0c      	ite	eq
 80041d4:	2120      	moveq	r1, #32
 80041d6:	2100      	movne	r1, #0
 80041d8:	f7fe f9b6 	bl	8002548 <LSM6DS3_ACC_GYRO_W_ZEN_G>
    return COMPONENT_ERROR;
 80041dc:	fab0 f080 	clz	r0, r0
 80041e0:	0940      	lsrs	r0, r0, #5
}
 80041e2:	bd38      	pop	{r3, r4, r5, pc}
    return COMPONENT_ERROR;
 80041e4:	2001      	movs	r0, #1
}
 80041e6:	bd38      	pop	{r3, r4, r5, pc}

080041e8 <LSM6DS3_G_Set_FS_Value>:
  if ( fullScale <= 125.0f )
 80041e8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8004268 <LSM6DS3_G_Set_FS_Value+0x80>
 80041ec:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80041f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 80041f4:	b538      	push	{r3, r4, r5, lr}
  if ( fullScale <= 125.0f )
 80041f6:	d925      	bls.n	8004244 <LSM6DS3_G_Set_FS_Value+0x5c>
             : ( fullScale <=  500.0f ) ? LSM6DS3_ACC_GYRO_FS_G_500dps
 80041f8:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800426c <LSM6DS3_G_Set_FS_Value+0x84>
 80041fc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004204:	4604      	mov	r4, r0
 8004206:	d807      	bhi.n	8004218 <LSM6DS3_G_Set_FS_Value+0x30>
 8004208:	2500      	movs	r5, #0
    if ( LSM6DS3_ACC_GYRO_W_FS_125( (void *)handle, LSM6DS3_ACC_GYRO_FS_125_DISABLED ) == MEMS_ERROR )
 800420a:	2100      	movs	r1, #0
 800420c:	4620      	mov	r0, r4
 800420e:	f7fd fec3 	bl	8001f98 <LSM6DS3_ACC_GYRO_W_FS_125>
 8004212:	b978      	cbnz	r0, 8004234 <LSM6DS3_G_Set_FS_Value+0x4c>
      return COMPONENT_ERROR;
 8004214:	2001      	movs	r0, #1
}
 8004216:	bd38      	pop	{r3, r4, r5, pc}
             : ( fullScale <=  500.0f ) ? LSM6DS3_ACC_GYRO_FS_G_500dps
 8004218:	eddf 7a15 	vldr	s15, [pc, #84]	; 8004270 <LSM6DS3_G_Set_FS_Value+0x88>
 800421c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004224:	d815      	bhi.n	8004252 <LSM6DS3_G_Set_FS_Value+0x6a>
    if ( LSM6DS3_ACC_GYRO_W_FS_125( (void *)handle, LSM6DS3_ACC_GYRO_FS_125_DISABLED ) == MEMS_ERROR )
 8004226:	2100      	movs	r1, #0
 8004228:	4620      	mov	r0, r4
             : ( fullScale <=  500.0f ) ? LSM6DS3_ACC_GYRO_FS_G_500dps
 800422a:	2504      	movs	r5, #4
    if ( LSM6DS3_ACC_GYRO_W_FS_125( (void *)handle, LSM6DS3_ACC_GYRO_FS_125_DISABLED ) == MEMS_ERROR )
 800422c:	f7fd feb4 	bl	8001f98 <LSM6DS3_ACC_GYRO_W_FS_125>
 8004230:	2800      	cmp	r0, #0
 8004232:	d0ef      	beq.n	8004214 <LSM6DS3_G_Set_FS_Value+0x2c>
    if ( LSM6DS3_ACC_GYRO_W_FS_G( (void *)handle, new_fs ) == MEMS_ERROR )
 8004234:	4629      	mov	r1, r5
 8004236:	4620      	mov	r0, r4
 8004238:	f7fd fe2e 	bl	8001e98 <LSM6DS3_ACC_GYRO_W_FS_G>
  return COMPONENT_OK;
 800423c:	fab0 f080 	clz	r0, r0
 8004240:	0940      	lsrs	r0, r0, #5
}
 8004242:	bd38      	pop	{r3, r4, r5, pc}
    if ( LSM6DS3_ACC_GYRO_W_FS_125( (void *)handle, LSM6DS3_ACC_GYRO_FS_125_ENABLED ) == MEMS_ERROR )
 8004244:	2102      	movs	r1, #2
 8004246:	f7fd fea7 	bl	8001f98 <LSM6DS3_ACC_GYRO_W_FS_125>
  return COMPONENT_OK;
 800424a:	fab0 f080 	clz	r0, r0
 800424e:	0940      	lsrs	r0, r0, #5
}
 8004250:	bd38      	pop	{r3, r4, r5, pc}
             : ( fullScale <=  500.0f ) ? LSM6DS3_ACC_GYRO_FS_G_500dps
 8004252:	eddf 7a08 	vldr	s15, [pc, #32]	; 8004274 <LSM6DS3_G_Set_FS_Value+0x8c>
 8004256:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800425a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800425e:	bf94      	ite	ls
 8004260:	2508      	movls	r5, #8
 8004262:	250c      	movhi	r5, #12
 8004264:	e7d1      	b.n	800420a <LSM6DS3_G_Set_FS_Value+0x22>
 8004266:	bf00      	nop
 8004268:	42fa0000 	.word	0x42fa0000
 800426c:	43750000 	.word	0x43750000
 8004270:	43fa0000 	.word	0x43fa0000
 8004274:	447a0000 	.word	0x447a0000

08004278 <LSM6DS3_G_Set_ODR_Value>:
{
 8004278:	b508      	push	{r3, lr}
  if(handle->isEnabled == 1)
 800427a:	7983      	ldrb	r3, [r0, #6]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d03b      	beq.n	80042f8 <LSM6DS3_G_Set_ODR_Value+0x80>
                                 : ( odr <=  26.0f ) ? 26.0f
 8004280:	eef2 7a0a 	vmov.f32	s15, #42	; 0x41500000  13.0
  LSM6DS3_G_Data_t *pComponentData = ( LSM6DS3_G_Data_t * )pData->pComponentData;
 8004284:	6883      	ldr	r3, [r0, #8]
                                 : ( odr <=  26.0f ) ? 26.0f
 8004286:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800428a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  LSM6DS3_G_Data_t *pComponentData = ( LSM6DS3_G_Data_t * )pData->pComponentData;
 800428e:	681b      	ldr	r3, [r3, #0]
                                 : ( odr <=  26.0f ) ? 26.0f
 8004290:	d803      	bhi.n	800429a <LSM6DS3_G_Set_ODR_Value+0x22>
  pComponentData->Previous_ODR = ( odr <=  13.0f ) ? 13.0f
 8004292:	edc3 7a00 	vstr	s15, [r3]
  return COMPONENT_OK;
 8004296:	2000      	movs	r0, #0
}
 8004298:	bd08      	pop	{r3, pc}
                                 : ( odr <=  52.0f ) ? 52.0f
 800429a:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 800429e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80042a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a6:	d9f4      	bls.n	8004292 <LSM6DS3_G_Set_ODR_Value+0x1a>
                                 : ( odr <= 104.0f ) ? 104.0f
 80042a8:	eddf 7a36 	vldr	s15, [pc, #216]	; 8004384 <LSM6DS3_G_Set_ODR_Value+0x10c>
 80042ac:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80042b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b4:	d9ed      	bls.n	8004292 <LSM6DS3_G_Set_ODR_Value+0x1a>
                                 : ( odr <= 208.0f ) ? 208.0f
 80042b6:	eddf 7a34 	vldr	s15, [pc, #208]	; 8004388 <LSM6DS3_G_Set_ODR_Value+0x110>
 80042ba:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80042be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c2:	d9e6      	bls.n	8004292 <LSM6DS3_G_Set_ODR_Value+0x1a>
                                 : ( odr <= 416.0f ) ? 416.0f
 80042c4:	eddf 7a31 	vldr	s15, [pc, #196]	; 800438c <LSM6DS3_G_Set_ODR_Value+0x114>
 80042c8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80042cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d0:	d9df      	bls.n	8004292 <LSM6DS3_G_Set_ODR_Value+0x1a>
                                 : ( odr <= 833.0f ) ? 833.0f
 80042d2:	eddf 7a2f 	vldr	s15, [pc, #188]	; 8004390 <LSM6DS3_G_Set_ODR_Value+0x118>
 80042d6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80042da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042de:	d9d8      	bls.n	8004292 <LSM6DS3_G_Set_ODR_Value+0x1a>
                                 :                     1660.0f;
 80042e0:	eddf 7a2c 	vldr	s15, [pc, #176]	; 8004394 <LSM6DS3_G_Set_ODR_Value+0x11c>
 80042e4:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8004398 <LSM6DS3_G_Set_ODR_Value+0x120>
 80042e8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80042ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042f0:	bf88      	it	hi
 80042f2:	eef0 7a47 	vmovhi.f32	s15, s14
 80042f6:	e7cc      	b.n	8004292 <LSM6DS3_G_Set_ODR_Value+0x1a>
            : ( odr <=  26.0f ) ? LSM6DS3_ACC_GYRO_ODR_G_26Hz
 80042f8:	eef2 7a0a 	vmov.f32	s15, #42	; 0x41500000  13.0
 80042fc:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004300:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004304:	d806      	bhi.n	8004314 <LSM6DS3_G_Set_ODR_Value+0x9c>
 8004306:	2110      	movs	r1, #16
  if ( LSM6DS3_ACC_GYRO_W_ODR_G( (void *)handle, new_odr ) == MEMS_ERROR )
 8004308:	f7fd fdf8 	bl	8001efc <LSM6DS3_ACC_GYRO_W_ODR_G>
  return COMPONENT_OK;
 800430c:	fab0 f080 	clz	r0, r0
 8004310:	0940      	lsrs	r0, r0, #5
}
 8004312:	bd08      	pop	{r3, pc}
            : ( odr <=  26.0f ) ? LSM6DS3_ACC_GYRO_ODR_G_26Hz
 8004314:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8004318:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800431c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004320:	d925      	bls.n	800436e <LSM6DS3_G_Set_ODR_Value+0xf6>
 8004322:	eddf 7a18 	vldr	s15, [pc, #96]	; 8004384 <LSM6DS3_G_Set_ODR_Value+0x10c>
 8004326:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800432a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800432e:	d920      	bls.n	8004372 <LSM6DS3_G_Set_ODR_Value+0xfa>
 8004330:	eddf 7a15 	vldr	s15, [pc, #84]	; 8004388 <LSM6DS3_G_Set_ODR_Value+0x110>
 8004334:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800433c:	d91b      	bls.n	8004376 <LSM6DS3_G_Set_ODR_Value+0xfe>
 800433e:	eddf 7a13 	vldr	s15, [pc, #76]	; 800438c <LSM6DS3_G_Set_ODR_Value+0x114>
 8004342:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004346:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800434a:	d916      	bls.n	800437a <LSM6DS3_G_Set_ODR_Value+0x102>
 800434c:	eddf 7a10 	vldr	s15, [pc, #64]	; 8004390 <LSM6DS3_G_Set_ODR_Value+0x118>
 8004350:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004358:	d911      	bls.n	800437e <LSM6DS3_G_Set_ODR_Value+0x106>
 800435a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8004394 <LSM6DS3_G_Set_ODR_Value+0x11c>
 800435e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004366:	bf94      	ite	ls
 8004368:	2170      	movls	r1, #112	; 0x70
 800436a:	2180      	movhi	r1, #128	; 0x80
 800436c:	e7cc      	b.n	8004308 <LSM6DS3_G_Set_ODR_Value+0x90>
 800436e:	2120      	movs	r1, #32
 8004370:	e7ca      	b.n	8004308 <LSM6DS3_G_Set_ODR_Value+0x90>
 8004372:	2130      	movs	r1, #48	; 0x30
 8004374:	e7c8      	b.n	8004308 <LSM6DS3_G_Set_ODR_Value+0x90>
 8004376:	2140      	movs	r1, #64	; 0x40
 8004378:	e7c6      	b.n	8004308 <LSM6DS3_G_Set_ODR_Value+0x90>
 800437a:	2150      	movs	r1, #80	; 0x50
 800437c:	e7c4      	b.n	8004308 <LSM6DS3_G_Set_ODR_Value+0x90>
 800437e:	2160      	movs	r1, #96	; 0x60
 8004380:	e7c2      	b.n	8004308 <LSM6DS3_G_Set_ODR_Value+0x90>
 8004382:	bf00      	nop
 8004384:	42500000 	.word	0x42500000
 8004388:	42d00000 	.word	0x42d00000
 800438c:	43500000 	.word	0x43500000
 8004390:	43d00000 	.word	0x43d00000
 8004394:	44504000 	.word	0x44504000
 8004398:	44cf8000 	.word	0x44cf8000

0800439c <LSM6DS3_G_Set_ODR>:
{
 800439c:	b508      	push	{r3, lr}
  if(handle->isEnabled == 1)
 800439e:	7983      	ldrb	r3, [r0, #6]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d00c      	beq.n	80043be <LSM6DS3_G_Set_ODR+0x22>
  LSM6DS3_G_Data_t *pComponentData = ( LSM6DS3_G_Data_t * )pData->pComponentData;
 80043a4:	6883      	ldr	r3, [r0, #8]
 80043a6:	681b      	ldr	r3, [r3, #0]
  switch( odr )
 80043a8:	2904      	cmp	r1, #4
 80043aa:	d828      	bhi.n	80043fe <LSM6DS3_G_Set_ODR+0x62>
 80043ac:	e8df f001 	tbb	[pc, r1]
 80043b0:	16120303 	.word	0x16120303
 80043b4:	0e          	.byte	0x0e
 80043b5:	00          	.byte	0x00
      pComponentData->Previous_ODR = 13.0f;
 80043b6:	4a13      	ldr	r2, [pc, #76]	; (8004404 <LSM6DS3_G_Set_ODR+0x68>)
 80043b8:	601a      	str	r2, [r3, #0]
  return COMPONENT_OK;
 80043ba:	2000      	movs	r0, #0
}
 80043bc:	bd08      	pop	{r3, pc}
  switch( odr )
 80043be:	2904      	cmp	r1, #4
 80043c0:	d81d      	bhi.n	80043fe <LSM6DS3_G_Set_ODR+0x62>
 80043c2:	e8df f001 	tbb	[pc, r1]
 80043c6:	0f0f      	.short	0x0f0f
 80043c8:	1a18      	.short	0x1a18
 80043ca:	16          	.byte	0x16
 80043cb:	00          	.byte	0x00
      pComponentData->Previous_ODR = 104.0f;
 80043cc:	4a0e      	ldr	r2, [pc, #56]	; (8004408 <LSM6DS3_G_Set_ODR+0x6c>)
 80043ce:	601a      	str	r2, [r3, #0]
  return COMPONENT_OK;
 80043d0:	2000      	movs	r0, #0
}
 80043d2:	bd08      	pop	{r3, pc}
      pComponentData->Previous_ODR = 26.0f;
 80043d4:	4a0d      	ldr	r2, [pc, #52]	; (800440c <LSM6DS3_G_Set_ODR+0x70>)
 80043d6:	601a      	str	r2, [r3, #0]
  return COMPONENT_OK;
 80043d8:	2000      	movs	r0, #0
}
 80043da:	bd08      	pop	{r3, pc}
      pComponentData->Previous_ODR = 52.0f;
 80043dc:	4a0c      	ldr	r2, [pc, #48]	; (8004410 <LSM6DS3_G_Set_ODR+0x74>)
 80043de:	601a      	str	r2, [r3, #0]
  return COMPONENT_OK;
 80043e0:	2000      	movs	r0, #0
}
 80043e2:	bd08      	pop	{r3, pc}
      new_odr = LSM6DS3_ACC_GYRO_ODR_G_13Hz;
 80043e4:	2110      	movs	r1, #16
  if ( LSM6DS3_ACC_GYRO_W_ODR_G( (void *)handle, new_odr ) == MEMS_ERROR )
 80043e6:	f7fd fd89 	bl	8001efc <LSM6DS3_ACC_GYRO_W_ODR_G>
  return COMPONENT_OK;
 80043ea:	fab0 f080 	clz	r0, r0
 80043ee:	0940      	lsrs	r0, r0, #5
}
 80043f0:	bd08      	pop	{r3, pc}
      new_odr = LSM6DS3_ACC_GYRO_ODR_G_104Hz;
 80043f2:	2140      	movs	r1, #64	; 0x40
 80043f4:	e7f7      	b.n	80043e6 <LSM6DS3_G_Set_ODR+0x4a>
      new_odr = LSM6DS3_ACC_GYRO_ODR_G_26Hz;
 80043f6:	2120      	movs	r1, #32
 80043f8:	e7f5      	b.n	80043e6 <LSM6DS3_G_Set_ODR+0x4a>
      new_odr = LSM6DS3_ACC_GYRO_ODR_G_52Hz;
 80043fa:	2130      	movs	r1, #48	; 0x30
 80043fc:	e7f3      	b.n	80043e6 <LSM6DS3_G_Set_ODR+0x4a>
      return COMPONENT_ERROR;
 80043fe:	2001      	movs	r0, #1
}
 8004400:	bd08      	pop	{r3, pc}
 8004402:	bf00      	nop
 8004404:	41500000 	.word	0x41500000
 8004408:	42d00000 	.word	0x42d00000
 800440c:	41d00000 	.word	0x41d00000
 8004410:	42500000 	.word	0x42500000

08004414 <LSM6DS3_G_Get_WhoAmI>:
 8004414:	b508      	push	{r3, lr}
 8004416:	f7fd fc93 	bl	8001d40 <LSM6DS3_ACC_GYRO_R_WHO_AM_I>
 800441a:	fab0 f080 	clz	r0, r0
 800441e:	0940      	lsrs	r0, r0, #5
 8004420:	bd08      	pop	{r3, pc}
 8004422:	bf00      	nop

08004424 <LSM6DS3_X_Set_ODR_Value>:
{
 8004424:	b508      	push	{r3, lr}
  if(handle->isEnabled == 1)
 8004426:	7983      	ldrb	r3, [r0, #6]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d048      	beq.n	80044be <LSM6DS3_X_Set_ODR_Value+0x9a>
                                 : ( odr <=   26.0f ) ? 26.0f
 800442c:	eef2 7a0a 	vmov.f32	s15, #42	; 0x41500000  13.0
  LSM6DS3_X_Data_t *pComponentData = ( LSM6DS3_X_Data_t * )pData->pComponentData;
 8004430:	6883      	ldr	r3, [r0, #8]
                                 : ( odr <=   26.0f ) ? 26.0f
 8004432:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  LSM6DS3_X_Data_t *pComponentData = ( LSM6DS3_X_Data_t * )pData->pComponentData;
 800443a:	681b      	ldr	r3, [r3, #0]
                                 : ( odr <=   26.0f ) ? 26.0f
 800443c:	d93b      	bls.n	80044b6 <LSM6DS3_X_Set_ODR_Value+0x92>
                                 : ( odr <=   52.0f ) ? 52.0f
 800443e:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 8004442:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800444a:	d934      	bls.n	80044b6 <LSM6DS3_X_Set_ODR_Value+0x92>
                                 : ( odr <=  104.0f ) ? 104.0f
 800444c:	eddf 7a47 	vldr	s15, [pc, #284]	; 800456c <LSM6DS3_X_Set_ODR_Value+0x148>
 8004450:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004458:	d92d      	bls.n	80044b6 <LSM6DS3_X_Set_ODR_Value+0x92>
                                 : ( odr <=  208.0f ) ? 208.0f
 800445a:	eddf 7a45 	vldr	s15, [pc, #276]	; 8004570 <LSM6DS3_X_Set_ODR_Value+0x14c>
 800445e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004466:	d926      	bls.n	80044b6 <LSM6DS3_X_Set_ODR_Value+0x92>
                                 : ( odr <=  416.0f ) ? 416.0f
 8004468:	eddf 7a42 	vldr	s15, [pc, #264]	; 8004574 <LSM6DS3_X_Set_ODR_Value+0x150>
 800446c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004470:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004474:	d91f      	bls.n	80044b6 <LSM6DS3_X_Set_ODR_Value+0x92>
                                 : ( odr <=  833.0f ) ? 833.0f
 8004476:	eddf 7a40 	vldr	s15, [pc, #256]	; 8004578 <LSM6DS3_X_Set_ODR_Value+0x154>
 800447a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800447e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004482:	d918      	bls.n	80044b6 <LSM6DS3_X_Set_ODR_Value+0x92>
                                 : ( odr <= 1660.0f ) ? 1660.0f
 8004484:	eddf 7a3d 	vldr	s15, [pc, #244]	; 800457c <LSM6DS3_X_Set_ODR_Value+0x158>
 8004488:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800448c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004490:	d911      	bls.n	80044b6 <LSM6DS3_X_Set_ODR_Value+0x92>
                                 : ( odr <= 3330.0f ) ? 3330.0f
 8004492:	eddf 7a3b 	vldr	s15, [pc, #236]	; 8004580 <LSM6DS3_X_Set_ODR_Value+0x15c>
 8004496:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800449a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800449e:	d90a      	bls.n	80044b6 <LSM6DS3_X_Set_ODR_Value+0x92>
                                 :                      6660.0f;
 80044a0:	eddf 7a38 	vldr	s15, [pc, #224]	; 8004584 <LSM6DS3_X_Set_ODR_Value+0x160>
 80044a4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8004588 <LSM6DS3_X_Set_ODR_Value+0x164>
 80044a8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80044ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b0:	bf88      	it	hi
 80044b2:	eef0 7a47 	vmovhi.f32	s15, s14
  pComponentData->Previous_ODR = ( odr <=   13.0f ) ? 13.0f
 80044b6:	edc3 7a00 	vstr	s15, [r3]
  return COMPONENT_OK;
 80044ba:	2000      	movs	r0, #0
}
 80044bc:	bd08      	pop	{r3, pc}
            : ( odr <=   26.0f ) ? LSM6DS3_ACC_GYRO_ODR_XL_26Hz
 80044be:	eef2 7a0a 	vmov.f32	s15, #42	; 0x41500000  13.0
 80044c2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80044c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ca:	d806      	bhi.n	80044da <LSM6DS3_X_Set_ODR_Value+0xb6>
 80044cc:	2110      	movs	r1, #16
  if ( LSM6DS3_ACC_GYRO_W_ODR_XL( (void *)handle, new_odr ) == MEMS_ERROR )
 80044ce:	f7fd fcb1 	bl	8001e34 <LSM6DS3_ACC_GYRO_W_ODR_XL>
  return COMPONENT_OK;
 80044d2:	fab0 f080 	clz	r0, r0
 80044d6:	0940      	lsrs	r0, r0, #5
}
 80044d8:	bd08      	pop	{r3, pc}
            : ( odr <=   26.0f ) ? LSM6DS3_ACC_GYRO_ODR_XL_26Hz
 80044da:	eef3 7a0a 	vmov.f32	s15, #58	; 0x41d00000  26.0
 80044de:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80044e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044e6:	d933      	bls.n	8004550 <LSM6DS3_X_Set_ODR_Value+0x12c>
 80044e8:	eddf 7a20 	vldr	s15, [pc, #128]	; 800456c <LSM6DS3_X_Set_ODR_Value+0x148>
 80044ec:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80044f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044f4:	d92e      	bls.n	8004554 <LSM6DS3_X_Set_ODR_Value+0x130>
 80044f6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8004570 <LSM6DS3_X_Set_ODR_Value+0x14c>
 80044fa:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80044fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004502:	d929      	bls.n	8004558 <LSM6DS3_X_Set_ODR_Value+0x134>
 8004504:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8004574 <LSM6DS3_X_Set_ODR_Value+0x150>
 8004508:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800450c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004510:	d924      	bls.n	800455c <LSM6DS3_X_Set_ODR_Value+0x138>
 8004512:	eddf 7a19 	vldr	s15, [pc, #100]	; 8004578 <LSM6DS3_X_Set_ODR_Value+0x154>
 8004516:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800451a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800451e:	d91f      	bls.n	8004560 <LSM6DS3_X_Set_ODR_Value+0x13c>
 8004520:	eddf 7a16 	vldr	s15, [pc, #88]	; 800457c <LSM6DS3_X_Set_ODR_Value+0x158>
 8004524:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800452c:	d91a      	bls.n	8004564 <LSM6DS3_X_Set_ODR_Value+0x140>
 800452e:	eddf 7a14 	vldr	s15, [pc, #80]	; 8004580 <LSM6DS3_X_Set_ODR_Value+0x15c>
 8004532:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004536:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800453a:	d915      	bls.n	8004568 <LSM6DS3_X_Set_ODR_Value+0x144>
 800453c:	eddf 7a11 	vldr	s15, [pc, #68]	; 8004584 <LSM6DS3_X_Set_ODR_Value+0x160>
 8004540:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8004544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004548:	bf94      	ite	ls
 800454a:	2190      	movls	r1, #144	; 0x90
 800454c:	21a0      	movhi	r1, #160	; 0xa0
 800454e:	e7be      	b.n	80044ce <LSM6DS3_X_Set_ODR_Value+0xaa>
 8004550:	2120      	movs	r1, #32
 8004552:	e7bc      	b.n	80044ce <LSM6DS3_X_Set_ODR_Value+0xaa>
 8004554:	2130      	movs	r1, #48	; 0x30
 8004556:	e7ba      	b.n	80044ce <LSM6DS3_X_Set_ODR_Value+0xaa>
 8004558:	2140      	movs	r1, #64	; 0x40
 800455a:	e7b8      	b.n	80044ce <LSM6DS3_X_Set_ODR_Value+0xaa>
 800455c:	2150      	movs	r1, #80	; 0x50
 800455e:	e7b6      	b.n	80044ce <LSM6DS3_X_Set_ODR_Value+0xaa>
 8004560:	2160      	movs	r1, #96	; 0x60
 8004562:	e7b4      	b.n	80044ce <LSM6DS3_X_Set_ODR_Value+0xaa>
 8004564:	2170      	movs	r1, #112	; 0x70
 8004566:	e7b2      	b.n	80044ce <LSM6DS3_X_Set_ODR_Value+0xaa>
 8004568:	2180      	movs	r1, #128	; 0x80
 800456a:	e7b0      	b.n	80044ce <LSM6DS3_X_Set_ODR_Value+0xaa>
 800456c:	42500000 	.word	0x42500000
 8004570:	42d00000 	.word	0x42d00000
 8004574:	43500000 	.word	0x43500000
 8004578:	43d00000 	.word	0x43d00000
 800457c:	44504000 	.word	0x44504000
 8004580:	44cf8000 	.word	0x44cf8000
 8004584:	45502000 	.word	0x45502000
 8004588:	45d02000 	.word	0x45d02000

0800458c <LSM6DS3_G_Read_Reg>:
 800458c:	b508      	push	{r3, lr}
 800458e:	2301      	movs	r3, #1
 8004590:	f7fd fbce 	bl	8001d30 <LSM6DS3_ACC_GYRO_ReadReg>
 8004594:	fab0 f080 	clz	r0, r0
 8004598:	0940      	lsrs	r0, r0, #5
 800459a:	bd08      	pop	{r3, pc}

0800459c <LSM6DS3_G_Write_Reg>:
 800459c:	b510      	push	{r4, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	ac02      	add	r4, sp, #8
 80045a2:	2301      	movs	r3, #1
 80045a4:	f804 2d01 	strb.w	r2, [r4, #-1]!
 80045a8:	4622      	mov	r2, r4
 80045aa:	f7fd fbb9 	bl	8001d20 <LSM6DS3_ACC_GYRO_WriteReg>
 80045ae:	fab0 f080 	clz	r0, r0
 80045b2:	0940      	lsrs	r0, r0, #5
 80045b4:	b002      	add	sp, #8
 80045b6:	bd10      	pop	{r4, pc}

080045b8 <LSM6DS3_G_Set_Interrupt_Latch>:
 80045b8:	2901      	cmp	r1, #1
 80045ba:	d901      	bls.n	80045c0 <LSM6DS3_G_Set_Interrupt_Latch+0x8>
 80045bc:	2001      	movs	r0, #1
 80045be:	4770      	bx	lr
 80045c0:	b508      	push	{r3, lr}
 80045c2:	f7fe f97d 	bl	80028c0 <LSM6DS3_ACC_GYRO_W_LIR>
 80045c6:	fab0 f080 	clz	r0, r0
 80045ca:	0940      	lsrs	r0, r0, #5
 80045cc:	bd08      	pop	{r3, pc}
 80045ce:	bf00      	nop

080045d0 <LSM6DS3_X_Enable_Double_Tap_Detection>:
{
 80045d0:	b538      	push	{r3, r4, r5, lr}
  if(handle->isEnabled == 1)
 80045d2:	7983      	ldrb	r3, [r0, #6]
 80045d4:	2b01      	cmp	r3, #1
{
 80045d6:	4604      	mov	r4, r0
 80045d8:	460d      	mov	r5, r1
  if(handle->isEnabled == 1)
 80045da:	d00a      	beq.n	80045f2 <LSM6DS3_X_Enable_Double_Tap_Detection+0x22>
  LSM6DS3_X_Data_t *pComponentData = ( LSM6DS3_X_Data_t * )pData->pComponentData;
 80045dc:	6883      	ldr	r3, [r0, #8]
  pComponentData->Previous_ODR = ( odr <=   13.0f ) ? 13.0f
 80045de:	4a2c      	ldr	r2, [pc, #176]	; (8004690 <LSM6DS3_X_Enable_Double_Tap_Detection+0xc0>)
 80045e0:	681b      	ldr	r3, [r3, #0]
  if ( LSM6DS3_ACC_GYRO_W_FS_XL( (void *)handle, LSM6DS3_ACC_GYRO_FS_XL_2g ) == MEMS_ERROR )
 80045e2:	2100      	movs	r1, #0
  pComponentData->Previous_ODR = ( odr <=   13.0f ) ? 13.0f
 80045e4:	601a      	str	r2, [r3, #0]
  if ( LSM6DS3_ACC_GYRO_W_FS_XL( (void *)handle, LSM6DS3_ACC_GYRO_FS_XL_2g ) == MEMS_ERROR )
 80045e6:	4620      	mov	r0, r4
 80045e8:	f7fd fbd6 	bl	8001d98 <LSM6DS3_ACC_GYRO_W_FS_XL>
 80045ec:	b960      	cbnz	r0, 8004608 <LSM6DS3_X_Enable_Double_Tap_Detection+0x38>
    return COMPONENT_ERROR;
 80045ee:	2001      	movs	r0, #1
}
 80045f0:	bd38      	pop	{r3, r4, r5, pc}
  if ( LSM6DS3_ACC_GYRO_W_ODR_XL( (void *)handle, new_odr ) == MEMS_ERROR )
 80045f2:	2160      	movs	r1, #96	; 0x60
 80045f4:	f7fd fc1e 	bl	8001e34 <LSM6DS3_ACC_GYRO_W_ODR_XL>
 80045f8:	2800      	cmp	r0, #0
 80045fa:	d0f8      	beq.n	80045ee <LSM6DS3_X_Enable_Double_Tap_Detection+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_FS_XL( (void *)handle, LSM6DS3_ACC_GYRO_FS_XL_2g ) == MEMS_ERROR )
 80045fc:	2100      	movs	r1, #0
 80045fe:	4620      	mov	r0, r4
 8004600:	f7fd fbca 	bl	8001d98 <LSM6DS3_ACC_GYRO_W_FS_XL>
 8004604:	2800      	cmp	r0, #0
 8004606:	d0f2      	beq.n	80045ee <LSM6DS3_X_Enable_Double_Tap_Detection+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_TAP_X_EN( (void *)handle, LSM6DS3_ACC_GYRO_TAP_X_EN_ENABLED ) == MEMS_ERROR )
 8004608:	2108      	movs	r1, #8
 800460a:	4620      	mov	r0, r4
 800460c:	f7fe f9be 	bl	800298c <LSM6DS3_ACC_GYRO_W_TAP_X_EN>
 8004610:	2800      	cmp	r0, #0
 8004612:	d0ec      	beq.n	80045ee <LSM6DS3_X_Enable_Double_Tap_Detection+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_TAP_Y_EN( (void *)handle, LSM6DS3_ACC_GYRO_TAP_Y_EN_ENABLED ) == MEMS_ERROR )
 8004614:	2104      	movs	r1, #4
 8004616:	4620      	mov	r0, r4
 8004618:	f7fe f996 	bl	8002948 <LSM6DS3_ACC_GYRO_W_TAP_Y_EN>
 800461c:	2800      	cmp	r0, #0
 800461e:	d0e6      	beq.n	80045ee <LSM6DS3_X_Enable_Double_Tap_Detection+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_TAP_Z_EN( (void *)handle, LSM6DS3_ACC_GYRO_TAP_Z_EN_ENABLED ) == MEMS_ERROR )
 8004620:	2102      	movs	r1, #2
 8004622:	4620      	mov	r0, r4
 8004624:	f7fe f96e 	bl	8002904 <LSM6DS3_ACC_GYRO_W_TAP_Z_EN>
 8004628:	2800      	cmp	r0, #0
 800462a:	d0e0      	beq.n	80045ee <LSM6DS3_X_Enable_Double_Tap_Detection+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_TAP_THS( (void *)handle, thr ) == MEMS_ERROR )
 800462c:	2108      	movs	r1, #8
 800462e:	4620      	mov	r0, r4
 8004630:	f7fe fa12 	bl	8002a58 <LSM6DS3_ACC_GYRO_W_TAP_THS>
 8004634:	2800      	cmp	r0, #0
 8004636:	d0da      	beq.n	80045ee <LSM6DS3_X_Enable_Double_Tap_Detection+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_SHOCK_Duration( (void *)handle, time ) == MEMS_ERROR )
 8004638:	2103      	movs	r1, #3
 800463a:	4620      	mov	r0, r4
 800463c:	f7fe fa52 	bl	8002ae4 <LSM6DS3_ACC_GYRO_W_SHOCK_Duration>
 8004640:	2800      	cmp	r0, #0
 8004642:	d0d4      	beq.n	80045ee <LSM6DS3_X_Enable_Double_Tap_Detection+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_QUIET_Duration( (void *)handle, time ) == MEMS_ERROR )
 8004644:	2103      	movs	r1, #3
 8004646:	4620      	mov	r0, r4
 8004648:	f7fe fa70 	bl	8002b2c <LSM6DS3_ACC_GYRO_W_QUIET_Duration>
 800464c:	2800      	cmp	r0, #0
 800464e:	d0ce      	beq.n	80045ee <LSM6DS3_X_Enable_Double_Tap_Detection+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_DUR( (void *)handle, time ) == MEMS_ERROR )
 8004650:	2108      	movs	r1, #8
 8004652:	4620      	mov	r0, r4
 8004654:	f7fe fa8e 	bl	8002b74 <LSM6DS3_ACC_GYRO_W_DUR>
 8004658:	2800      	cmp	r0, #0
 800465a:	d0c8      	beq.n	80045ee <LSM6DS3_X_Enable_Double_Tap_Detection+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV( (void *)handle,
 800465c:	2180      	movs	r1, #128	; 0x80
 800465e:	4620      	mov	r0, r4
 8004660:	f7fe face 	bl	8002c00 <LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV>
 8004664:	2800      	cmp	r0, #0
 8004666:	d0c2      	beq.n	80045ee <LSM6DS3_X_Enable_Double_Tap_Detection+0x1e>
  switch (int_pin)
 8004668:	b14d      	cbz	r5, 800467e <LSM6DS3_X_Enable_Double_Tap_Detection+0xae>
 800466a:	2d01      	cmp	r5, #1
 800466c:	d1bf      	bne.n	80045ee <LSM6DS3_X_Enable_Double_Tap_Detection+0x1e>
    if ( LSM6DS3_ACC_GYRO_W_TapEvOnInt2( (void *)handle, LSM6DS3_ACC_GYRO_INT2_TAP_ENABLED ) == MEMS_ERROR )
 800466e:	4620      	mov	r0, r4
 8004670:	2108      	movs	r1, #8
 8004672:	f7fe fcbf 	bl	8002ff4 <LSM6DS3_ACC_GYRO_W_TapEvOnInt2>
    return COMPONENT_ERROR;
 8004676:	fab0 f080 	clz	r0, r0
 800467a:	0940      	lsrs	r0, r0, #5
}
 800467c:	bd38      	pop	{r3, r4, r5, pc}
    if ( LSM6DS3_ACC_GYRO_W_TapEvOnInt1( (void *)handle, LSM6DS3_ACC_GYRO_INT1_TAP_ENABLED ) == MEMS_ERROR )
 800467e:	4620      	mov	r0, r4
 8004680:	2108      	movs	r1, #8
 8004682:	f7fe fbeb 	bl	8002e5c <LSM6DS3_ACC_GYRO_W_TapEvOnInt1>
    return COMPONENT_ERROR;
 8004686:	fab0 f080 	clz	r0, r0
 800468a:	0940      	lsrs	r0, r0, #5
}
 800468c:	bd38      	pop	{r3, r4, r5, pc}
 800468e:	bf00      	nop
 8004690:	43d00000 	.word	0x43d00000

08004694 <LSM6DS3_X_Enable_Tilt_Detection>:
{
 8004694:	b538      	push	{r3, r4, r5, lr}
  if(handle->isEnabled == 1)
 8004696:	7983      	ldrb	r3, [r0, #6]
 8004698:	2b01      	cmp	r3, #1
{
 800469a:	4604      	mov	r4, r0
 800469c:	460d      	mov	r5, r1
  if(handle->isEnabled == 1)
 800469e:	d00a      	beq.n	80046b6 <LSM6DS3_X_Enable_Tilt_Detection+0x22>
  LSM6DS3_X_Data_t *pComponentData = ( LSM6DS3_X_Data_t * )pData->pComponentData;
 80046a0:	6883      	ldr	r3, [r0, #8]
  pComponentData->Previous_ODR = ( odr <=   13.0f ) ? 13.0f
 80046a2:	4a1a      	ldr	r2, [pc, #104]	; (800470c <LSM6DS3_X_Enable_Tilt_Detection+0x78>)
 80046a4:	681b      	ldr	r3, [r3, #0]
  if ( LSM6DS3_ACC_GYRO_W_FS_XL( (void *)handle, LSM6DS3_ACC_GYRO_FS_XL_2g ) == MEMS_ERROR )
 80046a6:	2100      	movs	r1, #0
  pComponentData->Previous_ODR = ( odr <=   13.0f ) ? 13.0f
 80046a8:	601a      	str	r2, [r3, #0]
  if ( LSM6DS3_ACC_GYRO_W_FS_XL( (void *)handle, LSM6DS3_ACC_GYRO_FS_XL_2g ) == MEMS_ERROR )
 80046aa:	4620      	mov	r0, r4
 80046ac:	f7fd fb74 	bl	8001d98 <LSM6DS3_ACC_GYRO_W_FS_XL>
 80046b0:	b960      	cbnz	r0, 80046cc <LSM6DS3_X_Enable_Tilt_Detection+0x38>
    return COMPONENT_ERROR;
 80046b2:	2001      	movs	r0, #1
}
 80046b4:	bd38      	pop	{r3, r4, r5, pc}
  if ( LSM6DS3_ACC_GYRO_W_ODR_XL( (void *)handle, new_odr ) == MEMS_ERROR )
 80046b6:	2120      	movs	r1, #32
 80046b8:	f7fd fbbc 	bl	8001e34 <LSM6DS3_ACC_GYRO_W_ODR_XL>
 80046bc:	2800      	cmp	r0, #0
 80046be:	d0f8      	beq.n	80046b2 <LSM6DS3_X_Enable_Tilt_Detection+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_FS_XL( (void *)handle, LSM6DS3_ACC_GYRO_FS_XL_2g ) == MEMS_ERROR )
 80046c0:	2100      	movs	r1, #0
 80046c2:	4620      	mov	r0, r4
 80046c4:	f7fd fb68 	bl	8001d98 <LSM6DS3_ACC_GYRO_W_FS_XL>
 80046c8:	2800      	cmp	r0, #0
 80046ca:	d0f2      	beq.n	80046b2 <LSM6DS3_X_Enable_Tilt_Detection+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_FUNC_EN( (void *)handle, LSM6DS3_ACC_GYRO_FUNC_EN_ENABLED ) == MEMS_ERROR )
 80046cc:	2104      	movs	r1, #4
 80046ce:	4620      	mov	r0, r4
 80046d0:	f7fd ff6c 	bl	80025ac <LSM6DS3_ACC_GYRO_W_FUNC_EN>
 80046d4:	2800      	cmp	r0, #0
 80046d6:	d0ec      	beq.n	80046b2 <LSM6DS3_X_Enable_Tilt_Detection+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_TILT_EN( (void *)handle, LSM6DS3_ACC_GYRO_TILT_EN_ENABLED ) == MEMS_ERROR )
 80046d8:	2120      	movs	r1, #32
 80046da:	4620      	mov	r0, r4
 80046dc:	f7fe f978 	bl	80029d0 <LSM6DS3_ACC_GYRO_W_TILT_EN>
 80046e0:	2800      	cmp	r0, #0
 80046e2:	d0e6      	beq.n	80046b2 <LSM6DS3_X_Enable_Tilt_Detection+0x1e>
  switch (int_pin)
 80046e4:	b14d      	cbz	r5, 80046fa <LSM6DS3_X_Enable_Tilt_Detection+0x66>
 80046e6:	2d01      	cmp	r5, #1
 80046e8:	d1e3      	bne.n	80046b2 <LSM6DS3_X_Enable_Tilt_Detection+0x1e>
    if ( LSM6DS3_ACC_GYRO_W_TiltEvOnInt2( (void *)handle, LSM6DS3_ACC_GYRO_INT2_TILT_ENABLED ) == MEMS_ERROR )
 80046ea:	4620      	mov	r0, r4
 80046ec:	2102      	movs	r1, #2
 80046ee:	f7fe fc3d 	bl	8002f6c <LSM6DS3_ACC_GYRO_W_TiltEvOnInt2>
    return COMPONENT_ERROR;
 80046f2:	fab0 f080 	clz	r0, r0
 80046f6:	0940      	lsrs	r0, r0, #5
}
 80046f8:	bd38      	pop	{r3, r4, r5, pc}
    if ( LSM6DS3_ACC_GYRO_W_TiltEvOnInt1( (void *)handle, LSM6DS3_ACC_GYRO_INT1_TILT_ENABLED ) == MEMS_ERROR )
 80046fa:	4620      	mov	r0, r4
 80046fc:	2102      	movs	r1, #2
 80046fe:	f7fe fb69 	bl	8002dd4 <LSM6DS3_ACC_GYRO_W_TiltEvOnInt1>
    return COMPONENT_ERROR;
 8004702:	fab0 f080 	clz	r0, r0
 8004706:	0940      	lsrs	r0, r0, #5
}
 8004708:	bd38      	pop	{r3, r4, r5, pc}
 800470a:	bf00      	nop
 800470c:	41d00000 	.word	0x41d00000

08004710 <LSM6DS3_X_Enable_Pedometer>:
{
 8004710:	b510      	push	{r4, lr}
  if(handle->isEnabled == 1)
 8004712:	7983      	ldrb	r3, [r0, #6]
 8004714:	2b01      	cmp	r3, #1
{
 8004716:	4604      	mov	r4, r0
  if(handle->isEnabled == 1)
 8004718:	d00a      	beq.n	8004730 <LSM6DS3_X_Enable_Pedometer+0x20>
  LSM6DS3_X_Data_t *pComponentData = ( LSM6DS3_X_Data_t * )pData->pComponentData;
 800471a:	6883      	ldr	r3, [r0, #8]
  pComponentData->Previous_ODR = ( odr <=   13.0f ) ? 13.0f
 800471c:	4a17      	ldr	r2, [pc, #92]	; (800477c <LSM6DS3_X_Enable_Pedometer+0x6c>)
 800471e:	681b      	ldr	r3, [r3, #0]
  if ( LSM6DS3_ACC_GYRO_W_FS_XL( (void *)handle, LSM6DS3_ACC_GYRO_FS_XL_2g ) == MEMS_ERROR )
 8004720:	2100      	movs	r1, #0
  pComponentData->Previous_ODR = ( odr <=   13.0f ) ? 13.0f
 8004722:	601a      	str	r2, [r3, #0]
  if ( LSM6DS3_ACC_GYRO_W_FS_XL( (void *)handle, LSM6DS3_ACC_GYRO_FS_XL_2g ) == MEMS_ERROR )
 8004724:	4620      	mov	r0, r4
 8004726:	f7fd fb37 	bl	8001d98 <LSM6DS3_ACC_GYRO_W_FS_XL>
 800472a:	b960      	cbnz	r0, 8004746 <LSM6DS3_X_Enable_Pedometer+0x36>
    return COMPONENT_ERROR;
 800472c:	2001      	movs	r0, #1
}
 800472e:	bd10      	pop	{r4, pc}
  if ( LSM6DS3_ACC_GYRO_W_ODR_XL( (void *)handle, new_odr ) == MEMS_ERROR )
 8004730:	2120      	movs	r1, #32
 8004732:	f7fd fb7f 	bl	8001e34 <LSM6DS3_ACC_GYRO_W_ODR_XL>
 8004736:	2800      	cmp	r0, #0
 8004738:	d0f8      	beq.n	800472c <LSM6DS3_X_Enable_Pedometer+0x1c>
  if ( LSM6DS3_ACC_GYRO_W_FS_XL( (void *)handle, LSM6DS3_ACC_GYRO_FS_XL_2g ) == MEMS_ERROR )
 800473a:	2100      	movs	r1, #0
 800473c:	4620      	mov	r0, r4
 800473e:	f7fd fb2b 	bl	8001d98 <LSM6DS3_ACC_GYRO_W_FS_XL>
 8004742:	2800      	cmp	r0, #0
 8004744:	d0f2      	beq.n	800472c <LSM6DS3_X_Enable_Pedometer+0x1c>
  if ( LSM6DS3_ACC_GYRO_W_PedoThreshold( (void *)handle, thr ) == MEMS_ERROR )
 8004746:	2117      	movs	r1, #23
 8004748:	4620      	mov	r0, r4
 800474a:	f7fe fd07 	bl	800315c <LSM6DS3_ACC_GYRO_W_PedoThreshold>
 800474e:	2800      	cmp	r0, #0
 8004750:	d0ec      	beq.n	800472c <LSM6DS3_X_Enable_Pedometer+0x1c>
  if ( LSM6DS3_ACC_GYRO_W_FUNC_EN( (void *)handle, LSM6DS3_ACC_GYRO_FUNC_EN_ENABLED ) == MEMS_ERROR )
 8004752:	2104      	movs	r1, #4
 8004754:	4620      	mov	r0, r4
 8004756:	f7fd ff29 	bl	80025ac <LSM6DS3_ACC_GYRO_W_FUNC_EN>
 800475a:	2800      	cmp	r0, #0
 800475c:	d0e6      	beq.n	800472c <LSM6DS3_X_Enable_Pedometer+0x1c>
  if ( LSM6DS3_ACC_GYRO_W_PEDO_EN( (void *)handle, LSM6DS3_ACC_GYRO_PEDO_EN_ENABLED ) == MEMS_ERROR )
 800475e:	2140      	movs	r1, #64	; 0x40
 8004760:	4620      	mov	r0, r4
 8004762:	f7fe f957 	bl	8002a14 <LSM6DS3_ACC_GYRO_W_PEDO_EN>
 8004766:	2800      	cmp	r0, #0
 8004768:	d0e0      	beq.n	800472c <LSM6DS3_X_Enable_Pedometer+0x1c>
  if ( LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1( (void *)handle, LSM6DS3_ACC_GYRO_INT1_PEDO_ENABLED ) == MEMS_ERROR )
 800476a:	4620      	mov	r0, r4
 800476c:	2180      	movs	r1, #128	; 0x80
 800476e:	f7fd fd25 	bl	80021bc <LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1>
    return COMPONENT_ERROR;
 8004772:	fab0 f080 	clz	r0, r0
 8004776:	0940      	lsrs	r0, r0, #5
}
 8004778:	bd10      	pop	{r4, pc}
 800477a:	bf00      	nop
 800477c:	41d00000 	.word	0x41d00000

08004780 <LSM6DS3_G_Get_AxesRaw>:
{
 8004780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004782:	b083      	sub	sp, #12
  uint8_t regValue[6] = {0, 0, 0, 0, 0, 0};
 8004784:	2400      	movs	r4, #0
{
 8004786:	460d      	mov	r5, r1
  if ( LSM6DS3_ACC_GYRO_GetRawGyroData( (void *)handle, ( uint8_t* )regValue ) == MEMS_ERROR )
 8004788:	4669      	mov	r1, sp
  uint8_t regValue[6] = {0, 0, 0, 0, 0, 0};
 800478a:	f8ad 4004 	strh.w	r4, [sp, #4]
 800478e:	9400      	str	r4, [sp, #0]
  if ( LSM6DS3_ACC_GYRO_GetRawGyroData( (void *)handle, ( uint8_t* )regValue ) == MEMS_ERROR )
 8004790:	f7fd fbe6 	bl	8001f60 <LSM6DS3_ACC_GYRO_GetRawGyroData>
 8004794:	b1b8      	cbz	r0, 80047c6 <LSM6DS3_G_Get_AxesRaw+0x46>
  pData[2] = ( ( ( ( int16_t )regValue[5] ) << 8 ) + ( int16_t )regValue[4] );
 8004796:	f89d 0005 	ldrb.w	r0, [sp, #5]
  pData[0] = ( ( ( ( int16_t )regValue[1] ) << 8 ) + ( int16_t )regValue[0] );
 800479a:	f89d 7001 	ldrb.w	r7, [sp, #1]
 800479e:	f89d 1000 	ldrb.w	r1, [sp]
  pData[1] = ( ( ( ( int16_t )regValue[3] ) << 8 ) + ( int16_t )regValue[2] );
 80047a2:	f89d 6003 	ldrb.w	r6, [sp, #3]
 80047a6:	f89d 2002 	ldrb.w	r2, [sp, #2]
  pData[2] = ( ( ( ( int16_t )regValue[5] ) << 8 ) + ( int16_t )regValue[4] );
 80047aa:	f89d 3004 	ldrb.w	r3, [sp, #4]
  pData[0] = ( ( ( ( int16_t )regValue[1] ) << 8 ) + ( int16_t )regValue[0] );
 80047ae:	eb01 2107 	add.w	r1, r1, r7, lsl #8
  pData[2] = ( ( ( ( int16_t )regValue[5] ) << 8 ) + ( int16_t )regValue[4] );
 80047b2:	eb03 2300 	add.w	r3, r3, r0, lsl #8
  pData[1] = ( ( ( ( int16_t )regValue[3] ) << 8 ) + ( int16_t )regValue[2] );
 80047b6:	eb02 2206 	add.w	r2, r2, r6, lsl #8
  return COMPONENT_OK;
 80047ba:	4620      	mov	r0, r4
  value->AXIS_X = dataRaw[0];
 80047bc:	8029      	strh	r1, [r5, #0]
  value->AXIS_Y = dataRaw[1];
 80047be:	806a      	strh	r2, [r5, #2]
  value->AXIS_Z = dataRaw[2];
 80047c0:	80ab      	strh	r3, [r5, #4]
}
 80047c2:	b003      	add	sp, #12
 80047c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return COMPONENT_ERROR;
 80047c6:	2001      	movs	r0, #1
}
 80047c8:	b003      	add	sp, #12
 80047ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080047cc <LSM6DS3_X_Get_AxesRaw>:
{
 80047cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ce:	b083      	sub	sp, #12
  uint8_t regValue[6] = {0, 0, 0, 0, 0, 0};
 80047d0:	2400      	movs	r4, #0
{
 80047d2:	460d      	mov	r5, r1
  if ( LSM6DS3_ACC_GYRO_GetRawAccData( (void *)handle, ( uint8_t* )regValue ) == MEMS_ERROR )
 80047d4:	4669      	mov	r1, sp
  uint8_t regValue[6] = {0, 0, 0, 0, 0, 0};
 80047d6:	f8ad 4004 	strh.w	r4, [sp, #4]
 80047da:	9400      	str	r4, [sp, #0]
  if ( LSM6DS3_ACC_GYRO_GetRawAccData( (void *)handle, ( uint8_t* )regValue ) == MEMS_ERROR )
 80047dc:	f7fd fb0e 	bl	8001dfc <LSM6DS3_ACC_GYRO_GetRawAccData>
 80047e0:	b1b8      	cbz	r0, 8004812 <LSM6DS3_X_Get_AxesRaw+0x46>
  pData[2] = ( ( ( ( int16_t )regValue[5] ) << 8 ) + ( int16_t )regValue[4] );
 80047e2:	f89d 0005 	ldrb.w	r0, [sp, #5]
  pData[0] = ( ( ( ( int16_t )regValue[1] ) << 8 ) + ( int16_t )regValue[0] );
 80047e6:	f89d 7001 	ldrb.w	r7, [sp, #1]
 80047ea:	f89d 1000 	ldrb.w	r1, [sp]
  pData[1] = ( ( ( ( int16_t )regValue[3] ) << 8 ) + ( int16_t )regValue[2] );
 80047ee:	f89d 6003 	ldrb.w	r6, [sp, #3]
 80047f2:	f89d 2002 	ldrb.w	r2, [sp, #2]
  pData[2] = ( ( ( ( int16_t )regValue[5] ) << 8 ) + ( int16_t )regValue[4] );
 80047f6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  pData[0] = ( ( ( ( int16_t )regValue[1] ) << 8 ) + ( int16_t )regValue[0] );
 80047fa:	eb01 2107 	add.w	r1, r1, r7, lsl #8
  pData[2] = ( ( ( ( int16_t )regValue[5] ) << 8 ) + ( int16_t )regValue[4] );
 80047fe:	eb03 2300 	add.w	r3, r3, r0, lsl #8
  pData[1] = ( ( ( ( int16_t )regValue[3] ) << 8 ) + ( int16_t )regValue[2] );
 8004802:	eb02 2206 	add.w	r2, r2, r6, lsl #8
  return COMPONENT_OK;
 8004806:	4620      	mov	r0, r4
  value->AXIS_X = dataRaw[0];
 8004808:	8029      	strh	r1, [r5, #0]
  value->AXIS_Y = dataRaw[1];
 800480a:	806a      	strh	r2, [r5, #2]
  value->AXIS_Z = dataRaw[2];
 800480c:	80ab      	strh	r3, [r5, #4]
}
 800480e:	b003      	add	sp, #12
 8004810:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return COMPONENT_ERROR;
 8004812:	2001      	movs	r0, #1
}
 8004814:	b003      	add	sp, #12
 8004816:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004818 <LSM6DS3_G_Sensor_Enable>:
  if ( handle->isEnabled == 1 )
 8004818:	7983      	ldrb	r3, [r0, #6]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d041      	beq.n	80048a2 <LSM6DS3_G_Sensor_Enable+0x8a>
  LSM6DS3_G_Data_t *pComponentData = ( LSM6DS3_G_Data_t * )pData->pComponentData;
 800481e:	6883      	ldr	r3, [r0, #8]
  if ( LSM6DS3_G_Set_ODR_Value_When_Enabled( handle, pComponentData->Previous_ODR ) == COMPONENT_ERROR )
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	edd3 7a00 	vldr	s15, [r3]
            : ( odr <=  26.0f ) ? LSM6DS3_ACC_GYRO_ODR_G_26Hz
 8004826:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 800482a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800482e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8004832:	b510      	push	{r4, lr}
            : ( odr <=  26.0f ) ? LSM6DS3_ACC_GYRO_ODR_G_26Hz
 8004834:	d808      	bhi.n	8004848 <LSM6DS3_G_Sensor_Enable+0x30>
 8004836:	2110      	movs	r1, #16
 8004838:	4604      	mov	r4, r0
  if ( LSM6DS3_ACC_GYRO_W_ODR_G( (void *)handle, new_odr ) == MEMS_ERROR )
 800483a:	f7fd fb5f 	bl	8001efc <LSM6DS3_ACC_GYRO_W_ODR_G>
 800483e:	b390      	cbz	r0, 80048a6 <LSM6DS3_G_Sensor_Enable+0x8e>
  handle->isEnabled = 1;
 8004840:	2301      	movs	r3, #1
 8004842:	71a3      	strb	r3, [r4, #6]
  return COMPONENT_OK;
 8004844:	2000      	movs	r0, #0
}
 8004846:	bd10      	pop	{r4, pc}
            : ( odr <=  26.0f ) ? LSM6DS3_ACC_GYRO_ODR_G_26Hz
 8004848:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 800484c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004854:	d929      	bls.n	80048aa <LSM6DS3_G_Sensor_Enable+0x92>
 8004856:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80048c0 <LSM6DS3_G_Sensor_Enable+0xa8>
 800485a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800485e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004862:	d924      	bls.n	80048ae <LSM6DS3_G_Sensor_Enable+0x96>
 8004864:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80048c4 <LSM6DS3_G_Sensor_Enable+0xac>
 8004868:	eef4 7ac7 	vcmpe.f32	s15, s14
 800486c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004870:	d91f      	bls.n	80048b2 <LSM6DS3_G_Sensor_Enable+0x9a>
 8004872:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80048c8 <LSM6DS3_G_Sensor_Enable+0xb0>
 8004876:	eef4 7ac7 	vcmpe.f32	s15, s14
 800487a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800487e:	d91a      	bls.n	80048b6 <LSM6DS3_G_Sensor_Enable+0x9e>
 8004880:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80048cc <LSM6DS3_G_Sensor_Enable+0xb4>
 8004884:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800488c:	d915      	bls.n	80048ba <LSM6DS3_G_Sensor_Enable+0xa2>
 800488e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80048d0 <LSM6DS3_G_Sensor_Enable+0xb8>
 8004892:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800489a:	bf94      	ite	ls
 800489c:	2170      	movls	r1, #112	; 0x70
 800489e:	2180      	movhi	r1, #128	; 0x80
 80048a0:	e7ca      	b.n	8004838 <LSM6DS3_G_Sensor_Enable+0x20>
    return COMPONENT_OK;
 80048a2:	2000      	movs	r0, #0
}
 80048a4:	4770      	bx	lr
    return COMPONENT_ERROR;
 80048a6:	2001      	movs	r0, #1
}
 80048a8:	bd10      	pop	{r4, pc}
            : ( odr <=  26.0f ) ? LSM6DS3_ACC_GYRO_ODR_G_26Hz
 80048aa:	2120      	movs	r1, #32
 80048ac:	e7c4      	b.n	8004838 <LSM6DS3_G_Sensor_Enable+0x20>
 80048ae:	2130      	movs	r1, #48	; 0x30
 80048b0:	e7c2      	b.n	8004838 <LSM6DS3_G_Sensor_Enable+0x20>
 80048b2:	2140      	movs	r1, #64	; 0x40
 80048b4:	e7c0      	b.n	8004838 <LSM6DS3_G_Sensor_Enable+0x20>
 80048b6:	2150      	movs	r1, #80	; 0x50
 80048b8:	e7be      	b.n	8004838 <LSM6DS3_G_Sensor_Enable+0x20>
 80048ba:	2160      	movs	r1, #96	; 0x60
 80048bc:	e7bc      	b.n	8004838 <LSM6DS3_G_Sensor_Enable+0x20>
 80048be:	bf00      	nop
 80048c0:	42500000 	.word	0x42500000
 80048c4:	42d00000 	.word	0x42d00000
 80048c8:	43500000 	.word	0x43500000
 80048cc:	43d00000 	.word	0x43d00000
 80048d0:	44504000 	.word	0x44504000

080048d4 <LSM6DS3_X_Check_WhoAmI>:
{
 80048d4:	b510      	push	{r4, lr}
 80048d6:	b082      	sub	sp, #8
  uint8_t who_am_i = 0x00;
 80048d8:	a902      	add	r1, sp, #8
 80048da:	2300      	movs	r3, #0
 80048dc:	f801 3d01 	strb.w	r3, [r1, #-1]!
{
 80048e0:	4604      	mov	r4, r0
  if ( LSM6DS3_ACC_GYRO_R_WHO_AM_I( (void *)handle, ( uint8_t* )who_am_i ) == MEMS_ERROR )
 80048e2:	f7fd fa2d 	bl	8001d40 <LSM6DS3_ACC_GYRO_R_WHO_AM_I>
 80048e6:	b138      	cbz	r0, 80048f8 <LSM6DS3_X_Check_WhoAmI+0x24>
  if ( who_am_i != handle->who_am_i )
 80048e8:	7820      	ldrb	r0, [r4, #0]
 80048ea:	f89d 3007 	ldrb.w	r3, [sp, #7]
    return COMPONENT_ERROR;
 80048ee:	1ac0      	subs	r0, r0, r3
 80048f0:	bf18      	it	ne
 80048f2:	2001      	movne	r0, #1
}
 80048f4:	b002      	add	sp, #8
 80048f6:	bd10      	pop	{r4, pc}
    return COMPONENT_ERROR;
 80048f8:	2001      	movs	r0, #1
}
 80048fa:	b002      	add	sp, #8
 80048fc:	bd10      	pop	{r4, pc}
 80048fe:	bf00      	nop

08004900 <LSM6DS3_G_Check_WhoAmI>:
 8004900:	b510      	push	{r4, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	a902      	add	r1, sp, #8
 8004906:	2300      	movs	r3, #0
 8004908:	f801 3d01 	strb.w	r3, [r1, #-1]!
 800490c:	4604      	mov	r4, r0
 800490e:	f7fd fa17 	bl	8001d40 <LSM6DS3_ACC_GYRO_R_WHO_AM_I>
 8004912:	b138      	cbz	r0, 8004924 <LSM6DS3_G_Check_WhoAmI+0x24>
 8004914:	7820      	ldrb	r0, [r4, #0]
 8004916:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800491a:	1ac0      	subs	r0, r0, r3
 800491c:	bf18      	it	ne
 800491e:	2001      	movne	r0, #1
 8004920:	b002      	add	sp, #8
 8004922:	bd10      	pop	{r4, pc}
 8004924:	2001      	movs	r0, #1
 8004926:	b002      	add	sp, #8
 8004928:	bd10      	pop	{r4, pc}
 800492a:	bf00      	nop

0800492c <LSM6DS3_X_Sensor_Enable>:
  if ( handle->isEnabled == 1 )
 800492c:	7983      	ldrb	r3, [r0, #6]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d050      	beq.n	80049d4 <LSM6DS3_X_Sensor_Enable+0xa8>
  LSM6DS3_X_Data_t *pComponentData = ( LSM6DS3_X_Data_t * )pData->pComponentData;
 8004932:	6883      	ldr	r3, [r0, #8]
  if ( LSM6DS3_X_Set_ODR_Value_When_Enabled( handle, pComponentData->Previous_ODR ) == COMPONENT_ERROR )
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	edd3 7a00 	vldr	s15, [r3]
            : ( odr <=   26.0f ) ? LSM6DS3_ACC_GYRO_ODR_XL_26Hz
 800493a:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 800493e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8004946:	b510      	push	{r4, lr}
            : ( odr <=   26.0f ) ? LSM6DS3_ACC_GYRO_ODR_XL_26Hz
 8004948:	d809      	bhi.n	800495e <LSM6DS3_X_Sensor_Enable+0x32>
 800494a:	2110      	movs	r1, #16
 800494c:	4604      	mov	r4, r0
  if ( LSM6DS3_ACC_GYRO_W_ODR_XL( (void *)handle, new_odr ) == MEMS_ERROR )
 800494e:	f7fd fa71 	bl	8001e34 <LSM6DS3_ACC_GYRO_W_ODR_XL>
 8004952:	2800      	cmp	r0, #0
 8004954:	d040      	beq.n	80049d8 <LSM6DS3_X_Sensor_Enable+0xac>
  handle->isEnabled = 1;
 8004956:	2301      	movs	r3, #1
 8004958:	71a3      	strb	r3, [r4, #6]
  return COMPONENT_OK;
 800495a:	2000      	movs	r0, #0
}
 800495c:	bd10      	pop	{r4, pc}
            : ( odr <=   26.0f ) ? LSM6DS3_ACC_GYRO_ODR_XL_26Hz
 800495e:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8004962:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800496a:	d937      	bls.n	80049dc <LSM6DS3_X_Sensor_Enable+0xb0>
 800496c:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80049f8 <LSM6DS3_X_Sensor_Enable+0xcc>
 8004970:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004978:	d932      	bls.n	80049e0 <LSM6DS3_X_Sensor_Enable+0xb4>
 800497a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80049fc <LSM6DS3_X_Sensor_Enable+0xd0>
 800497e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004986:	d92d      	bls.n	80049e4 <LSM6DS3_X_Sensor_Enable+0xb8>
 8004988:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8004a00 <LSM6DS3_X_Sensor_Enable+0xd4>
 800498c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004990:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004994:	d928      	bls.n	80049e8 <LSM6DS3_X_Sensor_Enable+0xbc>
 8004996:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8004a04 <LSM6DS3_X_Sensor_Enable+0xd8>
 800499a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800499e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a2:	d923      	bls.n	80049ec <LSM6DS3_X_Sensor_Enable+0xc0>
 80049a4:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8004a08 <LSM6DS3_X_Sensor_Enable+0xdc>
 80049a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b0:	d91e      	bls.n	80049f0 <LSM6DS3_X_Sensor_Enable+0xc4>
 80049b2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8004a0c <LSM6DS3_X_Sensor_Enable+0xe0>
 80049b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049be:	d919      	bls.n	80049f4 <LSM6DS3_X_Sensor_Enable+0xc8>
 80049c0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8004a10 <LSM6DS3_X_Sensor_Enable+0xe4>
 80049c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049cc:	bf94      	ite	ls
 80049ce:	2190      	movls	r1, #144	; 0x90
 80049d0:	21a0      	movhi	r1, #160	; 0xa0
 80049d2:	e7bb      	b.n	800494c <LSM6DS3_X_Sensor_Enable+0x20>
    return COMPONENT_OK;
 80049d4:	2000      	movs	r0, #0
}
 80049d6:	4770      	bx	lr
    return COMPONENT_ERROR;
 80049d8:	2001      	movs	r0, #1
}
 80049da:	bd10      	pop	{r4, pc}
            : ( odr <=   26.0f ) ? LSM6DS3_ACC_GYRO_ODR_XL_26Hz
 80049dc:	2120      	movs	r1, #32
 80049de:	e7b5      	b.n	800494c <LSM6DS3_X_Sensor_Enable+0x20>
 80049e0:	2130      	movs	r1, #48	; 0x30
 80049e2:	e7b3      	b.n	800494c <LSM6DS3_X_Sensor_Enable+0x20>
 80049e4:	2140      	movs	r1, #64	; 0x40
 80049e6:	e7b1      	b.n	800494c <LSM6DS3_X_Sensor_Enable+0x20>
 80049e8:	2150      	movs	r1, #80	; 0x50
 80049ea:	e7af      	b.n	800494c <LSM6DS3_X_Sensor_Enable+0x20>
 80049ec:	2160      	movs	r1, #96	; 0x60
 80049ee:	e7ad      	b.n	800494c <LSM6DS3_X_Sensor_Enable+0x20>
 80049f0:	2170      	movs	r1, #112	; 0x70
 80049f2:	e7ab      	b.n	800494c <LSM6DS3_X_Sensor_Enable+0x20>
 80049f4:	2180      	movs	r1, #128	; 0x80
 80049f6:	e7a9      	b.n	800494c <LSM6DS3_X_Sensor_Enable+0x20>
 80049f8:	42500000 	.word	0x42500000
 80049fc:	42d00000 	.word	0x42d00000
 8004a00:	43500000 	.word	0x43500000
 8004a04:	43d00000 	.word	0x43d00000
 8004a08:	44504000 	.word	0x44504000
 8004a0c:	44cf8000 	.word	0x44cf8000
 8004a10:	45502000 	.word	0x45502000

08004a14 <LSM6DS3_X_Enable_Wake_Up_Detection>:
{
 8004a14:	b538      	push	{r3, r4, r5, lr}
  if(handle->isEnabled == 1)
 8004a16:	7983      	ldrb	r3, [r0, #6]
 8004a18:	2b01      	cmp	r3, #1
{
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	460d      	mov	r5, r1
  if(handle->isEnabled == 1)
 8004a1e:	d00a      	beq.n	8004a36 <LSM6DS3_X_Enable_Wake_Up_Detection+0x22>
  LSM6DS3_X_Data_t *pComponentData = ( LSM6DS3_X_Data_t * )pData->pComponentData;
 8004a20:	6883      	ldr	r3, [r0, #8]
  pComponentData->Previous_ODR = ( odr <=   13.0f ) ? 13.0f
 8004a22:	4a1a      	ldr	r2, [pc, #104]	; (8004a8c <LSM6DS3_X_Enable_Wake_Up_Detection+0x78>)
 8004a24:	681b      	ldr	r3, [r3, #0]
  if ( LSM6DS3_ACC_GYRO_W_FS_XL( (void *)handle, LSM6DS3_ACC_GYRO_FS_XL_2g ) == MEMS_ERROR )
 8004a26:	2100      	movs	r1, #0
  pComponentData->Previous_ODR = ( odr <=   13.0f ) ? 13.0f
 8004a28:	601a      	str	r2, [r3, #0]
  if ( LSM6DS3_ACC_GYRO_W_FS_XL( (void *)handle, LSM6DS3_ACC_GYRO_FS_XL_2g ) == MEMS_ERROR )
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	f7fd f9b4 	bl	8001d98 <LSM6DS3_ACC_GYRO_W_FS_XL>
 8004a30:	b960      	cbnz	r0, 8004a4c <LSM6DS3_X_Enable_Wake_Up_Detection+0x38>
    return COMPONENT_ERROR;
 8004a32:	2001      	movs	r0, #1
}
 8004a34:	bd38      	pop	{r3, r4, r5, pc}
  if ( LSM6DS3_ACC_GYRO_W_ODR_XL( (void *)handle, new_odr ) == MEMS_ERROR )
 8004a36:	2160      	movs	r1, #96	; 0x60
 8004a38:	f7fd f9fc 	bl	8001e34 <LSM6DS3_ACC_GYRO_W_ODR_XL>
 8004a3c:	2800      	cmp	r0, #0
 8004a3e:	d0f8      	beq.n	8004a32 <LSM6DS3_X_Enable_Wake_Up_Detection+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_FS_XL( (void *)handle, LSM6DS3_ACC_GYRO_FS_XL_2g ) == MEMS_ERROR )
 8004a40:	2100      	movs	r1, #0
 8004a42:	4620      	mov	r0, r4
 8004a44:	f7fd f9a8 	bl	8001d98 <LSM6DS3_ACC_GYRO_W_FS_XL>
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	d0f2      	beq.n	8004a32 <LSM6DS3_X_Enable_Wake_Up_Detection+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_WAKE_DUR( (void *)handle, 0x00 ) == MEMS_ERROR )
 8004a4c:	2100      	movs	r1, #0
 8004a4e:	4620      	mov	r0, r4
 8004a50:	f7fe f93e 	bl	8002cd0 <LSM6DS3_ACC_GYRO_W_WAKE_DUR>
 8004a54:	2800      	cmp	r0, #0
 8004a56:	d0ec      	beq.n	8004a32 <LSM6DS3_X_Enable_Wake_Up_Detection+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_WK_THS( (void *)handle, 0x02 ) == MEMS_ERROR )
 8004a58:	2102      	movs	r1, #2
 8004a5a:	4620      	mov	r0, r4
 8004a5c:	f7fe f8ac 	bl	8002bb8 <LSM6DS3_ACC_GYRO_W_WK_THS>
 8004a60:	2800      	cmp	r0, #0
 8004a62:	d0e6      	beq.n	8004a32 <LSM6DS3_X_Enable_Wake_Up_Detection+0x1e>
  switch (int_pin)
 8004a64:	b14d      	cbz	r5, 8004a7a <LSM6DS3_X_Enable_Wake_Up_Detection+0x66>
 8004a66:	2d01      	cmp	r5, #1
 8004a68:	d1e3      	bne.n	8004a32 <LSM6DS3_X_Enable_Wake_Up_Detection+0x1e>
    if ( LSM6DS3_ACC_GYRO_W_WUEvOnInt2( (void *)handle, LSM6DS3_ACC_GYRO_INT2_WU_ENABLED ) == MEMS_ERROR )
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	2120      	movs	r1, #32
 8004a6e:	f7fe fb05 	bl	800307c <LSM6DS3_ACC_GYRO_W_WUEvOnInt2>
    return COMPONENT_ERROR;
 8004a72:	fab0 f080 	clz	r0, r0
 8004a76:	0940      	lsrs	r0, r0, #5
}
 8004a78:	bd38      	pop	{r3, r4, r5, pc}
    if ( LSM6DS3_ACC_GYRO_W_WUEvOnInt1( (void *)handle, LSM6DS3_ACC_GYRO_INT1_WU_ENABLED ) == MEMS_ERROR )
 8004a7a:	4620      	mov	r0, r4
 8004a7c:	2120      	movs	r1, #32
 8004a7e:	f7fe fa31 	bl	8002ee4 <LSM6DS3_ACC_GYRO_W_WUEvOnInt1>
    return COMPONENT_ERROR;
 8004a82:	fab0 f080 	clz	r0, r0
 8004a86:	0940      	lsrs	r0, r0, #5
}
 8004a88:	bd38      	pop	{r3, r4, r5, pc}
 8004a8a:	bf00      	nop
 8004a8c:	43d00000 	.word	0x43d00000

08004a90 <LSM6DS3_X_Enable_6D_Orientation>:
{
 8004a90:	b538      	push	{r3, r4, r5, lr}
  if(handle->isEnabled == 1)
 8004a92:	7983      	ldrb	r3, [r0, #6]
 8004a94:	2b01      	cmp	r3, #1
{
 8004a96:	4604      	mov	r4, r0
 8004a98:	460d      	mov	r5, r1
  if(handle->isEnabled == 1)
 8004a9a:	d00a      	beq.n	8004ab2 <LSM6DS3_X_Enable_6D_Orientation+0x22>
  LSM6DS3_X_Data_t *pComponentData = ( LSM6DS3_X_Data_t * )pData->pComponentData;
 8004a9c:	6883      	ldr	r3, [r0, #8]
  pComponentData->Previous_ODR = ( odr <=   13.0f ) ? 13.0f
 8004a9e:	4a17      	ldr	r2, [pc, #92]	; (8004afc <LSM6DS3_X_Enable_6D_Orientation+0x6c>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
  if ( LSM6DS3_ACC_GYRO_W_FS_XL( (void *)handle, LSM6DS3_ACC_GYRO_FS_XL_2g ) == MEMS_ERROR )
 8004aa2:	2100      	movs	r1, #0
  pComponentData->Previous_ODR = ( odr <=   13.0f ) ? 13.0f
 8004aa4:	601a      	str	r2, [r3, #0]
  if ( LSM6DS3_ACC_GYRO_W_FS_XL( (void *)handle, LSM6DS3_ACC_GYRO_FS_XL_2g ) == MEMS_ERROR )
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	f7fd f976 	bl	8001d98 <LSM6DS3_ACC_GYRO_W_FS_XL>
 8004aac:	b960      	cbnz	r0, 8004ac8 <LSM6DS3_X_Enable_6D_Orientation+0x38>
    return COMPONENT_ERROR;
 8004aae:	2001      	movs	r0, #1
}
 8004ab0:	bd38      	pop	{r3, r4, r5, pc}
  if ( LSM6DS3_ACC_GYRO_W_ODR_XL( (void *)handle, new_odr ) == MEMS_ERROR )
 8004ab2:	2160      	movs	r1, #96	; 0x60
 8004ab4:	f7fd f9be 	bl	8001e34 <LSM6DS3_ACC_GYRO_W_ODR_XL>
 8004ab8:	2800      	cmp	r0, #0
 8004aba:	d0f8      	beq.n	8004aae <LSM6DS3_X_Enable_6D_Orientation+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_FS_XL( (void *)handle, LSM6DS3_ACC_GYRO_FS_XL_2g ) == MEMS_ERROR )
 8004abc:	2100      	movs	r1, #0
 8004abe:	4620      	mov	r0, r4
 8004ac0:	f7fd f96a 	bl	8001d98 <LSM6DS3_ACC_GYRO_W_FS_XL>
 8004ac4:	2800      	cmp	r0, #0
 8004ac6:	d0f2      	beq.n	8004aae <LSM6DS3_X_Enable_6D_Orientation+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_SIXD_THS( (void *)handle, LSM6DS3_ACC_GYRO_SIXD_THS_60_degree ) == MEMS_ERROR )
 8004ac8:	2140      	movs	r1, #64	; 0x40
 8004aca:	4620      	mov	r0, r4
 8004acc:	f7fd ffe8 	bl	8002aa0 <LSM6DS3_ACC_GYRO_W_SIXD_THS>
 8004ad0:	2800      	cmp	r0, #0
 8004ad2:	d0ec      	beq.n	8004aae <LSM6DS3_X_Enable_6D_Orientation+0x1e>
  switch (int_pin)
 8004ad4:	b14d      	cbz	r5, 8004aea <LSM6DS3_X_Enable_6D_Orientation+0x5a>
 8004ad6:	2d01      	cmp	r5, #1
 8004ad8:	d1e9      	bne.n	8004aae <LSM6DS3_X_Enable_6D_Orientation+0x1e>
    if ( LSM6DS3_ACC_GYRO_W_6DEvOnInt2( (void *)handle, LSM6DS3_ACC_GYRO_INT2_6D_ENABLED ) == MEMS_ERROR )
 8004ada:	4620      	mov	r0, r4
 8004adc:	2104      	movs	r1, #4
 8004ade:	f7fe fa67 	bl	8002fb0 <LSM6DS3_ACC_GYRO_W_6DEvOnInt2>
    return COMPONENT_ERROR;
 8004ae2:	fab0 f080 	clz	r0, r0
 8004ae6:	0940      	lsrs	r0, r0, #5
}
 8004ae8:	bd38      	pop	{r3, r4, r5, pc}
    if ( LSM6DS3_ACC_GYRO_W_6DEvOnInt1( (void *)handle, LSM6DS3_ACC_GYRO_INT1_6D_ENABLED ) == MEMS_ERROR )
 8004aea:	4620      	mov	r0, r4
 8004aec:	2104      	movs	r1, #4
 8004aee:	f7fe f993 	bl	8002e18 <LSM6DS3_ACC_GYRO_W_6DEvOnInt1>
    return COMPONENT_ERROR;
 8004af2:	fab0 f080 	clz	r0, r0
 8004af6:	0940      	lsrs	r0, r0, #5
}
 8004af8:	bd38      	pop	{r3, r4, r5, pc}
 8004afa:	bf00      	nop
 8004afc:	43d00000 	.word	0x43d00000

08004b00 <LSM6DS3_X_Enable_Free_Fall_Detection>:
{
 8004b00:	b538      	push	{r3, r4, r5, lr}
  if(handle->isEnabled == 1)
 8004b02:	7983      	ldrb	r3, [r0, #6]
 8004b04:	2b01      	cmp	r3, #1
{
 8004b06:	4604      	mov	r4, r0
 8004b08:	460d      	mov	r5, r1
  if(handle->isEnabled == 1)
 8004b0a:	d00a      	beq.n	8004b22 <LSM6DS3_X_Enable_Free_Fall_Detection+0x22>
  LSM6DS3_X_Data_t *pComponentData = ( LSM6DS3_X_Data_t * )pData->pComponentData;
 8004b0c:	6883      	ldr	r3, [r0, #8]
  pComponentData->Previous_ODR = ( odr <=   13.0f ) ? 13.0f
 8004b0e:	4a23      	ldr	r2, [pc, #140]	; (8004b9c <LSM6DS3_X_Enable_Free_Fall_Detection+0x9c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
  if ( LSM6DS3_ACC_GYRO_W_FS_XL( (void *)handle, LSM6DS3_ACC_GYRO_FS_XL_2g ) == MEMS_ERROR )
 8004b12:	2100      	movs	r1, #0
  pComponentData->Previous_ODR = ( odr <=   13.0f ) ? 13.0f
 8004b14:	601a      	str	r2, [r3, #0]
  if ( LSM6DS3_ACC_GYRO_W_FS_XL( (void *)handle, LSM6DS3_ACC_GYRO_FS_XL_2g ) == MEMS_ERROR )
 8004b16:	4620      	mov	r0, r4
 8004b18:	f7fd f93e 	bl	8001d98 <LSM6DS3_ACC_GYRO_W_FS_XL>
 8004b1c:	b960      	cbnz	r0, 8004b38 <LSM6DS3_X_Enable_Free_Fall_Detection+0x38>
    return COMPONENT_ERROR;
 8004b1e:	2001      	movs	r0, #1
}
 8004b20:	bd38      	pop	{r3, r4, r5, pc}
  if ( LSM6DS3_ACC_GYRO_W_ODR_XL( (void *)handle, new_odr ) == MEMS_ERROR )
 8004b22:	2160      	movs	r1, #96	; 0x60
 8004b24:	f7fd f986 	bl	8001e34 <LSM6DS3_ACC_GYRO_W_ODR_XL>
 8004b28:	2800      	cmp	r0, #0
 8004b2a:	d0f8      	beq.n	8004b1e <LSM6DS3_X_Enable_Free_Fall_Detection+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_FS_XL( (void *)handle, LSM6DS3_ACC_GYRO_FS_XL_2g ) == MEMS_ERROR )
 8004b2c:	2100      	movs	r1, #0
 8004b2e:	4620      	mov	r0, r4
 8004b30:	f7fd f932 	bl	8001d98 <LSM6DS3_ACC_GYRO_W_FS_XL>
 8004b34:	2800      	cmp	r0, #0
 8004b36:	d0f2      	beq.n	8004b1e <LSM6DS3_X_Enable_Free_Fall_Detection+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_FF_Duration( (void *)handle, 0x06 ) == MEMS_ERROR )
 8004b38:	2106      	movs	r1, #6
 8004b3a:	4620      	mov	r0, r4
 8004b3c:	f7fe f90e 	bl	8002d5c <LSM6DS3_ACC_GYRO_W_FF_Duration>
 8004b40:	2800      	cmp	r0, #0
 8004b42:	d0ec      	beq.n	8004b1e <LSM6DS3_X_Enable_Free_Fall_Detection+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_WAKE_DUR( (void *)handle, 0x00 ) == MEMS_ERROR )
 8004b44:	2100      	movs	r1, #0
 8004b46:	4620      	mov	r0, r4
 8004b48:	f7fe f8c2 	bl	8002cd0 <LSM6DS3_ACC_GYRO_W_WAKE_DUR>
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	d0e6      	beq.n	8004b1e <LSM6DS3_X_Enable_Free_Fall_Detection+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_TIMER_HR( (void *)handle, LSM6DS3_ACC_GYRO_TIMER_HR_6_4ms ) == MEMS_ERROR )
 8004b50:	2100      	movs	r1, #0
 8004b52:	4620      	mov	r0, r4
 8004b54:	f7fe f89a 	bl	8002c8c <LSM6DS3_ACC_GYRO_W_TIMER_HR>
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	d0e0      	beq.n	8004b1e <LSM6DS3_X_Enable_Free_Fall_Detection+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_SLEEP_DUR( (void *)handle, 0x00 ) == MEMS_ERROR )
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	4620      	mov	r0, r4
 8004b60:	f7fe f870 	bl	8002c44 <LSM6DS3_ACC_GYRO_W_SLEEP_DUR>
 8004b64:	2800      	cmp	r0, #0
 8004b66:	d0da      	beq.n	8004b1e <LSM6DS3_X_Enable_Free_Fall_Detection+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_FF_THS( (void *)handle, (LSM6DS3_ACC_GYRO_FF_THS_t)thr ) == MEMS_ERROR )
 8004b68:	2103      	movs	r1, #3
 8004b6a:	4620      	mov	r0, r4
 8004b6c:	f7fe f8d4 	bl	8002d18 <LSM6DS3_ACC_GYRO_W_FF_THS>
 8004b70:	2800      	cmp	r0, #0
 8004b72:	d0d4      	beq.n	8004b1e <LSM6DS3_X_Enable_Free_Fall_Detection+0x1e>
  switch (int_pin)
 8004b74:	b14d      	cbz	r5, 8004b8a <LSM6DS3_X_Enable_Free_Fall_Detection+0x8a>
 8004b76:	2d01      	cmp	r5, #1
 8004b78:	d1d1      	bne.n	8004b1e <LSM6DS3_X_Enable_Free_Fall_Detection+0x1e>
    if ( LSM6DS3_ACC_GYRO_W_FFEvOnInt2( (void *)handle, LSM6DS3_ACC_GYRO_INT2_FF_ENABLED ) == MEMS_ERROR )
 8004b7a:	4620      	mov	r0, r4
 8004b7c:	2110      	movs	r1, #16
 8004b7e:	f7fe fa5b 	bl	8003038 <LSM6DS3_ACC_GYRO_W_FFEvOnInt2>
    return COMPONENT_ERROR;
 8004b82:	fab0 f080 	clz	r0, r0
 8004b86:	0940      	lsrs	r0, r0, #5
}
 8004b88:	bd38      	pop	{r3, r4, r5, pc}
    if ( LSM6DS3_ACC_GYRO_W_FFEvOnInt1( (void *)handle, LSM6DS3_ACC_GYRO_INT1_FF_ENABLED ) == MEMS_ERROR )
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	2110      	movs	r1, #16
 8004b8e:	f7fe f987 	bl	8002ea0 <LSM6DS3_ACC_GYRO_W_FFEvOnInt1>
    return COMPONENT_ERROR;
 8004b92:	fab0 f080 	clz	r0, r0
 8004b96:	0940      	lsrs	r0, r0, #5
}
 8004b98:	bd38      	pop	{r3, r4, r5, pc}
 8004b9a:	bf00      	nop
 8004b9c:	43d00000 	.word	0x43d00000

08004ba0 <LSM6DS3_X_Enable_Single_Tap_Detection>:
{
 8004ba0:	b538      	push	{r3, r4, r5, lr}
  if(handle->isEnabled == 1)
 8004ba2:	7983      	ldrb	r3, [r0, #6]
 8004ba4:	2b01      	cmp	r3, #1
{
 8004ba6:	4604      	mov	r4, r0
 8004ba8:	460d      	mov	r5, r1
  if(handle->isEnabled == 1)
 8004baa:	d00a      	beq.n	8004bc2 <LSM6DS3_X_Enable_Single_Tap_Detection+0x22>
  LSM6DS3_X_Data_t *pComponentData = ( LSM6DS3_X_Data_t * )pData->pComponentData;
 8004bac:	6883      	ldr	r3, [r0, #8]
  pComponentData->Previous_ODR = ( odr <=   13.0f ) ? 13.0f
 8004bae:	4a26      	ldr	r2, [pc, #152]	; (8004c48 <LSM6DS3_X_Enable_Single_Tap_Detection+0xa8>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
  if ( LSM6DS3_ACC_GYRO_W_FS_XL( (void *)handle, LSM6DS3_ACC_GYRO_FS_XL_2g ) == MEMS_ERROR )
 8004bb2:	2100      	movs	r1, #0
  pComponentData->Previous_ODR = ( odr <=   13.0f ) ? 13.0f
 8004bb4:	601a      	str	r2, [r3, #0]
  if ( LSM6DS3_ACC_GYRO_W_FS_XL( (void *)handle, LSM6DS3_ACC_GYRO_FS_XL_2g ) == MEMS_ERROR )
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	f7fd f8ee 	bl	8001d98 <LSM6DS3_ACC_GYRO_W_FS_XL>
 8004bbc:	b960      	cbnz	r0, 8004bd8 <LSM6DS3_X_Enable_Single_Tap_Detection+0x38>
    return COMPONENT_ERROR;
 8004bbe:	2001      	movs	r0, #1
}
 8004bc0:	bd38      	pop	{r3, r4, r5, pc}
  if ( LSM6DS3_ACC_GYRO_W_ODR_XL( (void *)handle, new_odr ) == MEMS_ERROR )
 8004bc2:	2160      	movs	r1, #96	; 0x60
 8004bc4:	f7fd f936 	bl	8001e34 <LSM6DS3_ACC_GYRO_W_ODR_XL>
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	d0f8      	beq.n	8004bbe <LSM6DS3_X_Enable_Single_Tap_Detection+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_FS_XL( (void *)handle, LSM6DS3_ACC_GYRO_FS_XL_2g ) == MEMS_ERROR )
 8004bcc:	2100      	movs	r1, #0
 8004bce:	4620      	mov	r0, r4
 8004bd0:	f7fd f8e2 	bl	8001d98 <LSM6DS3_ACC_GYRO_W_FS_XL>
 8004bd4:	2800      	cmp	r0, #0
 8004bd6:	d0f2      	beq.n	8004bbe <LSM6DS3_X_Enable_Single_Tap_Detection+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_TAP_X_EN( (void *)handle, LSM6DS3_ACC_GYRO_TAP_X_EN_ENABLED ) == MEMS_ERROR )
 8004bd8:	2108      	movs	r1, #8
 8004bda:	4620      	mov	r0, r4
 8004bdc:	f7fd fed6 	bl	800298c <LSM6DS3_ACC_GYRO_W_TAP_X_EN>
 8004be0:	2800      	cmp	r0, #0
 8004be2:	d0ec      	beq.n	8004bbe <LSM6DS3_X_Enable_Single_Tap_Detection+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_TAP_Y_EN( (void *)handle, LSM6DS3_ACC_GYRO_TAP_Y_EN_ENABLED ) == MEMS_ERROR )
 8004be4:	2104      	movs	r1, #4
 8004be6:	4620      	mov	r0, r4
 8004be8:	f7fd feae 	bl	8002948 <LSM6DS3_ACC_GYRO_W_TAP_Y_EN>
 8004bec:	2800      	cmp	r0, #0
 8004bee:	d0e6      	beq.n	8004bbe <LSM6DS3_X_Enable_Single_Tap_Detection+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_TAP_Z_EN( (void *)handle, LSM6DS3_ACC_GYRO_TAP_Z_EN_ENABLED ) == MEMS_ERROR )
 8004bf0:	2102      	movs	r1, #2
 8004bf2:	4620      	mov	r0, r4
 8004bf4:	f7fd fe86 	bl	8002904 <LSM6DS3_ACC_GYRO_W_TAP_Z_EN>
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	d0e0      	beq.n	8004bbe <LSM6DS3_X_Enable_Single_Tap_Detection+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_TAP_THS( (void *)handle, thr ) == MEMS_ERROR )
 8004bfc:	2108      	movs	r1, #8
 8004bfe:	4620      	mov	r0, r4
 8004c00:	f7fd ff2a 	bl	8002a58 <LSM6DS3_ACC_GYRO_W_TAP_THS>
 8004c04:	2800      	cmp	r0, #0
 8004c06:	d0da      	beq.n	8004bbe <LSM6DS3_X_Enable_Single_Tap_Detection+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_SHOCK_Duration( (void *)handle, time ) == MEMS_ERROR )
 8004c08:	2102      	movs	r1, #2
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	f7fd ff6a 	bl	8002ae4 <LSM6DS3_ACC_GYRO_W_SHOCK_Duration>
 8004c10:	2800      	cmp	r0, #0
 8004c12:	d0d4      	beq.n	8004bbe <LSM6DS3_X_Enable_Single_Tap_Detection+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_QUIET_Duration( (void *)handle, time ) == MEMS_ERROR )
 8004c14:	2101      	movs	r1, #1
 8004c16:	4620      	mov	r0, r4
 8004c18:	f7fd ff88 	bl	8002b2c <LSM6DS3_ACC_GYRO_W_QUIET_Duration>
 8004c1c:	2800      	cmp	r0, #0
 8004c1e:	d0ce      	beq.n	8004bbe <LSM6DS3_X_Enable_Single_Tap_Detection+0x1e>
  switch (int_pin)
 8004c20:	b14d      	cbz	r5, 8004c36 <LSM6DS3_X_Enable_Single_Tap_Detection+0x96>
 8004c22:	2d01      	cmp	r5, #1
 8004c24:	d1cb      	bne.n	8004bbe <LSM6DS3_X_Enable_Single_Tap_Detection+0x1e>
    if ( LSM6DS3_ACC_GYRO_W_SingleTapOnInt2( (void *)handle, LSM6DS3_ACC_GYRO_INT2_SINGLE_TAP_ENABLED ) == MEMS_ERROR )
 8004c26:	4620      	mov	r0, r4
 8004c28:	2140      	movs	r1, #64	; 0x40
 8004c2a:	f7fe fa49 	bl	80030c0 <LSM6DS3_ACC_GYRO_W_SingleTapOnInt2>
    return COMPONENT_ERROR;
 8004c2e:	fab0 f080 	clz	r0, r0
 8004c32:	0940      	lsrs	r0, r0, #5
}
 8004c34:	bd38      	pop	{r3, r4, r5, pc}
    if ( LSM6DS3_ACC_GYRO_W_SingleTapOnInt1( (void *)handle, LSM6DS3_ACC_GYRO_INT1_SINGLE_TAP_ENABLED ) == MEMS_ERROR )
 8004c36:	4620      	mov	r0, r4
 8004c38:	2140      	movs	r1, #64	; 0x40
 8004c3a:	f7fe f975 	bl	8002f28 <LSM6DS3_ACC_GYRO_W_SingleTapOnInt1>
    return COMPONENT_ERROR;
 8004c3e:	fab0 f080 	clz	r0, r0
 8004c42:	0940      	lsrs	r0, r0, #5
}
 8004c44:	bd38      	pop	{r3, r4, r5, pc}
 8004c46:	bf00      	nop
 8004c48:	43d00000 	.word	0x43d00000

08004c4c <LSM6DS3_G_Get_Axes>:
{
 8004c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c50:	b085      	sub	sp, #20
  uint8_t regValue[6] = {0, 0, 0, 0, 0, 0};
 8004c52:	2300      	movs	r3, #0
{
 8004c54:	460e      	mov	r6, r1
  if ( LSM6DS3_ACC_GYRO_GetRawGyroData( (void *)handle, ( uint8_t* )regValue ) == MEMS_ERROR )
 8004c56:	a902      	add	r1, sp, #8
  uint8_t regValue[6] = {0, 0, 0, 0, 0, 0};
 8004c58:	f8ad 300c 	strh.w	r3, [sp, #12]
 8004c5c:	9302      	str	r3, [sp, #8]
{
 8004c5e:	4680      	mov	r8, r0
  if ( LSM6DS3_ACC_GYRO_GetRawGyroData( (void *)handle, ( uint8_t* )regValue ) == MEMS_ERROR )
 8004c60:	f7fd f97e 	bl	8001f60 <LSM6DS3_ACC_GYRO_GetRawGyroData>
 8004c64:	b338      	cbz	r0, 8004cb6 <LSM6DS3_G_Get_Axes+0x6a>
  if ( LSM6DS3_ACC_GYRO_R_FS_125( (void *)handle, &fullScale125 ) == MEMS_ERROR )
 8004c66:	f10d 0107 	add.w	r1, sp, #7
 8004c6a:	4640      	mov	r0, r8
  pData[0] = ( ( ( ( int16_t )regValue[1] ) << 8 ) + ( int16_t )regValue[0] );
 8004c6c:	f89d b009 	ldrb.w	fp, [sp, #9]
 8004c70:	f89d 7008 	ldrb.w	r7, [sp, #8]
  pData[1] = ( ( ( ( int16_t )regValue[3] ) << 8 ) + ( int16_t )regValue[2] );
 8004c74:	f89d a00b 	ldrb.w	sl, [sp, #11]
 8004c78:	f89d 500a 	ldrb.w	r5, [sp, #10]
  pData[2] = ( ( ( ( int16_t )regValue[5] ) << 8 ) + ( int16_t )regValue[4] );
 8004c7c:	f89d 900d 	ldrb.w	r9, [sp, #13]
 8004c80:	f89d 400c 	ldrb.w	r4, [sp, #12]
  if ( LSM6DS3_ACC_GYRO_R_FS_125( (void *)handle, &fullScale125 ) == MEMS_ERROR )
 8004c84:	f7fd f9aa 	bl	8001fdc <LSM6DS3_ACC_GYRO_R_FS_125>
 8004c88:	b1a8      	cbz	r0, 8004cb6 <LSM6DS3_G_Get_Axes+0x6a>
  if ( fullScale125 == LSM6DS3_ACC_GYRO_FS_125_ENABLED )
 8004c8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d015      	beq.n	8004cbe <LSM6DS3_G_Get_Axes+0x72>
    if ( LSM6DS3_ACC_GYRO_R_FS_G( (void *)handle, &fullScale ) == MEMS_ERROR )
 8004c92:	a902      	add	r1, sp, #8
 8004c94:	4640      	mov	r0, r8
 8004c96:	f7fd f921 	bl	8001edc <LSM6DS3_ACC_GYRO_R_FS_G>
 8004c9a:	b160      	cbz	r0, 8004cb6 <LSM6DS3_G_Get_Axes+0x6a>
    switch( fullScale )
 8004c9c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004ca0:	2b0c      	cmp	r3, #12
 8004ca2:	d808      	bhi.n	8004cb6 <LSM6DS3_G_Get_Axes+0x6a>
 8004ca4:	e8df f003 	tbb	[pc, r3]
 8004ca8:	07070741 	.word	0x07070741
 8004cac:	0707073e 	.word	0x0707073e
 8004cb0:	0707073b 	.word	0x0707073b
 8004cb4:	38          	.byte	0x38
 8004cb5:	00          	.byte	0x00
    return COMPONENT_ERROR;
 8004cb6:	2001      	movs	r0, #1
}
 8004cb8:	b005      	add	sp, #20
 8004cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    *sensitivity = ( float )LSM6DS3_GYRO_SENSITIVITY_FOR_FS_125DPS;
 8004cbe:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 8004d30 <LSM6DS3_G_Get_Axes+0xe4>
  pData[0] = ( ( ( ( int16_t )regValue[1] ) << 8 ) + ( int16_t )regValue[0] );
 8004cc2:	eb07 270b 	add.w	r7, r7, fp, lsl #8
  angular_velocity->AXIS_X = ( int32_t )( dataRaw[0] * sensitivity );
 8004cc6:	b23f      	sxth	r7, r7
 8004cc8:	ee07 7a90 	vmov	s15, r7
  pData[1] = ( ( ( ( int16_t )regValue[3] ) << 8 ) + ( int16_t )regValue[2] );
 8004ccc:	eb05 250a 	add.w	r5, r5, sl, lsl #8
  angular_velocity->AXIS_Y = ( int32_t )( dataRaw[1] * sensitivity );
 8004cd0:	b22d      	sxth	r5, r5
  pData[2] = ( ( ( ( int16_t )regValue[5] ) << 8 ) + ( int16_t )regValue[4] );
 8004cd2:	eb04 2409 	add.w	r4, r4, r9, lsl #8
  angular_velocity->AXIS_X = ( int32_t )( dataRaw[0] * sensitivity );
 8004cd6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  angular_velocity->AXIS_Y = ( int32_t )( dataRaw[1] * sensitivity );
 8004cda:	ee07 5a90 	vmov	s15, r5
  angular_velocity->AXIS_Z = ( int32_t )( dataRaw[2] * sensitivity );
 8004cde:	b224      	sxth	r4, r4
  angular_velocity->AXIS_Y = ( int32_t )( dataRaw[1] * sensitivity );
 8004ce0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  angular_velocity->AXIS_Z = ( int32_t )( dataRaw[2] * sensitivity );
 8004ce4:	ee07 4a90 	vmov	s15, r4
 8004ce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  angular_velocity->AXIS_X = ( int32_t )( dataRaw[0] * sensitivity );
 8004cec:	ee66 6a86 	vmul.f32	s13, s13, s12
  angular_velocity->AXIS_Y = ( int32_t )( dataRaw[1] * sensitivity );
 8004cf0:	ee27 7a06 	vmul.f32	s14, s14, s12
  angular_velocity->AXIS_Z = ( int32_t )( dataRaw[2] * sensitivity );
 8004cf4:	ee67 7a86 	vmul.f32	s15, s15, s12
  angular_velocity->AXIS_X = ( int32_t )( dataRaw[0] * sensitivity );
 8004cf8:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  angular_velocity->AXIS_Y = ( int32_t )( dataRaw[1] * sensitivity );
 8004cfc:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  angular_velocity->AXIS_Z = ( int32_t )( dataRaw[2] * sensitivity );
 8004d00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  return COMPONENT_OK;
 8004d04:	2000      	movs	r0, #0
  angular_velocity->AXIS_X = ( int32_t )( dataRaw[0] * sensitivity );
 8004d06:	edc6 6a00 	vstr	s13, [r6]
  angular_velocity->AXIS_Y = ( int32_t )( dataRaw[1] * sensitivity );
 8004d0a:	ed86 7a01 	vstr	s14, [r6, #4]
  angular_velocity->AXIS_Z = ( int32_t )( dataRaw[2] * sensitivity );
 8004d0e:	edc6 7a02 	vstr	s15, [r6, #8]
}
 8004d12:	b005      	add	sp, #20
 8004d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *sensitivity = ( float )LSM6DS3_GYRO_SENSITIVITY_FOR_FS_2000DPS;
 8004d18:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8004d34 <LSM6DS3_G_Get_Axes+0xe8>
 8004d1c:	e7d1      	b.n	8004cc2 <LSM6DS3_G_Get_Axes+0x76>
        *sensitivity = ( float )LSM6DS3_GYRO_SENSITIVITY_FOR_FS_1000DPS;
 8004d1e:	ed9f 6a06 	vldr	s12, [pc, #24]	; 8004d38 <LSM6DS3_G_Get_Axes+0xec>
 8004d22:	e7ce      	b.n	8004cc2 <LSM6DS3_G_Get_Axes+0x76>
        *sensitivity = ( float )LSM6DS3_GYRO_SENSITIVITY_FOR_FS_500DPS;
 8004d24:	ed9f 6a05 	vldr	s12, [pc, #20]	; 8004d3c <LSM6DS3_G_Get_Axes+0xf0>
 8004d28:	e7cb      	b.n	8004cc2 <LSM6DS3_G_Get_Axes+0x76>
        *sensitivity = ( float )LSM6DS3_GYRO_SENSITIVITY_FOR_FS_245DPS;
 8004d2a:	ed9f 6a05 	vldr	s12, [pc, #20]	; 8004d40 <LSM6DS3_G_Get_Axes+0xf4>
 8004d2e:	e7c8      	b.n	8004cc2 <LSM6DS3_G_Get_Axes+0x76>
 8004d30:	408c0000 	.word	0x408c0000
 8004d34:	428c0000 	.word	0x428c0000
 8004d38:	420c0000 	.word	0x420c0000
 8004d3c:	418c0000 	.word	0x418c0000
 8004d40:	410c0000 	.word	0x410c0000

08004d44 <LSM6DS3_FIFO_G_Get_Axis>:
{
 8004d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d46:	b083      	sub	sp, #12
 8004d48:	460e      	mov	r6, r1
  if ( LSM6DS3_ACC_GYRO_Get_GetFIFOData( handle, aData ) == MEMS_ERROR )
 8004d4a:	a901      	add	r1, sp, #4
{
 8004d4c:	4605      	mov	r5, r0
  if ( LSM6DS3_ACC_GYRO_Get_GetFIFOData( handle, aData ) == MEMS_ERROR )
 8004d4e:	f7fe f9d9 	bl	8003104 <LSM6DS3_ACC_GYRO_Get_GetFIFOData>
 8004d52:	b910      	cbnz	r0, 8004d5a <LSM6DS3_FIFO_G_Get_Axis+0x16>
    return COMPONENT_ERROR;
 8004d54:	2001      	movs	r0, #1
}
 8004d56:	b003      	add	sp, #12
 8004d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ( LSM6DS3_ACC_GYRO_R_FS_125( (void *)handle, &fullScale125 ) == MEMS_ERROR )
 8004d5a:	f10d 0102 	add.w	r1, sp, #2
 8004d5e:	4628      	mov	r0, r5
  rawData = ( aData[1] << 8 ) | aData[0];
 8004d60:	f89d 7005 	ldrb.w	r7, [sp, #5]
 8004d64:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if ( LSM6DS3_ACC_GYRO_R_FS_125( (void *)handle, &fullScale125 ) == MEMS_ERROR )
 8004d68:	f7fd f938 	bl	8001fdc <LSM6DS3_ACC_GYRO_R_FS_125>
 8004d6c:	2800      	cmp	r0, #0
 8004d6e:	d0f1      	beq.n	8004d54 <LSM6DS3_FIFO_G_Get_Axis+0x10>
  if ( fullScale125 == LSM6DS3_ACC_GYRO_FS_125_ENABLED )
 8004d70:	f89d 3002 	ldrb.w	r3, [sp, #2]
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d027      	beq.n	8004dc8 <LSM6DS3_FIFO_G_Get_Axis+0x84>
    if ( LSM6DS3_ACC_GYRO_R_FS_G( (void *)handle, &fullScale ) == MEMS_ERROR )
 8004d78:	4628      	mov	r0, r5
 8004d7a:	f10d 0103 	add.w	r1, sp, #3
 8004d7e:	f7fd f8ad 	bl	8001edc <LSM6DS3_ACC_GYRO_R_FS_G>
 8004d82:	2800      	cmp	r0, #0
 8004d84:	d0e6      	beq.n	8004d54 <LSM6DS3_FIFO_G_Get_Axis+0x10>
    switch( fullScale )
 8004d86:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004d8a:	2b0c      	cmp	r3, #12
 8004d8c:	d8e2      	bhi.n	8004d54 <LSM6DS3_FIFO_G_Get_Axis+0x10>
 8004d8e:	a201      	add	r2, pc, #4	; (adr r2, 8004d94 <LSM6DS3_FIFO_G_Get_Axis+0x50>)
 8004d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d94:	08004dff 	.word	0x08004dff
 8004d98:	08004d55 	.word	0x08004d55
 8004d9c:	08004d55 	.word	0x08004d55
 8004da0:	08004d55 	.word	0x08004d55
 8004da4:	08004df9 	.word	0x08004df9
 8004da8:	08004d55 	.word	0x08004d55
 8004dac:	08004d55 	.word	0x08004d55
 8004db0:	08004d55 	.word	0x08004d55
 8004db4:	08004df3 	.word	0x08004df3
 8004db8:	08004d55 	.word	0x08004d55
 8004dbc:	08004d55 	.word	0x08004d55
 8004dc0:	08004d55 	.word	0x08004d55
 8004dc4:	08004ded 	.word	0x08004ded
    *sensitivity = ( float )LSM6DS3_GYRO_SENSITIVITY_FOR_FS_125DPS;
 8004dc8:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004e04 <LSM6DS3_FIFO_G_Get_Axis+0xc0>
  rawData = ( aData[1] << 8 ) | aData[0];
 8004dcc:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  *angular_velocity = ( int32_t )( rawData * sensitivity );
 8004dd0:	b224      	sxth	r4, r4
 8004dd2:	ee07 4a90 	vmov	s15, r4
 8004dd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return COMPONENT_OK;
 8004dda:	2000      	movs	r0, #0
  *angular_velocity = ( int32_t )( rawData * sensitivity );
 8004ddc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004de0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004de4:	edc6 7a00 	vstr	s15, [r6]
}
 8004de8:	b003      	add	sp, #12
 8004dea:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *sensitivity = ( float )LSM6DS3_GYRO_SENSITIVITY_FOR_FS_2000DPS;
 8004dec:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004e08 <LSM6DS3_FIFO_G_Get_Axis+0xc4>
 8004df0:	e7ec      	b.n	8004dcc <LSM6DS3_FIFO_G_Get_Axis+0x88>
        *sensitivity = ( float )LSM6DS3_GYRO_SENSITIVITY_FOR_FS_1000DPS;
 8004df2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004e0c <LSM6DS3_FIFO_G_Get_Axis+0xc8>
 8004df6:	e7e9      	b.n	8004dcc <LSM6DS3_FIFO_G_Get_Axis+0x88>
        *sensitivity = ( float )LSM6DS3_GYRO_SENSITIVITY_FOR_FS_500DPS;
 8004df8:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004e10 <LSM6DS3_FIFO_G_Get_Axis+0xcc>
 8004dfc:	e7e6      	b.n	8004dcc <LSM6DS3_FIFO_G_Get_Axis+0x88>
        *sensitivity = ( float )LSM6DS3_GYRO_SENSITIVITY_FOR_FS_245DPS;
 8004dfe:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004e14 <LSM6DS3_FIFO_G_Get_Axis+0xd0>
 8004e02:	e7e3      	b.n	8004dcc <LSM6DS3_FIFO_G_Get_Axis+0x88>
 8004e04:	408c0000 	.word	0x408c0000
 8004e08:	428c0000 	.word	0x428c0000
 8004e0c:	420c0000 	.word	0x420c0000
 8004e10:	418c0000 	.word	0x418c0000
 8004e14:	410c0000 	.word	0x410c0000

08004e18 <LSM6DS3_X_Get_Axes>:
{
 8004e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e1c:	b082      	sub	sp, #8
  uint8_t regValue[6] = {0, 0, 0, 0, 0, 0};
 8004e1e:	2300      	movs	r3, #0
{
 8004e20:	460e      	mov	r6, r1
  if ( LSM6DS3_ACC_GYRO_GetRawAccData( (void *)handle, ( uint8_t* )regValue ) == MEMS_ERROR )
 8004e22:	4669      	mov	r1, sp
  uint8_t regValue[6] = {0, 0, 0, 0, 0, 0};
 8004e24:	f8ad 3004 	strh.w	r3, [sp, #4]
 8004e28:	9300      	str	r3, [sp, #0]
{
 8004e2a:	4604      	mov	r4, r0
  if ( LSM6DS3_ACC_GYRO_GetRawAccData( (void *)handle, ( uint8_t* )regValue ) == MEMS_ERROR )
 8004e2c:	f7fc ffe6 	bl	8001dfc <LSM6DS3_ACC_GYRO_GetRawAccData>
 8004e30:	b1e8      	cbz	r0, 8004e6e <LSM6DS3_X_Get_Axes+0x56>
  if ( LSM6DS3_ACC_GYRO_R_FS_XL( (void *)handle, &fullScale ) == MEMS_ERROR )
 8004e32:	4620      	mov	r0, r4
 8004e34:	4669      	mov	r1, sp
  pData[0] = ( ( ( ( int16_t )regValue[1] ) << 8 ) + ( int16_t )regValue[0] );
 8004e36:	f89d a001 	ldrb.w	sl, [sp, #1]
 8004e3a:	f89d 7000 	ldrb.w	r7, [sp]
  pData[1] = ( ( ( ( int16_t )regValue[3] ) << 8 ) + ( int16_t )regValue[2] );
 8004e3e:	f89d 9003 	ldrb.w	r9, [sp, #3]
 8004e42:	f89d 5002 	ldrb.w	r5, [sp, #2]
  pData[2] = ( ( ( ( int16_t )regValue[5] ) << 8 ) + ( int16_t )regValue[4] );
 8004e46:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8004e4a:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if ( LSM6DS3_ACC_GYRO_R_FS_XL( (void *)handle, &fullScale ) == MEMS_ERROR )
 8004e4e:	f7fc ffc5 	bl	8001ddc <LSM6DS3_ACC_GYRO_R_FS_XL>
 8004e52:	b160      	cbz	r0, 8004e6e <LSM6DS3_X_Get_Axes+0x56>
  switch( fullScale )
 8004e54:	f89d 3000 	ldrb.w	r3, [sp]
 8004e58:	2b0c      	cmp	r3, #12
 8004e5a:	d808      	bhi.n	8004e6e <LSM6DS3_X_Get_Axes+0x56>
 8004e5c:	e8df f003 	tbb	[pc, r3]
 8004e60:	0707073e 	.word	0x0707073e
 8004e64:	0707073b 	.word	0x0707073b
 8004e68:	07070738 	.word	0x07070738
 8004e6c:	0b          	.byte	0x0b
 8004e6d:	00          	.byte	0x00
    return COMPONENT_ERROR;
 8004e6e:	2001      	movs	r0, #1
}
 8004e70:	b002      	add	sp, #8
 8004e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      *sensitivity = ( float )LSM6DS3_ACC_SENSITIVITY_FOR_FS_8G;
 8004e76:	ed9f 6a1b 	vldr	s12, [pc, #108]	; 8004ee4 <LSM6DS3_X_Get_Axes+0xcc>
  pData[0] = ( ( ( ( int16_t )regValue[1] ) << 8 ) + ( int16_t )regValue[0] );
 8004e7a:	eb07 270a 	add.w	r7, r7, sl, lsl #8
  acceleration->AXIS_X = ( int32_t )( dataRaw[0] * sensitivity );
 8004e7e:	b23f      	sxth	r7, r7
 8004e80:	ee07 7a90 	vmov	s15, r7
  pData[1] = ( ( ( ( int16_t )regValue[3] ) << 8 ) + ( int16_t )regValue[2] );
 8004e84:	eb05 2509 	add.w	r5, r5, r9, lsl #8
  acceleration->AXIS_Y = ( int32_t )( dataRaw[1] * sensitivity );
 8004e88:	b22d      	sxth	r5, r5
  pData[2] = ( ( ( ( int16_t )regValue[5] ) << 8 ) + ( int16_t )regValue[4] );
 8004e8a:	eb04 2408 	add.w	r4, r4, r8, lsl #8
  acceleration->AXIS_X = ( int32_t )( dataRaw[0] * sensitivity );
 8004e8e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
  acceleration->AXIS_Y = ( int32_t )( dataRaw[1] * sensitivity );
 8004e92:	ee07 5a90 	vmov	s15, r5
  acceleration->AXIS_Z = ( int32_t )( dataRaw[2] * sensitivity );
 8004e96:	b224      	sxth	r4, r4
  acceleration->AXIS_Y = ( int32_t )( dataRaw[1] * sensitivity );
 8004e98:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  acceleration->AXIS_Z = ( int32_t )( dataRaw[2] * sensitivity );
 8004e9c:	ee07 4a90 	vmov	s15, r4
 8004ea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  acceleration->AXIS_X = ( int32_t )( dataRaw[0] * sensitivity );
 8004ea4:	ee66 6a86 	vmul.f32	s13, s13, s12
  acceleration->AXIS_Y = ( int32_t )( dataRaw[1] * sensitivity );
 8004ea8:	ee27 7a06 	vmul.f32	s14, s14, s12
  acceleration->AXIS_Z = ( int32_t )( dataRaw[2] * sensitivity );
 8004eac:	ee67 7a86 	vmul.f32	s15, s15, s12
  acceleration->AXIS_X = ( int32_t )( dataRaw[0] * sensitivity );
 8004eb0:	eefd 6ae6 	vcvt.s32.f32	s13, s13
  acceleration->AXIS_Y = ( int32_t )( dataRaw[1] * sensitivity );
 8004eb4:	eebd 7ac7 	vcvt.s32.f32	s14, s14
  acceleration->AXIS_Z = ( int32_t )( dataRaw[2] * sensitivity );
 8004eb8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  return COMPONENT_OK;
 8004ebc:	2000      	movs	r0, #0
  acceleration->AXIS_X = ( int32_t )( dataRaw[0] * sensitivity );
 8004ebe:	edc6 6a00 	vstr	s13, [r6]
  acceleration->AXIS_Y = ( int32_t )( dataRaw[1] * sensitivity );
 8004ec2:	ed86 7a01 	vstr	s14, [r6, #4]
  acceleration->AXIS_Z = ( int32_t )( dataRaw[2] * sensitivity );
 8004ec6:	edc6 7a02 	vstr	s15, [r6, #8]
}
 8004eca:	b002      	add	sp, #8
 8004ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      *sensitivity = ( float )LSM6DS3_ACC_SENSITIVITY_FOR_FS_4G;
 8004ed0:	ed9f 6a05 	vldr	s12, [pc, #20]	; 8004ee8 <LSM6DS3_X_Get_Axes+0xd0>
 8004ed4:	e7d1      	b.n	8004e7a <LSM6DS3_X_Get_Axes+0x62>
      *sensitivity = ( float )LSM6DS3_ACC_SENSITIVITY_FOR_FS_16G;
 8004ed6:	ed9f 6a05 	vldr	s12, [pc, #20]	; 8004eec <LSM6DS3_X_Get_Axes+0xd4>
 8004eda:	e7ce      	b.n	8004e7a <LSM6DS3_X_Get_Axes+0x62>
      *sensitivity = ( float )LSM6DS3_ACC_SENSITIVITY_FOR_FS_2G;
 8004edc:	ed9f 6a04 	vldr	s12, [pc, #16]	; 8004ef0 <LSM6DS3_X_Get_Axes+0xd8>
 8004ee0:	e7cb      	b.n	8004e7a <LSM6DS3_X_Get_Axes+0x62>
 8004ee2:	bf00      	nop
 8004ee4:	3e79db23 	.word	0x3e79db23
 8004ee8:	3df9db23 	.word	0x3df9db23
 8004eec:	3ef9db23 	.word	0x3ef9db23
 8004ef0:	3d79db23 	.word	0x3d79db23

08004ef4 <LSM6DS3_FIFO_X_Get_Axis>:
{
 8004ef4:	b570      	push	{r4, r5, r6, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	460d      	mov	r5, r1
  if ( LSM6DS3_ACC_GYRO_Get_GetFIFOData( handle, aData ) == MEMS_ERROR )
 8004efa:	a901      	add	r1, sp, #4
{
 8004efc:	4604      	mov	r4, r0
  if ( LSM6DS3_ACC_GYRO_Get_GetFIFOData( handle, aData ) == MEMS_ERROR )
 8004efe:	f7fe f901 	bl	8003104 <LSM6DS3_ACC_GYRO_Get_GetFIFOData>
 8004f02:	b910      	cbnz	r0, 8004f0a <LSM6DS3_FIFO_X_Get_Axis+0x16>
    return COMPONENT_ERROR;
 8004f04:	2001      	movs	r0, #1
}
 8004f06:	b002      	add	sp, #8
 8004f08:	bd70      	pop	{r4, r5, r6, pc}
  if ( LSM6DS3_ACC_GYRO_R_FS_XL( (void *)handle, &fullScale ) == MEMS_ERROR )
 8004f0a:	4620      	mov	r0, r4
 8004f0c:	f10d 0103 	add.w	r1, sp, #3
  rawData = ( aData[1] << 8 ) | aData[0];
 8004f10:	f89d 6005 	ldrb.w	r6, [sp, #5]
 8004f14:	f89d 4004 	ldrb.w	r4, [sp, #4]
  if ( LSM6DS3_ACC_GYRO_R_FS_XL( (void *)handle, &fullScale ) == MEMS_ERROR )
 8004f18:	f7fc ff60 	bl	8001ddc <LSM6DS3_ACC_GYRO_R_FS_XL>
 8004f1c:	2800      	cmp	r0, #0
 8004f1e:	d0f1      	beq.n	8004f04 <LSM6DS3_FIFO_X_Get_Axis+0x10>
  switch( fullScale )
 8004f20:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004f24:	2b0c      	cmp	r3, #12
 8004f26:	d8ed      	bhi.n	8004f04 <LSM6DS3_FIFO_X_Get_Axis+0x10>
 8004f28:	a201      	add	r2, pc, #4	; (adr r2, 8004f30 <LSM6DS3_FIFO_X_Get_Axis+0x3c>)
 8004f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2e:	bf00      	nop
 8004f30:	08004f95 	.word	0x08004f95
 8004f34:	08004f05 	.word	0x08004f05
 8004f38:	08004f05 	.word	0x08004f05
 8004f3c:	08004f05 	.word	0x08004f05
 8004f40:	08004f8f 	.word	0x08004f8f
 8004f44:	08004f05 	.word	0x08004f05
 8004f48:	08004f05 	.word	0x08004f05
 8004f4c:	08004f05 	.word	0x08004f05
 8004f50:	08004f89 	.word	0x08004f89
 8004f54:	08004f05 	.word	0x08004f05
 8004f58:	08004f05 	.word	0x08004f05
 8004f5c:	08004f05 	.word	0x08004f05
 8004f60:	08004f65 	.word	0x08004f65
      *sensitivity = ( float )LSM6DS3_ACC_SENSITIVITY_FOR_FS_8G;
 8004f64:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004f9c <LSM6DS3_FIFO_X_Get_Axis+0xa8>
  rawData = ( aData[1] << 8 ) | aData[0];
 8004f68:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  *acceleration = ( int32_t )( rawData * sensitivity );
 8004f6c:	b224      	sxth	r4, r4
 8004f6e:	ee07 4a90 	vmov	s15, r4
 8004f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  return COMPONENT_OK;
 8004f76:	2000      	movs	r0, #0
  *acceleration = ( int32_t )( rawData * sensitivity );
 8004f78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004f7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004f80:	edc5 7a00 	vstr	s15, [r5]
}
 8004f84:	b002      	add	sp, #8
 8004f86:	bd70      	pop	{r4, r5, r6, pc}
      *sensitivity = ( float )LSM6DS3_ACC_SENSITIVITY_FOR_FS_4G;
 8004f88:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004fa0 <LSM6DS3_FIFO_X_Get_Axis+0xac>
 8004f8c:	e7ec      	b.n	8004f68 <LSM6DS3_FIFO_X_Get_Axis+0x74>
      *sensitivity = ( float )LSM6DS3_ACC_SENSITIVITY_FOR_FS_16G;
 8004f8e:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8004fa4 <LSM6DS3_FIFO_X_Get_Axis+0xb0>
 8004f92:	e7e9      	b.n	8004f68 <LSM6DS3_FIFO_X_Get_Axis+0x74>
      *sensitivity = ( float )LSM6DS3_ACC_SENSITIVITY_FOR_FS_2G;
 8004f94:	ed9f 7a04 	vldr	s14, [pc, #16]	; 8004fa8 <LSM6DS3_FIFO_X_Get_Axis+0xb4>
 8004f98:	e7e6      	b.n	8004f68 <LSM6DS3_FIFO_X_Get_Axis+0x74>
 8004f9a:	bf00      	nop
 8004f9c:	3e79db23 	.word	0x3e79db23
 8004fa0:	3df9db23 	.word	0x3df9db23
 8004fa4:	3ef9db23 	.word	0x3ef9db23
 8004fa8:	3d79db23 	.word	0x3d79db23

08004fac <LSM6DS3_G_Sensor_Disable>:
  if ( handle->isEnabled == 0 )
 8004fac:	7983      	ldrb	r3, [r0, #6]
 8004fae:	b90b      	cbnz	r3, 8004fb4 <LSM6DS3_G_Sensor_Disable+0x8>
    return COMPONENT_OK;
 8004fb0:	4618      	mov	r0, r3
}
 8004fb2:	4770      	bx	lr
{
 8004fb4:	b530      	push	{r4, r5, lr}
  LSM6DS3_G_Data_t *pComponentData = ( LSM6DS3_G_Data_t * )pData->pComponentData;
 8004fb6:	6883      	ldr	r3, [r0, #8]
{
 8004fb8:	b083      	sub	sp, #12
  if ( LSM6DS3_ACC_GYRO_R_ODR_G( (void *)handle, &odr_low_level ) == MEMS_ERROR )
 8004fba:	f10d 0107 	add.w	r1, sp, #7
 8004fbe:	4604      	mov	r4, r0
  LSM6DS3_G_Data_t *pComponentData = ( LSM6DS3_G_Data_t * )pData->pComponentData;
 8004fc0:	681d      	ldr	r5, [r3, #0]
  if ( LSM6DS3_ACC_GYRO_R_ODR_G( (void *)handle, &odr_low_level ) == MEMS_ERROR )
 8004fc2:	f7fc ffbd 	bl	8001f40 <LSM6DS3_ACC_GYRO_R_ODR_G>
 8004fc6:	b170      	cbz	r0, 8004fe6 <LSM6DS3_G_Sensor_Disable+0x3a>
  switch( odr_low_level )
 8004fc8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004fcc:	2b40      	cmp	r3, #64	; 0x40
 8004fce:	d033      	beq.n	8005038 <LSM6DS3_G_Sensor_Disable+0x8c>
 8004fd0:	d80c      	bhi.n	8004fec <LSM6DS3_G_Sensor_Disable+0x40>
 8004fd2:	2b10      	cmp	r3, #16
 8004fd4:	d02d      	beq.n	8005032 <LSM6DS3_G_Sensor_Disable+0x86>
 8004fd6:	d91d      	bls.n	8005014 <LSM6DS3_G_Sensor_Disable+0x68>
 8004fd8:	2b20      	cmp	r3, #32
 8004fda:	d027      	beq.n	800502c <LSM6DS3_G_Sensor_Disable+0x80>
 8004fdc:	2b30      	cmp	r3, #48	; 0x30
 8004fde:	d12e      	bne.n	800503e <LSM6DS3_G_Sensor_Disable+0x92>
      *odr =   52.0f;
 8004fe0:	4b1a      	ldr	r3, [pc, #104]	; (800504c <LSM6DS3_G_Sensor_Disable+0xa0>)
 8004fe2:	602b      	str	r3, [r5, #0]
 8004fe4:	e00b      	b.n	8004ffe <LSM6DS3_G_Sensor_Disable+0x52>
    return COMPONENT_ERROR;
 8004fe6:	2001      	movs	r0, #1
}
 8004fe8:	b003      	add	sp, #12
 8004fea:	bd30      	pop	{r4, r5, pc}
  switch( odr_low_level )
 8004fec:	2b60      	cmp	r3, #96	; 0x60
 8004fee:	d01a      	beq.n	8005026 <LSM6DS3_G_Sensor_Disable+0x7a>
 8004ff0:	d914      	bls.n	800501c <LSM6DS3_G_Sensor_Disable+0x70>
 8004ff2:	2b70      	cmp	r3, #112	; 0x70
 8004ff4:	d027      	beq.n	8005046 <LSM6DS3_G_Sensor_Disable+0x9a>
 8004ff6:	2b80      	cmp	r3, #128	; 0x80
 8004ff8:	d121      	bne.n	800503e <LSM6DS3_G_Sensor_Disable+0x92>
      *odr = 1660.0f;
 8004ffa:	4b15      	ldr	r3, [pc, #84]	; (8005050 <LSM6DS3_G_Sensor_Disable+0xa4>)
 8004ffc:	602b      	str	r3, [r5, #0]
  if ( LSM6DS3_ACC_GYRO_W_ODR_G( (void *)handle, LSM6DS3_ACC_GYRO_ODR_G_POWER_DOWN ) == MEMS_ERROR )
 8004ffe:	2100      	movs	r1, #0
 8005000:	4620      	mov	r0, r4
 8005002:	f7fc ff7b 	bl	8001efc <LSM6DS3_ACC_GYRO_W_ODR_G>
 8005006:	2800      	cmp	r0, #0
 8005008:	d0ed      	beq.n	8004fe6 <LSM6DS3_G_Sensor_Disable+0x3a>
  handle->isEnabled = 0;
 800500a:	2300      	movs	r3, #0
  return COMPONENT_OK;
 800500c:	4618      	mov	r0, r3
  handle->isEnabled = 0;
 800500e:	71a3      	strb	r3, [r4, #6]
}
 8005010:	b003      	add	sp, #12
 8005012:	bd30      	pop	{r4, r5, pc}
  switch( odr_low_level )
 8005014:	b99b      	cbnz	r3, 800503e <LSM6DS3_G_Sensor_Disable+0x92>
      *odr =    0.0f;
 8005016:	2300      	movs	r3, #0
 8005018:	602b      	str	r3, [r5, #0]
 800501a:	e7f0      	b.n	8004ffe <LSM6DS3_G_Sensor_Disable+0x52>
  switch( odr_low_level )
 800501c:	2b50      	cmp	r3, #80	; 0x50
 800501e:	d10e      	bne.n	800503e <LSM6DS3_G_Sensor_Disable+0x92>
      *odr =  208.0f;
 8005020:	4b0c      	ldr	r3, [pc, #48]	; (8005054 <LSM6DS3_G_Sensor_Disable+0xa8>)
 8005022:	602b      	str	r3, [r5, #0]
 8005024:	e7eb      	b.n	8004ffe <LSM6DS3_G_Sensor_Disable+0x52>
      *odr =  416.0f;
 8005026:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <LSM6DS3_G_Sensor_Disable+0xac>)
 8005028:	602b      	str	r3, [r5, #0]
 800502a:	e7e8      	b.n	8004ffe <LSM6DS3_G_Sensor_Disable+0x52>
      *odr =   26.0f;
 800502c:	4b0b      	ldr	r3, [pc, #44]	; (800505c <LSM6DS3_G_Sensor_Disable+0xb0>)
 800502e:	602b      	str	r3, [r5, #0]
 8005030:	e7e5      	b.n	8004ffe <LSM6DS3_G_Sensor_Disable+0x52>
      *odr =   13.0f;
 8005032:	4b0b      	ldr	r3, [pc, #44]	; (8005060 <LSM6DS3_G_Sensor_Disable+0xb4>)
 8005034:	602b      	str	r3, [r5, #0]
 8005036:	e7e2      	b.n	8004ffe <LSM6DS3_G_Sensor_Disable+0x52>
      *odr =  104.0f;
 8005038:	4b0a      	ldr	r3, [pc, #40]	; (8005064 <LSM6DS3_G_Sensor_Disable+0xb8>)
 800503a:	602b      	str	r3, [r5, #0]
 800503c:	e7df      	b.n	8004ffe <LSM6DS3_G_Sensor_Disable+0x52>
      *odr =   -1.0f;
 800503e:	4b0a      	ldr	r3, [pc, #40]	; (8005068 <LSM6DS3_G_Sensor_Disable+0xbc>)
 8005040:	602b      	str	r3, [r5, #0]
    return COMPONENT_ERROR;
 8005042:	2001      	movs	r0, #1
 8005044:	e7d0      	b.n	8004fe8 <LSM6DS3_G_Sensor_Disable+0x3c>
      *odr =  833.0f;
 8005046:	4b09      	ldr	r3, [pc, #36]	; (800506c <LSM6DS3_G_Sensor_Disable+0xc0>)
 8005048:	602b      	str	r3, [r5, #0]
 800504a:	e7d8      	b.n	8004ffe <LSM6DS3_G_Sensor_Disable+0x52>
 800504c:	42500000 	.word	0x42500000
 8005050:	44cf8000 	.word	0x44cf8000
 8005054:	43500000 	.word	0x43500000
 8005058:	43d00000 	.word	0x43d00000
 800505c:	41d00000 	.word	0x41d00000
 8005060:	41500000 	.word	0x41500000
 8005064:	42d00000 	.word	0x42d00000
 8005068:	bf800000 	.word	0xbf800000
 800506c:	44504000 	.word	0x44504000

08005070 <LSM6DS3_X_Sensor_Disable>:
  if ( handle->isEnabled == 0 )
 8005070:	7983      	ldrb	r3, [r0, #6]
 8005072:	b90b      	cbnz	r3, 8005078 <LSM6DS3_X_Sensor_Disable+0x8>
    return COMPONENT_OK;
 8005074:	4618      	mov	r0, r3
}
 8005076:	4770      	bx	lr
{
 8005078:	b530      	push	{r4, r5, lr}
  LSM6DS3_X_Data_t *pComponentData = ( LSM6DS3_X_Data_t * )pData->pComponentData;
 800507a:	6883      	ldr	r3, [r0, #8]
{
 800507c:	b083      	sub	sp, #12
  if ( LSM6DS3_ACC_GYRO_R_ODR_XL( (void *)handle, &odr_low_level ) == MEMS_ERROR )
 800507e:	f10d 0107 	add.w	r1, sp, #7
 8005082:	4604      	mov	r4, r0
  LSM6DS3_X_Data_t *pComponentData = ( LSM6DS3_X_Data_t * )pData->pComponentData;
 8005084:	681d      	ldr	r5, [r3, #0]
  if ( LSM6DS3_ACC_GYRO_R_ODR_XL( (void *)handle, &odr_low_level ) == MEMS_ERROR )
 8005086:	f7fc fef7 	bl	8001e78 <LSM6DS3_ACC_GYRO_R_ODR_XL>
 800508a:	b170      	cbz	r0, 80050aa <LSM6DS3_X_Sensor_Disable+0x3a>
  switch( odr_low_level )
 800508c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005090:	2b50      	cmp	r3, #80	; 0x50
 8005092:	d03e      	beq.n	8005112 <LSM6DS3_X_Sensor_Disable+0xa2>
 8005094:	d80c      	bhi.n	80050b0 <LSM6DS3_X_Sensor_Disable+0x40>
 8005096:	2b20      	cmp	r3, #32
 8005098:	d038      	beq.n	800510c <LSM6DS3_X_Sensor_Disable+0x9c>
 800509a:	d924      	bls.n	80050e6 <LSM6DS3_X_Sensor_Disable+0x76>
 800509c:	2b30      	cmp	r3, #48	; 0x30
 800509e:	d02b      	beq.n	80050f8 <LSM6DS3_X_Sensor_Disable+0x88>
 80050a0:	2b40      	cmp	r3, #64	; 0x40
 80050a2:	d12c      	bne.n	80050fe <LSM6DS3_X_Sensor_Disable+0x8e>
      *odr =   104.0f;
 80050a4:	4b1f      	ldr	r3, [pc, #124]	; (8005124 <LSM6DS3_X_Sensor_Disable+0xb4>)
 80050a6:	602b      	str	r3, [r5, #0]
 80050a8:	e00b      	b.n	80050c2 <LSM6DS3_X_Sensor_Disable+0x52>
    return COMPONENT_ERROR;
 80050aa:	2001      	movs	r0, #1
}
 80050ac:	b003      	add	sp, #12
 80050ae:	bd30      	pop	{r4, r5, pc}
  switch( odr_low_level )
 80050b0:	2b80      	cmp	r3, #128	; 0x80
 80050b2:	d01e      	beq.n	80050f2 <LSM6DS3_X_Sensor_Disable+0x82>
 80050b4:	d810      	bhi.n	80050d8 <LSM6DS3_X_Sensor_Disable+0x68>
 80050b6:	2b60      	cmp	r3, #96	; 0x60
 80050b8:	d025      	beq.n	8005106 <LSM6DS3_X_Sensor_Disable+0x96>
 80050ba:	2b70      	cmp	r3, #112	; 0x70
 80050bc:	d11f      	bne.n	80050fe <LSM6DS3_X_Sensor_Disable+0x8e>
      *odr =   833.0f;
 80050be:	4b1a      	ldr	r3, [pc, #104]	; (8005128 <LSM6DS3_X_Sensor_Disable+0xb8>)
 80050c0:	602b      	str	r3, [r5, #0]
  if ( LSM6DS3_ACC_GYRO_W_ODR_XL( (void *)handle, LSM6DS3_ACC_GYRO_ODR_XL_POWER_DOWN ) == MEMS_ERROR )
 80050c2:	2100      	movs	r1, #0
 80050c4:	4620      	mov	r0, r4
 80050c6:	f7fc feb5 	bl	8001e34 <LSM6DS3_ACC_GYRO_W_ODR_XL>
 80050ca:	2800      	cmp	r0, #0
 80050cc:	d0ed      	beq.n	80050aa <LSM6DS3_X_Sensor_Disable+0x3a>
  handle->isEnabled = 0;
 80050ce:	2300      	movs	r3, #0
  return COMPONENT_OK;
 80050d0:	4618      	mov	r0, r3
  handle->isEnabled = 0;
 80050d2:	71a3      	strb	r3, [r4, #6]
}
 80050d4:	b003      	add	sp, #12
 80050d6:	bd30      	pop	{r4, r5, pc}
  switch( odr_low_level )
 80050d8:	2b90      	cmp	r3, #144	; 0x90
 80050da:	d01d      	beq.n	8005118 <LSM6DS3_X_Sensor_Disable+0xa8>
 80050dc:	2ba0      	cmp	r3, #160	; 0xa0
 80050de:	d10e      	bne.n	80050fe <LSM6DS3_X_Sensor_Disable+0x8e>
      *odr =  6660.0f;
 80050e0:	4b12      	ldr	r3, [pc, #72]	; (800512c <LSM6DS3_X_Sensor_Disable+0xbc>)
 80050e2:	602b      	str	r3, [r5, #0]
 80050e4:	e7ed      	b.n	80050c2 <LSM6DS3_X_Sensor_Disable+0x52>
  switch( odr_low_level )
 80050e6:	b1d3      	cbz	r3, 800511e <LSM6DS3_X_Sensor_Disable+0xae>
 80050e8:	2b10      	cmp	r3, #16
 80050ea:	d108      	bne.n	80050fe <LSM6DS3_X_Sensor_Disable+0x8e>
      *odr =    13.0f;
 80050ec:	4b10      	ldr	r3, [pc, #64]	; (8005130 <LSM6DS3_X_Sensor_Disable+0xc0>)
 80050ee:	602b      	str	r3, [r5, #0]
 80050f0:	e7e7      	b.n	80050c2 <LSM6DS3_X_Sensor_Disable+0x52>
      *odr =  1660.0f;
 80050f2:	4b10      	ldr	r3, [pc, #64]	; (8005134 <LSM6DS3_X_Sensor_Disable+0xc4>)
 80050f4:	602b      	str	r3, [r5, #0]
 80050f6:	e7e4      	b.n	80050c2 <LSM6DS3_X_Sensor_Disable+0x52>
      *odr =    52.0f;
 80050f8:	4b0f      	ldr	r3, [pc, #60]	; (8005138 <LSM6DS3_X_Sensor_Disable+0xc8>)
 80050fa:	602b      	str	r3, [r5, #0]
 80050fc:	e7e1      	b.n	80050c2 <LSM6DS3_X_Sensor_Disable+0x52>
      *odr =    -1.0f;
 80050fe:	4b0f      	ldr	r3, [pc, #60]	; (800513c <LSM6DS3_X_Sensor_Disable+0xcc>)
 8005100:	602b      	str	r3, [r5, #0]
    return COMPONENT_ERROR;
 8005102:	2001      	movs	r0, #1
 8005104:	e7d2      	b.n	80050ac <LSM6DS3_X_Sensor_Disable+0x3c>
      *odr =   416.0f;
 8005106:	4b0e      	ldr	r3, [pc, #56]	; (8005140 <LSM6DS3_X_Sensor_Disable+0xd0>)
 8005108:	602b      	str	r3, [r5, #0]
 800510a:	e7da      	b.n	80050c2 <LSM6DS3_X_Sensor_Disable+0x52>
      *odr =    26.0f;
 800510c:	4b0d      	ldr	r3, [pc, #52]	; (8005144 <LSM6DS3_X_Sensor_Disable+0xd4>)
 800510e:	602b      	str	r3, [r5, #0]
 8005110:	e7d7      	b.n	80050c2 <LSM6DS3_X_Sensor_Disable+0x52>
      *odr =   208.0f;
 8005112:	4b0d      	ldr	r3, [pc, #52]	; (8005148 <LSM6DS3_X_Sensor_Disable+0xd8>)
 8005114:	602b      	str	r3, [r5, #0]
 8005116:	e7d4      	b.n	80050c2 <LSM6DS3_X_Sensor_Disable+0x52>
      *odr =  3330.0f;
 8005118:	4b0c      	ldr	r3, [pc, #48]	; (800514c <LSM6DS3_X_Sensor_Disable+0xdc>)
 800511a:	602b      	str	r3, [r5, #0]
 800511c:	e7d1      	b.n	80050c2 <LSM6DS3_X_Sensor_Disable+0x52>
      *odr =     0.0f;
 800511e:	2300      	movs	r3, #0
 8005120:	602b      	str	r3, [r5, #0]
 8005122:	e7ce      	b.n	80050c2 <LSM6DS3_X_Sensor_Disable+0x52>
 8005124:	42d00000 	.word	0x42d00000
 8005128:	44504000 	.word	0x44504000
 800512c:	45d02000 	.word	0x45d02000
 8005130:	41500000 	.word	0x41500000
 8005134:	44cf8000 	.word	0x44cf8000
 8005138:	42500000 	.word	0x42500000
 800513c:	bf800000 	.word	0xbf800000
 8005140:	43d00000 	.word	0x43d00000
 8005144:	41d00000 	.word	0x41d00000
 8005148:	43500000 	.word	0x43500000
 800514c:	45502000 	.word	0x45502000

08005150 <LSM6DS3_G_DeInit>:
{
 8005150:	b570      	push	{r4, r5, r6, lr}
 8005152:	b082      	sub	sp, #8
  uint8_t who_am_i = 0x00;
 8005154:	ac02      	add	r4, sp, #8
  LSM6DS3_G_Data_t *pComponentData = ( LSM6DS3_G_Data_t * )pData->pComponentData;
 8005156:	6882      	ldr	r2, [r0, #8]
  uint8_t who_am_i = 0x00;
 8005158:	2300      	movs	r3, #0
  LSM6DS3_G_Data_t *pComponentData = ( LSM6DS3_G_Data_t * )pData->pComponentData;
 800515a:	6816      	ldr	r6, [r2, #0]
  uint8_t who_am_i = 0x00;
 800515c:	f804 3d01 	strb.w	r3, [r4, #-1]!
  if ( LSM6DS3_ACC_GYRO_R_WHO_AM_I( (void *)handle, ( uint8_t* )who_am_i ) == MEMS_ERROR )
 8005160:	4621      	mov	r1, r4
{
 8005162:	4605      	mov	r5, r0
  if ( LSM6DS3_ACC_GYRO_R_WHO_AM_I( (void *)handle, ( uint8_t* )who_am_i ) == MEMS_ERROR )
 8005164:	f7fc fdec 	bl	8001d40 <LSM6DS3_ACC_GYRO_R_WHO_AM_I>
 8005168:	b120      	cbz	r0, 8005174 <LSM6DS3_G_DeInit+0x24>
  if ( who_am_i != handle->who_am_i )
 800516a:	782a      	ldrb	r2, [r5, #0]
 800516c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005170:	429a      	cmp	r2, r3
 8005172:	d002      	beq.n	800517a <LSM6DS3_G_DeInit+0x2a>
    return COMPONENT_ERROR;
 8005174:	2001      	movs	r0, #1
}
 8005176:	b002      	add	sp, #8
 8005178:	bd70      	pop	{r4, r5, r6, pc}
  if ( handle->isEnabled == 0 )
 800517a:	79ab      	ldrb	r3, [r5, #6]
 800517c:	b933      	cbnz	r3, 800518c <LSM6DS3_G_DeInit+0x3c>
  handle->isInitialized = 0;
 800517e:	2300      	movs	r3, #0
  pComponentData->Previous_ODR = 0.0f;
 8005180:	2200      	movs	r2, #0
  return COMPONENT_OK;
 8005182:	4618      	mov	r0, r3
  pComponentData->Previous_ODR = 0.0f;
 8005184:	6032      	str	r2, [r6, #0]
  handle->isInitialized = 0;
 8005186:	716b      	strb	r3, [r5, #5]
}
 8005188:	b002      	add	sp, #8
 800518a:	bd70      	pop	{r4, r5, r6, pc}
  LSM6DS3_G_Data_t *pComponentData = ( LSM6DS3_G_Data_t * )pData->pComponentData;
 800518c:	68ab      	ldr	r3, [r5, #8]
  if ( LSM6DS3_ACC_GYRO_R_ODR_G( (void *)handle, &odr_low_level ) == MEMS_ERROR )
 800518e:	4621      	mov	r1, r4
 8005190:	4628      	mov	r0, r5
  LSM6DS3_G_Data_t *pComponentData = ( LSM6DS3_G_Data_t * )pData->pComponentData;
 8005192:	681c      	ldr	r4, [r3, #0]
  if ( LSM6DS3_ACC_GYRO_R_ODR_G( (void *)handle, &odr_low_level ) == MEMS_ERROR )
 8005194:	f7fc fed4 	bl	8001f40 <LSM6DS3_ACC_GYRO_R_ODR_G>
 8005198:	2800      	cmp	r0, #0
 800519a:	d0eb      	beq.n	8005174 <LSM6DS3_G_DeInit+0x24>
  switch( odr_low_level )
 800519c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80051a0:	2b40      	cmp	r3, #64	; 0x40
 80051a2:	d02c      	beq.n	80051fe <LSM6DS3_G_DeInit+0xae>
 80051a4:	d811      	bhi.n	80051ca <LSM6DS3_G_DeInit+0x7a>
 80051a6:	2b10      	cmp	r3, #16
 80051a8:	d02f      	beq.n	800520a <LSM6DS3_G_DeInit+0xba>
 80051aa:	d918      	bls.n	80051de <LSM6DS3_G_DeInit+0x8e>
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	d023      	beq.n	80051f8 <LSM6DS3_G_DeInit+0xa8>
 80051b0:	2b30      	cmp	r3, #48	; 0x30
 80051b2:	d11d      	bne.n	80051f0 <LSM6DS3_G_DeInit+0xa0>
      *odr =   52.0f;
 80051b4:	4b18      	ldr	r3, [pc, #96]	; (8005218 <LSM6DS3_G_DeInit+0xc8>)
 80051b6:	6023      	str	r3, [r4, #0]
  if ( LSM6DS3_ACC_GYRO_W_ODR_G( (void *)handle, LSM6DS3_ACC_GYRO_ODR_G_POWER_DOWN ) == MEMS_ERROR )
 80051b8:	2100      	movs	r1, #0
 80051ba:	4628      	mov	r0, r5
 80051bc:	f7fc fe9e 	bl	8001efc <LSM6DS3_ACC_GYRO_W_ODR_G>
 80051c0:	2800      	cmp	r0, #0
 80051c2:	d0d7      	beq.n	8005174 <LSM6DS3_G_DeInit+0x24>
  handle->isEnabled = 0;
 80051c4:	2300      	movs	r3, #0
 80051c6:	71ab      	strb	r3, [r5, #6]
 80051c8:	e7d9      	b.n	800517e <LSM6DS3_G_DeInit+0x2e>
  switch( odr_low_level )
 80051ca:	2b60      	cmp	r3, #96	; 0x60
 80051cc:	d01a      	beq.n	8005204 <LSM6DS3_G_DeInit+0xb4>
 80051ce:	d90a      	bls.n	80051e6 <LSM6DS3_G_DeInit+0x96>
 80051d0:	2b70      	cmp	r3, #112	; 0x70
 80051d2:	d01d      	beq.n	8005210 <LSM6DS3_G_DeInit+0xc0>
 80051d4:	2b80      	cmp	r3, #128	; 0x80
 80051d6:	d10b      	bne.n	80051f0 <LSM6DS3_G_DeInit+0xa0>
      *odr = 1660.0f;
 80051d8:	4b10      	ldr	r3, [pc, #64]	; (800521c <LSM6DS3_G_DeInit+0xcc>)
 80051da:	6023      	str	r3, [r4, #0]
 80051dc:	e7ec      	b.n	80051b8 <LSM6DS3_G_DeInit+0x68>
  switch( odr_low_level )
 80051de:	b93b      	cbnz	r3, 80051f0 <LSM6DS3_G_DeInit+0xa0>
      *odr =    0.0f;
 80051e0:	2300      	movs	r3, #0
 80051e2:	6023      	str	r3, [r4, #0]
 80051e4:	e7e8      	b.n	80051b8 <LSM6DS3_G_DeInit+0x68>
  switch( odr_low_level )
 80051e6:	2b50      	cmp	r3, #80	; 0x50
 80051e8:	d102      	bne.n	80051f0 <LSM6DS3_G_DeInit+0xa0>
      *odr =  208.0f;
 80051ea:	4b0d      	ldr	r3, [pc, #52]	; (8005220 <LSM6DS3_G_DeInit+0xd0>)
 80051ec:	6023      	str	r3, [r4, #0]
 80051ee:	e7e3      	b.n	80051b8 <LSM6DS3_G_DeInit+0x68>
      *odr =   -1.0f;
 80051f0:	4b0c      	ldr	r3, [pc, #48]	; (8005224 <LSM6DS3_G_DeInit+0xd4>)
 80051f2:	6023      	str	r3, [r4, #0]
    return COMPONENT_ERROR;
 80051f4:	2001      	movs	r0, #1
 80051f6:	e7be      	b.n	8005176 <LSM6DS3_G_DeInit+0x26>
      *odr =   26.0f;
 80051f8:	4b0b      	ldr	r3, [pc, #44]	; (8005228 <LSM6DS3_G_DeInit+0xd8>)
 80051fa:	6023      	str	r3, [r4, #0]
 80051fc:	e7dc      	b.n	80051b8 <LSM6DS3_G_DeInit+0x68>
      *odr =  104.0f;
 80051fe:	4b0b      	ldr	r3, [pc, #44]	; (800522c <LSM6DS3_G_DeInit+0xdc>)
 8005200:	6023      	str	r3, [r4, #0]
 8005202:	e7d9      	b.n	80051b8 <LSM6DS3_G_DeInit+0x68>
      *odr =  416.0f;
 8005204:	4b0a      	ldr	r3, [pc, #40]	; (8005230 <LSM6DS3_G_DeInit+0xe0>)
 8005206:	6023      	str	r3, [r4, #0]
 8005208:	e7d6      	b.n	80051b8 <LSM6DS3_G_DeInit+0x68>
      *odr =   13.0f;
 800520a:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <LSM6DS3_G_DeInit+0xe4>)
 800520c:	6023      	str	r3, [r4, #0]
 800520e:	e7d3      	b.n	80051b8 <LSM6DS3_G_DeInit+0x68>
      *odr =  833.0f;
 8005210:	4b09      	ldr	r3, [pc, #36]	; (8005238 <LSM6DS3_G_DeInit+0xe8>)
 8005212:	6023      	str	r3, [r4, #0]
 8005214:	e7d0      	b.n	80051b8 <LSM6DS3_G_DeInit+0x68>
 8005216:	bf00      	nop
 8005218:	42500000 	.word	0x42500000
 800521c:	44cf8000 	.word	0x44cf8000
 8005220:	43500000 	.word	0x43500000
 8005224:	bf800000 	.word	0xbf800000
 8005228:	41d00000 	.word	0x41d00000
 800522c:	42d00000 	.word	0x42d00000
 8005230:	43d00000 	.word	0x43d00000
 8005234:	41500000 	.word	0x41500000
 8005238:	44504000 	.word	0x44504000

0800523c <LSM6DS3_X_DeInit>:
{
 800523c:	b570      	push	{r4, r5, r6, lr}
 800523e:	b082      	sub	sp, #8
  uint8_t who_am_i = 0x00;
 8005240:	a902      	add	r1, sp, #8
  LSM6DS3_X_Data_t *pComponentData = ( LSM6DS3_X_Data_t * )pData->pComponentData;
 8005242:	6883      	ldr	r3, [r0, #8]
  uint8_t who_am_i = 0x00;
 8005244:	2500      	movs	r5, #0
  LSM6DS3_X_Data_t *pComponentData = ( LSM6DS3_X_Data_t * )pData->pComponentData;
 8005246:	681e      	ldr	r6, [r3, #0]
  uint8_t who_am_i = 0x00;
 8005248:	f801 5d01 	strb.w	r5, [r1, #-1]!
{
 800524c:	4604      	mov	r4, r0
  if ( LSM6DS3_ACC_GYRO_R_WHO_AM_I( (void *)handle, ( uint8_t* )who_am_i ) == MEMS_ERROR )
 800524e:	f7fc fd77 	bl	8001d40 <LSM6DS3_ACC_GYRO_R_WHO_AM_I>
 8005252:	b120      	cbz	r0, 800525e <LSM6DS3_X_DeInit+0x22>
  if ( who_am_i != handle->who_am_i )
 8005254:	7822      	ldrb	r2, [r4, #0]
 8005256:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800525a:	429a      	cmp	r2, r3
 800525c:	d002      	beq.n	8005264 <LSM6DS3_X_DeInit+0x28>
    return COMPONENT_ERROR;
 800525e:	2001      	movs	r0, #1
}
 8005260:	b002      	add	sp, #8
 8005262:	bd70      	pop	{r4, r5, r6, pc}
  if ( LSM6DS3_ACC_GYRO_W_FFEvOnInt1( (void *)handle, LSM6DS3_ACC_GYRO_INT1_FF_DISABLED ) == MEMS_ERROR )
 8005264:	4629      	mov	r1, r5
 8005266:	4620      	mov	r0, r4
 8005268:	f7fd fe1a 	bl	8002ea0 <LSM6DS3_ACC_GYRO_W_FFEvOnInt1>
 800526c:	2800      	cmp	r0, #0
 800526e:	d0f6      	beq.n	800525e <LSM6DS3_X_DeInit+0x22>
  if ( LSM6DS3_ACC_GYRO_W_FFEvOnInt2( (void *)handle, LSM6DS3_ACC_GYRO_INT2_FF_DISABLED ) == MEMS_ERROR )
 8005270:	4629      	mov	r1, r5
 8005272:	4620      	mov	r0, r4
 8005274:	f7fd fee0 	bl	8003038 <LSM6DS3_ACC_GYRO_W_FFEvOnInt2>
 8005278:	2800      	cmp	r0, #0
 800527a:	d0f0      	beq.n	800525e <LSM6DS3_X_DeInit+0x22>
  if ( LSM6DS3_ACC_GYRO_W_FF_Duration( (void *)handle, 0x00 ) == MEMS_ERROR )
 800527c:	4629      	mov	r1, r5
 800527e:	4620      	mov	r0, r4
 8005280:	f7fd fd6c 	bl	8002d5c <LSM6DS3_ACC_GYRO_W_FF_Duration>
 8005284:	2800      	cmp	r0, #0
 8005286:	d0ea      	beq.n	800525e <LSM6DS3_X_DeInit+0x22>
  if ( LSM6DS3_ACC_GYRO_W_FF_THS( (void *)handle, LSM6DS3_ACC_GYRO_FF_THS_5 ) == MEMS_ERROR )
 8005288:	4629      	mov	r1, r5
 800528a:	4620      	mov	r0, r4
 800528c:	f7fd fd44 	bl	8002d18 <LSM6DS3_ACC_GYRO_W_FF_THS>
 8005290:	2800      	cmp	r0, #0
 8005292:	d0e4      	beq.n	800525e <LSM6DS3_X_DeInit+0x22>
  if ( LSM6DS3_ACC_GYRO_W_6DEvOnInt1( (void *)handle, LSM6DS3_ACC_GYRO_INT1_6D_DISABLED ) == MEMS_ERROR )
 8005294:	4629      	mov	r1, r5
 8005296:	4620      	mov	r0, r4
 8005298:	f7fd fdbe 	bl	8002e18 <LSM6DS3_ACC_GYRO_W_6DEvOnInt1>
 800529c:	2800      	cmp	r0, #0
 800529e:	d0de      	beq.n	800525e <LSM6DS3_X_DeInit+0x22>
  if ( LSM6DS3_ACC_GYRO_W_6DEvOnInt2( (void *)handle, LSM6DS3_ACC_GYRO_INT2_6D_DISABLED ) == MEMS_ERROR )
 80052a0:	4629      	mov	r1, r5
 80052a2:	4620      	mov	r0, r4
 80052a4:	f7fd fe84 	bl	8002fb0 <LSM6DS3_ACC_GYRO_W_6DEvOnInt2>
 80052a8:	2800      	cmp	r0, #0
 80052aa:	d0d8      	beq.n	800525e <LSM6DS3_X_DeInit+0x22>
  if ( LSM6DS3_ACC_GYRO_W_SIXD_THS( (void *)handle, LSM6DS3_ACC_GYRO_SIXD_THS_80_degree ) == MEMS_ERROR )
 80052ac:	4629      	mov	r1, r5
 80052ae:	4620      	mov	r0, r4
 80052b0:	f7fd fbf6 	bl	8002aa0 <LSM6DS3_ACC_GYRO_W_SIXD_THS>
 80052b4:	2800      	cmp	r0, #0
 80052b6:	d0d2      	beq.n	800525e <LSM6DS3_X_DeInit+0x22>
  if ( LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1( (void *)handle, LSM6DS3_ACC_GYRO_INT1_PEDO_DISABLED ) == MEMS_ERROR )
 80052b8:	4629      	mov	r1, r5
 80052ba:	4620      	mov	r0, r4
 80052bc:	f7fc ff7e 	bl	80021bc <LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1>
 80052c0:	2800      	cmp	r0, #0
 80052c2:	d0cc      	beq.n	800525e <LSM6DS3_X_DeInit+0x22>
  if ( LSM6DS3_ACC_GYRO_W_PEDO_EN( (void *)handle, LSM6DS3_ACC_GYRO_PEDO_EN_DISABLED ) == MEMS_ERROR )
 80052c4:	2100      	movs	r1, #0
 80052c6:	4620      	mov	r0, r4
 80052c8:	f7fd fba4 	bl	8002a14 <LSM6DS3_ACC_GYRO_W_PEDO_EN>
 80052cc:	2800      	cmp	r0, #0
 80052ce:	d0c6      	beq.n	800525e <LSM6DS3_X_DeInit+0x22>
  if ( LSM6DS3_ACC_GYRO_W_FUNC_EN( (void *)handle, LSM6DS3_ACC_GYRO_FUNC_EN_DISABLED ) == MEMS_ERROR )
 80052d0:	2100      	movs	r1, #0
 80052d2:	4620      	mov	r0, r4
 80052d4:	f7fd f96a 	bl	80025ac <LSM6DS3_ACC_GYRO_W_FUNC_EN>
 80052d8:	2800      	cmp	r0, #0
 80052da:	d0c0      	beq.n	800525e <LSM6DS3_X_DeInit+0x22>
  if ( LSM6DS3_ACC_GYRO_W_PedoThreshold( (void *)handle, thr ) == MEMS_ERROR )
 80052dc:	2100      	movs	r1, #0
 80052de:	4620      	mov	r0, r4
 80052e0:	f7fd ff3c 	bl	800315c <LSM6DS3_ACC_GYRO_W_PedoThreshold>
 80052e4:	2800      	cmp	r0, #0
 80052e6:	d0ba      	beq.n	800525e <LSM6DS3_X_DeInit+0x22>
  if( LSM6DS3_X_Disable_Single_Tap_Detection( handle ) == COMPONENT_ERROR )
 80052e8:	4620      	mov	r0, r4
 80052ea:	f7fe fe0f 	bl	8003f0c <LSM6DS3_X_Disable_Single_Tap_Detection>
 80052ee:	2801      	cmp	r0, #1
 80052f0:	d0b5      	beq.n	800525e <LSM6DS3_X_DeInit+0x22>
  if( LSM6DS3_X_Disable_Double_Tap_Detection( handle ) == COMPONENT_ERROR )
 80052f2:	4620      	mov	r0, r4
 80052f4:	f7fe fdca 	bl	8003e8c <LSM6DS3_X_Disable_Double_Tap_Detection>
 80052f8:	2801      	cmp	r0, #1
 80052fa:	d0b0      	beq.n	800525e <LSM6DS3_X_DeInit+0x22>
  if ( LSM6DS3_ACC_GYRO_W_TiltEvOnInt1( (void *)handle, LSM6DS3_ACC_GYRO_INT1_TILT_DISABLED ) == MEMS_ERROR )
 80052fc:	2100      	movs	r1, #0
 80052fe:	4620      	mov	r0, r4
 8005300:	f7fd fd68 	bl	8002dd4 <LSM6DS3_ACC_GYRO_W_TiltEvOnInt1>
 8005304:	2800      	cmp	r0, #0
 8005306:	d0aa      	beq.n	800525e <LSM6DS3_X_DeInit+0x22>
  if ( LSM6DS3_ACC_GYRO_W_TiltEvOnInt2( (void *)handle, LSM6DS3_ACC_GYRO_INT2_TILT_DISABLED ) == MEMS_ERROR )
 8005308:	2100      	movs	r1, #0
 800530a:	4620      	mov	r0, r4
 800530c:	f7fd fe2e 	bl	8002f6c <LSM6DS3_ACC_GYRO_W_TiltEvOnInt2>
 8005310:	2800      	cmp	r0, #0
 8005312:	d0a4      	beq.n	800525e <LSM6DS3_X_DeInit+0x22>
  if ( LSM6DS3_ACC_GYRO_W_TILT_EN( (void *)handle, LSM6DS3_ACC_GYRO_TILT_EN_DISABLED ) == MEMS_ERROR )
 8005314:	2100      	movs	r1, #0
 8005316:	4620      	mov	r0, r4
 8005318:	f7fd fb5a 	bl	80029d0 <LSM6DS3_ACC_GYRO_W_TILT_EN>
 800531c:	2800      	cmp	r0, #0
 800531e:	d09e      	beq.n	800525e <LSM6DS3_X_DeInit+0x22>
  if ( LSM6DS3_ACC_GYRO_W_FUNC_EN( (void *)handle, LSM6DS3_ACC_GYRO_FUNC_EN_DISABLED ) == MEMS_ERROR )
 8005320:	2100      	movs	r1, #0
 8005322:	4620      	mov	r0, r4
 8005324:	f7fd f942 	bl	80025ac <LSM6DS3_ACC_GYRO_W_FUNC_EN>
 8005328:	2800      	cmp	r0, #0
 800532a:	d098      	beq.n	800525e <LSM6DS3_X_DeInit+0x22>
  if ( LSM6DS3_ACC_GYRO_W_WUEvOnInt1( (void *)handle, LSM6DS3_ACC_GYRO_INT1_WU_DISABLED ) == MEMS_ERROR )
 800532c:	2100      	movs	r1, #0
 800532e:	4620      	mov	r0, r4
 8005330:	f7fd fdd8 	bl	8002ee4 <LSM6DS3_ACC_GYRO_W_WUEvOnInt1>
 8005334:	2800      	cmp	r0, #0
 8005336:	d092      	beq.n	800525e <LSM6DS3_X_DeInit+0x22>
  if ( LSM6DS3_ACC_GYRO_W_WUEvOnInt2( (void *)handle, LSM6DS3_ACC_GYRO_INT2_WU_DISABLED ) == MEMS_ERROR )
 8005338:	2100      	movs	r1, #0
 800533a:	4620      	mov	r0, r4
 800533c:	f7fd fe9e 	bl	800307c <LSM6DS3_ACC_GYRO_W_WUEvOnInt2>
 8005340:	2800      	cmp	r0, #0
 8005342:	d08c      	beq.n	800525e <LSM6DS3_X_DeInit+0x22>
  if ( LSM6DS3_ACC_GYRO_W_WAKE_DUR( (void *)handle, 0x00 ) == MEMS_ERROR )
 8005344:	2100      	movs	r1, #0
 8005346:	4620      	mov	r0, r4
 8005348:	f7fd fcc2 	bl	8002cd0 <LSM6DS3_ACC_GYRO_W_WAKE_DUR>
 800534c:	2800      	cmp	r0, #0
 800534e:	d086      	beq.n	800525e <LSM6DS3_X_DeInit+0x22>
  if ( LSM6DS3_ACC_GYRO_W_WK_THS( (void *)handle, 0x00 ) == MEMS_ERROR )
 8005350:	2100      	movs	r1, #0
 8005352:	4620      	mov	r0, r4
 8005354:	f7fd fc30 	bl	8002bb8 <LSM6DS3_ACC_GYRO_W_WK_THS>
 8005358:	2800      	cmp	r0, #0
 800535a:	d080      	beq.n	800525e <LSM6DS3_X_DeInit+0x22>
  if( LSM6DS3_X_Sensor_Disable( handle ) == COMPONENT_ERROR )
 800535c:	4620      	mov	r0, r4
 800535e:	f7ff fe87 	bl	8005070 <LSM6DS3_X_Sensor_Disable>
 8005362:	2801      	cmp	r0, #1
 8005364:	f43f af7b 	beq.w	800525e <LSM6DS3_X_DeInit+0x22>
  handle->isInitialized = 0;
 8005368:	2300      	movs	r3, #0
  pComponentData->Previous_ODR = 0.0f;
 800536a:	2200      	movs	r2, #0
 800536c:	6032      	str	r2, [r6, #0]
  return COMPONENT_OK;
 800536e:	4618      	mov	r0, r3
  handle->isInitialized = 0;
 8005370:	7163      	strb	r3, [r4, #5]
  return COMPONENT_OK;
 8005372:	e775      	b.n	8005260 <LSM6DS3_X_DeInit+0x24>

08005374 <LSM6DS3_G_Init>:
{
 8005374:	b530      	push	{r4, r5, lr}
 8005376:	b083      	sub	sp, #12
  uint8_t who_am_i = 0x00;
 8005378:	a902      	add	r1, sp, #8
 800537a:	2500      	movs	r5, #0
 800537c:	f801 5d01 	strb.w	r5, [r1, #-1]!
{
 8005380:	4604      	mov	r4, r0
  if ( LSM6DS3_ACC_GYRO_R_WHO_AM_I( (void *)handle, ( uint8_t* )who_am_i ) == MEMS_ERROR )
 8005382:	f7fc fcdd 	bl	8001d40 <LSM6DS3_ACC_GYRO_R_WHO_AM_I>
 8005386:	b120      	cbz	r0, 8005392 <LSM6DS3_G_Init+0x1e>
  if ( who_am_i != handle->who_am_i )
 8005388:	7822      	ldrb	r2, [r4, #0]
 800538a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800538e:	429a      	cmp	r2, r3
 8005390:	d002      	beq.n	8005398 <LSM6DS3_G_Init+0x24>
    return COMPONENT_ERROR;
 8005392:	2001      	movs	r0, #1
}
 8005394:	b003      	add	sp, #12
 8005396:	bd30      	pop	{r4, r5, pc}
  if ( LSM6DS3_ACC_GYRO_W_IF_Addr_Incr( (void *)handle, LSM6DS3_ACC_GYRO_IF_INC_ENABLED ) == MEMS_ERROR )
 8005398:	2104      	movs	r1, #4
 800539a:	4620      	mov	r0, r4
 800539c:	f7fc ff30 	bl	8002200 <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr>
 80053a0:	2800      	cmp	r0, #0
 80053a2:	d0f6      	beq.n	8005392 <LSM6DS3_G_Init+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_BDU( (void *)handle, LSM6DS3_ACC_GYRO_BDU_BLOCK_UPDATE ) == MEMS_ERROR )
 80053a4:	2140      	movs	r1, #64	; 0x40
 80053a6:	4620      	mov	r0, r4
 80053a8:	f7fc fcd4 	bl	8001d54 <LSM6DS3_ACC_GYRO_W_BDU>
 80053ac:	2800      	cmp	r0, #0
 80053ae:	d0f0      	beq.n	8005392 <LSM6DS3_G_Init+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_FIFO_MODE( (void *)handle, LSM6DS3_ACC_GYRO_FIFO_MODE_BYPASS ) == MEMS_ERROR )
 80053b0:	4629      	mov	r1, r5
 80053b2:	4620      	mov	r0, r4
 80053b4:	f7fc fe9c 	bl	80020f0 <LSM6DS3_ACC_GYRO_W_FIFO_MODE>
 80053b8:	2800      	cmp	r0, #0
 80053ba:	d0ea      	beq.n	8005392 <LSM6DS3_G_Init+0x1e>
  LSM6DS3_G_Data_t *pComponentData = ( LSM6DS3_G_Data_t * )pData->pComponentData;
 80053bc:	68a3      	ldr	r3, [r4, #8]
      pComponentData->Previous_ODR = 104.0f;
 80053be:	4a12      	ldr	r2, [pc, #72]	; (8005408 <LSM6DS3_G_Init+0x94>)
 80053c0:	681b      	ldr	r3, [r3, #0]
  if ( LSM6DS3_ACC_GYRO_W_ODR_G( (void *)handle, LSM6DS3_ACC_GYRO_ODR_G_POWER_DOWN ) == MEMS_ERROR )
 80053c2:	4629      	mov	r1, r5
      pComponentData->Previous_ODR = 104.0f;
 80053c4:	601a      	str	r2, [r3, #0]
  if ( LSM6DS3_ACC_GYRO_W_ODR_G( (void *)handle, LSM6DS3_ACC_GYRO_ODR_G_POWER_DOWN ) == MEMS_ERROR )
 80053c6:	4620      	mov	r0, r4
 80053c8:	f7fc fd98 	bl	8001efc <LSM6DS3_ACC_GYRO_W_ODR_G>
 80053cc:	2800      	cmp	r0, #0
 80053ce:	d0e0      	beq.n	8005392 <LSM6DS3_G_Init+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_FS_G( (void *)handle, new_fs ) == MEMS_ERROR )
 80053d0:	210c      	movs	r1, #12
 80053d2:	4620      	mov	r0, r4
 80053d4:	f7fc fd60 	bl	8001e98 <LSM6DS3_ACC_GYRO_W_FS_G>
 80053d8:	2800      	cmp	r0, #0
 80053da:	d0da      	beq.n	8005392 <LSM6DS3_G_Init+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_XEN_G( (void *)handle,
 80053dc:	2108      	movs	r1, #8
 80053de:	4620      	mov	r0, r4
 80053e0:	f7fd f84e 	bl	8002480 <LSM6DS3_ACC_GYRO_W_XEN_G>
 80053e4:	2800      	cmp	r0, #0
 80053e6:	d0d4      	beq.n	8005392 <LSM6DS3_G_Init+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_YEN_G( (void *)handle,
 80053e8:	2110      	movs	r1, #16
 80053ea:	4620      	mov	r0, r4
 80053ec:	f7fd f87a 	bl	80024e4 <LSM6DS3_ACC_GYRO_W_YEN_G>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	d0ce      	beq.n	8005392 <LSM6DS3_G_Init+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_ZEN_G( (void *)handle,
 80053f4:	2120      	movs	r1, #32
 80053f6:	4620      	mov	r0, r4
 80053f8:	f7fd f8a6 	bl	8002548 <LSM6DS3_ACC_GYRO_W_ZEN_G>
 80053fc:	2800      	cmp	r0, #0
 80053fe:	d0c8      	beq.n	8005392 <LSM6DS3_G_Init+0x1e>
  handle->isInitialized = 1;
 8005400:	2301      	movs	r3, #1
 8005402:	7163      	strb	r3, [r4, #5]
  return COMPONENT_OK;
 8005404:	2000      	movs	r0, #0
 8005406:	e7c5      	b.n	8005394 <LSM6DS3_G_Init+0x20>
 8005408:	42d00000 	.word	0x42d00000

0800540c <LSM6DS3_X_Init>:
{
 800540c:	b530      	push	{r4, r5, lr}
 800540e:	b083      	sub	sp, #12
  uint8_t who_am_i = 0x00;
 8005410:	a902      	add	r1, sp, #8
 8005412:	2500      	movs	r5, #0
 8005414:	f801 5d01 	strb.w	r5, [r1, #-1]!
{
 8005418:	4604      	mov	r4, r0
  if ( LSM6DS3_ACC_GYRO_R_WHO_AM_I( (void *)handle, ( uint8_t* )who_am_i ) == MEMS_ERROR )
 800541a:	f7fc fc91 	bl	8001d40 <LSM6DS3_ACC_GYRO_R_WHO_AM_I>
 800541e:	b120      	cbz	r0, 800542a <LSM6DS3_X_Init+0x1e>
  if ( who_am_i != handle->who_am_i )
 8005420:	7822      	ldrb	r2, [r4, #0]
 8005422:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005426:	429a      	cmp	r2, r3
 8005428:	d002      	beq.n	8005430 <LSM6DS3_X_Init+0x24>
    return COMPONENT_ERROR;
 800542a:	2001      	movs	r0, #1
}
 800542c:	b003      	add	sp, #12
 800542e:	bd30      	pop	{r4, r5, pc}
  if ( LSM6DS3_ACC_GYRO_W_IF_Addr_Incr( (void *)handle, LSM6DS3_ACC_GYRO_IF_INC_ENABLED ) == MEMS_ERROR )
 8005430:	2104      	movs	r1, #4
 8005432:	4620      	mov	r0, r4
 8005434:	f7fc fee4 	bl	8002200 <LSM6DS3_ACC_GYRO_W_IF_Addr_Incr>
 8005438:	2800      	cmp	r0, #0
 800543a:	d0f6      	beq.n	800542a <LSM6DS3_X_Init+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_BDU( (void *)handle, LSM6DS3_ACC_GYRO_BDU_BLOCK_UPDATE ) == MEMS_ERROR )
 800543c:	2140      	movs	r1, #64	; 0x40
 800543e:	4620      	mov	r0, r4
 8005440:	f7fc fc88 	bl	8001d54 <LSM6DS3_ACC_GYRO_W_BDU>
 8005444:	2800      	cmp	r0, #0
 8005446:	d0f0      	beq.n	800542a <LSM6DS3_X_Init+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_FIFO_MODE( (void *)handle, LSM6DS3_ACC_GYRO_FIFO_MODE_BYPASS ) == MEMS_ERROR )
 8005448:	4629      	mov	r1, r5
 800544a:	4620      	mov	r0, r4
 800544c:	f7fc fe50 	bl	80020f0 <LSM6DS3_ACC_GYRO_W_FIFO_MODE>
 8005450:	2800      	cmp	r0, #0
 8005452:	d0ea      	beq.n	800542a <LSM6DS3_X_Init+0x1e>
  LSM6DS3_X_Data_t *pComponentData = ( LSM6DS3_X_Data_t * )pData->pComponentData;
 8005454:	68a3      	ldr	r3, [r4, #8]
      pComponentData->Previous_ODR = 104.0f;
 8005456:	4a12      	ldr	r2, [pc, #72]	; (80054a0 <LSM6DS3_X_Init+0x94>)
 8005458:	681b      	ldr	r3, [r3, #0]
  if ( LSM6DS3_ACC_GYRO_W_ODR_XL( (void *)handle, LSM6DS3_ACC_GYRO_ODR_XL_POWER_DOWN ) == MEMS_ERROR )
 800545a:	4629      	mov	r1, r5
      pComponentData->Previous_ODR = 104.0f;
 800545c:	601a      	str	r2, [r3, #0]
  if ( LSM6DS3_ACC_GYRO_W_ODR_XL( (void *)handle, LSM6DS3_ACC_GYRO_ODR_XL_POWER_DOWN ) == MEMS_ERROR )
 800545e:	4620      	mov	r0, r4
 8005460:	f7fc fce8 	bl	8001e34 <LSM6DS3_ACC_GYRO_W_ODR_XL>
 8005464:	2800      	cmp	r0, #0
 8005466:	d0e0      	beq.n	800542a <LSM6DS3_X_Init+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_FS_XL( (void *)handle, new_fs ) == MEMS_ERROR )
 8005468:	4629      	mov	r1, r5
 800546a:	4620      	mov	r0, r4
 800546c:	f7fc fc94 	bl	8001d98 <LSM6DS3_ACC_GYRO_W_FS_XL>
 8005470:	2800      	cmp	r0, #0
 8005472:	d0da      	beq.n	800542a <LSM6DS3_X_Init+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_XEN_XL( (void *)handle,
 8005474:	2108      	movs	r1, #8
 8005476:	4620      	mov	r0, r4
 8005478:	f7fc ff4a 	bl	8002310 <LSM6DS3_ACC_GYRO_W_XEN_XL>
 800547c:	2800      	cmp	r0, #0
 800547e:	d0d4      	beq.n	800542a <LSM6DS3_X_Init+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_YEN_XL( (void *)handle,
 8005480:	2110      	movs	r1, #16
 8005482:	4620      	mov	r0, r4
 8005484:	f7fc ff76 	bl	8002374 <LSM6DS3_ACC_GYRO_W_YEN_XL>
 8005488:	2800      	cmp	r0, #0
 800548a:	d0ce      	beq.n	800542a <LSM6DS3_X_Init+0x1e>
  if ( LSM6DS3_ACC_GYRO_W_ZEN_XL( (void *)handle,
 800548c:	2120      	movs	r1, #32
 800548e:	4620      	mov	r0, r4
 8005490:	f7fc ffa2 	bl	80023d8 <LSM6DS3_ACC_GYRO_W_ZEN_XL>
 8005494:	2800      	cmp	r0, #0
 8005496:	d0c8      	beq.n	800542a <LSM6DS3_X_Init+0x1e>
  handle->isInitialized = 1;
 8005498:	2301      	movs	r3, #1
 800549a:	7163      	strb	r3, [r4, #5]
  return COMPONENT_OK;
 800549c:	2000      	movs	r0, #0
 800549e:	e7c5      	b.n	800542c <LSM6DS3_X_Init+0x20>
 80054a0:	42d00000 	.word	0x42d00000

080054a4 <BSP_LED_Init>:
  * @param  Led: Specifies the Led to be configured. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80054a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054a6:	b087      	sub	sp, #28
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 80054a8:	2400      	movs	r4, #0
 80054aa:	4b10      	ldr	r3, [pc, #64]	; (80054ec <BSP_LED_Init+0x48>)
 80054ac:	9400      	str	r4, [sp, #0]
 80054ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80054b0:	4d0f      	ldr	r5, [pc, #60]	; (80054f0 <BSP_LED_Init+0x4c>)
  LEDx_GPIO_CLK_ENABLE(Led);
 80054b2:	f042 0201 	orr.w	r2, r2, #1
 80054b6:	631a      	str	r2, [r3, #48]	; 0x30
 80054b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ba:	9403      	str	r4, [sp, #12]
  LEDx_GPIO_CLK_ENABLE(Led);
 80054bc:	f003 0301 	and.w	r3, r3, #1
{
 80054c0:	4606      	mov	r6, r0
  LEDx_GPIO_CLK_ENABLE(Led);
 80054c2:	9300      	str	r3, [sp, #0]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80054c4:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
  LEDx_GPIO_CLK_ENABLE(Led);
 80054c8:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 80054ca:	2720      	movs	r7, #32
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80054cc:	2302      	movs	r3, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054ce:	2201      	movs	r2, #1
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80054d0:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054d2:	e9cd 7201 	strd	r7, r2, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 80054d6:	9304      	str	r3, [sp, #16]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 80054d8:	f000 fbfc 	bl	8005cd4 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 80054dc:	4622      	mov	r2, r4
 80054de:	4639      	mov	r1, r7
 80054e0:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
 80054e4:	f000 fcd6 	bl	8005e94 <HAL_GPIO_WritePin>
}
 80054e8:	b007      	add	sp, #28
 80054ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054ec:	40023800 	.word	0x40023800
 80054f0:	20000250 	.word	0x20000250

080054f4 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80054f4:	b530      	push	{r4, r5, lr}
 80054f6:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 80054f8:	4b1b      	ldr	r3, [pc, #108]	; (8005568 <BSP_PB_Init+0x74>)
 80054fa:	2500      	movs	r5, #0
 80054fc:	9500      	str	r5, [sp, #0]
 80054fe:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8005500:	f044 0404 	orr.w	r4, r4, #4
 8005504:	631c      	str	r4, [r3, #48]	; 0x30
 8005506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005508:	f003 0304 	and.w	r3, r3, #4
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	9b00      	ldr	r3, [sp, #0]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8005510:	b1d1      	cbz	r1, 8005548 <BSP_PB_Init+0x54>
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8005512:	2901      	cmp	r1, #1
 8005514:	d001      	beq.n	800551a <BSP_PB_Init+0x26>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
  }
}
 8005516:	b007      	add	sp, #28
 8005518:	bd30      	pop	{r4, r5, pc}
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800551a:	4b14      	ldr	r3, [pc, #80]	; (800556c <BSP_PB_Init+0x78>)
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 800551c:	4a14      	ldr	r2, [pc, #80]	; (8005570 <BSP_PB_Init+0x7c>)
 800551e:	9202      	str	r2, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005520:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005524:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005526:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800552a:	6840      	ldr	r0, [r0, #4]
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800552c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800552e:	9503      	str	r5, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005530:	f000 fbd0 	bl	8005cd4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 8005534:	462a      	mov	r2, r5
 8005536:	210f      	movs	r1, #15
 8005538:	2028      	movs	r0, #40	; 0x28
 800553a:	f000 fb6f 	bl	8005c1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800553e:	2028      	movs	r0, #40	; 0x28
 8005540:	f000 fba2 	bl	8005c88 <HAL_NVIC_EnableIRQ>
}
 8005544:	b007      	add	sp, #28
 8005546:	bd30      	pop	{r4, r5, pc}
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005548:	4b08      	ldr	r3, [pc, #32]	; (800556c <BSP_PB_Init+0x78>)
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800554a:	9102      	str	r1, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800554c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 8005550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005554:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005556:	6840      	ldr	r0, [r0, #4]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005558:	2302      	movs	r3, #2
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800555a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800555c:	e9cd 3303 	strd	r3, r3, [sp, #12]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8005560:	f000 fbb8 	bl	8005cd4 <HAL_GPIO_Init>
}
 8005564:	b007      	add	sp, #28
 8005566:	bd30      	pop	{r4, r5, pc}
 8005568:	40023800 	.word	0x40023800
 800556c:	20000250 	.word	0x20000250
 8005570:	10210000 	.word	0x10210000

08005574 <I2C_EXPBD_Init>:
 * @param  None
 * @retval 0 in case of success
 * @retval 1 in case of failure
 */
static uint8_t I2C_EXPBD_Init( void )
{
 8005574:	b570      	push	{r4, r5, r6, lr}
  if(HAL_I2C_GetState( &I2C_EXPBD_Handle) == HAL_I2C_STATE_RESET )
 8005576:	4d2c      	ldr	r5, [pc, #176]	; (8005628 <I2C_EXPBD_Init+0xb4>)
{
 8005578:	b088      	sub	sp, #32
  if(HAL_I2C_GetState( &I2C_EXPBD_Handle) == HAL_I2C_STATE_RESET )
 800557a:	4628      	mov	r0, r5
 800557c:	f001 f992 	bl	80068a4 <HAL_I2C_GetState>
 8005580:	b138      	cbz	r0, 8005592 <I2C_EXPBD_Init+0x1e>
    /* Init the I2C */
    I2C_EXPBD_MspInit();
    HAL_I2C_Init( &I2C_EXPBD_Handle );
  }

  if( HAL_I2C_GetState( &I2C_EXPBD_Handle) == HAL_I2C_STATE_READY )
 8005582:	4829      	ldr	r0, [pc, #164]	; (8005628 <I2C_EXPBD_Init+0xb4>)
 8005584:	f001 f98e 	bl	80068a4 <HAL_I2C_GetState>
  }
  else
  {
    return 1;
  }
}
 8005588:	3820      	subs	r0, #32
 800558a:	bf18      	it	ne
 800558c:	2001      	movne	r0, #1
 800558e:	b008      	add	sp, #32
 8005590:	bd70      	pop	{r4, r5, r6, pc}
static void I2C_EXPBD_MspInit( void )
{
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable I2C GPIO clocks */
  NUCLEO_I2C_EXPBD_SCL_SDA_GPIO_CLK_ENABLE();
 8005592:	4e26      	ldr	r6, [pc, #152]	; (800562c <I2C_EXPBD_Init+0xb8>)
 8005594:	9001      	str	r0, [sp, #4]
    I2C_EXPBD_Handle.Instance            = NUCLEO_I2C_EXPBD;
 8005596:	4b26      	ldr	r3, [pc, #152]	; (8005630 <I2C_EXPBD_Init+0xbc>)
 8005598:	602b      	str	r3, [r5, #0]
  NUCLEO_I2C_EXPBD_SCL_SDA_GPIO_CLK_ENABLE();
 800559a:	6b33      	ldr	r3, [r6, #48]	; 0x30
    I2C_EXPBD_Handle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800559c:	60a8      	str	r0, [r5, #8]
  NUCLEO_I2C_EXPBD_SCL_SDA_GPIO_CLK_ENABLE();
 800559e:	f043 0302 	orr.w	r3, r3, #2
 80055a2:	6333      	str	r3, [r6, #48]	; 0x30
 80055a4:	6b33      	ldr	r3, [r6, #48]	; 0x30
    I2C_EXPBD_Handle.Init.ClockSpeed = NUCLEO_I2C_EXPBD_SPEED;
 80055a6:	4a23      	ldr	r2, [pc, #140]	; (8005634 <I2C_EXPBD_Init+0xc0>)
 80055a8:	606a      	str	r2, [r5, #4]
  NUCLEO_I2C_EXPBD_SCL_SDA_GPIO_CLK_ENABLE();
 80055aa:	f003 0302 	and.w	r3, r3, #2
    I2C_EXPBD_Handle.Init.OwnAddress1    = 0x33;
 80055ae:	2133      	movs	r1, #51	; 0x33
  NUCLEO_I2C_EXPBD_SCL_SDA_GPIO_CLK_ENABLE();
 80055b0:	9301      	str	r3, [sp, #4]
    I2C_EXPBD_Handle.Init.OwnAddress1    = 0x33;
 80055b2:	60e9      	str	r1, [r5, #12]
    I2C_EXPBD_Handle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80055b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000

  /* I2C_EXPBD SCL and SDA pins configuration -------------------------------------*/
  GPIO_InitStruct.Pin        = NUCLEO_I2C_EXPBD_SCL_PIN | NUCLEO_I2C_EXPBD_SDA_PIN;
 80055b8:	f44f 7340 	mov.w	r3, #768	; 0x300
  GPIO_InitStruct.Mode       = GPIO_MODE_AF_OD;
 80055bc:	2112      	movs	r1, #18
 80055be:	4604      	mov	r4, r0
    I2C_EXPBD_Handle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80055c0:	612a      	str	r2, [r5, #16]
  NUCLEO_I2C_EXPBD_SCL_SDA_GPIO_CLK_ENABLE();
 80055c2:	9801      	ldr	r0, [sp, #4]
  GPIO_InitStruct.Pin        = NUCLEO_I2C_EXPBD_SCL_PIN | NUCLEO_I2C_EXPBD_SDA_PIN;
 80055c4:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed      = GPIO_SPEED_FREQ_HIGH;
 80055c6:	2202      	movs	r2, #2
  GPIO_InitStruct.Pull       = GPIO_NOPULL;
  GPIO_InitStruct.Alternate  = NUCLEO_I2C_EXPBD_SCL_SDA_AF;
 80055c8:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode       = GPIO_MODE_AF_OD;
 80055ca:	9104      	str	r1, [sp, #16]

  HAL_GPIO_Init( NUCLEO_I2C_EXPBD_SCL_SDA_GPIO_PORT, &GPIO_InitStruct );
 80055cc:	481a      	ldr	r0, [pc, #104]	; (8005638 <I2C_EXPBD_Init+0xc4>)
  GPIO_InitStruct.Speed      = GPIO_SPEED_FREQ_HIGH;
 80055ce:	9206      	str	r2, [sp, #24]
  HAL_GPIO_Init( NUCLEO_I2C_EXPBD_SCL_SDA_GPIO_PORT, &GPIO_InitStruct );
 80055d0:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate  = NUCLEO_I2C_EXPBD_SCL_SDA_AF;
 80055d2:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull       = GPIO_NOPULL;
 80055d4:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init( NUCLEO_I2C_EXPBD_SCL_SDA_GPIO_PORT, &GPIO_InitStruct );
 80055d6:	f000 fb7d 	bl	8005cd4 <HAL_GPIO_Init>

  /* Enable the I2C_EXPBD peripheral clock */
  NUCLEO_I2C_EXPBD_CLK_ENABLE();
 80055da:	9402      	str	r4, [sp, #8]
 80055dc:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80055de:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055e2:	6433      	str	r3, [r6, #64]	; 0x40
 80055e4:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80055e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055ea:	9302      	str	r3, [sp, #8]
 80055ec:	9b02      	ldr	r3, [sp, #8]

  /* Force the I2C peripheral clock reset */
  NUCLEO_I2C_EXPBD_FORCE_RESET();
 80055ee:	6a33      	ldr	r3, [r6, #32]
 80055f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80055f4:	6233      	str	r3, [r6, #32]

  /* Release the I2C peripheral clock reset */
  NUCLEO_I2C_EXPBD_RELEASE_RESET();
 80055f6:	6a33      	ldr	r3, [r6, #32]
 80055f8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055fc:	6233      	str	r3, [r6, #32]

  /* Enable and set I2C_EXPBD Interrupt to the highest priority */
  HAL_NVIC_SetPriority(NUCLEO_I2C_EXPBD_EV_IRQn, 0, 0);
 80055fe:	4622      	mov	r2, r4
 8005600:	4621      	mov	r1, r4
 8005602:	201f      	movs	r0, #31
 8005604:	f000 fb0a 	bl	8005c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(NUCLEO_I2C_EXPBD_EV_IRQn);
 8005608:	201f      	movs	r0, #31
 800560a:	f000 fb3d 	bl	8005c88 <HAL_NVIC_EnableIRQ>

#if ((defined (USE_STM32F4XX_NUCLEO)) || (defined (USE_STM32L1XX_NUCLEO)) || (defined (USE_STM32L4XX_NUCLEO)))
  /* Enable and set I2C_EXPBD Interrupt to the highest priority */
  HAL_NVIC_SetPriority(NUCLEO_I2C_EXPBD_ER_IRQn, 0, 0);
 800560e:	4622      	mov	r2, r4
 8005610:	4621      	mov	r1, r4
 8005612:	2020      	movs	r0, #32
 8005614:	f000 fb02 	bl	8005c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(NUCLEO_I2C_EXPBD_ER_IRQn);
 8005618:	2020      	movs	r0, #32
 800561a:	f000 fb35 	bl	8005c88 <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init( &I2C_EXPBD_Handle );
 800561e:	4628      	mov	r0, r5
 8005620:	f000 fe40 	bl	80062a4 <HAL_I2C_Init>
 8005624:	e7ad      	b.n	8005582 <I2C_EXPBD_Init+0xe>
 8005626:	bf00      	nop
 8005628:	200002e8 	.word	0x200002e8
 800562c:	40023800 	.word	0x40023800
 8005630:	40005400 	.word	0x40005400
 8005634:	00061a80 	.word	0x00061a80
 8005638:	40020400 	.word	0x40020400

0800563c <Sensor_IO_Init>:
{
 800563c:	b570      	push	{r4, r5, r6, lr}
  if(HAL_I2C_GetState( &I2C_EXPBD_Handle) == HAL_I2C_STATE_RESET )
 800563e:	4d2c      	ldr	r5, [pc, #176]	; (80056f0 <Sensor_IO_Init+0xb4>)
{
 8005640:	b088      	sub	sp, #32
  if(HAL_I2C_GetState( &I2C_EXPBD_Handle) == HAL_I2C_STATE_RESET )
 8005642:	4628      	mov	r0, r5
 8005644:	f001 f92e 	bl	80068a4 <HAL_I2C_GetState>
 8005648:	b138      	cbz	r0, 800565a <Sensor_IO_Init+0x1e>
  if( HAL_I2C_GetState( &I2C_EXPBD_Handle) == HAL_I2C_STATE_READY )
 800564a:	4829      	ldr	r0, [pc, #164]	; (80056f0 <Sensor_IO_Init+0xb4>)
 800564c:	f001 f92a 	bl	80068a4 <HAL_I2C_GetState>
}
 8005650:	3820      	subs	r0, #32
 8005652:	bf18      	it	ne
 8005654:	2001      	movne	r0, #1
 8005656:	b008      	add	sp, #32
 8005658:	bd70      	pop	{r4, r5, r6, pc}
  NUCLEO_I2C_EXPBD_SCL_SDA_GPIO_CLK_ENABLE();
 800565a:	4e26      	ldr	r6, [pc, #152]	; (80056f4 <Sensor_IO_Init+0xb8>)
 800565c:	9001      	str	r0, [sp, #4]
    I2C_EXPBD_Handle.Instance            = NUCLEO_I2C_EXPBD;
 800565e:	4b26      	ldr	r3, [pc, #152]	; (80056f8 <Sensor_IO_Init+0xbc>)
 8005660:	602b      	str	r3, [r5, #0]
  NUCLEO_I2C_EXPBD_SCL_SDA_GPIO_CLK_ENABLE();
 8005662:	6b33      	ldr	r3, [r6, #48]	; 0x30
    I2C_EXPBD_Handle.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8005664:	60a8      	str	r0, [r5, #8]
  NUCLEO_I2C_EXPBD_SCL_SDA_GPIO_CLK_ENABLE();
 8005666:	f043 0302 	orr.w	r3, r3, #2
 800566a:	6333      	str	r3, [r6, #48]	; 0x30
 800566c:	6b33      	ldr	r3, [r6, #48]	; 0x30
    I2C_EXPBD_Handle.Init.ClockSpeed = NUCLEO_I2C_EXPBD_SPEED;
 800566e:	4a23      	ldr	r2, [pc, #140]	; (80056fc <Sensor_IO_Init+0xc0>)
 8005670:	606a      	str	r2, [r5, #4]
  NUCLEO_I2C_EXPBD_SCL_SDA_GPIO_CLK_ENABLE();
 8005672:	f003 0302 	and.w	r3, r3, #2
    I2C_EXPBD_Handle.Init.OwnAddress1    = 0x33;
 8005676:	2133      	movs	r1, #51	; 0x33
  NUCLEO_I2C_EXPBD_SCL_SDA_GPIO_CLK_ENABLE();
 8005678:	9301      	str	r3, [sp, #4]
    I2C_EXPBD_Handle.Init.OwnAddress1    = 0x33;
 800567a:	60e9      	str	r1, [r5, #12]
    I2C_EXPBD_Handle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800567c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  GPIO_InitStruct.Pin        = NUCLEO_I2C_EXPBD_SCL_PIN | NUCLEO_I2C_EXPBD_SDA_PIN;
 8005680:	f44f 7340 	mov.w	r3, #768	; 0x300
  GPIO_InitStruct.Mode       = GPIO_MODE_AF_OD;
 8005684:	2112      	movs	r1, #18
 8005686:	4604      	mov	r4, r0
    I2C_EXPBD_Handle.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005688:	612a      	str	r2, [r5, #16]
  NUCLEO_I2C_EXPBD_SCL_SDA_GPIO_CLK_ENABLE();
 800568a:	9801      	ldr	r0, [sp, #4]
  GPIO_InitStruct.Pin        = NUCLEO_I2C_EXPBD_SCL_PIN | NUCLEO_I2C_EXPBD_SDA_PIN;
 800568c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Speed      = GPIO_SPEED_FREQ_HIGH;
 800568e:	2202      	movs	r2, #2
  GPIO_InitStruct.Alternate  = NUCLEO_I2C_EXPBD_SCL_SDA_AF;
 8005690:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode       = GPIO_MODE_AF_OD;
 8005692:	9104      	str	r1, [sp, #16]
  HAL_GPIO_Init( NUCLEO_I2C_EXPBD_SCL_SDA_GPIO_PORT, &GPIO_InitStruct );
 8005694:	481a      	ldr	r0, [pc, #104]	; (8005700 <Sensor_IO_Init+0xc4>)
  GPIO_InitStruct.Speed      = GPIO_SPEED_FREQ_HIGH;
 8005696:	9206      	str	r2, [sp, #24]
  HAL_GPIO_Init( NUCLEO_I2C_EXPBD_SCL_SDA_GPIO_PORT, &GPIO_InitStruct );
 8005698:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate  = NUCLEO_I2C_EXPBD_SCL_SDA_AF;
 800569a:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull       = GPIO_NOPULL;
 800569c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init( NUCLEO_I2C_EXPBD_SCL_SDA_GPIO_PORT, &GPIO_InitStruct );
 800569e:	f000 fb19 	bl	8005cd4 <HAL_GPIO_Init>
  NUCLEO_I2C_EXPBD_CLK_ENABLE();
 80056a2:	9402      	str	r4, [sp, #8]
 80056a4:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80056a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056aa:	6433      	str	r3, [r6, #64]	; 0x40
 80056ac:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80056ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056b2:	9302      	str	r3, [sp, #8]
 80056b4:	9b02      	ldr	r3, [sp, #8]
  NUCLEO_I2C_EXPBD_FORCE_RESET();
 80056b6:	6a33      	ldr	r3, [r6, #32]
 80056b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80056bc:	6233      	str	r3, [r6, #32]
  NUCLEO_I2C_EXPBD_RELEASE_RESET();
 80056be:	6a33      	ldr	r3, [r6, #32]
 80056c0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056c4:	6233      	str	r3, [r6, #32]
  HAL_NVIC_SetPriority(NUCLEO_I2C_EXPBD_EV_IRQn, 0, 0);
 80056c6:	4622      	mov	r2, r4
 80056c8:	4621      	mov	r1, r4
 80056ca:	201f      	movs	r0, #31
 80056cc:	f000 faa6 	bl	8005c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(NUCLEO_I2C_EXPBD_EV_IRQn);
 80056d0:	201f      	movs	r0, #31
 80056d2:	f000 fad9 	bl	8005c88 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(NUCLEO_I2C_EXPBD_ER_IRQn, 0, 0);
 80056d6:	4622      	mov	r2, r4
 80056d8:	4621      	mov	r1, r4
 80056da:	2020      	movs	r0, #32
 80056dc:	f000 fa9e 	bl	8005c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(NUCLEO_I2C_EXPBD_ER_IRQn);
 80056e0:	2020      	movs	r0, #32
 80056e2:	f000 fad1 	bl	8005c88 <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init( &I2C_EXPBD_Handle );
 80056e6:	4628      	mov	r0, r5
 80056e8:	f000 fddc 	bl	80062a4 <HAL_I2C_Init>
 80056ec:	e7ad      	b.n	800564a <Sensor_IO_Init+0xe>
 80056ee:	bf00      	nop
 80056f0:	200002e8 	.word	0x200002e8
 80056f4:	40023800 	.word	0x40023800
 80056f8:	40005400 	.word	0x40005400
 80056fc:	00061a80 	.word	0x00061a80
 8005700:	40020400 	.word	0x40020400

08005704 <LSM6DS0_Sensor_IO_ITConfig>:
}
 8005704:	2000      	movs	r0, #0
 8005706:	4770      	bx	lr

08005708 <LSM6DS3_Sensor_IO_ITConfig>:
{
 8005708:	b5f0      	push	{r4, r5, r6, r7, lr}
 800570a:	b08d      	sub	sp, #52	; 0x34
  M_INT1_GPIO_CLK_ENABLE();
 800570c:	2400      	movs	r4, #0
 800570e:	4d1d      	ldr	r5, [pc, #116]	; (8005784 <LSM6DS3_Sensor_IO_ITConfig+0x7c>)
 8005710:	9400      	str	r4, [sp, #0]
 8005712:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  GPIO_InitStructureInt1.Mode = GPIO_MODE_IT_RISING;
 8005714:	4e1c      	ldr	r6, [pc, #112]	; (8005788 <LSM6DS3_Sensor_IO_ITConfig+0x80>)
  HAL_GPIO_Init(M_INT1_GPIO_PORT, &GPIO_InitStructureInt1);
 8005716:	481d      	ldr	r0, [pc, #116]	; (800578c <LSM6DS3_Sensor_IO_ITConfig+0x84>)
  M_INT1_GPIO_CLK_ENABLE();
 8005718:	f043 0301 	orr.w	r3, r3, #1
 800571c:	632b      	str	r3, [r5, #48]	; 0x30
 800571e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  GPIO_InitStructureInt1.Pull  = GPIO_NOPULL;
 8005720:	9404      	str	r4, [sp, #16]
  M_INT1_GPIO_CLK_ENABLE();
 8005722:	f003 0301 	and.w	r3, r3, #1
  GPIO_InitStructureInt1.Speed = GPIO_SPEED_FREQ_HIGH;
 8005726:	2702      	movs	r7, #2
  M_INT1_GPIO_CLK_ENABLE();
 8005728:	9300      	str	r3, [sp, #0]
  HAL_GPIO_Init(M_INT1_GPIO_PORT, &GPIO_InitStructureInt1);
 800572a:	a902      	add	r1, sp, #8
  GPIO_InitStructureInt1.Pin = M_INT1_PIN;
 800572c:	2310      	movs	r3, #16
  GPIO_InitStructureInt1.Mode = GPIO_MODE_IT_RISING;
 800572e:	e9cd 3602 	strd	r3, r6, [sp, #8]
  M_INT1_GPIO_CLK_ENABLE();
 8005732:	9a00      	ldr	r2, [sp, #0]
  GPIO_InitStructureInt1.Speed = GPIO_SPEED_FREQ_HIGH;
 8005734:	9705      	str	r7, [sp, #20]
  HAL_GPIO_Init(M_INT1_GPIO_PORT, &GPIO_InitStructureInt1);
 8005736:	f000 facd 	bl	8005cd4 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(M_INT1_EXTI_IRQn, 0x00, 0x00);
 800573a:	4622      	mov	r2, r4
 800573c:	4621      	mov	r1, r4
 800573e:	200a      	movs	r0, #10
 8005740:	f000 fa6c 	bl	8005c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(M_INT1_EXTI_IRQn);
 8005744:	200a      	movs	r0, #10
 8005746:	f000 fa9f 	bl	8005c88 <HAL_NVIC_EnableIRQ>
  M_INT2_GPIO_CLK_ENABLE();
 800574a:	9401      	str	r4, [sp, #4]
 800574c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_Init(M_INT2_GPIO_PORT, &GPIO_InitStructureInt2);
 800574e:	4810      	ldr	r0, [pc, #64]	; (8005790 <LSM6DS3_Sensor_IO_ITConfig+0x88>)
  M_INT2_GPIO_CLK_ENABLE();
 8005750:	433b      	orrs	r3, r7
 8005752:	632b      	str	r3, [r5, #48]	; 0x30
 8005754:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  GPIO_InitStructureInt2.Mode = GPIO_MODE_IT_RISING;
 8005756:	9608      	str	r6, [sp, #32]
  M_INT2_GPIO_CLK_ENABLE();
 8005758:	403b      	ands	r3, r7
 800575a:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(M_INT2_GPIO_PORT, &GPIO_InitStructureInt2);
 800575c:	a907      	add	r1, sp, #28
  GPIO_InitStructureInt2.Pin = M_INT2_PIN;
 800575e:	2301      	movs	r3, #1
 8005760:	9307      	str	r3, [sp, #28]
  M_INT2_GPIO_CLK_ENABLE();
 8005762:	9a01      	ldr	r2, [sp, #4]
  GPIO_InitStructureInt2.Pull  = GPIO_NOPULL;
 8005764:	e9cd 4709 	strd	r4, r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(M_INT2_GPIO_PORT, &GPIO_InitStructureInt2);
 8005768:	f000 fab4 	bl	8005cd4 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(M_INT2_EXTI_IRQn, 0x00, 0x00);
 800576c:	4622      	mov	r2, r4
 800576e:	4621      	mov	r1, r4
 8005770:	2006      	movs	r0, #6
 8005772:	f000 fa53 	bl	8005c1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(M_INT2_EXTI_IRQn);
 8005776:	2006      	movs	r0, #6
 8005778:	f000 fa86 	bl	8005c88 <HAL_NVIC_EnableIRQ>
}
 800577c:	4620      	mov	r0, r4
 800577e:	b00d      	add	sp, #52	; 0x34
 8005780:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005782:	bf00      	nop
 8005784:	40023800 	.word	0x40023800
 8005788:	10110000 	.word	0x10110000
 800578c:	40020000 	.word	0x40020000
 8005790:	40020400 	.word	0x40020400

08005794 <Sensor_IO_Write>:
{
 8005794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005798:	460f      	mov	r7, r1
  switch(ctx->who_am_i)
 800579a:	7801      	ldrb	r1, [r0, #0]
 800579c:	29b1      	cmp	r1, #177	; 0xb1
{
 800579e:	b085      	sub	sp, #20
 80057a0:	4605      	mov	r5, r0
 80057a2:	4690      	mov	r8, r2
 80057a4:	461e      	mov	r6, r3
  switch(ctx->who_am_i)
 80057a6:	d01b      	beq.n	80057e0 <Sensor_IO_Write+0x4c>
 80057a8:	d812      	bhi.n	80057d0 <Sensor_IO_Write+0x3c>
 80057aa:	293d      	cmp	r1, #61	; 0x3d
 80057ac:	d013      	beq.n	80057d6 <Sensor_IO_Write+0x42>
  status = HAL_I2C_Mem_Write( &I2C_EXPBD_Handle, Addr, ( uint16_t )Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Size,
 80057ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057b2:	78a9      	ldrb	r1, [r5, #2]
 80057b4:	481d      	ldr	r0, [pc, #116]	; (800582c <Sensor_IO_Write+0x98>)
 80057b6:	9302      	str	r3, [sp, #8]
 80057b8:	9601      	str	r6, [sp, #4]
 80057ba:	f8cd 8000 	str.w	r8, [sp]
 80057be:	463a      	mov	r2, r7
 80057c0:	2301      	movs	r3, #1
 80057c2:	f000 fe01 	bl	80063c8 <HAL_I2C_Mem_Write>
  if( status != HAL_OK )
 80057c6:	bb40      	cbnz	r0, 800581a <Sensor_IO_Write+0x86>
      return 0;
 80057c8:	2000      	movs	r0, #0
}
 80057ca:	b005      	add	sp, #20
 80057cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch(ctx->who_am_i)
 80057d0:	39bc      	subs	r1, #188	; 0xbc
 80057d2:	2901      	cmp	r1, #1
 80057d4:	d8eb      	bhi.n	80057ae <Sensor_IO_Write+0x1a>
      if ( nBytesToWrite > 1 ) WriteAddr |= 0x80;  /* Enable I2C multi-bytes Write */
 80057d6:	2e01      	cmp	r6, #1
 80057d8:	bf88      	it	hi
 80057da:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
 80057de:	e7e6      	b.n	80057ae <Sensor_IO_Write+0x1a>
      for (i = 0; i < nBytesToWrite; i++ )
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d0f1      	beq.n	80057c8 <Sensor_IO_Write+0x34>
  status = HAL_I2C_Mem_Write( &I2C_EXPBD_Handle, Addr, ( uint16_t )Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Size,
 80057e4:	f8df b044 	ldr.w	fp, [pc, #68]	; 800582c <Sensor_IO_Write+0x98>
      for (i = 0; i < nBytesToWrite; i++ )
 80057e8:	2400      	movs	r4, #0
  status = HAL_I2C_Mem_Write( &I2C_EXPBD_Handle, Addr, ( uint16_t )Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Size,
 80057ea:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
 80057ee:	f04f 0901 	mov.w	r9, #1
 80057f2:	e001      	b.n	80057f8 <Sensor_IO_Write+0x64>
      for (i = 0; i < nBytesToWrite; i++ )
 80057f4:	42a6      	cmp	r6, r4
 80057f6:	d0e7      	beq.n	80057c8 <Sensor_IO_Write+0x34>
  status = HAL_I2C_Mem_Write( &I2C_EXPBD_Handle, Addr, ( uint16_t )Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Size,
 80057f8:	eb08 0304 	add.w	r3, r8, r4
 80057fc:	193a      	adds	r2, r7, r4
 80057fe:	78a9      	ldrb	r1, [r5, #2]
 8005800:	9300      	str	r3, [sp, #0]
 8005802:	f8cd a008 	str.w	sl, [sp, #8]
 8005806:	f8cd 9004 	str.w	r9, [sp, #4]
 800580a:	b2d2      	uxtb	r2, r2
 800580c:	2301      	movs	r3, #1
 800580e:	4658      	mov	r0, fp
 8005810:	f000 fdda 	bl	80063c8 <HAL_I2C_Mem_Write>
      for (i = 0; i < nBytesToWrite; i++ )
 8005814:	3401      	adds	r4, #1
  if( status != HAL_OK )
 8005816:	2800      	cmp	r0, #0
 8005818:	d0ec      	beq.n	80057f4 <Sensor_IO_Write+0x60>
  HAL_I2C_DeInit( &I2C_EXPBD_Handle );
 800581a:	4804      	ldr	r0, [pc, #16]	; (800582c <Sensor_IO_Write+0x98>)
 800581c:	f000 fdba 	bl	8006394 <HAL_I2C_DeInit>
  I2C_EXPBD_Init();
 8005820:	f7ff fea8 	bl	8005574 <I2C_EXPBD_Init>
        return 1;
 8005824:	2001      	movs	r0, #1
}
 8005826:	b005      	add	sp, #20
 8005828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800582c:	200002e8 	.word	0x200002e8

08005830 <Sensor_IO_Read>:
{
 8005830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005834:	460f      	mov	r7, r1
  switch(ctx->who_am_i)
 8005836:	7801      	ldrb	r1, [r0, #0]
 8005838:	29b1      	cmp	r1, #177	; 0xb1
{
 800583a:	b085      	sub	sp, #20
 800583c:	4605      	mov	r5, r0
 800583e:	4690      	mov	r8, r2
 8005840:	461e      	mov	r6, r3
  switch(ctx->who_am_i)
 8005842:	d01b      	beq.n	800587c <Sensor_IO_Read+0x4c>
 8005844:	d812      	bhi.n	800586c <Sensor_IO_Read+0x3c>
 8005846:	293d      	cmp	r1, #61	; 0x3d
 8005848:	d013      	beq.n	8005872 <Sensor_IO_Read+0x42>
  status = HAL_I2C_Mem_Read( &I2C_EXPBD_Handle, Addr, ( uint16_t )Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Size,
 800584a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800584e:	78a9      	ldrb	r1, [r5, #2]
 8005850:	481d      	ldr	r0, [pc, #116]	; (80058c8 <Sensor_IO_Read+0x98>)
 8005852:	9302      	str	r3, [sp, #8]
 8005854:	9601      	str	r6, [sp, #4]
 8005856:	f8cd 8000 	str.w	r8, [sp]
 800585a:	463a      	mov	r2, r7
 800585c:	2301      	movs	r3, #1
 800585e:	f000 fe9d 	bl	800659c <HAL_I2C_Mem_Read>
  if( status != HAL_OK )
 8005862:	bb40      	cbnz	r0, 80058b6 <Sensor_IO_Read+0x86>
      return 0;
 8005864:	2000      	movs	r0, #0
}
 8005866:	b005      	add	sp, #20
 8005868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  switch(ctx->who_am_i)
 800586c:	39bc      	subs	r1, #188	; 0xbc
 800586e:	2901      	cmp	r1, #1
 8005870:	d8eb      	bhi.n	800584a <Sensor_IO_Read+0x1a>
      if ( nBytesToRead > 1 ) ReadAddr |= 0x80; /* Enable I2C multi-bytes Read */
 8005872:	2e01      	cmp	r6, #1
 8005874:	bf88      	it	hi
 8005876:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
 800587a:	e7e6      	b.n	800584a <Sensor_IO_Read+0x1a>
      for (i = 0; i < nBytesToRead; i++ )
 800587c:	2b00      	cmp	r3, #0
 800587e:	d0f1      	beq.n	8005864 <Sensor_IO_Read+0x34>
  status = HAL_I2C_Mem_Read( &I2C_EXPBD_Handle, Addr, ( uint16_t )Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Size,
 8005880:	f8df b044 	ldr.w	fp, [pc, #68]	; 80058c8 <Sensor_IO_Read+0x98>
      for (i = 0; i < nBytesToRead; i++ )
 8005884:	2400      	movs	r4, #0
  status = HAL_I2C_Mem_Read( &I2C_EXPBD_Handle, Addr, ( uint16_t )Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Size,
 8005886:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
 800588a:	f04f 0901 	mov.w	r9, #1
 800588e:	e001      	b.n	8005894 <Sensor_IO_Read+0x64>
      for (i = 0; i < nBytesToRead; i++ )
 8005890:	42a6      	cmp	r6, r4
 8005892:	d0e7      	beq.n	8005864 <Sensor_IO_Read+0x34>
  status = HAL_I2C_Mem_Read( &I2C_EXPBD_Handle, Addr, ( uint16_t )Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Size,
 8005894:	eb08 0304 	add.w	r3, r8, r4
 8005898:	193a      	adds	r2, r7, r4
 800589a:	78a9      	ldrb	r1, [r5, #2]
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	f8cd a008 	str.w	sl, [sp, #8]
 80058a2:	f8cd 9004 	str.w	r9, [sp, #4]
 80058a6:	b2d2      	uxtb	r2, r2
 80058a8:	2301      	movs	r3, #1
 80058aa:	4658      	mov	r0, fp
 80058ac:	f000 fe76 	bl	800659c <HAL_I2C_Mem_Read>
      for (i = 0; i < nBytesToRead; i++ )
 80058b0:	3401      	adds	r4, #1
  if( status != HAL_OK )
 80058b2:	2800      	cmp	r0, #0
 80058b4:	d0ec      	beq.n	8005890 <Sensor_IO_Read+0x60>
  HAL_I2C_DeInit( &I2C_EXPBD_Handle );
 80058b6:	4804      	ldr	r0, [pc, #16]	; (80058c8 <Sensor_IO_Read+0x98>)
 80058b8:	f000 fd6c 	bl	8006394 <HAL_I2C_DeInit>
  I2C_EXPBD_Init();
 80058bc:	f7ff fe5a 	bl	8005574 <I2C_EXPBD_Init>
        return 1;
 80058c0:	2001      	movs	r0, #1
}
 80058c2:	b005      	add	sp, #20
 80058c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058c8:	200002e8 	.word	0x200002e8

080058cc <BSP_ACCELERO_Init>:
 * @param handle the device handle
 * @retval COMPONENT_OK in case of success
 * @retval COMPONENT_ERROR in case of failure
 */
DrvStatusTypeDef BSP_ACCELERO_Init( ACCELERO_ID_t id, void **handle )
{
 80058cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

  *handle = NULL;
 80058ce:	2600      	movs	r6, #0
{
 80058d0:	460f      	mov	r7, r1
  *handle = NULL;
 80058d2:	600e      	str	r6, [r1, #0]

  switch(id)
 80058d4:	4605      	mov	r5, r0

static DrvStatusTypeDef BSP_LSM6DS0_ACCELERO_Init( void **handle )
{
  ACCELERO_Drv_t *driver = NULL;

  if(ACCELERO_SensorHandle[ LSM6DS0_X_0 ].isInitialized == 1)
 80058d6:	4c63      	ldr	r4, [pc, #396]	; (8005a64 <BSP_ACCELERO_Init+0x198>)
  switch(id)
 80058d8:	2800      	cmp	r0, #0
 80058da:	d07b      	beq.n	80059d4 <BSP_ACCELERO_Init+0x108>
 80058dc:	2801      	cmp	r0, #1

static DrvStatusTypeDef BSP_LSM6DS3_ACCELERO_Init( void **handle )
{
  ACCELERO_Drv_t *driver = NULL;

  if(ACCELERO_SensorHandle[ LSM6DS3_X_0 ].isInitialized == 1)
 80058de:	7e63      	ldrb	r3, [r4, #25]
  switch(id)
 80058e0:	d125      	bne.n	800592e <BSP_ACCELERO_Init+0x62>
  if(ACCELERO_SensorHandle[ LSM6DS3_X_0 ].isInitialized == 1)
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d079      	beq.n	80059da <BSP_ACCELERO_Init+0x10e>
  {
    /* We have reached the max num of instance for this component */
    return COMPONENT_ERROR;
  }

  if ( Sensor_IO_Init() == COMPONENT_ERROR )
 80058e6:	f7ff fea9 	bl	800563c <Sensor_IO_Init>
 80058ea:	2801      	cmp	r0, #1
 80058ec:	d075      	beq.n	80059da <BSP_ACCELERO_Init+0x10e>
  {
    return COMPONENT_ERROR;
  }

  /* Setup sensor handle. */
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].who_am_i      = LSM6DS3_ACC_GYRO_WHO_AM_I;
 80058ee:	2369      	movs	r3, #105	; 0x69
 80058f0:	82a3      	strh	r3, [r4, #20]
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].ifType        = 0; /* I2C interface */
 80058f2:	21d4      	movs	r1, #212	; 0xd4
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].address       = LSM6DS3_ACC_GYRO_I2C_ADDRESS_LOW;
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].instance      = LSM6DS3_X_0;
 80058f4:	4a5c      	ldr	r2, [pc, #368]	; (8005a68 <BSP_ACCELERO_Init+0x19c>)
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].ifType        = 0; /* I2C interface */
 80058f6:	75a1      	strb	r1, [r4, #22]
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].isInitialized = 0;
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].isEnabled     = 0;
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].isCombo       = 1;
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].pData         = ( void * )&ACCELERO_Data[ LSM6DS3_X_0 ];
 80058f8:	f104 0330 	add.w	r3, r4, #48	; 0x30
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].instance      = LSM6DS3_X_0;
 80058fc:	61a2      	str	r2, [r4, #24]
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].pData         = ( void * )&ACCELERO_Data[ LSM6DS3_X_0 ];
 80058fe:	61e3      	str	r3, [r4, #28]
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].pVTable       = ( void * )&LSM6DS3_X_Drv;
 8005900:	495a      	ldr	r1, [pc, #360]	; (8005a6c <BSP_ACCELERO_Init+0x1a0>)
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].pExtVTable    = ( void * )&LSM6DS3_X_ExtDrv;
 8005902:	4a5b      	ldr	r2, [pc, #364]	; (8005a70 <BSP_ACCELERO_Init+0x1a4>)
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].pVTable       = ( void * )&LSM6DS3_X_Drv;
 8005904:	6221      	str	r1, [r4, #32]

  ACCELERO_Data[ LSM6DS3_X_0 ].pComponentData = ( void * )&LSM6DS3_X_0_Data;
 8005906:	f104 0338 	add.w	r3, r4, #56	; 0x38
  ACCELERO_Data[ LSM6DS3_X_0 ].pExtData       = 0;

  *handle = (void *)&ACCELERO_SensorHandle[ LSM6DS3_X_0 ];
 800590a:	f104 0014 	add.w	r0, r4, #20
  ACCELERO_Data[ LSM6DS3_X_0 ].pComponentData = ( void * )&LSM6DS3_X_0_Data;
 800590e:	6323      	str	r3, [r4, #48]	; 0x30
  ACCELERO_Data[ LSM6DS3_X_0 ].pExtData       = 0;
 8005910:	6366      	str	r6, [r4, #52]	; 0x34
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].pExtVTable    = ( void * )&LSM6DS3_X_ExtDrv;
 8005912:	6262      	str	r2, [r4, #36]	; 0x24
  *handle = (void *)&ACCELERO_SensorHandle[ LSM6DS3_X_0 ];
 8005914:	6038      	str	r0, [r7, #0]

  driver = ( ACCELERO_Drv_t * )((DrvContextTypeDef *)(*handle))->pVTable;

  if ( driver->Init == NULL )
 8005916:	6a23      	ldr	r3, [r4, #32]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 8093 	beq.w	8005a46 <BSP_ACCELERO_Init+0x17a>
    memset((*handle), 0, sizeof(DrvContextTypeDef));
    *handle = NULL;
    return COMPONENT_ERROR;
  }

  if ( driver->Init( (DrvContextTypeDef *)(*handle) ) == COMPONENT_ERROR )
 8005920:	4798      	blx	r3
 8005922:	2801      	cmp	r0, #1
 8005924:	d07e      	beq.n	8005a24 <BSP_ACCELERO_Init+0x158>
    *handle = NULL;
    return COMPONENT_ERROR;
  }

  /* Configure interrupt lines for LSM6DS3 */
  LSM6DS3_Sensor_IO_ITConfig();
 8005926:	f7ff feef 	bl	8005708 <LSM6DS3_Sensor_IO_ITConfig>
  return COMPONENT_OK;
 800592a:	2000      	movs	r0, #0
}
 800592c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(ACCELERO_SensorHandle[ LSM6DS3_X_0 ].isInitialized == 1)
 800592e:	2b01      	cmp	r3, #1
 8005930:	d025      	beq.n	800597e <BSP_ACCELERO_Init+0xb2>
  if ( Sensor_IO_Init() == COMPONENT_ERROR )
 8005932:	f7ff fe83 	bl	800563c <Sensor_IO_Init>
 8005936:	2801      	cmp	r0, #1
 8005938:	d021      	beq.n	800597e <BSP_ACCELERO_Init+0xb2>
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].who_am_i      = LSM6DS3_ACC_GYRO_WHO_AM_I;
 800593a:	2369      	movs	r3, #105	; 0x69
 800593c:	82a3      	strh	r3, [r4, #20]
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].ifType        = 0; /* I2C interface */
 800593e:	21d4      	movs	r1, #212	; 0xd4
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].instance      = LSM6DS3_X_0;
 8005940:	4a49      	ldr	r2, [pc, #292]	; (8005a68 <BSP_ACCELERO_Init+0x19c>)
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].ifType        = 0; /* I2C interface */
 8005942:	75a1      	strb	r1, [r4, #22]
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].pData         = ( void * )&ACCELERO_Data[ LSM6DS3_X_0 ];
 8005944:	f104 0330 	add.w	r3, r4, #48	; 0x30
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].instance      = LSM6DS3_X_0;
 8005948:	61a2      	str	r2, [r4, #24]
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].pData         = ( void * )&ACCELERO_Data[ LSM6DS3_X_0 ];
 800594a:	61e3      	str	r3, [r4, #28]
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].pVTable       = ( void * )&LSM6DS3_X_Drv;
 800594c:	4947      	ldr	r1, [pc, #284]	; (8005a6c <BSP_ACCELERO_Init+0x1a0>)
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].pExtVTable    = ( void * )&LSM6DS3_X_ExtDrv;
 800594e:	4a48      	ldr	r2, [pc, #288]	; (8005a70 <BSP_ACCELERO_Init+0x1a4>)
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].pVTable       = ( void * )&LSM6DS3_X_Drv;
 8005950:	6221      	str	r1, [r4, #32]
  ACCELERO_Data[ LSM6DS3_X_0 ].pComponentData = ( void * )&LSM6DS3_X_0_Data;
 8005952:	f104 0338 	add.w	r3, r4, #56	; 0x38
  *handle = (void *)&ACCELERO_SensorHandle[ LSM6DS3_X_0 ];
 8005956:	f104 0014 	add.w	r0, r4, #20
  ACCELERO_Data[ LSM6DS3_X_0 ].pComponentData = ( void * )&LSM6DS3_X_0_Data;
 800595a:	6323      	str	r3, [r4, #48]	; 0x30
  ACCELERO_Data[ LSM6DS3_X_0 ].pExtData       = 0;
 800595c:	6366      	str	r6, [r4, #52]	; 0x34
  ACCELERO_SensorHandle[ LSM6DS3_X_0 ].pExtVTable    = ( void * )&LSM6DS3_X_ExtDrv;
 800595e:	6262      	str	r2, [r4, #36]	; 0x24
  *handle = (void *)&ACCELERO_SensorHandle[ LSM6DS3_X_0 ];
 8005960:	6038      	str	r0, [r7, #0]
  if ( driver->Init == NULL )
 8005962:	6a23      	ldr	r3, [r4, #32]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d075      	beq.n	8005a56 <BSP_ACCELERO_Init+0x18a>
  if ( driver->Init( (DrvContextTypeDef *)(*handle) ) == COMPONENT_ERROR )
 800596a:	4798      	blx	r3
 800596c:	2801      	cmp	r0, #1
 800596e:	d1da      	bne.n	8005926 <BSP_ACCELERO_Init+0x5a>
    memset((*handle), 0, sizeof(DrvContextTypeDef));
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	601e      	str	r6, [r3, #0]
 8005974:	605e      	str	r6, [r3, #4]
 8005976:	609e      	str	r6, [r3, #8]
 8005978:	60de      	str	r6, [r3, #12]
 800597a:	611e      	str	r6, [r3, #16]
    *handle = NULL;
 800597c:	603e      	str	r6, [r7, #0]
  if(ACCELERO_SensorHandle[ LSM6DS0_X_0 ].isInitialized == 1)
 800597e:	7963      	ldrb	r3, [r4, #5]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d02a      	beq.n	80059da <BSP_ACCELERO_Init+0x10e>
  if ( Sensor_IO_Init() == COMPONENT_ERROR )
 8005984:	f7ff fe5a 	bl	800563c <Sensor_IO_Init>
 8005988:	2801      	cmp	r0, #1
 800598a:	d026      	beq.n	80059da <BSP_ACCELERO_Init+0x10e>
  ACCELERO_SensorHandle[ LSM6DS0_X_0 ].pData         = ( void * )&ACCELERO_Data[ LSM6DS0_X_0 ];
 800598c:	4839      	ldr	r0, [pc, #228]	; (8005a74 <BSP_ACCELERO_Init+0x1a8>)
  ACCELERO_SensorHandle[ LSM6DS0_X_0 ].pVTable       = ( void * )&LSM6DS0_X_Drv;
 800598e:	4a3a      	ldr	r2, [pc, #232]	; (8005a78 <BSP_ACCELERO_Init+0x1ac>)
  LSM6DS0_X_0_Data.comboData = &LSM6DS0_Combo_Data[0];
 8005990:	4b3a      	ldr	r3, [pc, #232]	; (8005a7c <BSP_ACCELERO_Init+0x1b0>)
 8005992:	6423      	str	r3, [r4, #64]	; 0x40
  ACCELERO_Data[ LSM6DS0_X_0 ].pComponentData = ( void * )&LSM6DS0_X_0_Data;
 8005994:	f100 0114 	add.w	r1, r0, #20
 8005998:	62a1      	str	r1, [r4, #40]	; 0x28
  ACCELERO_SensorHandle[ LSM6DS0_X_0 ].pExtVTable    = 0;
 800599a:	2500      	movs	r5, #0
  ACCELERO_SensorHandle[ LSM6DS0_X_0 ].who_am_i      = LSM6DS0_ACC_GYRO_WHO_AM_I;
 800599c:	2168      	movs	r1, #104	; 0x68
 800599e:	8021      	strh	r1, [r4, #0]
  ACCELERO_SensorHandle[ LSM6DS0_X_0 ].pExtVTable    = 0;
 80059a0:	e9c4 2503 	strd	r2, r5, [r4, #12]
  ACCELERO_SensorHandle[ LSM6DS0_X_0 ].ifType        = 0; /* I2C interface */
 80059a4:	21d6      	movs	r1, #214	; 0xd6
 80059a6:	70a1      	strb	r1, [r4, #2]
  ACCELERO_SensorHandle[ LSM6DS0_X_0 ].instance      = LSM6DS0_X_0;
 80059a8:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80059ac:	6061      	str	r1, [r4, #4]
  ACCELERO_SensorHandle[ LSM6DS0_X_0 ].pData         = ( void * )&ACCELERO_Data[ LSM6DS0_X_0 ];
 80059ae:	60a0      	str	r0, [r4, #8]
  ACCELERO_Data[ LSM6DS0_X_0 ].pExtData       = 0;
 80059b0:	62e5      	str	r5, [r4, #44]	; 0x2c
  *handle = (void *)&ACCELERO_SensorHandle[ LSM6DS0_X_0 ];
 80059b2:	603c      	str	r4, [r7, #0]
  if ( driver->Init == NULL )
 80059b4:	68e3      	ldr	r3, [r4, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d03b      	beq.n	8005a34 <BSP_ACCELERO_Init+0x168>
  if ( driver->Init( (DrvContextTypeDef *)(*handle) ) == COMPONENT_ERROR )
 80059bc:	3828      	subs	r0, #40	; 0x28
 80059be:	4798      	blx	r3
 80059c0:	2801      	cmp	r0, #1
 80059c2:	d12b      	bne.n	8005a1c <BSP_ACCELERO_Init+0x150>
    memset((*handle), 0, sizeof(DrvContextTypeDef));
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	601d      	str	r5, [r3, #0]
 80059c8:	605d      	str	r5, [r3, #4]
 80059ca:	609d      	str	r5, [r3, #8]
 80059cc:	60dd      	str	r5, [r3, #12]
 80059ce:	611d      	str	r5, [r3, #16]
    *handle = NULL;
 80059d0:	603d      	str	r5, [r7, #0]
}
 80059d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(ACCELERO_SensorHandle[ LSM6DS0_X_0 ].isInitialized == 1)
 80059d4:	7963      	ldrb	r3, [r4, #5]
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d101      	bne.n	80059de <BSP_ACCELERO_Init+0x112>
          return COMPONENT_ERROR;
 80059da:	2001      	movs	r0, #1
}
 80059dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if ( Sensor_IO_Init() == COMPONENT_ERROR )
 80059de:	f7ff fe2d 	bl	800563c <Sensor_IO_Init>
 80059e2:	2801      	cmp	r0, #1
 80059e4:	d0f9      	beq.n	80059da <BSP_ACCELERO_Init+0x10e>
  ACCELERO_SensorHandle[ LSM6DS0_X_0 ].who_am_i      = LSM6DS0_ACC_GYRO_WHO_AM_I;
 80059e6:	2368      	movs	r3, #104	; 0x68
 80059e8:	8023      	strh	r3, [r4, #0]
  ACCELERO_SensorHandle[ LSM6DS0_X_0 ].ifType        = 0; /* I2C interface */
 80059ea:	21d6      	movs	r1, #214	; 0xd6
  ACCELERO_SensorHandle[ LSM6DS0_X_0 ].instance      = LSM6DS0_X_0;
 80059ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
  ACCELERO_SensorHandle[ LSM6DS0_X_0 ].pData         = ( void * )&ACCELERO_Data[ LSM6DS0_X_0 ];
 80059f0:	f104 0328 	add.w	r3, r4, #40	; 0x28
  ACCELERO_SensorHandle[ LSM6DS0_X_0 ].ifType        = 0; /* I2C interface */
 80059f4:	70a1      	strb	r1, [r4, #2]
  ACCELERO_SensorHandle[ LSM6DS0_X_0 ].instance      = LSM6DS0_X_0;
 80059f6:	6062      	str	r2, [r4, #4]
  ACCELERO_SensorHandle[ LSM6DS0_X_0 ].pData         = ( void * )&ACCELERO_Data[ LSM6DS0_X_0 ];
 80059f8:	60a3      	str	r3, [r4, #8]
  ACCELERO_SensorHandle[ LSM6DS0_X_0 ].pVTable       = ( void * )&LSM6DS0_X_Drv;
 80059fa:	491f      	ldr	r1, [pc, #124]	; (8005a78 <BSP_ACCELERO_Init+0x1ac>)
  LSM6DS0_X_0_Data.comboData = &LSM6DS0_Combo_Data[0];
 80059fc:	4a1f      	ldr	r2, [pc, #124]	; (8005a7c <BSP_ACCELERO_Init+0x1b0>)
  ACCELERO_SensorHandle[ LSM6DS0_X_0 ].pVTable       = ( void * )&LSM6DS0_X_Drv;
 80059fe:	60e1      	str	r1, [r4, #12]
  ACCELERO_Data[ LSM6DS0_X_0 ].pComponentData = ( void * )&LSM6DS0_X_0_Data;
 8005a00:	f104 033c 	add.w	r3, r4, #60	; 0x3c
 8005a04:	62a3      	str	r3, [r4, #40]	; 0x28
  ACCELERO_SensorHandle[ LSM6DS0_X_0 ].pExtVTable    = 0;
 8005a06:	6125      	str	r5, [r4, #16]
  ACCELERO_Data[ LSM6DS0_X_0 ].pExtData       = 0;
 8005a08:	62e5      	str	r5, [r4, #44]	; 0x2c
  LSM6DS0_X_0_Data.comboData = &LSM6DS0_Combo_Data[0];
 8005a0a:	6422      	str	r2, [r4, #64]	; 0x40
  *handle = (void *)&ACCELERO_SensorHandle[ LSM6DS0_X_0 ];
 8005a0c:	603c      	str	r4, [r7, #0]
  if ( driver->Init == NULL )
 8005a0e:	68e3      	ldr	r3, [r4, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	b17b      	cbz	r3, 8005a34 <BSP_ACCELERO_Init+0x168>
  if ( driver->Init( (DrvContextTypeDef *)(*handle) ) == COMPONENT_ERROR )
 8005a14:	4620      	mov	r0, r4
 8005a16:	4798      	blx	r3
 8005a18:	2801      	cmp	r0, #1
 8005a1a:	d0d3      	beq.n	80059c4 <BSP_ACCELERO_Init+0xf8>
  LSM6DS0_Sensor_IO_ITConfig();
 8005a1c:	f7ff fe72 	bl	8005704 <LSM6DS0_Sensor_IO_ITConfig>
  return COMPONENT_OK;
 8005a20:	2000      	movs	r0, #0
}
 8005a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memset((*handle), 0, sizeof(DrvContextTypeDef));
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	601e      	str	r6, [r3, #0]
 8005a28:	605e      	str	r6, [r3, #4]
 8005a2a:	609e      	str	r6, [r3, #8]
 8005a2c:	60de      	str	r6, [r3, #12]
 8005a2e:	611e      	str	r6, [r3, #16]
    *handle = NULL;
 8005a30:	603e      	str	r6, [r7, #0]
}
 8005a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memset((*handle), 0, sizeof(DrvContextTypeDef));
 8005a34:	2300      	movs	r3, #0
 8005a36:	e9c4 3300 	strd	r3, r3, [r4]
 8005a3a:	e9c4 3302 	strd	r3, r3, [r4, #8]
 8005a3e:	6123      	str	r3, [r4, #16]
          return COMPONENT_ERROR;
 8005a40:	2001      	movs	r0, #1
    *handle = NULL;
 8005a42:	603b      	str	r3, [r7, #0]
}
 8005a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memset((*handle), 0, sizeof(DrvContextTypeDef));
 8005a46:	6163      	str	r3, [r4, #20]
 8005a48:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8005a4c:	e9c0 3303 	strd	r3, r3, [r0, #12]
        return COMPONENT_ERROR;
 8005a50:	4628      	mov	r0, r5
    *handle = NULL;
 8005a52:	603b      	str	r3, [r7, #0]
}
 8005a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    memset((*handle), 0, sizeof(DrvContextTypeDef));
 8005a56:	6163      	str	r3, [r4, #20]
 8005a58:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8005a5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
    *handle = NULL;
 8005a60:	603b      	str	r3, [r7, #0]
 8005a62:	e78c      	b.n	800597e <BSP_ACCELERO_Init+0xb2>
 8005a64:	2000033c 	.word	0x2000033c
 8005a68:	01000001 	.word	0x01000001
 8005a6c:	200000f0 	.word	0x200000f0
 8005a70:	2000017c 	.word	0x2000017c
 8005a74:	20000364 	.word	0x20000364
 8005a78:	20000050 	.word	0x20000050
 8005a7c:	200004a4 	.word	0x200004a4

08005a80 <BSP_ACCELERO_Sensor_Enable>:
{

  DrvContextTypeDef *ctx = (DrvContextTypeDef *)handle;
  ACCELERO_Drv_t *driver = NULL;

  if(ctx == NULL)
 8005a80:	b150      	cbz	r0, 8005a98 <BSP_ACCELERO_Sensor_Enable+0x18>
{
 8005a82:	b508      	push	{r3, lr}
    return COMPONENT_ERROR;
  }

  driver = ( ACCELERO_Drv_t * )ctx->pVTable;

  if ( driver->Sensor_Enable == NULL )
 8005a84:	68c3      	ldr	r3, [r0, #12]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	b143      	cbz	r3, 8005a9c <BSP_ACCELERO_Sensor_Enable+0x1c>
  {
    return COMPONENT_ERROR;
  }

  if ( driver->Sensor_Enable( ctx ) == COMPONENT_ERROR )
 8005a8a:	4798      	blx	r3
    return COMPONENT_ERROR;
 8005a8c:	f1a0 0001 	sub.w	r0, r0, #1
 8005a90:	fab0 f080 	clz	r0, r0
 8005a94:	0940      	lsrs	r0, r0, #5
  {
    return COMPONENT_ERROR;
  }

  return COMPONENT_OK;
}
 8005a96:	bd08      	pop	{r3, pc}
    return COMPONENT_ERROR;
 8005a98:	2001      	movs	r0, #1
}
 8005a9a:	4770      	bx	lr
    return COMPONENT_ERROR;
 8005a9c:	2001      	movs	r0, #1
}
 8005a9e:	bd08      	pop	{r3, pc}

08005aa0 <BSP_ACCELERO_IsInitialized>:
 */
DrvStatusTypeDef BSP_ACCELERO_IsInitialized( void *handle, uint8_t *status )
{
  DrvContextTypeDef *ctx = (DrvContextTypeDef *)handle;

  if(ctx == NULL)
 8005aa0:	b120      	cbz	r0, 8005aac <BSP_ACCELERO_IsInitialized+0xc>
  {
    return COMPONENT_ERROR;
  }

  if ( status == NULL )
 8005aa2:	b119      	cbz	r1, 8005aac <BSP_ACCELERO_IsInitialized+0xc>
  {
    return COMPONENT_ERROR;
  }

  *status = ctx->isInitialized;
 8005aa4:	7943      	ldrb	r3, [r0, #5]
 8005aa6:	700b      	strb	r3, [r1, #0]

  return COMPONENT_OK;
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	4770      	bx	lr
    return COMPONENT_ERROR;
 8005aac:	2001      	movs	r0, #1
}
 8005aae:	4770      	bx	lr

08005ab0 <BSP_ACCELERO_Get_Instance>:
 */
DrvStatusTypeDef BSP_ACCELERO_Get_Instance( void *handle, uint8_t *instance )
{
  DrvContextTypeDef *ctx = (DrvContextTypeDef *)handle;

  if(ctx == NULL)
 8005ab0:	b120      	cbz	r0, 8005abc <BSP_ACCELERO_Get_Instance+0xc>
  {
    return COMPONENT_ERROR;
  }

  if ( instance == NULL )
 8005ab2:	b119      	cbz	r1, 8005abc <BSP_ACCELERO_Get_Instance+0xc>
  {
    return COMPONENT_ERROR;
  }

  *instance = ctx->instance;
 8005ab4:	7903      	ldrb	r3, [r0, #4]
 8005ab6:	700b      	strb	r3, [r1, #0]

  return COMPONENT_OK;
 8005ab8:	2000      	movs	r0, #0
 8005aba:	4770      	bx	lr
    return COMPONENT_ERROR;
 8005abc:	2001      	movs	r0, #1
}
 8005abe:	4770      	bx	lr

08005ac0 <BSP_ACCELERO_Get_Axes>:
{

  DrvContextTypeDef *ctx = (DrvContextTypeDef *)handle;
  ACCELERO_Drv_t *driver = NULL;

  if(ctx == NULL)
 8005ac0:	b158      	cbz	r0, 8005ada <BSP_ACCELERO_Get_Axes+0x1a>
{
 8005ac2:	b508      	push	{r3, lr}
    return COMPONENT_ERROR;
  }

  driver = ( ACCELERO_Drv_t * )ctx->pVTable;

  if(acceleration == NULL)
 8005ac4:	b159      	cbz	r1, 8005ade <BSP_ACCELERO_Get_Axes+0x1e>
  {
    return COMPONENT_ERROR;
  }

  if ( driver->Get_Axes == NULL )
 8005ac6:	68c3      	ldr	r3, [r0, #12]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	b143      	cbz	r3, 8005ade <BSP_ACCELERO_Get_Axes+0x1e>
  {
    return COMPONENT_ERROR;
  }

  if ( driver->Get_Axes( ctx, acceleration ) == COMPONENT_ERROR )
 8005acc:	4798      	blx	r3
    return COMPONENT_ERROR;
 8005ace:	f1a0 0001 	sub.w	r0, r0, #1
 8005ad2:	fab0 f080 	clz	r0, r0
 8005ad6:	0940      	lsrs	r0, r0, #5
  {
    return COMPONENT_ERROR;
  }

  return COMPONENT_OK;
}
 8005ad8:	bd08      	pop	{r3, pc}
    return COMPONENT_ERROR;
 8005ada:	2001      	movs	r0, #1
}
 8005adc:	4770      	bx	lr
    return COMPONENT_ERROR;
 8005ade:	2001      	movs	r0, #1
}
 8005ae0:	bd08      	pop	{r3, pc}
 8005ae2:	bf00      	nop

08005ae4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ae4:	4910      	ldr	r1, [pc, #64]	; (8005b28 <SystemInit+0x44>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005ae6:	4b11      	ldr	r3, [pc, #68]	; (8005b2c <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005ae8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005aec:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 8005af0:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005af2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8005af6:	681a      	ldr	r2, [r3, #0]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005af8:	4c0d      	ldr	r4, [pc, #52]	; (8005b30 <SystemInit+0x4c>)
  RCC->CFGR = 0x00000000;
 8005afa:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8005afc:	f042 0201 	orr.w	r2, r2, #1
 8005b00:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8005b02:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005b04:	681a      	ldr	r2, [r3, #0]
 8005b06:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005b0a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005b0e:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8005b10:	605c      	str	r4, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005b12:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005b14:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005b18:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005b1c:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;
 8005b1e:	60d8      	str	r0, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005b20:	608c      	str	r4, [r1, #8]
#endif
}
 8005b22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b26:	4770      	bx	lr
 8005b28:	e000ed00 	.word	0xe000ed00
 8005b2c:	40023800 	.word	0x40023800
 8005b30:	24003010 	.word	0x24003010

08005b34 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8005b34:	4770      	bx	lr
 8005b36:	bf00      	nop

08005b38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005b38:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005b3a:	4b0e      	ldr	r3, [pc, #56]	; (8005b74 <HAL_InitTick+0x3c>)
 8005b3c:	4d0e      	ldr	r5, [pc, #56]	; (8005b78 <HAL_InitTick+0x40>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	782a      	ldrb	r2, [r5, #0]
{
 8005b42:	4606      	mov	r6, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005b44:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005b48:	fbb0 f0f2 	udiv	r0, r0, r2
 8005b4c:	fbb3 f0f0 	udiv	r0, r3, r0
 8005b50:	f000 f8a6 	bl	8005ca0 <HAL_SYSTICK_Config>
 8005b54:	b908      	cbnz	r0, 8005b5a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b56:	2e0f      	cmp	r6, #15
 8005b58:	d901      	bls.n	8005b5e <HAL_InitTick+0x26>
    return HAL_ERROR;
 8005b5a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8005b5c:	bd70      	pop	{r4, r5, r6, pc}
 8005b5e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b60:	4602      	mov	r2, r0
 8005b62:	4631      	mov	r1, r6
 8005b64:	f04f 30ff 	mov.w	r0, #4294967295
 8005b68:	f000 f858 	bl	8005c1c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005b6c:	606e      	str	r6, [r5, #4]
 8005b6e:	4620      	mov	r0, r4
}
 8005b70:	bd70      	pop	{r4, r5, r6, pc}
 8005b72:	bf00      	nop
 8005b74:	2000025c 	.word	0x2000025c
 8005b78:	20000260 	.word	0x20000260

08005b7c <HAL_Init>:
{
 8005b7c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005b7e:	4b0b      	ldr	r3, [pc, #44]	; (8005bac <HAL_Init+0x30>)
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b86:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b8e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b96:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b98:	2003      	movs	r0, #3
 8005b9a:	f000 f82d 	bl	8005bf8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b9e:	200f      	movs	r0, #15
 8005ba0:	f7ff ffca 	bl	8005b38 <HAL_InitTick>
  HAL_MspInit();
 8005ba4:	f7ff ffc6 	bl	8005b34 <HAL_MspInit>
}
 8005ba8:	2000      	movs	r0, #0
 8005baa:	bd08      	pop	{r3, pc}
 8005bac:	40023c00 	.word	0x40023c00

08005bb0 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005bb0:	4a03      	ldr	r2, [pc, #12]	; (8005bc0 <HAL_IncTick+0x10>)
 8005bb2:	4b04      	ldr	r3, [pc, #16]	; (8005bc4 <HAL_IncTick+0x14>)
 8005bb4:	6811      	ldr	r1, [r2, #0]
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	440b      	add	r3, r1
 8005bba:	6013      	str	r3, [r2, #0]
}
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	200004ac 	.word	0x200004ac
 8005bc4:	20000260 	.word	0x20000260

08005bc8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005bc8:	4b01      	ldr	r3, [pc, #4]	; (8005bd0 <HAL_GetTick+0x8>)
 8005bca:	6818      	ldr	r0, [r3, #0]
}
 8005bcc:	4770      	bx	lr
 8005bce:	bf00      	nop
 8005bd0:	200004ac 	.word	0x200004ac

08005bd4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005bd4:	b538      	push	{r3, r4, r5, lr}
 8005bd6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005bd8:	f7ff fff6 	bl	8005bc8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005bdc:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8005bde:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8005be0:	d002      	beq.n	8005be8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8005be2:	4b04      	ldr	r3, [pc, #16]	; (8005bf4 <HAL_Delay+0x20>)
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005be8:	f7ff ffee 	bl	8005bc8 <HAL_GetTick>
 8005bec:	1b40      	subs	r0, r0, r5
 8005bee:	42a0      	cmp	r0, r4
 8005bf0:	d3fa      	bcc.n	8005be8 <HAL_Delay+0x14>
  {
  }
}
 8005bf2:	bd38      	pop	{r3, r4, r5, pc}
 8005bf4:	20000260 	.word	0x20000260

08005bf8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005bf8:	4a07      	ldr	r2, [pc, #28]	; (8005c18 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8005bfa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005bfc:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8005c00:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8005c02:	0200      	lsls	r0, r0, #8
 8005c04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005c08:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8005c0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8005c10:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8005c12:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	e000ed00 	.word	0xe000ed00

08005c1c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c1c:	4b18      	ldr	r3, [pc, #96]	; (8005c80 <HAL_NVIC_SetPriority+0x64>)
 8005c1e:	68db      	ldr	r3, [r3, #12]
 8005c20:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c24:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c26:	f1c3 0507 	rsb	r5, r3, #7
 8005c2a:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c2c:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005c30:	bf28      	it	cs
 8005c32:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c34:	2c06      	cmp	r4, #6
 8005c36:	d919      	bls.n	8005c6c <HAL_NVIC_SetPriority+0x50>
 8005c38:	3b03      	subs	r3, #3
 8005c3a:	f04f 34ff 	mov.w	r4, #4294967295
 8005c3e:	409c      	lsls	r4, r3
 8005c40:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c44:	f04f 32ff 	mov.w	r2, #4294967295
 8005c48:	40aa      	lsls	r2, r5
 8005c4a:	ea21 0102 	bic.w	r1, r1, r2
 8005c4e:	fa01 f203 	lsl.w	r2, r1, r3
 8005c52:	4322      	orrs	r2, r4
 8005c54:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) < 0)
 8005c56:	2800      	cmp	r0, #0
 8005c58:	b2d2      	uxtb	r2, r2
 8005c5a:	db0a      	blt.n	8005c72 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c5c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005c60:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005c64:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005c68:	bc30      	pop	{r4, r5}
 8005c6a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c6c:	2400      	movs	r4, #0
 8005c6e:	4623      	mov	r3, r4
 8005c70:	e7e8      	b.n	8005c44 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c72:	4b04      	ldr	r3, [pc, #16]	; (8005c84 <HAL_NVIC_SetPriority+0x68>)
 8005c74:	f000 000f 	and.w	r0, r0, #15
 8005c78:	4403      	add	r3, r0
 8005c7a:	761a      	strb	r2, [r3, #24]
 8005c7c:	bc30      	pop	{r4, r5}
 8005c7e:	4770      	bx	lr
 8005c80:	e000ed00 	.word	0xe000ed00
 8005c84:	e000ecfc 	.word	0xe000ecfc

08005c88 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8005c88:	f000 011f 	and.w	r1, r0, #31
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	0940      	lsrs	r0, r0, #5
 8005c90:	4a02      	ldr	r2, [pc, #8]	; (8005c9c <HAL_NVIC_EnableIRQ+0x14>)
 8005c92:	408b      	lsls	r3, r1
 8005c94:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	e000e100 	.word	0xe000e100

08005ca0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ca0:	3801      	subs	r0, #1
 8005ca2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005ca6:	d20e      	bcs.n	8005cc6 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005ca8:	4b08      	ldr	r3, [pc, #32]	; (8005ccc <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005caa:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cac:	4c08      	ldr	r4, [pc, #32]	; (8005cd0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005cae:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cb0:	20f0      	movs	r0, #240	; 0xf0
 8005cb2:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005cb6:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005cb8:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005cba:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005cbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005cbe:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8005cc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005cc4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005cc6:	2001      	movs	r0, #1
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	e000e010 	.word	0xe000e010
 8005cd0:	e000ed00 	.word	0xe000ed00

08005cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005cd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005cd8:	f8df c1b4 	ldr.w	ip, [pc, #436]	; 8005e90 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005cdc:	f8d1 8000 	ldr.w	r8, [r1]
{
 8005ce0:	b083      	sub	sp, #12
 8005ce2:	468e      	mov	lr, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005ce4:	2500      	movs	r5, #0
    ioposition = 0x01U << position;
 8005ce6:	f04f 0901 	mov.w	r9, #1
 8005cea:	e002      	b.n	8005cf2 <HAL_GPIO_Init+0x1e>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005cec:	3501      	adds	r5, #1
 8005cee:	2d10      	cmp	r5, #16
 8005cf0:	d07e      	beq.n	8005df0 <HAL_GPIO_Init+0x11c>
    ioposition = 0x01U << position;
 8005cf2:	fa09 f305 	lsl.w	r3, r9, r5
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005cf6:	ea08 0103 	and.w	r1, r8, r3
    if(iocurrent == ioposition)
 8005cfa:	428b      	cmp	r3, r1
 8005cfc:	d1f6      	bne.n	8005cec <HAL_GPIO_Init+0x18>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005cfe:	f8de 4004 	ldr.w	r4, [lr, #4]
 8005d02:	f024 0a10 	bic.w	sl, r4, #16
 8005d06:	f1ba 0f02 	cmp.w	sl, #2
 8005d0a:	d074      	beq.n	8005df6 <HAL_GPIO_Init+0x122>
 8005d0c:	006f      	lsls	r7, r5, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d0e:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 8005d10:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d14:	40ba      	lsls	r2, r7
 8005d16:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d18:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005d1c:	ea02 0b0b 	and.w	fp, r2, fp
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d20:	40be      	lsls	r6, r7
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d22:	f10a 3aff 	add.w	sl, sl, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005d26:	ea46 060b 	orr.w	r6, r6, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d2a:	f1ba 0f01 	cmp.w	sl, #1
      GPIOx->MODER = temp;
 8005d2e:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d30:	f240 8082 	bls.w	8005e38 <HAL_GPIO_Init+0x164>
      temp = GPIOx->PUPDR;
 8005d34:	68c6      	ldr	r6, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d36:	f8de 3008 	ldr.w	r3, [lr, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d3a:	4032      	ands	r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d3c:	40bb      	lsls	r3, r7
 8005d3e:	4313      	orrs	r3, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005d40:	00e7      	lsls	r7, r4, #3
      GPIOx->PUPDR = temp;
 8005d42:	60c3      	str	r3, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005d44:	d5d2      	bpl.n	8005cec <HAL_GPIO_Init+0x18>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d46:	4a4d      	ldr	r2, [pc, #308]	; (8005e7c <HAL_GPIO_Init+0x1a8>)
 8005d48:	2300      	movs	r3, #0
 8005d4a:	9301      	str	r3, [sp, #4]
 8005d4c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005d4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d52:	6453      	str	r3, [r2, #68]	; 0x44
 8005d54:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005d56:	f025 0603 	bic.w	r6, r5, #3
 8005d5a:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8005d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d62:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8005d66:	9301      	str	r3, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d68:	f005 0203 	and.w	r2, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d6c:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005d6e:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005d70:	0092      	lsls	r2, r2, #2
 8005d72:	230f      	movs	r3, #15
 8005d74:	4093      	lsls	r3, r2
 8005d76:	ea27 0303 	bic.w	r3, r7, r3
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005d7a:	4f41      	ldr	r7, [pc, #260]	; (8005e80 <HAL_GPIO_Init+0x1ac>)
 8005d7c:	42b8      	cmp	r0, r7
 8005d7e:	d011      	beq.n	8005da4 <HAL_GPIO_Init+0xd0>
 8005d80:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8005d84:	42b8      	cmp	r0, r7
 8005d86:	d06a      	beq.n	8005e5e <HAL_GPIO_Init+0x18a>
 8005d88:	4f3e      	ldr	r7, [pc, #248]	; (8005e84 <HAL_GPIO_Init+0x1b0>)
 8005d8a:	42b8      	cmp	r0, r7
 8005d8c:	d06b      	beq.n	8005e66 <HAL_GPIO_Init+0x192>
 8005d8e:	4f3e      	ldr	r7, [pc, #248]	; (8005e88 <HAL_GPIO_Init+0x1b4>)
 8005d90:	42b8      	cmp	r0, r7
 8005d92:	d06d      	beq.n	8005e70 <HAL_GPIO_Init+0x19c>
 8005d94:	4f3d      	ldr	r7, [pc, #244]	; (8005e8c <HAL_GPIO_Init+0x1b8>)
 8005d96:	42b8      	cmp	r0, r7
 8005d98:	bf0c      	ite	eq
 8005d9a:	2704      	moveq	r7, #4
 8005d9c:	2707      	movne	r7, #7
 8005d9e:	fa07 f202 	lsl.w	r2, r7, r2
 8005da2:	4313      	orrs	r3, r2
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005da4:	60b3      	str	r3, [r6, #8]
        temp = EXTI->IMR;
 8005da6:	f8dc 3000 	ldr.w	r3, [ip]
        temp &= ~((uint32_t)iocurrent);
 8005daa:	43ca      	mvns	r2, r1
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005dac:	03e6      	lsls	r6, r4, #15
        temp &= ~((uint32_t)iocurrent);
 8005dae:	bf54      	ite	pl
 8005db0:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8005db2:	430b      	orrmi	r3, r1
        }
        EXTI->IMR = temp;
 8005db4:	f8cc 3000 	str.w	r3, [ip]

        temp = EXTI->EMR;
 8005db8:	f8dc 3004 	ldr.w	r3, [ip, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005dbc:	03a7      	lsls	r7, r4, #14
        temp &= ~((uint32_t)iocurrent);
 8005dbe:	bf54      	ite	pl
 8005dc0:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8005dc2:	430b      	orrmi	r3, r1
        }
        EXTI->EMR = temp;
 8005dc4:	f8cc 3004 	str.w	r3, [ip, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005dc8:	f8dc 3008 	ldr.w	r3, [ip, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005dcc:	02e6      	lsls	r6, r4, #11
        temp &= ~((uint32_t)iocurrent);
 8005dce:	bf54      	ite	pl
 8005dd0:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8005dd2:	430b      	orrmi	r3, r1
        }
        EXTI->RTSR = temp;
 8005dd4:	f8cc 3008 	str.w	r3, [ip, #8]

        temp = EXTI->FTSR;
 8005dd8:	f8dc 300c 	ldr.w	r3, [ip, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005ddc:	02a4      	lsls	r4, r4, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005dde:	f105 0501 	add.w	r5, r5, #1
        temp &= ~((uint32_t)iocurrent);
 8005de2:	bf54      	ite	pl
 8005de4:	4013      	andpl	r3, r2
        {
          temp |= iocurrent;
 8005de6:	430b      	orrmi	r3, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005de8:	2d10      	cmp	r5, #16
        }
        EXTI->FTSR = temp;
 8005dea:	f8cc 300c 	str.w	r3, [ip, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005dee:	d180      	bne.n	8005cf2 <HAL_GPIO_Init+0x1e>
      }
    }
  }
}
 8005df0:	b003      	add	sp, #12
 8005df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->AFR[position >> 3U];
 8005df6:	08ef      	lsrs	r7, r5, #3
 8005df8:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005dfc:	f005 0607 	and.w	r6, r5, #7
        temp = GPIOx->AFR[position >> 3U];
 8005e00:	6a3a      	ldr	r2, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005e02:	00b6      	lsls	r6, r6, #2
 8005e04:	f04f 0b0f 	mov.w	fp, #15
 8005e08:	fa0b fb06 	lsl.w	fp, fp, r6
 8005e0c:	ea22 0a0b 	bic.w	sl, r2, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005e10:	f8de 2010 	ldr.w	r2, [lr, #16]
 8005e14:	40b2      	lsls	r2, r6
 8005e16:	ea42 020a 	orr.w	r2, r2, sl
        GPIOx->AFR[position >> 3U] = temp;
 8005e1a:	623a      	str	r2, [r7, #32]
 8005e1c:	006f      	lsls	r7, r5, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e1e:	2203      	movs	r2, #3
      temp = GPIOx->MODER;
 8005e20:	f8d0 a000 	ldr.w	sl, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e24:	40ba      	lsls	r2, r7
 8005e26:	43d2      	mvns	r2, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e28:	f004 0603 	and.w	r6, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005e2c:	ea0a 0a02 	and.w	sl, sl, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005e30:	40be      	lsls	r6, r7
 8005e32:	ea46 060a 	orr.w	r6, r6, sl
      GPIOx->MODER = temp;
 8005e36:	6006      	str	r6, [r0, #0]
        temp = GPIOx->OSPEEDR; 
 8005e38:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005e3a:	ea06 0a02 	and.w	sl, r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e3e:	f8de 600c 	ldr.w	r6, [lr, #12]
 8005e42:	40be      	lsls	r6, r7
 8005e44:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OSPEEDR = temp;
 8005e48:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8005e4a:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005e4e:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e52:	ea2a 0303 	bic.w	r3, sl, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005e56:	40ae      	lsls	r6, r5
 8005e58:	431e      	orrs	r6, r3
        GPIOx->OTYPER = temp;
 8005e5a:	6046      	str	r6, [r0, #4]
 8005e5c:	e76a      	b.n	8005d34 <HAL_GPIO_Init+0x60>
 8005e5e:	fa09 f202 	lsl.w	r2, r9, r2
 8005e62:	4313      	orrs	r3, r2
 8005e64:	e79e      	b.n	8005da4 <HAL_GPIO_Init+0xd0>
 8005e66:	2702      	movs	r7, #2
 8005e68:	fa07 f202 	lsl.w	r2, r7, r2
 8005e6c:	4313      	orrs	r3, r2
 8005e6e:	e799      	b.n	8005da4 <HAL_GPIO_Init+0xd0>
 8005e70:	2703      	movs	r7, #3
 8005e72:	fa07 f202 	lsl.w	r2, r7, r2
 8005e76:	4313      	orrs	r3, r2
 8005e78:	e794      	b.n	8005da4 <HAL_GPIO_Init+0xd0>
 8005e7a:	bf00      	nop
 8005e7c:	40023800 	.word	0x40023800
 8005e80:	40020000 	.word	0x40020000
 8005e84:	40020800 	.word	0x40020800
 8005e88:	40020c00 	.word	0x40020c00
 8005e8c:	40021000 	.word	0x40021000
 8005e90:	40013c00 	.word	0x40013c00

08005e94 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005e94:	b902      	cbnz	r2, 8005e98 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005e96:	0409      	lsls	r1, r1, #16
 8005e98:	6181      	str	r1, [r0, #24]
  }
}
 8005e9a:	4770      	bx	lr

08005e9c <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop

08005ea0 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005ea0:	4a04      	ldr	r2, [pc, #16]	; (8005eb4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8005ea2:	6951      	ldr	r1, [r2, #20]
 8005ea4:	4201      	tst	r1, r0
 8005ea6:	d100      	bne.n	8005eaa <HAL_GPIO_EXTI_IRQHandler+0xa>
 8005ea8:	4770      	bx	lr
{
 8005eaa:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005eac:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005eae:	f7ff fff5 	bl	8005e9c <HAL_GPIO_EXTI_Callback>
}
 8005eb2:	bd08      	pop	{r3, pc}
 8005eb4:	40013c00 	.word	0x40013c00

08005eb8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005eb8:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8005ebc:	4605      	mov	r5, r0
  /* Generate Start */
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8005ebe:	6800      	ldr	r0, [r0, #0]
{
 8005ec0:	b082      	sub	sp, #8
 8005ec2:	4689      	mov	r9, r1
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8005ec4:	6801      	ldr	r1, [r0, #0]
{
 8005ec6:	9c08      	ldr	r4, [sp, #32]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8005ec8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
{
 8005ecc:	4616      	mov	r6, r2
 8005ece:	461f      	mov	r7, r3
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8005ed0:	6001      	str	r1, [r0, #0]
 8005ed2:	1c62      	adds	r2, r4, #1
 8005ed4:	d12f      	bne.n	8005f36 <I2C_RequestMemoryWrite+0x7e>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8005ed6:	6943      	ldr	r3, [r0, #20]
 8005ed8:	07db      	lsls	r3, r3, #31
 8005eda:	d5fc      	bpl.n	8005ed6 <I2C_RequestMemoryWrite+0x1e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005edc:	f009 01fe 	and.w	r1, r9, #254	; 0xfe
 8005ee0:	6101      	str	r1, [r0, #16]
 8005ee2:	1c63      	adds	r3, r4, #1
 8005ee4:	d003      	beq.n	8005eee <I2C_RequestMemoryWrite+0x36>
 8005ee6:	e033      	b.n	8005f50 <I2C_RequestMemoryWrite+0x98>
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ee8:	6943      	ldr	r3, [r0, #20]
 8005eea:	055a      	lsls	r2, r3, #21
 8005eec:	d440      	bmi.n	8005f70 <I2C_RequestMemoryWrite+0xb8>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005eee:	6943      	ldr	r3, [r0, #20]
 8005ef0:	0799      	lsls	r1, r3, #30
 8005ef2:	d5f9      	bpl.n	8005ee8 <I2C_RequestMemoryWrite+0x30>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	9301      	str	r3, [sp, #4]
 8005ef8:	6943      	ldr	r3, [r0, #20]
 8005efa:	9301      	str	r3, [sp, #4]
 8005efc:	6983      	ldr	r3, [r0, #24]
 8005efe:	9301      	str	r3, [sp, #4]
 8005f00:	9b01      	ldr	r3, [sp, #4]
 8005f02:	1c62      	adds	r2, r4, #1
 8005f04:	d003      	beq.n	8005f0e <I2C_RequestMemoryWrite+0x56>
 8005f06:	e064      	b.n	8005fd2 <I2C_RequestMemoryWrite+0x11a>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f08:	6943      	ldr	r3, [r0, #20]
 8005f0a:	0559      	lsls	r1, r3, #21
 8005f0c:	d44b      	bmi.n	8005fa6 <I2C_RequestMemoryWrite+0xee>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f0e:	6943      	ldr	r3, [r0, #20]
 8005f10:	061b      	lsls	r3, r3, #24
 8005f12:	d5f9      	bpl.n	8005f08 <I2C_RequestMemoryWrite+0x50>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005f14:	2f01      	cmp	r7, #1
 8005f16:	d00a      	beq.n	8005f2e <I2C_RequestMemoryWrite+0x76>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005f18:	0a33      	lsrs	r3, r6, #8
 8005f1a:	6103      	str	r3, [r0, #16]
 8005f1c:	1c67      	adds	r7, r4, #1
 8005f1e:	d003      	beq.n	8005f28 <I2C_RequestMemoryWrite+0x70>
 8005f20:	e071      	b.n	8006006 <I2C_RequestMemoryWrite+0x14e>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f22:	6943      	ldr	r3, [r0, #20]
 8005f24:	055a      	lsls	r2, r3, #21
 8005f26:	d43e      	bmi.n	8005fa6 <I2C_RequestMemoryWrite+0xee>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f28:	6943      	ldr	r3, [r0, #20]
 8005f2a:	0619      	lsls	r1, r3, #24
 8005f2c:	d5f9      	bpl.n	8005f22 <I2C_RequestMemoryWrite+0x6a>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005f2e:	b2f6      	uxtb	r6, r6
 8005f30:	6106      	str	r6, [r0, #16]
  return HAL_OK;
 8005f32:	2000      	movs	r0, #0
 8005f34:	e034      	b.n	8005fa0 <I2C_RequestMemoryWrite+0xe8>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8005f36:	6943      	ldr	r3, [r0, #20]
 8005f38:	07d9      	lsls	r1, r3, #31
 8005f3a:	d4cf      	bmi.n	8005edc <I2C_RequestMemoryWrite+0x24>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8005f3c:	2c00      	cmp	r4, #0
 8005f3e:	d057      	beq.n	8005ff0 <I2C_RequestMemoryWrite+0x138>
 8005f40:	f7ff fe42 	bl	8005bc8 <HAL_GetTick>
 8005f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f46:	1ac0      	subs	r0, r0, r3
 8005f48:	4284      	cmp	r4, r0
 8005f4a:	d351      	bcc.n	8005ff0 <I2C_RequestMemoryWrite+0x138>
 8005f4c:	6828      	ldr	r0, [r5, #0]
 8005f4e:	e7c0      	b.n	8005ed2 <I2C_RequestMemoryWrite+0x1a>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f50:	6943      	ldr	r3, [r0, #20]
 8005f52:	079b      	lsls	r3, r3, #30
 8005f54:	d4ce      	bmi.n	8005ef4 <I2C_RequestMemoryWrite+0x3c>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f56:	6943      	ldr	r3, [r0, #20]
 8005f58:	055a      	lsls	r2, r3, #21
 8005f5a:	d409      	bmi.n	8005f70 <I2C_RequestMemoryWrite+0xb8>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8005f5c:	2c00      	cmp	r4, #0
 8005f5e:	d061      	beq.n	8006024 <I2C_RequestMemoryWrite+0x16c>
 8005f60:	f7ff fe32 	bl	8005bc8 <HAL_GetTick>
 8005f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f66:	1ac0      	subs	r0, r0, r3
 8005f68:	4284      	cmp	r4, r0
 8005f6a:	d35b      	bcc.n	8006024 <I2C_RequestMemoryWrite+0x16c>
 8005f6c:	6828      	ldr	r0, [r5, #0]
 8005f6e:	e7b8      	b.n	8005ee2 <I2C_RequestMemoryWrite+0x2a>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005f70:	6803      	ldr	r3, [r0, #0]
 8005f72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005f76:	6003      	str	r3, [r0, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f78:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f7a:	f46f 6480 	mvn.w	r4, #1024	; 0x400
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005f7e:	2104      	movs	r1, #4
      hi2c->State= HAL_I2C_STATE_READY;
 8005f80:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f82:	6144      	str	r4, [r0, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005f84:	6429      	str	r1, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005f86:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005f8a:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8005f8c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005f90:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8005f92:	2b04      	cmp	r3, #4
 8005f94:	d103      	bne.n	8005f9e <I2C_RequestMemoryWrite+0xe6>
      return HAL_ERROR;
 8005f96:	2001      	movs	r0, #1
}
 8005f98:	b002      	add	sp, #8
 8005f9a:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
      return HAL_TIMEOUT;
 8005f9e:	2003      	movs	r0, #3
}
 8005fa0:	b002      	add	sp, #8
 8005fa2:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fa6:	2300      	movs	r3, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fa8:	f46f 6480 	mvn.w	r4, #1024	; 0x400
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005fac:	2104      	movs	r1, #4
    hi2c->State= HAL_I2C_STATE_READY;
 8005fae:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fb0:	6144      	str	r4, [r0, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8005fb2:	6429      	str	r1, [r5, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fb4:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005fb8:	632b      	str	r3, [r5, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 8005fba:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fbe:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8005fc0:	2b04      	cmp	r3, #4
 8005fc2:	d1ec      	bne.n	8005f9e <I2C_RequestMemoryWrite+0xe6>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8005fc4:	682a      	ldr	r2, [r5, #0]
 8005fc6:	6813      	ldr	r3, [r2, #0]
 8005fc8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005fcc:	6013      	str	r3, [r2, #0]
        return HAL_ERROR;
 8005fce:	2001      	movs	r0, #1
 8005fd0:	e7e6      	b.n	8005fa0 <I2C_RequestMemoryWrite+0xe8>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fd2:	6943      	ldr	r3, [r0, #20]
 8005fd4:	061a      	lsls	r2, r3, #24
 8005fd6:	d49d      	bmi.n	8005f14 <I2C_RequestMemoryWrite+0x5c>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fd8:	6943      	ldr	r3, [r0, #20]
 8005fda:	0559      	lsls	r1, r3, #21
 8005fdc:	d4e3      	bmi.n	8005fa6 <I2C_RequestMemoryWrite+0xee>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8005fde:	b34c      	cbz	r4, 8006034 <I2C_RequestMemoryWrite+0x17c>
 8005fe0:	f7ff fdf2 	bl	8005bc8 <HAL_GetTick>
 8005fe4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fe6:	1ac0      	subs	r0, r0, r3
 8005fe8:	4284      	cmp	r4, r0
 8005fea:	d323      	bcc.n	8006034 <I2C_RequestMemoryWrite+0x17c>
 8005fec:	6828      	ldr	r0, [r5, #0]
 8005fee:	e788      	b.n	8005f02 <I2C_RequestMemoryWrite+0x4a>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005ff0:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8005ff2:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8005ff4:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8005ff6:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8005ffa:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    return HAL_TIMEOUT;
 8005ffe:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006000:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 8006004:	e7cc      	b.n	8005fa0 <I2C_RequestMemoryWrite+0xe8>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006006:	6943      	ldr	r3, [r0, #20]
 8006008:	061b      	lsls	r3, r3, #24
 800600a:	d490      	bmi.n	8005f2e <I2C_RequestMemoryWrite+0x76>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800600c:	6943      	ldr	r3, [r0, #20]
 800600e:	055b      	lsls	r3, r3, #21
 8006010:	d4c9      	bmi.n	8005fa6 <I2C_RequestMemoryWrite+0xee>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8006012:	b17c      	cbz	r4, 8006034 <I2C_RequestMemoryWrite+0x17c>
 8006014:	f7ff fdd8 	bl	8005bc8 <HAL_GetTick>
 8006018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800601a:	1ac0      	subs	r0, r0, r3
 800601c:	4284      	cmp	r4, r0
 800601e:	d309      	bcc.n	8006034 <I2C_RequestMemoryWrite+0x17c>
 8006020:	6828      	ldr	r0, [r5, #0]
 8006022:	e77b      	b.n	8005f1c <I2C_RequestMemoryWrite+0x64>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006024:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8006026:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8006028:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800602a:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800602e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
 8006032:	e7ad      	b.n	8005f90 <I2C_RequestMemoryWrite+0xd8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006034:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8006036:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006038:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State= HAL_I2C_STATE_READY;
 800603c:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800603e:	642b      	str	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006040:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->PreviousState = I2C_STATE_NONE;
 8006044:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8006046:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
 800604a:	e7b8      	b.n	8005fbe <I2C_RequestMemoryWrite+0x106>

0800604c <I2C_RequestMemoryRead>:
{
 800604c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8006050:	4605      	mov	r5, r0
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8006052:	6800      	ldr	r0, [r0, #0]
{
 8006054:	4689      	mov	r9, r1
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8006056:	6801      	ldr	r1, [r0, #0]
 8006058:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800605c:	6001      	str	r1, [r0, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 800605e:	6801      	ldr	r1, [r0, #0]
{
 8006060:	b082      	sub	sp, #8
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8006062:	f441 7180 	orr.w	r1, r1, #256	; 0x100
{
 8006066:	9c08      	ldr	r4, [sp, #32]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8006068:	6001      	str	r1, [r0, #0]
{
 800606a:	4616      	mov	r6, r2
 800606c:	461f      	mov	r7, r3
 800606e:	1c61      	adds	r1, r4, #1
 8006070:	d149      	bne.n	8006106 <I2C_RequestMemoryRead+0xba>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8006072:	6943      	ldr	r3, [r0, #20]
 8006074:	07da      	lsls	r2, r3, #31
 8006076:	d5fc      	bpl.n	8006072 <I2C_RequestMemoryRead+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006078:	fa5f f989 	uxtb.w	r9, r9
 800607c:	f009 03fe 	and.w	r3, r9, #254	; 0xfe
 8006080:	6103      	str	r3, [r0, #16]
 8006082:	1c62      	adds	r2, r4, #1
 8006084:	d003      	beq.n	800608e <I2C_RequestMemoryRead+0x42>
 8006086:	e04b      	b.n	8006120 <I2C_RequestMemoryRead+0xd4>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006088:	6943      	ldr	r3, [r0, #20]
 800608a:	0559      	lsls	r1, r3, #21
 800608c:	d45a      	bmi.n	8006144 <I2C_RequestMemoryRead+0xf8>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800608e:	6943      	ldr	r3, [r0, #20]
 8006090:	079b      	lsls	r3, r3, #30
 8006092:	d5f9      	bpl.n	8006088 <I2C_RequestMemoryRead+0x3c>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006094:	2300      	movs	r3, #0
 8006096:	9301      	str	r3, [sp, #4]
 8006098:	6943      	ldr	r3, [r0, #20]
 800609a:	9301      	str	r3, [sp, #4]
 800609c:	6983      	ldr	r3, [r0, #24]
 800609e:	9301      	str	r3, [sp, #4]
 80060a0:	9b01      	ldr	r3, [sp, #4]
 80060a2:	1c61      	adds	r1, r4, #1
 80060a4:	d003      	beq.n	80060ae <I2C_RequestMemoryRead+0x62>
 80060a6:	e07d      	b.n	80061a4 <I2C_RequestMemoryRead+0x158>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060a8:	6943      	ldr	r3, [r0, #20]
 80060aa:	055b      	lsls	r3, r3, #21
 80060ac:	d465      	bmi.n	800617a <I2C_RequestMemoryRead+0x12e>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060ae:	6943      	ldr	r3, [r0, #20]
 80060b0:	061a      	lsls	r2, r3, #24
 80060b2:	d5f9      	bpl.n	80060a8 <I2C_RequestMemoryRead+0x5c>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060b4:	2f01      	cmp	r7, #1
 80060b6:	f040 8090 	bne.w	80061da <I2C_RequestMemoryRead+0x18e>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80060ba:	b2f6      	uxtb	r6, r6
 80060bc:	6106      	str	r6, [r0, #16]
 80060be:	1c67      	adds	r7, r4, #1
 80060c0:	d003      	beq.n	80060ca <I2C_RequestMemoryRead+0x7e>
 80060c2:	e097      	b.n	80061f4 <I2C_RequestMemoryRead+0x1a8>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060c4:	6943      	ldr	r3, [r0, #20]
 80060c6:	0559      	lsls	r1, r3, #21
 80060c8:	d457      	bmi.n	800617a <I2C_RequestMemoryRead+0x12e>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060ca:	6943      	ldr	r3, [r0, #20]
 80060cc:	061e      	lsls	r6, r3, #24
 80060ce:	d5f9      	bpl.n	80060c4 <I2C_RequestMemoryRead+0x78>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 80060d0:	6803      	ldr	r3, [r0, #0]
 80060d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060d6:	6003      	str	r3, [r0, #0]
 80060d8:	1c63      	adds	r3, r4, #1
 80060da:	f040 80ab 	bne.w	8006234 <I2C_RequestMemoryRead+0x1e8>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80060de:	6943      	ldr	r3, [r0, #20]
 80060e0:	07df      	lsls	r7, r3, #31
 80060e2:	d5fc      	bpl.n	80060de <I2C_RequestMemoryRead+0x92>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80060e4:	f049 0901 	orr.w	r9, r9, #1
 80060e8:	f8c0 9010 	str.w	r9, [r0, #16]
 80060ec:	1c62      	adds	r2, r4, #1
 80060ee:	d003      	beq.n	80060f8 <I2C_RequestMemoryRead+0xac>
 80060f0:	e0c2      	b.n	8006278 <I2C_RequestMemoryRead+0x22c>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060f2:	6943      	ldr	r3, [r0, #20]
 80060f4:	055b      	lsls	r3, r3, #21
 80060f6:	d425      	bmi.n	8006144 <I2C_RequestMemoryRead+0xf8>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060f8:	6943      	ldr	r3, [r0, #20]
 80060fa:	43db      	mvns	r3, r3
 80060fc:	f013 0302 	ands.w	r3, r3, #2
 8006100:	d1f7      	bne.n	80060f2 <I2C_RequestMemoryRead+0xa6>
  return HAL_OK;
 8006102:	4618      	mov	r0, r3
 8006104:	e032      	b.n	800616c <I2C_RequestMemoryRead+0x120>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8006106:	6943      	ldr	r3, [r0, #20]
 8006108:	07db      	lsls	r3, r3, #31
 800610a:	d4b5      	bmi.n	8006078 <I2C_RequestMemoryRead+0x2c>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800610c:	2c00      	cmp	r4, #0
 800610e:	d059      	beq.n	80061c4 <I2C_RequestMemoryRead+0x178>
 8006110:	f7ff fd5a 	bl	8005bc8 <HAL_GetTick>
 8006114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006116:	1ac0      	subs	r0, r0, r3
 8006118:	4284      	cmp	r4, r0
 800611a:	d353      	bcc.n	80061c4 <I2C_RequestMemoryRead+0x178>
 800611c:	6828      	ldr	r0, [r5, #0]
 800611e:	e7a6      	b.n	800606e <I2C_RequestMemoryRead+0x22>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006120:	6943      	ldr	r3, [r0, #20]
 8006122:	079a      	lsls	r2, r3, #30
 8006124:	d4b6      	bmi.n	8006094 <I2C_RequestMemoryRead+0x48>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006126:	6943      	ldr	r3, [r0, #20]
 8006128:	0559      	lsls	r1, r3, #21
 800612a:	d40b      	bmi.n	8006144 <I2C_RequestMemoryRead+0xf8>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800612c:	2c00      	cmp	r4, #0
 800612e:	f000 808f 	beq.w	8006250 <I2C_RequestMemoryRead+0x204>
 8006132:	f7ff fd49 	bl	8005bc8 <HAL_GetTick>
 8006136:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006138:	1ac0      	subs	r0, r0, r3
 800613a:	4284      	cmp	r4, r0
 800613c:	f0c0 8088 	bcc.w	8006250 <I2C_RequestMemoryRead+0x204>
 8006140:	6828      	ldr	r0, [r5, #0]
 8006142:	e79e      	b.n	8006082 <I2C_RequestMemoryRead+0x36>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006144:	6803      	ldr	r3, [r0, #0]
 8006146:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800614a:	6003      	str	r3, [r0, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800614c:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800614e:	f46f 6480 	mvn.w	r4, #1024	; 0x400
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006152:	2104      	movs	r1, #4
      hi2c->State= HAL_I2C_STATE_READY;
 8006154:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006156:	6144      	str	r4, [r0, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006158:	6429      	str	r1, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800615a:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 800615e:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8006160:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006164:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8006166:	2b04      	cmp	r3, #4
 8006168:	d103      	bne.n	8006172 <I2C_RequestMemoryRead+0x126>
      return HAL_ERROR;
 800616a:	2001      	movs	r0, #1
}
 800616c:	b002      	add	sp, #8
 800616e:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
      return HAL_TIMEOUT;
 8006172:	2003      	movs	r0, #3
}
 8006174:	b002      	add	sp, #8
 8006176:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    hi2c->PreviousState = I2C_STATE_NONE;
 800617a:	2300      	movs	r3, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800617c:	f46f 6480 	mvn.w	r4, #1024	; 0x400
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006180:	2104      	movs	r1, #4
    hi2c->State= HAL_I2C_STATE_READY;
 8006182:	2220      	movs	r2, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006184:	6144      	str	r4, [r0, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006186:	6429      	str	r1, [r5, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 8006188:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    hi2c->PreviousState = I2C_STATE_NONE;
 800618c:	632b      	str	r3, [r5, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 800618e:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006192:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8006194:	2b04      	cmp	r3, #4
 8006196:	d1ec      	bne.n	8006172 <I2C_RequestMemoryRead+0x126>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006198:	682a      	ldr	r2, [r5, #0]
 800619a:	6813      	ldr	r3, [r2, #0]
 800619c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061a0:	6013      	str	r3, [r2, #0]
 80061a2:	e7e2      	b.n	800616a <I2C_RequestMemoryRead+0x11e>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061a4:	6943      	ldr	r3, [r0, #20]
 80061a6:	0619      	lsls	r1, r3, #24
 80061a8:	d484      	bmi.n	80060b4 <I2C_RequestMemoryRead+0x68>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061aa:	6943      	ldr	r3, [r0, #20]
 80061ac:	055b      	lsls	r3, r3, #21
 80061ae:	d4e4      	bmi.n	800617a <I2C_RequestMemoryRead+0x12e>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80061b0:	2c00      	cmp	r4, #0
 80061b2:	d055      	beq.n	8006260 <I2C_RequestMemoryRead+0x214>
 80061b4:	f7ff fd08 	bl	8005bc8 <HAL_GetTick>
 80061b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80061ba:	1ac0      	subs	r0, r0, r3
 80061bc:	4284      	cmp	r4, r0
 80061be:	d34f      	bcc.n	8006260 <I2C_RequestMemoryRead+0x214>
 80061c0:	6828      	ldr	r0, [r5, #0]
 80061c2:	e76e      	b.n	80060a2 <I2C_RequestMemoryRead+0x56>
        hi2c->PreviousState = I2C_STATE_NONE;
 80061c4:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80061c6:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80061c8:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80061ca:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80061ce:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    return HAL_TIMEOUT;
 80061d2:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80061d4:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
 80061d8:	e7c8      	b.n	800616c <I2C_RequestMemoryRead+0x120>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80061da:	0a33      	lsrs	r3, r6, #8
 80061dc:	6103      	str	r3, [r0, #16]
 80061de:	1c63      	adds	r3, r4, #1
 80061e0:	d003      	beq.n	80061ea <I2C_RequestMemoryRead+0x19e>
 80061e2:	e017      	b.n	8006214 <I2C_RequestMemoryRead+0x1c8>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061e4:	6943      	ldr	r3, [r0, #20]
 80061e6:	0559      	lsls	r1, r3, #21
 80061e8:	d4c7      	bmi.n	800617a <I2C_RequestMemoryRead+0x12e>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061ea:	6943      	ldr	r3, [r0, #20]
 80061ec:	061f      	lsls	r7, r3, #24
 80061ee:	f53f af64 	bmi.w	80060ba <I2C_RequestMemoryRead+0x6e>
 80061f2:	e7f7      	b.n	80061e4 <I2C_RequestMemoryRead+0x198>
 80061f4:	6943      	ldr	r3, [r0, #20]
 80061f6:	061a      	lsls	r2, r3, #24
 80061f8:	f53f af6a 	bmi.w	80060d0 <I2C_RequestMemoryRead+0x84>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80061fc:	6943      	ldr	r3, [r0, #20]
 80061fe:	055b      	lsls	r3, r3, #21
 8006200:	d4bb      	bmi.n	800617a <I2C_RequestMemoryRead+0x12e>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8006202:	b36c      	cbz	r4, 8006260 <I2C_RequestMemoryRead+0x214>
 8006204:	f7ff fce0 	bl	8005bc8 <HAL_GetTick>
 8006208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800620a:	1ac0      	subs	r0, r0, r3
 800620c:	4284      	cmp	r4, r0
 800620e:	d327      	bcc.n	8006260 <I2C_RequestMemoryRead+0x214>
 8006210:	6828      	ldr	r0, [r5, #0]
 8006212:	e754      	b.n	80060be <I2C_RequestMemoryRead+0x72>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006214:	6943      	ldr	r3, [r0, #20]
 8006216:	061a      	lsls	r2, r3, #24
 8006218:	f53f af4f 	bmi.w	80060ba <I2C_RequestMemoryRead+0x6e>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800621c:	6943      	ldr	r3, [r0, #20]
 800621e:	055a      	lsls	r2, r3, #21
 8006220:	d4ab      	bmi.n	800617a <I2C_RequestMemoryRead+0x12e>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8006222:	b1ec      	cbz	r4, 8006260 <I2C_RequestMemoryRead+0x214>
 8006224:	f7ff fcd0 	bl	8005bc8 <HAL_GetTick>
 8006228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800622a:	1ac0      	subs	r0, r0, r3
 800622c:	4284      	cmp	r4, r0
 800622e:	d317      	bcc.n	8006260 <I2C_RequestMemoryRead+0x214>
 8006230:	6828      	ldr	r0, [r5, #0]
 8006232:	e7d4      	b.n	80061de <I2C_RequestMemoryRead+0x192>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8006234:	6943      	ldr	r3, [r0, #20]
 8006236:	07de      	lsls	r6, r3, #31
 8006238:	f53f af54 	bmi.w	80060e4 <I2C_RequestMemoryRead+0x98>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800623c:	2c00      	cmp	r4, #0
 800623e:	d0c1      	beq.n	80061c4 <I2C_RequestMemoryRead+0x178>
 8006240:	f7ff fcc2 	bl	8005bc8 <HAL_GetTick>
 8006244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006246:	1ac0      	subs	r0, r0, r3
 8006248:	4284      	cmp	r4, r0
 800624a:	d3bb      	bcc.n	80061c4 <I2C_RequestMemoryRead+0x178>
 800624c:	6828      	ldr	r0, [r5, #0]
 800624e:	e743      	b.n	80060d8 <I2C_RequestMemoryRead+0x8c>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006250:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8006252:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8006254:	632b      	str	r3, [r5, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8006256:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 800625a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
 800625e:	e781      	b.n	8006164 <I2C_RequestMemoryRead+0x118>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006260:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8006262:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006264:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State= HAL_I2C_STATE_READY;
 8006268:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800626a:	642b      	str	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800626c:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->PreviousState = I2C_STATE_NONE;
 8006270:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8006272:	f885 103d 	strb.w	r1, [r5, #61]	; 0x3d
 8006276:	e78c      	b.n	8006192 <I2C_RequestMemoryRead+0x146>
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006278:	6943      	ldr	r3, [r0, #20]
 800627a:	43db      	mvns	r3, r3
 800627c:	f013 0302 	ands.w	r3, r3, #2
 8006280:	f43f af3f 	beq.w	8006102 <I2C_RequestMemoryRead+0xb6>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006284:	6943      	ldr	r3, [r0, #20]
 8006286:	0559      	lsls	r1, r3, #21
 8006288:	f53f af5c 	bmi.w	8006144 <I2C_RequestMemoryRead+0xf8>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800628c:	2c00      	cmp	r4, #0
 800628e:	d0df      	beq.n	8006250 <I2C_RequestMemoryRead+0x204>
 8006290:	f7ff fc9a 	bl	8005bc8 <HAL_GetTick>
 8006294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006296:	1ac0      	subs	r0, r0, r3
 8006298:	4284      	cmp	r4, r0
 800629a:	d3d9      	bcc.n	8006250 <I2C_RequestMemoryRead+0x204>
 800629c:	6828      	ldr	r0, [r5, #0]
 800629e:	e725      	b.n	80060ec <I2C_RequestMemoryRead+0xa0>

080062a0 <HAL_I2C_MspInit>:
}
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop

080062a4 <HAL_I2C_Init>:
  if(hi2c == NULL)
 80062a4:	2800      	cmp	r0, #0
 80062a6:	d05c      	beq.n	8006362 <HAL_I2C_Init+0xbe>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80062a8:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 80062ac:	b570      	push	{r4, r5, r6, lr}
  if(hi2c->State == HAL_I2C_STATE_RESET)
 80062ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80062b2:	4604      	mov	r4, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d04f      	beq.n	8006358 <HAL_I2C_Init+0xb4>
  __HAL_I2C_DISABLE(hi2c);
 80062b8:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80062ba:	4d32      	ldr	r5, [pc, #200]	; (8006384 <HAL_I2C_Init+0xe0>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 80062bc:	2324      	movs	r3, #36	; 0x24
 80062be:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80062c2:	6813      	ldr	r3, [r2, #0]
 80062c4:	f023 0301 	bic.w	r3, r3, #1
 80062c8:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80062ca:	f000 fd79 	bl	8006dc0 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80062ce:	e9d4 3100 	ldrd	r3, r1, [r4]
  freqrange = I2C_FREQRANGE(pclk1);
 80062d2:	4a2d      	ldr	r2, [pc, #180]	; (8006388 <HAL_I2C_Init+0xe4>)
 80062d4:	fba2 6200 	umull	r6, r2, r2, r0
 80062d8:	0c92      	lsrs	r2, r2, #18
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80062da:	42a9      	cmp	r1, r5
  hi2c->Instance->CR2 = freqrange;
 80062dc:	605a      	str	r2, [r3, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80062de:	d825      	bhi.n	800632c <HAL_I2C_Init+0x88>
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80062e0:	0049      	lsls	r1, r1, #1
 80062e2:	fbb0 f0f1 	udiv	r0, r0, r1
 80062e6:	f3c0 010b 	ubfx	r1, r0, #0, #12
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80062ea:	3201      	adds	r2, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80062ec:	2903      	cmp	r1, #3
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80062ee:	621a      	str	r2, [r3, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80062f0:	bf98      	it	ls
 80062f2:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80062f4:	e9d4 2507 	ldrd	r2, r5, [r4, #28]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 80062f8:	e9d4 6103 	ldrd	r6, r1, [r4, #12]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80062fc:	61d8      	str	r0, [r3, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80062fe:	ea42 0005 	orr.w	r0, r2, r5
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8006302:	e9d4 2505 	ldrd	r2, r5, [r4, #20]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8006306:	4331      	orrs	r1, r6
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8006308:	432a      	orrs	r2, r5
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800630a:	6018      	str	r0, [r3, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800630c:	6099      	str	r1, [r3, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 800630e:	60da      	str	r2, [r3, #12]
  __HAL_I2C_ENABLE(hi2c);
 8006310:	6819      	ldr	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006312:	2200      	movs	r2, #0
  __HAL_I2C_ENABLE(hi2c);
 8006314:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8006318:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 800631a:	6019      	str	r1, [r3, #0]
  return HAL_OK;
 800631c:	4610      	mov	r0, r2
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800631e:	6422      	str	r2, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006320:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006324:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006326:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
}
 800632a:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800632c:	f44f 7596 	mov.w	r5, #300	; 0x12c
 8006330:	4e16      	ldr	r6, [pc, #88]	; (800638c <HAL_I2C_Init+0xe8>)
 8006332:	fb05 f202 	mul.w	r2, r5, r2
 8006336:	fba6 5202 	umull	r5, r2, r6, r2
 800633a:	0992      	lsrs	r2, r2, #6
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800633c:	68a5      	ldr	r5, [r4, #8]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800633e:	3201      	adds	r2, #1
 8006340:	621a      	str	r2, [r3, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8006342:	b985      	cbnz	r5, 8006366 <HAL_I2C_Init+0xc2>
 8006344:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006348:	fbb0 f0f1 	udiv	r0, r0, r1
 800634c:	f3c0 020b 	ubfx	r2, r0, #0, #12
 8006350:	b1aa      	cbz	r2, 800637e <HAL_I2C_Init+0xda>
 8006352:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8006356:	e7cd      	b.n	80062f4 <HAL_I2C_Init+0x50>
    hi2c->Lock = HAL_UNLOCKED;
 8006358:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800635c:	f7ff ffa0 	bl	80062a0 <HAL_I2C_MspInit>
 8006360:	e7aa      	b.n	80062b8 <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8006362:	2001      	movs	r0, #1
}
 8006364:	4770      	bx	lr
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8006366:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800636a:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 800636e:	fbb0 f0f1 	udiv	r0, r0, r1
 8006372:	f3c0 020b 	ubfx	r2, r0, #0, #12
 8006376:	b112      	cbz	r2, 800637e <HAL_I2C_Init+0xda>
 8006378:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 800637c:	e7ba      	b.n	80062f4 <HAL_I2C_Init+0x50>
 800637e:	2001      	movs	r0, #1
 8006380:	e7b8      	b.n	80062f4 <HAL_I2C_Init+0x50>
 8006382:	bf00      	nop
 8006384:	000186a0 	.word	0x000186a0
 8006388:	431bde83 	.word	0x431bde83
 800638c:	10624dd3 	.word	0x10624dd3

08006390 <HAL_I2C_MspDeInit>:
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop

08006394 <HAL_I2C_DeInit>:
  if(hi2c == NULL)
 8006394:	b1b0      	cbz	r0, 80063c4 <HAL_I2C_DeInit+0x30>
  __HAL_I2C_DISABLE(hi2c);
 8006396:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8006398:	2324      	movs	r3, #36	; 0x24
{
 800639a:	b510      	push	{r4, lr}
  hi2c->State = HAL_I2C_STATE_BUSY;
 800639c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80063a0:	6813      	ldr	r3, [r2, #0]
 80063a2:	f023 0301 	bic.w	r3, r3, #1
 80063a6:	4604      	mov	r4, r0
 80063a8:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 80063aa:	f7ff fff1 	bl	8006390 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80063ae:	2300      	movs	r3, #0
 80063b0:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 80063b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 80063b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80063ba:	4618      	mov	r0, r3
  hi2c->PreviousState = I2C_STATE_NONE;
 80063bc:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80063be:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80063c2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80063c4:	2001      	movs	r0, #1
}
 80063c6:	4770      	bx	lr

080063c8 <HAL_I2C_Mem_Write>:
{
 80063c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063cc:	4604      	mov	r4, r0
 80063ce:	b083      	sub	sp, #12
 80063d0:	4699      	mov	r9, r3
 80063d2:	460f      	mov	r7, r1
 80063d4:	4690      	mov	r8, r2
 80063d6:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80063da:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  tickstart = HAL_GetTick();
 80063dc:	f7ff fbf4 	bl	8005bc8 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80063e0:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80063e4:	2b20      	cmp	r3, #32
 80063e6:	d004      	beq.n	80063f2 <HAL_I2C_Mem_Write+0x2a>
    return HAL_BUSY;
 80063e8:	2702      	movs	r7, #2
}
 80063ea:	4638      	mov	r0, r7
 80063ec:	b003      	add	sp, #12
 80063ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063f2:	4605      	mov	r5, r0
 80063f4:	e005      	b.n	8006402 <HAL_I2C_Mem_Write+0x3a>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80063f6:	f7ff fbe7 	bl	8005bc8 <HAL_GetTick>
 80063fa:	1b40      	subs	r0, r0, r5
 80063fc:	2819      	cmp	r0, #25
 80063fe:	f200 80a2 	bhi.w	8006546 <HAL_I2C_Mem_Write+0x17e>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8006402:	6822      	ldr	r2, [r4, #0]
 8006404:	6993      	ldr	r3, [r2, #24]
 8006406:	43db      	mvns	r3, r3
 8006408:	f013 0b02 	ands.w	fp, r3, #2
 800640c:	d0f3      	beq.n	80063f6 <HAL_I2C_Mem_Write+0x2e>
    __HAL_LOCK(hi2c);
 800640e:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8006412:	2b01      	cmp	r3, #1
 8006414:	d0e8      	beq.n	80063e8 <HAL_I2C_Mem_Write+0x20>
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006416:	6813      	ldr	r3, [r2, #0]
    __HAL_LOCK(hi2c);
 8006418:	2101      	movs	r1, #1
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800641a:	07d8      	lsls	r0, r3, #31
    __HAL_LOCK(hi2c);
 800641c:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006420:	d402      	bmi.n	8006428 <HAL_I2C_Mem_Write+0x60>
      __HAL_I2C_ENABLE(hi2c);
 8006422:	6813      	ldr	r3, [r2, #0]
 8006424:	430b      	orrs	r3, r1
 8006426:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006428:	6813      	ldr	r3, [r2, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800642a:	495b      	ldr	r1, [pc, #364]	; (8006598 <HAL_I2C_Mem_Write+0x1d0>)
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800642c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006430:	6013      	str	r3, [r2, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006432:	f04f 0b00 	mov.w	fp, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006436:	2221      	movs	r2, #33	; 0x21
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006438:	2340      	movs	r3, #64	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800643a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800643e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006442:	f8c4 b040 	str.w	fp, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8006446:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800644a:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800644c:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 800644e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006450:	6263      	str	r3, [r4, #36]	; 0x24
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006452:	4639      	mov	r1, r7
 8006454:	e9cd 6500 	strd	r6, r5, [sp]
 8006458:	464b      	mov	r3, r9
    hi2c->XferSize    = hi2c->XferCount;
 800645a:	8520      	strh	r0, [r4, #40]	; 0x28
    if(I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800645c:	4642      	mov	r2, r8
 800645e:	4620      	mov	r0, r4
 8006460:	f7ff fd2a 	bl	8005eb8 <I2C_RequestMemoryWrite>
 8006464:	4607      	mov	r7, r0
 8006466:	b130      	cbz	r0, 8006476 <HAL_I2C_Mem_Write+0xae>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006468:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800646a:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800646e:	2b04      	cmp	r3, #4
 8006470:	d14c      	bne.n	800650c <HAL_I2C_Mem_Write+0x144>
        return HAL_ERROR;
 8006472:	2701      	movs	r7, #1
 8006474:	e7b9      	b.n	80063ea <HAL_I2C_Mem_Write+0x22>
 8006476:	6823      	ldr	r3, [r4, #0]
 8006478:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    while(hi2c->XferSize > 0U)
 800647a:	b1e2      	cbz	r2, 80064b6 <HAL_I2C_Mem_Write+0xee>
 800647c:	1c70      	adds	r0, r6, #1
 800647e:	d003      	beq.n	8006488 <HAL_I2C_Mem_Write+0xc0>
 8006480:	e046      	b.n	8006510 <HAL_I2C_Mem_Write+0x148>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006482:	695a      	ldr	r2, [r3, #20]
 8006484:	0552      	lsls	r2, r2, #21
 8006486:	d42c      	bmi.n	80064e2 <HAL_I2C_Mem_Write+0x11a>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006488:	695a      	ldr	r2, [r3, #20]
 800648a:	0611      	lsls	r1, r2, #24
 800648c:	d5f9      	bpl.n	8006482 <HAL_I2C_Mem_Write+0xba>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800648e:	6a60      	ldr	r0, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8006490:	f8b4 c028 	ldrh.w	ip, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8006494:	1c42      	adds	r2, r0, #1
 8006496:	6262      	str	r2, [r4, #36]	; 0x24
 8006498:	7802      	ldrb	r2, [r0, #0]
 800649a:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 800649c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
 800649e:	3901      	subs	r1, #1
 80064a0:	b289      	uxth	r1, r1
 80064a2:	8561      	strh	r1, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80064a4:	6959      	ldr	r1, [r3, #20]
      hi2c->XferSize--;
 80064a6:	f10c 32ff 	add.w	r2, ip, #4294967295
 80064aa:	b292      	uxth	r2, r2
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80064ac:	0749      	lsls	r1, r1, #29
      hi2c->XferSize--;
 80064ae:	8522      	strh	r2, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80064b0:	d5e3      	bpl.n	800647a <HAL_I2C_Mem_Write+0xb2>
 80064b2:	2a00      	cmp	r2, #0
 80064b4:	d13a      	bne.n	800652c <HAL_I2C_Mem_Write+0x164>
 80064b6:	1c72      	adds	r2, r6, #1
 80064b8:	d003      	beq.n	80064c2 <HAL_I2C_Mem_Write+0xfa>
 80064ba:	e052      	b.n	8006562 <HAL_I2C_Mem_Write+0x19a>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064bc:	695a      	ldr	r2, [r3, #20]
 80064be:	0551      	lsls	r1, r2, #21
 80064c0:	d40f      	bmi.n	80064e2 <HAL_I2C_Mem_Write+0x11a>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80064c2:	695a      	ldr	r2, [r3, #20]
 80064c4:	0750      	lsls	r0, r2, #29
 80064c6:	d5f9      	bpl.n	80064bc <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80064c8:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064ca:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80064cc:	2020      	movs	r0, #32
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80064ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064d2:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80064d4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80064d8:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80064dc:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 80064e0:	e783      	b.n	80063ea <HAL_I2C_Mem_Write+0x22>
    hi2c->PreviousState = I2C_STATE_NONE;
 80064e2:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064e4:	f46f 6580 	mvn.w	r5, #1024	; 0x400
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80064e8:	2004      	movs	r0, #4
    hi2c->State= HAL_I2C_STATE_READY;
 80064ea:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064ec:	615d      	str	r5, [r3, #20]
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80064ee:	6420      	str	r0, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80064f0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->PreviousState = I2C_STATE_NONE;
 80064f4:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State= HAL_I2C_STATE_READY;
 80064f6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80064fc:	2b04      	cmp	r3, #4
 80064fe:	d105      	bne.n	800650c <HAL_I2C_Mem_Write+0x144>
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8006500:	6822      	ldr	r2, [r4, #0]
 8006502:	6813      	ldr	r3, [r2, #0]
 8006504:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006508:	6013      	str	r3, [r2, #0]
 800650a:	e7b2      	b.n	8006472 <HAL_I2C_Mem_Write+0xaa>
          return HAL_TIMEOUT;
 800650c:	2703      	movs	r7, #3
 800650e:	e76c      	b.n	80063ea <HAL_I2C_Mem_Write+0x22>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006510:	695a      	ldr	r2, [r3, #20]
 8006512:	0610      	lsls	r0, r2, #24
 8006514:	d4bb      	bmi.n	800648e <HAL_I2C_Mem_Write+0xc6>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006516:	695a      	ldr	r2, [r3, #20]
 8006518:	0552      	lsls	r2, r2, #21
 800651a:	d4e2      	bmi.n	80064e2 <HAL_I2C_Mem_Write+0x11a>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800651c:	b37e      	cbz	r6, 800657e <HAL_I2C_Mem_Write+0x1b6>
 800651e:	f7ff fb53 	bl	8005bc8 <HAL_GetTick>
 8006522:	1b40      	subs	r0, r0, r5
 8006524:	4286      	cmp	r6, r0
 8006526:	d32a      	bcc.n	800657e <HAL_I2C_Mem_Write+0x1b6>
 8006528:	6823      	ldr	r3, [r4, #0]
 800652a:	e7a7      	b.n	800647c <HAL_I2C_Mem_Write+0xb4>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800652c:	1c82      	adds	r2, r0, #2
 800652e:	6262      	str	r2, [r4, #36]	; 0x24
 8006530:	7842      	ldrb	r2, [r0, #1]
 8006532:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8006534:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8006536:	f1ac 0202 	sub.w	r2, ip, #2
        hi2c->XferCount--;
 800653a:	3901      	subs	r1, #1
        hi2c->XferSize--;
 800653c:	b292      	uxth	r2, r2
        hi2c->XferCount--;
 800653e:	b289      	uxth	r1, r1
        hi2c->XferSize--;
 8006540:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8006542:	8561      	strh	r1, [r4, #42]	; 0x2a
 8006544:	e799      	b.n	800647a <HAL_I2C_Mem_Write+0xb2>
      return HAL_BUSY;
 8006546:	2702      	movs	r7, #2
        hi2c->State= HAL_I2C_STATE_READY;
 8006548:	2320      	movs	r3, #32
}
 800654a:	4638      	mov	r0, r7
        hi2c->PreviousState = I2C_STATE_NONE;
 800654c:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8006550:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8006554:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006558:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
}
 800655c:	b003      	add	sp, #12
 800655e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006562:	695a      	ldr	r2, [r3, #20]
 8006564:	0752      	lsls	r2, r2, #29
 8006566:	d4af      	bmi.n	80064c8 <HAL_I2C_Mem_Write+0x100>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006568:	695a      	ldr	r2, [r3, #20]
 800656a:	0551      	lsls	r1, r2, #21
 800656c:	d4b9      	bmi.n	80064e2 <HAL_I2C_Mem_Write+0x11a>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800656e:	b136      	cbz	r6, 800657e <HAL_I2C_Mem_Write+0x1b6>
 8006570:	f7ff fb2a 	bl	8005bc8 <HAL_GetTick>
 8006574:	1b40      	subs	r0, r0, r5
 8006576:	4286      	cmp	r6, r0
 8006578:	d301      	bcc.n	800657e <HAL_I2C_Mem_Write+0x1b6>
 800657a:	6823      	ldr	r3, [r4, #0]
 800657c:	e79b      	b.n	80064b6 <HAL_I2C_Mem_Write+0xee>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800657e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 8006580:	2200      	movs	r2, #0
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006582:	f043 0320 	orr.w	r3, r3, #32
        hi2c->State= HAL_I2C_STATE_READY;
 8006586:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006588:	6423      	str	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800658a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->PreviousState = I2C_STATE_NONE;
 800658e:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8006590:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
 8006594:	e7b1      	b.n	80064fa <HAL_I2C_Mem_Write+0x132>
 8006596:	bf00      	nop
 8006598:	ffff0000 	.word	0xffff0000

0800659c <HAL_I2C_Mem_Read>:
{
 800659c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a0:	4604      	mov	r4, r0
 80065a2:	b087      	sub	sp, #28
 80065a4:	4699      	mov	r9, r3
 80065a6:	460f      	mov	r7, r1
 80065a8:	4690      	mov	r8, r2
 80065aa:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
 80065ae:	9d12      	ldr	r5, [sp, #72]	; 0x48
  tickstart = HAL_GetTick();
 80065b0:	f7ff fb0a 	bl	8005bc8 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80065b4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80065b8:	2b20      	cmp	r3, #32
 80065ba:	d004      	beq.n	80065c6 <HAL_I2C_Mem_Read+0x2a>
    return HAL_BUSY;
 80065bc:	2702      	movs	r7, #2
}
 80065be:	4638      	mov	r0, r7
 80065c0:	b007      	add	sp, #28
 80065c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065c6:	4606      	mov	r6, r0
 80065c8:	e004      	b.n	80065d4 <HAL_I2C_Mem_Read+0x38>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80065ca:	f7ff fafd 	bl	8005bc8 <HAL_GetTick>
 80065ce:	1b80      	subs	r0, r0, r6
 80065d0:	2819      	cmp	r0, #25
 80065d2:	d850      	bhi.n	8006676 <HAL_I2C_Mem_Read+0xda>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80065d4:	6822      	ldr	r2, [r4, #0]
 80065d6:	6993      	ldr	r3, [r2, #24]
 80065d8:	43db      	mvns	r3, r3
 80065da:	f013 0b02 	ands.w	fp, r3, #2
 80065de:	d0f4      	beq.n	80065ca <HAL_I2C_Mem_Read+0x2e>
    __HAL_LOCK(hi2c);
 80065e0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d0e9      	beq.n	80065bc <HAL_I2C_Mem_Read+0x20>
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065e8:	6813      	ldr	r3, [r2, #0]
    __HAL_LOCK(hi2c);
 80065ea:	2101      	movs	r1, #1
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065ec:	07db      	lsls	r3, r3, #31
    __HAL_LOCK(hi2c);
 80065ee:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80065f2:	d402      	bmi.n	80065fa <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80065f4:	6813      	ldr	r3, [r2, #0]
 80065f6:	430b      	orrs	r3, r1
 80065f8:	6013      	str	r3, [r2, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80065fa:	6813      	ldr	r3, [r2, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80065fc:	49a0      	ldr	r1, [pc, #640]	; (8006880 <HAL_I2C_Mem_Read+0x2e4>)
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80065fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006602:	6013      	str	r3, [r2, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006604:	f04f 0b00 	mov.w	fp, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006608:	2222      	movs	r2, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800660a:	2340      	movs	r3, #64	; 0x40
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800660c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006610:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006614:	f8c4 b040 	str.w	fp, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8006618:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800661c:	62e1      	str	r1, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 800661e:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8006620:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006622:	6263      	str	r3, [r4, #36]	; 0x24
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006624:	4639      	mov	r1, r7
 8006626:	e9cd 5600 	strd	r5, r6, [sp]
 800662a:	464b      	mov	r3, r9
    hi2c->XferSize    = hi2c->XferCount;
 800662c:	8520      	strh	r0, [r4, #40]	; 0x28
    if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800662e:	4642      	mov	r2, r8
 8006630:	4620      	mov	r0, r4
 8006632:	f7ff fd0b 	bl	800604c <I2C_RequestMemoryRead>
 8006636:	4607      	mov	r7, r0
 8006638:	b9b0      	cbnz	r0, 8006668 <HAL_I2C_Mem_Read+0xcc>
    if(hi2c->XferSize == 0U)
 800663a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800663c:	6823      	ldr	r3, [r4, #0]
 800663e:	2a00      	cmp	r2, #0
 8006640:	d13c      	bne.n	80066bc <HAL_I2C_Mem_Read+0x120>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006642:	9002      	str	r0, [sp, #8]
 8006644:	695a      	ldr	r2, [r3, #20]
 8006646:	9202      	str	r2, [sp, #8]
 8006648:	699a      	ldr	r2, [r3, #24]
 800664a:	9202      	str	r2, [sp, #8]
 800664c:	9a02      	ldr	r2, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006654:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006656:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8006658:	2220      	movs	r2, #32
 800665a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800665e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006662:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8006666:	e7aa      	b.n	80065be <HAL_I2C_Mem_Read+0x22>
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006668:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800666a:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800666e:	2b04      	cmp	r3, #4
 8006670:	d122      	bne.n	80066b8 <HAL_I2C_Mem_Read+0x11c>
              return HAL_ERROR;
 8006672:	2701      	movs	r7, #1
 8006674:	e7a3      	b.n	80065be <HAL_I2C_Mem_Read+0x22>
      return HAL_BUSY;
 8006676:	2702      	movs	r7, #2
        hi2c->State= HAL_I2C_STATE_READY;
 8006678:	2320      	movs	r3, #32
}
 800667a:	4638      	mov	r0, r7
        hi2c->PreviousState = I2C_STATE_NONE;
 800667c:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8006680:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8006684:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006688:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
}
 800668c:	b007      	add	sp, #28
 800668e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006692:	695a      	ldr	r2, [r3, #20]
 8006694:	0650      	lsls	r0, r2, #25
 8006696:	d472      	bmi.n	800677e <HAL_I2C_Mem_Read+0x1e2>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006698:	695a      	ldr	r2, [r3, #20]
 800669a:	06d0      	lsls	r0, r2, #27
 800669c:	f100 80df 	bmi.w	800685e <HAL_I2C_Mem_Read+0x2c2>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80066a2:	2220      	movs	r2, #32
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066a4:	4313      	orrs	r3, r2
      __HAL_UNLOCK(hi2c);
 80066a6:	2100      	movs	r1, #0
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066a8:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80066aa:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 80066ae:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 80066b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066b4:	2b20      	cmp	r3, #32
 80066b6:	d1dc      	bne.n	8006672 <HAL_I2C_Mem_Read+0xd6>
              return HAL_TIMEOUT;
 80066b8:	2703      	movs	r7, #3
 80066ba:	e780      	b.n	80065be <HAL_I2C_Mem_Read+0x22>
    else if(hi2c->XferSize == 1U)
 80066bc:	2a01      	cmp	r2, #1
 80066be:	f000 808c 	beq.w	80067da <HAL_I2C_Mem_Read+0x23e>
    else if(hi2c->XferSize == 2U)
 80066c2:	2a02      	cmp	r2, #2
 80066c4:	f000 80de 	beq.w	8006884 <HAL_I2C_Mem_Read+0x2e8>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066c8:	9005      	str	r0, [sp, #20]
 80066ca:	6959      	ldr	r1, [r3, #20]
 80066cc:	9105      	str	r1, [sp, #20]
 80066ce:	6999      	ldr	r1, [r3, #24]
 80066d0:	9105      	str	r1, [sp, #20]
 80066d2:	9905      	ldr	r1, [sp, #20]
      if(hi2c->XferSize <= 3U)
 80066d4:	2a03      	cmp	r2, #3
 80066d6:	d844      	bhi.n	8006762 <HAL_I2C_Mem_Read+0x1c6>
        if(hi2c->XferSize== 1U)
 80066d8:	2a01      	cmp	r2, #1
 80066da:	f000 80b1 	beq.w	8006840 <HAL_I2C_Mem_Read+0x2a4>
        else if(hi2c->XferSize == 2U)
 80066de:	2a02      	cmp	r2, #2
 80066e0:	d06f      	beq.n	80067c2 <HAL_I2C_Mem_Read+0x226>
 80066e2:	1c68      	adds	r0, r5, #1
 80066e4:	f040 8088 	bne.w	80067f8 <HAL_I2C_Mem_Read+0x25c>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80066e8:	695a      	ldr	r2, [r3, #20]
 80066ea:	0751      	lsls	r1, r2, #29
 80066ec:	d5fc      	bpl.n	80066e8 <HAL_I2C_Mem_Read+0x14c>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80066ee:	681a      	ldr	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80066f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80066f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066f6:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	1c4a      	adds	r2, r1, #1
 80066fc:	6262      	str	r2, [r4, #36]	; 0x24
 80066fe:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8006700:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 8006702:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006704:	3b01      	subs	r3, #1
 8006706:	b29b      	uxth	r3, r3
          hi2c->XferSize--;
 8006708:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 800670a:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 800670c:	8522      	strh	r2, [r4, #40]	; 0x28
 800670e:	1c68      	adds	r0, r5, #1
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8006710:	6822      	ldr	r2, [r4, #0]
 8006712:	d17d      	bne.n	8006810 <HAL_I2C_Mem_Read+0x274>
 8006714:	6953      	ldr	r3, [r2, #20]
 8006716:	0759      	lsls	r1, r3, #29
 8006718:	d5fc      	bpl.n	8006714 <HAL_I2C_Mem_Read+0x178>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800671a:	6813      	ldr	r3, [r2, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800671c:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800671e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006722:	6013      	str	r3, [r2, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8006724:	6913      	ldr	r3, [r2, #16]
 8006726:	1c4a      	adds	r2, r1, #1
 8006728:	6262      	str	r2, [r4, #36]	; 0x24
 800672a:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 800672c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 800672e:	8d21      	ldrh	r1, [r4, #40]	; 0x28
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8006730:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006732:	6822      	ldr	r2, [r4, #0]
          hi2c->XferCount--;
 8006734:	3b01      	subs	r3, #1
 8006736:	b29b      	uxth	r3, r3
 8006738:	8563      	strh	r3, [r4, #42]	; 0x2a
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800673a:	6912      	ldr	r2, [r2, #16]
          hi2c->XferSize--;
 800673c:	1e4b      	subs	r3, r1, #1
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800673e:	1c41      	adds	r1, r0, #1
          hi2c->XferSize--;
 8006740:	8523      	strh	r3, [r4, #40]	; 0x28
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8006742:	6261      	str	r1, [r4, #36]	; 0x24
 8006744:	7002      	strb	r2, [r0, #0]
          hi2c->XferSize--;
 8006746:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006748:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->XferSize--;
 800674a:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 800674c:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 800674e:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 8006750:	b29b      	uxth	r3, r3
          hi2c->XferSize--;
 8006752:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8006754:	8563      	strh	r3, [r4, #42]	; 0x2a
    while(hi2c->XferSize > 0U)
 8006756:	2a00      	cmp	r2, #0
 8006758:	f43f af7d 	beq.w	8006656 <HAL_I2C_Mem_Read+0xba>
      if(hi2c->XferSize <= 3U)
 800675c:	2a03      	cmp	r2, #3
 800675e:	6823      	ldr	r3, [r4, #0]
 8006760:	d9ba      	bls.n	80066d8 <HAL_I2C_Mem_Read+0x13c>
 8006762:	b94d      	cbnz	r5, 8006778 <HAL_I2C_Mem_Read+0x1dc>
 8006764:	e795      	b.n	8006692 <HAL_I2C_Mem_Read+0xf6>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006766:	695a      	ldr	r2, [r3, #20]
 8006768:	06d2      	lsls	r2, r2, #27
 800676a:	d478      	bmi.n	800685e <HAL_I2C_Mem_Read+0x2c2>
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800676c:	f7ff fa2c 	bl	8005bc8 <HAL_GetTick>
 8006770:	1b80      	subs	r0, r0, r6
 8006772:	4285      	cmp	r5, r0
 8006774:	d394      	bcc.n	80066a0 <HAL_I2C_Mem_Read+0x104>
 8006776:	6823      	ldr	r3, [r4, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006778:	695a      	ldr	r2, [r3, #20]
 800677a:	0651      	lsls	r1, r2, #25
 800677c:	d5f3      	bpl.n	8006766 <HAL_I2C_Mem_Read+0x1ca>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800677e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	1c51      	adds	r1, r2, #1
 8006784:	6261      	str	r1, [r4, #36]	; 0x24
 8006786:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 8006788:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800678a:	6823      	ldr	r3, [r4, #0]
        hi2c->XferSize--;
 800678c:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800678e:	3901      	subs	r1, #1
 8006790:	b289      	uxth	r1, r1
 8006792:	8561      	strh	r1, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006794:	6959      	ldr	r1, [r3, #20]
        hi2c->XferSize--;
 8006796:	3a01      	subs	r2, #1
 8006798:	b292      	uxth	r2, r2
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800679a:	0749      	lsls	r1, r1, #29
        hi2c->XferSize--;
 800679c:	8522      	strh	r2, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800679e:	d5da      	bpl.n	8006756 <HAL_I2C_Mem_Read+0x1ba>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80067a0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	1c51      	adds	r1, r2, #1
 80067a6:	6261      	str	r1, [r4, #36]	; 0x24
 80067a8:	7013      	strb	r3, [r2, #0]
 80067aa:	e7cc      	b.n	8006746 <HAL_I2C_Mem_Read+0x1aa>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80067ac:	695a      	ldr	r2, [r3, #20]
 80067ae:	0752      	lsls	r2, r2, #29
 80067b0:	d40c      	bmi.n	80067cc <HAL_I2C_Mem_Read+0x230>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80067b2:	2d00      	cmp	r5, #0
 80067b4:	d036      	beq.n	8006824 <HAL_I2C_Mem_Read+0x288>
 80067b6:	f7ff fa07 	bl	8005bc8 <HAL_GetTick>
 80067ba:	1b80      	subs	r0, r0, r6
 80067bc:	4285      	cmp	r5, r0
 80067be:	d331      	bcc.n	8006824 <HAL_I2C_Mem_Read+0x288>
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	1c68      	adds	r0, r5, #1
 80067c4:	d1f2      	bne.n	80067ac <HAL_I2C_Mem_Read+0x210>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80067c6:	695a      	ldr	r2, [r3, #20]
 80067c8:	0751      	lsls	r1, r2, #29
 80067ca:	d5fc      	bpl.n	80067c6 <HAL_I2C_Mem_Read+0x22a>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80067cc:	681a      	ldr	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80067ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80067d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067d4:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80067d6:	691b      	ldr	r3, [r3, #16]
 80067d8:	e7a5      	b.n	8006726 <HAL_I2C_Mem_Read+0x18a>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80067da:	6819      	ldr	r1, [r3, #0]
 80067dc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80067e0:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067e2:	9003      	str	r0, [sp, #12]
 80067e4:	6959      	ldr	r1, [r3, #20]
 80067e6:	9103      	str	r1, [sp, #12]
 80067e8:	6999      	ldr	r1, [r3, #24]
 80067ea:	9103      	str	r1, [sp, #12]
 80067ec:	9903      	ldr	r1, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80067ee:	6819      	ldr	r1, [r3, #0]
 80067f0:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80067f4:	6019      	str	r1, [r3, #0]
 80067f6:	e76d      	b.n	80066d4 <HAL_I2C_Mem_Read+0x138>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80067f8:	695a      	ldr	r2, [r3, #20]
 80067fa:	0752      	lsls	r2, r2, #29
 80067fc:	f53f af77 	bmi.w	80066ee <HAL_I2C_Mem_Read+0x152>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8006800:	b185      	cbz	r5, 8006824 <HAL_I2C_Mem_Read+0x288>
 8006802:	f7ff f9e1 	bl	8005bc8 <HAL_GetTick>
 8006806:	1b80      	subs	r0, r0, r6
 8006808:	4285      	cmp	r5, r0
 800680a:	d30b      	bcc.n	8006824 <HAL_I2C_Mem_Read+0x288>
 800680c:	6823      	ldr	r3, [r4, #0]
 800680e:	e768      	b.n	80066e2 <HAL_I2C_Mem_Read+0x146>
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8006810:	6953      	ldr	r3, [r2, #20]
 8006812:	075b      	lsls	r3, r3, #29
 8006814:	d481      	bmi.n	800671a <HAL_I2C_Mem_Read+0x17e>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8006816:	b12d      	cbz	r5, 8006824 <HAL_I2C_Mem_Read+0x288>
 8006818:	f7ff f9d6 	bl	8005bc8 <HAL_GetTick>
 800681c:	1b80      	subs	r0, r0, r6
 800681e:	4285      	cmp	r5, r0
 8006820:	f4bf af75 	bcs.w	800670e <HAL_I2C_Mem_Read+0x172>
            return HAL_TIMEOUT;
 8006824:	2703      	movs	r7, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 8006826:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8006828:	2220      	movs	r2, #32
}
 800682a:	4638      	mov	r0, r7
        hi2c->PreviousState = I2C_STATE_NONE;
 800682c:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 800682e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8006832:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006836:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800683a:	b007      	add	sp, #28
 800683c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006840:	b93d      	cbnz	r5, 8006852 <HAL_I2C_Mem_Read+0x2b6>
 8006842:	e018      	b.n	8006876 <HAL_I2C_Mem_Read+0x2da>
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8006844:	f7ff f9c0 	bl	8005bc8 <HAL_GetTick>
 8006848:	1b80      	subs	r0, r0, r6
 800684a:	42a8      	cmp	r0, r5
 800684c:	f63f af28 	bhi.w	80066a0 <HAL_I2C_Mem_Read+0x104>
 8006850:	6823      	ldr	r3, [r4, #0]
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006852:	695a      	ldr	r2, [r3, #20]
 8006854:	0650      	lsls	r0, r2, #25
 8006856:	d4a3      	bmi.n	80067a0 <HAL_I2C_Mem_Read+0x204>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006858:	695a      	ldr	r2, [r3, #20]
 800685a:	06d1      	lsls	r1, r2, #27
 800685c:	d5f2      	bpl.n	8006844 <HAL_I2C_Mem_Read+0x2a8>
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800685e:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006860:	f06f 0010 	mvn.w	r0, #16
      hi2c->State= HAL_I2C_STATE_READY;
 8006864:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006866:	6158      	str	r0, [r3, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006868:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800686a:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 800686e:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State= HAL_I2C_STATE_READY;
 8006870:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
 8006874:	e71d      	b.n	80066b2 <HAL_I2C_Mem_Read+0x116>
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006876:	695a      	ldr	r2, [r3, #20]
 8006878:	0652      	lsls	r2, r2, #25
 800687a:	f57f af0d 	bpl.w	8006698 <HAL_I2C_Mem_Read+0xfc>
 800687e:	e78f      	b.n	80067a0 <HAL_I2C_Mem_Read+0x204>
 8006880:	ffff0000 	.word	0xffff0000
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006884:	6819      	ldr	r1, [r3, #0]
 8006886:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800688a:	6019      	str	r1, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 800688c:	6819      	ldr	r1, [r3, #0]
 800688e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8006892:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006894:	9004      	str	r0, [sp, #16]
 8006896:	6959      	ldr	r1, [r3, #20]
 8006898:	9104      	str	r1, [sp, #16]
 800689a:	6999      	ldr	r1, [r3, #24]
 800689c:	9104      	str	r1, [sp, #16]
 800689e:	9904      	ldr	r1, [sp, #16]
 80068a0:	e718      	b.n	80066d4 <HAL_I2C_Mem_Read+0x138>
 80068a2:	bf00      	nop

080068a4 <HAL_I2C_GetState>:
  return hi2c->State;
 80068a4:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop

080068ac <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068ac:	2800      	cmp	r0, #0
 80068ae:	f000 8132 	beq.w	8006b16 <HAL_RCC_OscConfig+0x26a>
{
 80068b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068b6:	6803      	ldr	r3, [r0, #0]
 80068b8:	07dd      	lsls	r5, r3, #31
{
 80068ba:	b082      	sub	sp, #8
 80068bc:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068be:	d52f      	bpl.n	8006920 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068c0:	49ac      	ldr	r1, [pc, #688]	; (8006b74 <HAL_RCC_OscConfig+0x2c8>)
 80068c2:	688a      	ldr	r2, [r1, #8]
 80068c4:	f002 020c 	and.w	r2, r2, #12
 80068c8:	2a04      	cmp	r2, #4
 80068ca:	f000 80ea 	beq.w	8006aa2 <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068ce:	688a      	ldr	r2, [r1, #8]
 80068d0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068d4:	2a08      	cmp	r2, #8
 80068d6:	f000 80e0 	beq.w	8006a9a <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068da:	6863      	ldr	r3, [r4, #4]
 80068dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068e0:	f000 80e9 	beq.w	8006ab6 <HAL_RCC_OscConfig+0x20a>
 80068e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068e8:	f000 8154 	beq.w	8006b94 <HAL_RCC_OscConfig+0x2e8>
 80068ec:	4da1      	ldr	r5, [pc, #644]	; (8006b74 <HAL_RCC_OscConfig+0x2c8>)
 80068ee:	682a      	ldr	r2, [r5, #0]
 80068f0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80068f4:	602a      	str	r2, [r5, #0]
 80068f6:	682a      	ldr	r2, [r5, #0]
 80068f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80068fc:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068fe:	2b00      	cmp	r3, #0
 8006900:	f040 80de 	bne.w	8006ac0 <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006904:	f7ff f960 	bl	8005bc8 <HAL_GetTick>
 8006908:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800690a:	e005      	b.n	8006918 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800690c:	f7ff f95c 	bl	8005bc8 <HAL_GetTick>
 8006910:	1b80      	subs	r0, r0, r6
 8006912:	2864      	cmp	r0, #100	; 0x64
 8006914:	f200 80f2 	bhi.w	8006afc <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006918:	682b      	ldr	r3, [r5, #0]
 800691a:	039b      	lsls	r3, r3, #14
 800691c:	d4f6      	bmi.n	800690c <HAL_RCC_OscConfig+0x60>
 800691e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006920:	079f      	lsls	r7, r3, #30
 8006922:	d475      	bmi.n	8006a10 <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006924:	071a      	lsls	r2, r3, #28
 8006926:	d515      	bpl.n	8006954 <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006928:	6963      	ldr	r3, [r4, #20]
 800692a:	2b00      	cmp	r3, #0
 800692c:	f000 80a5 	beq.w	8006a7a <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006930:	4b91      	ldr	r3, [pc, #580]	; (8006b78 <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006932:	4d90      	ldr	r5, [pc, #576]	; (8006b74 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8006934:	2201      	movs	r2, #1
 8006936:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006938:	f7ff f946 	bl	8005bc8 <HAL_GetTick>
 800693c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800693e:	e005      	b.n	800694c <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006940:	f7ff f942 	bl	8005bc8 <HAL_GetTick>
 8006944:	1b80      	subs	r0, r0, r6
 8006946:	2802      	cmp	r0, #2
 8006948:	f200 80d8 	bhi.w	8006afc <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800694c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800694e:	079b      	lsls	r3, r3, #30
 8006950:	d5f6      	bpl.n	8006940 <HAL_RCC_OscConfig+0x94>
 8006952:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006954:	0758      	lsls	r0, r3, #29
 8006956:	d53b      	bpl.n	80069d0 <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006958:	4a86      	ldr	r2, [pc, #536]	; (8006b74 <HAL_RCC_OscConfig+0x2c8>)
 800695a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800695c:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8006960:	f040 80db 	bne.w	8006b1a <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006964:	9301      	str	r3, [sp, #4]
 8006966:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800696c:	6413      	str	r3, [r2, #64]	; 0x40
 800696e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006974:	9301      	str	r3, [sp, #4]
 8006976:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006978:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800697a:	4d80      	ldr	r5, [pc, #512]	; (8006b7c <HAL_RCC_OscConfig+0x2d0>)
 800697c:	682a      	ldr	r2, [r5, #0]
 800697e:	05d1      	lsls	r1, r2, #23
 8006980:	f140 80ac 	bpl.w	8006adc <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006984:	68a3      	ldr	r3, [r4, #8]
 8006986:	2b01      	cmp	r3, #1
 8006988:	f000 80c9 	beq.w	8006b1e <HAL_RCC_OscConfig+0x272>
 800698c:	2b05      	cmp	r3, #5
 800698e:	f000 810b 	beq.w	8006ba8 <HAL_RCC_OscConfig+0x2fc>
 8006992:	4d78      	ldr	r5, [pc, #480]	; (8006b74 <HAL_RCC_OscConfig+0x2c8>)
 8006994:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8006996:	f022 0201 	bic.w	r2, r2, #1
 800699a:	672a      	str	r2, [r5, #112]	; 0x70
 800699c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800699e:	f022 0204 	bic.w	r2, r2, #4
 80069a2:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f040 80bf 	bne.w	8006b28 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069aa:	f7ff f90d 	bl	8005bc8 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069ae:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80069b2:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069b4:	e006      	b.n	80069c4 <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069b6:	f7ff f907 	bl	8005bc8 <HAL_GetTick>
 80069ba:	eba0 0008 	sub.w	r0, r0, r8
 80069be:	42b8      	cmp	r0, r7
 80069c0:	f200 809c 	bhi.w	8006afc <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069c4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80069c6:	0798      	lsls	r0, r3, #30
 80069c8:	d4f5      	bmi.n	80069b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069ca:	2e00      	cmp	r6, #0
 80069cc:	f040 80dc 	bne.w	8006b88 <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069d0:	69a2      	ldr	r2, [r4, #24]
 80069d2:	b1ca      	cbz	r2, 8006a08 <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80069d4:	4d67      	ldr	r5, [pc, #412]	; (8006b74 <HAL_RCC_OscConfig+0x2c8>)
 80069d6:	68a9      	ldr	r1, [r5, #8]
 80069d8:	f001 010c 	and.w	r1, r1, #12
 80069dc:	2908      	cmp	r1, #8
 80069de:	d048      	beq.n	8006a72 <HAL_RCC_OscConfig+0x1c6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069e0:	2a02      	cmp	r2, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069e2:	4a67      	ldr	r2, [pc, #412]	; (8006b80 <HAL_RCC_OscConfig+0x2d4>)
 80069e4:	f04f 0100 	mov.w	r1, #0
 80069e8:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069ea:	f000 80e7 	beq.w	8006bbc <HAL_RCC_OscConfig+0x310>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069ee:	f7ff f8eb 	bl	8005bc8 <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069f2:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 80069f4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069f6:	e004      	b.n	8006a02 <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069f8:	f7ff f8e6 	bl	8005bc8 <HAL_GetTick>
 80069fc:	1b40      	subs	r0, r0, r5
 80069fe:	2802      	cmp	r0, #2
 8006a00:	d87c      	bhi.n	8006afc <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a02:	6823      	ldr	r3, [r4, #0]
 8006a04:	019b      	lsls	r3, r3, #6
 8006a06:	d4f7      	bmi.n	80069f8 <HAL_RCC_OscConfig+0x14c>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8006a08:	2000      	movs	r0, #0
}
 8006a0a:	b002      	add	sp, #8
 8006a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a10:	4a58      	ldr	r2, [pc, #352]	; (8006b74 <HAL_RCC_OscConfig+0x2c8>)
 8006a12:	6891      	ldr	r1, [r2, #8]
 8006a14:	f011 0f0c 	tst.w	r1, #12
 8006a18:	d024      	beq.n	8006a64 <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a1a:	6891      	ldr	r1, [r2, #8]
 8006a1c:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006a20:	2908      	cmp	r1, #8
 8006a22:	d01c      	beq.n	8006a5e <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a24:	68e3      	ldr	r3, [r4, #12]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 8092 	beq.w	8006b50 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 8006a2c:	4b55      	ldr	r3, [pc, #340]	; (8006b84 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a2e:	4d51      	ldr	r5, [pc, #324]	; (8006b74 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8006a30:	2201      	movs	r2, #1
 8006a32:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006a34:	f7ff f8c8 	bl	8005bc8 <HAL_GetTick>
 8006a38:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a3a:	e004      	b.n	8006a46 <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a3c:	f7ff f8c4 	bl	8005bc8 <HAL_GetTick>
 8006a40:	1b80      	subs	r0, r0, r6
 8006a42:	2802      	cmp	r0, #2
 8006a44:	d85a      	bhi.n	8006afc <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a46:	682b      	ldr	r3, [r5, #0]
 8006a48:	0798      	lsls	r0, r3, #30
 8006a4a:	d5f7      	bpl.n	8006a3c <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a4c:	682b      	ldr	r3, [r5, #0]
 8006a4e:	6922      	ldr	r2, [r4, #16]
 8006a50:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006a54:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006a58:	602b      	str	r3, [r5, #0]
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	e762      	b.n	8006924 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006a5e:	6852      	ldr	r2, [r2, #4]
 8006a60:	0256      	lsls	r6, r2, #9
 8006a62:	d4df      	bmi.n	8006a24 <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a64:	4a43      	ldr	r2, [pc, #268]	; (8006b74 <HAL_RCC_OscConfig+0x2c8>)
 8006a66:	6812      	ldr	r2, [r2, #0]
 8006a68:	0795      	lsls	r5, r2, #30
 8006a6a:	d54b      	bpl.n	8006b04 <HAL_RCC_OscConfig+0x258>
 8006a6c:	68e2      	ldr	r2, [r4, #12]
 8006a6e:	2a01      	cmp	r2, #1
 8006a70:	d048      	beq.n	8006b04 <HAL_RCC_OscConfig+0x258>
    return HAL_ERROR;
 8006a72:	2001      	movs	r0, #1
}
 8006a74:	b002      	add	sp, #8
 8006a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8006a7a:	4a3f      	ldr	r2, [pc, #252]	; (8006b78 <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a7c:	4d3d      	ldr	r5, [pc, #244]	; (8006b74 <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8006a7e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8006a80:	f7ff f8a2 	bl	8005bc8 <HAL_GetTick>
 8006a84:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a86:	e004      	b.n	8006a92 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a88:	f7ff f89e 	bl	8005bc8 <HAL_GetTick>
 8006a8c:	1b80      	subs	r0, r0, r6
 8006a8e:	2802      	cmp	r0, #2
 8006a90:	d834      	bhi.n	8006afc <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a92:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8006a94:	079f      	lsls	r7, r3, #30
 8006a96:	d4f7      	bmi.n	8006a88 <HAL_RCC_OscConfig+0x1dc>
 8006a98:	e75b      	b.n	8006952 <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006a9a:	684a      	ldr	r2, [r1, #4]
 8006a9c:	0250      	lsls	r0, r2, #9
 8006a9e:	f57f af1c 	bpl.w	80068da <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006aa2:	4a34      	ldr	r2, [pc, #208]	; (8006b74 <HAL_RCC_OscConfig+0x2c8>)
 8006aa4:	6812      	ldr	r2, [r2, #0]
 8006aa6:	0391      	lsls	r1, r2, #14
 8006aa8:	f57f af3a 	bpl.w	8006920 <HAL_RCC_OscConfig+0x74>
 8006aac:	6862      	ldr	r2, [r4, #4]
 8006aae:	2a00      	cmp	r2, #0
 8006ab0:	f47f af36 	bne.w	8006920 <HAL_RCC_OscConfig+0x74>
 8006ab4:	e7dd      	b.n	8006a72 <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ab6:	4a2f      	ldr	r2, [pc, #188]	; (8006b74 <HAL_RCC_OscConfig+0x2c8>)
 8006ab8:	6813      	ldr	r3, [r2, #0]
 8006aba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006abe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006ac0:	f7ff f882 	bl	8005bc8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ac4:	4d2b      	ldr	r5, [pc, #172]	; (8006b74 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8006ac6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ac8:	e004      	b.n	8006ad4 <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006aca:	f7ff f87d 	bl	8005bc8 <HAL_GetTick>
 8006ace:	1b80      	subs	r0, r0, r6
 8006ad0:	2864      	cmp	r0, #100	; 0x64
 8006ad2:	d813      	bhi.n	8006afc <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ad4:	682b      	ldr	r3, [r5, #0]
 8006ad6:	039a      	lsls	r2, r3, #14
 8006ad8:	d5f7      	bpl.n	8006aca <HAL_RCC_OscConfig+0x21e>
 8006ada:	e720      	b.n	800691e <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006adc:	682a      	ldr	r2, [r5, #0]
 8006ade:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ae2:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8006ae4:	f7ff f870 	bl	8005bc8 <HAL_GetTick>
 8006ae8:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aea:	682b      	ldr	r3, [r5, #0]
 8006aec:	05da      	lsls	r2, r3, #23
 8006aee:	f53f af49 	bmi.w	8006984 <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006af2:	f7ff f869 	bl	8005bc8 <HAL_GetTick>
 8006af6:	1bc0      	subs	r0, r0, r7
 8006af8:	2802      	cmp	r0, #2
 8006afa:	d9f6      	bls.n	8006aea <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 8006afc:	2003      	movs	r0, #3
}
 8006afe:	b002      	add	sp, #8
 8006b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b04:	491b      	ldr	r1, [pc, #108]	; (8006b74 <HAL_RCC_OscConfig+0x2c8>)
 8006b06:	6920      	ldr	r0, [r4, #16]
 8006b08:	680a      	ldr	r2, [r1, #0]
 8006b0a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8006b0e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8006b12:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006b14:	e706      	b.n	8006924 <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 8006b16:	2001      	movs	r0, #1
}
 8006b18:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 8006b1a:	2600      	movs	r6, #0
 8006b1c:	e72d      	b.n	800697a <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b1e:	4a15      	ldr	r2, [pc, #84]	; (8006b74 <HAL_RCC_OscConfig+0x2c8>)
 8006b20:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8006b22:	f043 0301 	orr.w	r3, r3, #1
 8006b26:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8006b28:	f7ff f84e 	bl	8005bc8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b2c:	4d11      	ldr	r5, [pc, #68]	; (8006b74 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8006b2e:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b30:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b34:	e005      	b.n	8006b42 <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b36:	f7ff f847 	bl	8005bc8 <HAL_GetTick>
 8006b3a:	eba0 0008 	sub.w	r0, r0, r8
 8006b3e:	42b8      	cmp	r0, r7
 8006b40:	d8dc      	bhi.n	8006afc <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b42:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006b44:	079b      	lsls	r3, r3, #30
 8006b46:	d5f6      	bpl.n	8006b36 <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 8006b48:	2e00      	cmp	r6, #0
 8006b4a:	f43f af41 	beq.w	80069d0 <HAL_RCC_OscConfig+0x124>
 8006b4e:	e01b      	b.n	8006b88 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 8006b50:	4a0c      	ldr	r2, [pc, #48]	; (8006b84 <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b52:	4d08      	ldr	r5, [pc, #32]	; (8006b74 <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8006b54:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8006b56:	f7ff f837 	bl	8005bc8 <HAL_GetTick>
 8006b5a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b5c:	e004      	b.n	8006b68 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b5e:	f7ff f833 	bl	8005bc8 <HAL_GetTick>
 8006b62:	1b80      	subs	r0, r0, r6
 8006b64:	2802      	cmp	r0, #2
 8006b66:	d8c9      	bhi.n	8006afc <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006b68:	682b      	ldr	r3, [r5, #0]
 8006b6a:	0799      	lsls	r1, r3, #30
 8006b6c:	d4f7      	bmi.n	8006b5e <HAL_RCC_OscConfig+0x2b2>
 8006b6e:	6823      	ldr	r3, [r4, #0]
 8006b70:	e6d8      	b.n	8006924 <HAL_RCC_OscConfig+0x78>
 8006b72:	bf00      	nop
 8006b74:	40023800 	.word	0x40023800
 8006b78:	42470e80 	.word	0x42470e80
 8006b7c:	40007000 	.word	0x40007000
 8006b80:	42470060 	.word	0x42470060
 8006b84:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b88:	4a23      	ldr	r2, [pc, #140]	; (8006c18 <HAL_RCC_OscConfig+0x36c>)
 8006b8a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006b8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b90:	6413      	str	r3, [r2, #64]	; 0x40
 8006b92:	e71d      	b.n	80069d0 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b94:	4b20      	ldr	r3, [pc, #128]	; (8006c18 <HAL_RCC_OscConfig+0x36c>)
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006ba4:	601a      	str	r2, [r3, #0]
 8006ba6:	e78b      	b.n	8006ac0 <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ba8:	4b1b      	ldr	r3, [pc, #108]	; (8006c18 <HAL_RCC_OscConfig+0x36c>)
 8006baa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bac:	f042 0204 	orr.w	r2, r2, #4
 8006bb0:	671a      	str	r2, [r3, #112]	; 0x70
 8006bb2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006bb4:	f042 0201 	orr.w	r2, r2, #1
 8006bb8:	671a      	str	r2, [r3, #112]	; 0x70
 8006bba:	e7b5      	b.n	8006b28 <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 8006bbc:	f7ff f804 	bl	8005bc8 <HAL_GetTick>
 8006bc0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bc2:	e004      	b.n	8006bce <HAL_RCC_OscConfig+0x322>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bc4:	f7ff f800 	bl	8005bc8 <HAL_GetTick>
 8006bc8:	1b80      	subs	r0, r0, r6
 8006bca:	2802      	cmp	r0, #2
 8006bcc:	d896      	bhi.n	8006afc <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bce:	682b      	ldr	r3, [r5, #0]
 8006bd0:	0199      	lsls	r1, r3, #6
 8006bd2:	d4f7      	bmi.n	8006bc4 <HAL_RCC_OscConfig+0x318>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bd4:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8006bd8:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8006bdc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bde:	4c0e      	ldr	r4, [pc, #56]	; (8006c18 <HAL_RCC_OscConfig+0x36c>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006be0:	4333      	orrs	r3, r6
 8006be2:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006be6:	0852      	lsrs	r2, r2, #1
 8006be8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8006bec:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8006bee:	490b      	ldr	r1, [pc, #44]	; (8006c1c <HAL_RCC_OscConfig+0x370>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bf0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8006bf4:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bf6:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8006bf8:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8006bfa:	f7fe ffe5 	bl	8005bc8 <HAL_GetTick>
 8006bfe:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c00:	e005      	b.n	8006c0e <HAL_RCC_OscConfig+0x362>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c02:	f7fe ffe1 	bl	8005bc8 <HAL_GetTick>
 8006c06:	1b40      	subs	r0, r0, r5
 8006c08:	2802      	cmp	r0, #2
 8006c0a:	f63f af77 	bhi.w	8006afc <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c0e:	6823      	ldr	r3, [r4, #0]
 8006c10:	019a      	lsls	r2, r3, #6
 8006c12:	d5f6      	bpl.n	8006c02 <HAL_RCC_OscConfig+0x356>
 8006c14:	e6f8      	b.n	8006a08 <HAL_RCC_OscConfig+0x15c>
 8006c16:	bf00      	nop
 8006c18:	40023800 	.word	0x40023800
 8006c1c:	42470060 	.word	0x42470060

08006c20 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c20:	4917      	ldr	r1, [pc, #92]	; (8006c80 <HAL_RCC_GetSysClockFreq+0x60>)
{
 8006c22:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c24:	688b      	ldr	r3, [r1, #8]
 8006c26:	f003 030c 	and.w	r3, r3, #12
 8006c2a:	2b04      	cmp	r3, #4
 8006c2c:	d01b      	beq.n	8006c66 <HAL_RCC_GetSysClockFreq+0x46>
 8006c2e:	2b08      	cmp	r3, #8
 8006c30:	d117      	bne.n	8006c62 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c32:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c34:	684b      	ldr	r3, [r1, #4]
 8006c36:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c3a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006c3e:	d114      	bne.n	8006c6a <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c40:	6849      	ldr	r1, [r1, #4]
 8006c42:	4810      	ldr	r0, [pc, #64]	; (8006c84 <HAL_RCC_GetSysClockFreq+0x64>)
 8006c44:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8006c48:	fba1 0100 	umull	r0, r1, r1, r0
 8006c4c:	f7f9 fb20 	bl	8000290 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006c50:	4b0b      	ldr	r3, [pc, #44]	; (8006c80 <HAL_RCC_GetSysClockFreq+0x60>)
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8006c58:	3301      	adds	r3, #1
 8006c5a:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8006c5c:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8006c60:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8006c62:	4808      	ldr	r0, [pc, #32]	; (8006c84 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8006c64:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8006c66:	4808      	ldr	r0, [pc, #32]	; (8006c88 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8006c68:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c6a:	684b      	ldr	r3, [r1, #4]
 8006c6c:	4806      	ldr	r0, [pc, #24]	; (8006c88 <HAL_RCC_GetSysClockFreq+0x68>)
 8006c6e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8006c72:	fba3 0100 	umull	r0, r1, r3, r0
 8006c76:	2300      	movs	r3, #0
 8006c78:	f7f9 fb0a 	bl	8000290 <__aeabi_uldivmod>
 8006c7c:	e7e8      	b.n	8006c50 <HAL_RCC_GetSysClockFreq+0x30>
 8006c7e:	bf00      	nop
 8006c80:	40023800 	.word	0x40023800
 8006c84:	00f42400 	.word	0x00f42400
 8006c88:	007a1200 	.word	0x007a1200

08006c8c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8006c8c:	b160      	cbz	r0, 8006ca8 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c8e:	4a48      	ldr	r2, [pc, #288]	; (8006db0 <HAL_RCC_ClockConfig+0x124>)
 8006c90:	6813      	ldr	r3, [r2, #0]
 8006c92:	f003 030f 	and.w	r3, r3, #15
 8006c96:	428b      	cmp	r3, r1
 8006c98:	d208      	bcs.n	8006cac <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c9a:	b2cb      	uxtb	r3, r1
 8006c9c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c9e:	6813      	ldr	r3, [r2, #0]
 8006ca0:	f003 030f 	and.w	r3, r3, #15
 8006ca4:	428b      	cmp	r3, r1
 8006ca6:	d001      	beq.n	8006cac <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 8006ca8:	2001      	movs	r0, #1
}
 8006caa:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cac:	6803      	ldr	r3, [r0, #0]
{
 8006cae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cb2:	079d      	lsls	r5, r3, #30
 8006cb4:	d514      	bpl.n	8006ce0 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cb6:	075c      	lsls	r4, r3, #29
 8006cb8:	d504      	bpl.n	8006cc4 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006cba:	4c3e      	ldr	r4, [pc, #248]	; (8006db4 <HAL_RCC_ClockConfig+0x128>)
 8006cbc:	68a2      	ldr	r2, [r4, #8]
 8006cbe:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8006cc2:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cc4:	071a      	lsls	r2, r3, #28
 8006cc6:	d504      	bpl.n	8006cd2 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006cc8:	4c3a      	ldr	r4, [pc, #232]	; (8006db4 <HAL_RCC_ClockConfig+0x128>)
 8006cca:	68a2      	ldr	r2, [r4, #8]
 8006ccc:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8006cd0:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cd2:	4c38      	ldr	r4, [pc, #224]	; (8006db4 <HAL_RCC_ClockConfig+0x128>)
 8006cd4:	6885      	ldr	r5, [r0, #8]
 8006cd6:	68a2      	ldr	r2, [r4, #8]
 8006cd8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8006cdc:	432a      	orrs	r2, r5
 8006cde:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ce0:	07df      	lsls	r7, r3, #31
 8006ce2:	4604      	mov	r4, r0
 8006ce4:	460d      	mov	r5, r1
 8006ce6:	d522      	bpl.n	8006d2e <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006ce8:	6842      	ldr	r2, [r0, #4]
 8006cea:	2a01      	cmp	r2, #1
 8006cec:	d056      	beq.n	8006d9c <HAL_RCC_ClockConfig+0x110>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cee:	1e93      	subs	r3, r2, #2
 8006cf0:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cf2:	4b30      	ldr	r3, [pc, #192]	; (8006db4 <HAL_RCC_ClockConfig+0x128>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cf6:	d958      	bls.n	8006daa <HAL_RCC_ClockConfig+0x11e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cf8:	0799      	lsls	r1, r3, #30
 8006cfa:	d525      	bpl.n	8006d48 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cfc:	4e2d      	ldr	r6, [pc, #180]	; (8006db4 <HAL_RCC_ClockConfig+0x128>)
 8006cfe:	68b3      	ldr	r3, [r6, #8]
 8006d00:	f023 0303 	bic.w	r3, r3, #3
 8006d04:	4313      	orrs	r3, r2
 8006d06:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8006d08:	f7fe ff5e 	bl	8005bc8 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d0c:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8006d10:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d12:	e005      	b.n	8006d20 <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d14:	f7fe ff58 	bl	8005bc8 <HAL_GetTick>
 8006d18:	eba0 0008 	sub.w	r0, r0, r8
 8006d1c:	42b8      	cmp	r0, r7
 8006d1e:	d842      	bhi.n	8006da6 <HAL_RCC_ClockConfig+0x11a>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d20:	68b3      	ldr	r3, [r6, #8]
 8006d22:	6862      	ldr	r2, [r4, #4]
 8006d24:	f003 030c 	and.w	r3, r3, #12
 8006d28:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006d2c:	d1f2      	bne.n	8006d14 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d2e:	4a20      	ldr	r2, [pc, #128]	; (8006db0 <HAL_RCC_ClockConfig+0x124>)
 8006d30:	6813      	ldr	r3, [r2, #0]
 8006d32:	f003 030f 	and.w	r3, r3, #15
 8006d36:	42ab      	cmp	r3, r5
 8006d38:	d909      	bls.n	8006d4e <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d3a:	b2eb      	uxtb	r3, r5
 8006d3c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d3e:	6813      	ldr	r3, [r2, #0]
 8006d40:	f003 030f 	and.w	r3, r3, #15
 8006d44:	42ab      	cmp	r3, r5
 8006d46:	d002      	beq.n	8006d4e <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 8006d48:	2001      	movs	r0, #1
}
 8006d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d4e:	6823      	ldr	r3, [r4, #0]
 8006d50:	075a      	lsls	r2, r3, #29
 8006d52:	d506      	bpl.n	8006d62 <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d54:	4917      	ldr	r1, [pc, #92]	; (8006db4 <HAL_RCC_ClockConfig+0x128>)
 8006d56:	68e0      	ldr	r0, [r4, #12]
 8006d58:	688a      	ldr	r2, [r1, #8]
 8006d5a:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8006d5e:	4302      	orrs	r2, r0
 8006d60:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d62:	071b      	lsls	r3, r3, #28
 8006d64:	d411      	bmi.n	8006d8a <HAL_RCC_ClockConfig+0xfe>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d66:	f7ff ff5b 	bl	8006c20 <HAL_RCC_GetSysClockFreq>
 8006d6a:	4b12      	ldr	r3, [pc, #72]	; (8006db4 <HAL_RCC_ClockConfig+0x128>)
 8006d6c:	4912      	ldr	r1, [pc, #72]	; (8006db8 <HAL_RCC_ClockConfig+0x12c>)
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	4a12      	ldr	r2, [pc, #72]	; (8006dbc <HAL_RCC_ClockConfig+0x130>)
 8006d72:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006d76:	5ccb      	ldrb	r3, [r1, r3]
 8006d78:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (TICK_INT_PRIORITY);
 8006d7c:	200f      	movs	r0, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d7e:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8006d80:	f7fe feda 	bl	8005b38 <HAL_InitTick>
  return HAL_OK;
 8006d84:	2000      	movs	r0, #0
}
 8006d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d8a:	4a0a      	ldr	r2, [pc, #40]	; (8006db4 <HAL_RCC_ClockConfig+0x128>)
 8006d8c:	6921      	ldr	r1, [r4, #16]
 8006d8e:	6893      	ldr	r3, [r2, #8]
 8006d90:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8006d94:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006d98:	6093      	str	r3, [r2, #8]
 8006d9a:	e7e4      	b.n	8006d66 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d9c:	4b05      	ldr	r3, [pc, #20]	; (8006db4 <HAL_RCC_ClockConfig+0x128>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	039e      	lsls	r6, r3, #14
 8006da2:	d4ab      	bmi.n	8006cfc <HAL_RCC_ClockConfig+0x70>
 8006da4:	e7d0      	b.n	8006d48 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8006da6:	2003      	movs	r0, #3
 8006da8:	e7ed      	b.n	8006d86 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006daa:	0198      	lsls	r0, r3, #6
 8006dac:	d4a6      	bmi.n	8006cfc <HAL_RCC_ClockConfig+0x70>
 8006dae:	e7cb      	b.n	8006d48 <HAL_RCC_ClockConfig+0xbc>
 8006db0:	40023c00 	.word	0x40023c00
 8006db4:	40023800 	.word	0x40023800
 8006db8:	08007d70 	.word	0x08007d70
 8006dbc:	2000025c 	.word	0x2000025c

08006dc0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006dc0:	4b04      	ldr	r3, [pc, #16]	; (8006dd4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8006dc2:	4a05      	ldr	r2, [pc, #20]	; (8006dd8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006dc4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006dc6:	4905      	ldr	r1, [pc, #20]	; (8006ddc <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006dc8:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8006dcc:	6808      	ldr	r0, [r1, #0]
 8006dce:	5cd3      	ldrb	r3, [r2, r3]
}
 8006dd0:	40d8      	lsrs	r0, r3
 8006dd2:	4770      	bx	lr
 8006dd4:	40023800 	.word	0x40023800
 8006dd8:	08007d80 	.word	0x08007d80
 8006ddc:	2000025c 	.word	0x2000025c

08006de0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006de0:	4b04      	ldr	r3, [pc, #16]	; (8006df4 <HAL_RCC_GetPCLK2Freq+0x14>)
 8006de2:	4a05      	ldr	r2, [pc, #20]	; (8006df8 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006de4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006de6:	4905      	ldr	r1, [pc, #20]	; (8006dfc <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006de8:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8006dec:	6808      	ldr	r0, [r1, #0]
 8006dee:	5cd3      	ldrb	r3, [r2, r3]
}
 8006df0:	40d8      	lsrs	r0, r3
 8006df2:	4770      	bx	lr
 8006df4:	40023800 	.word	0x40023800
 8006df8:	08007d80 	.word	0x08007d80
 8006dfc:	2000025c 	.word	0x2000025c

08006e00 <HAL_UART_MspInit>:
   /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_MspInit could be implemented in the user file
   */ 
}
 8006e00:	4770      	bx	lr
 8006e02:	bf00      	nop

08006e04 <HAL_UART_Init>:
  if(huart == NULL)
 8006e04:	2800      	cmp	r0, #0
 8006e06:	f000 8104 	beq.w	8007012 <HAL_UART_Init+0x20e>
{
 8006e0a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if(huart->gState == HAL_UART_STATE_RESET)
 8006e0e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8006e12:	4604      	mov	r4, r0
 8006e14:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f000 80f5 	beq.w	8007008 <HAL_UART_Init+0x204>
  __HAL_UART_DISABLE(huart);
 8006e1e:	6823      	ldr	r3, [r4, #0]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e20:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 8006e22:	2224      	movs	r2, #36	; 0x24
 8006e24:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8006e28:	68d8      	ldr	r0, [r3, #12]
 8006e2a:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e2e:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8006e32:	60d8      	str	r0, [r3, #12]
  tmpreg = huart->Instance->CR2;
 8006e34:	6919      	ldr	r1, [r3, #16]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e36:	69e0      	ldr	r0, [r4, #28]
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8006e38:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8006e3c:	4329      	orrs	r1, r5
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8006e3e:	6119      	str	r1, [r3, #16]
  tmpreg = huart->Instance->CR1;
 8006e40:	68d9      	ldr	r1, [r3, #12]
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e42:	6965      	ldr	r5, [r4, #20]
 8006e44:	4332      	orrs	r2, r6
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8006e46:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e4a:	432a      	orrs	r2, r5
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8006e4c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006e50:	4302      	orrs	r2, r0
 8006e52:	430a      	orrs	r2, r1
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 8006e54:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8006e56:	695a      	ldr	r2, [r3, #20]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8006e58:	69a1      	ldr	r1, [r4, #24]
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 8006e5a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  tmpreg |= huart->Init.HwFlowCtl;
 8006e5e:	430a      	orrs	r2, r1
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e60:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 8006e64:	615a      	str	r2, [r3, #20]
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e66:	4aaa      	ldr	r2, [pc, #680]	; (8007110 <HAL_UART_Init+0x30c>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e68:	d071      	beq.n	8006f4e <HAL_UART_Init+0x14a>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	f000 80d3 	beq.w	8007016 <HAL_UART_Init+0x212>
 8006e70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006e74:	4293      	cmp	r3, r2
 8006e76:	f000 80ce 	beq.w	8007016 <HAL_UART_Init+0x212>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006e7a:	f7ff ffa1 	bl	8006dc0 <HAL_RCC_GetPCLK1Freq>
 8006e7e:	4fa5      	ldr	r7, [pc, #660]	; (8007114 <HAL_UART_Init+0x310>)
 8006e80:	6863      	ldr	r3, [r4, #4]
 8006e82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006e86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006e90:	fba7 2303 	umull	r2, r3, r7, r3
 8006e94:	095b      	lsrs	r3, r3, #5
 8006e96:	011d      	lsls	r5, r3, #4
 8006e98:	f7ff ff92 	bl	8006dc0 <HAL_RCC_GetPCLK1Freq>
 8006e9c:	6866      	ldr	r6, [r4, #4]
 8006e9e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006ea2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006ea6:	00b6      	lsls	r6, r6, #2
 8006ea8:	fbb0 f6f6 	udiv	r6, r0, r6
 8006eac:	f7ff ff88 	bl	8006dc0 <HAL_RCC_GetPCLK1Freq>
 8006eb0:	6863      	ldr	r3, [r4, #4]
 8006eb2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006eb6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ec0:	fba7 2303 	umull	r2, r3, r7, r3
 8006ec4:	095b      	lsrs	r3, r3, #5
 8006ec6:	f04f 0964 	mov.w	r9, #100	; 0x64
 8006eca:	fb09 6313 	mls	r3, r9, r3, r6
 8006ece:	011b      	lsls	r3, r3, #4
 8006ed0:	3332      	adds	r3, #50	; 0x32
 8006ed2:	fba7 2303 	umull	r2, r3, r7, r3
 8006ed6:	095b      	lsrs	r3, r3, #5
 8006ed8:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8006edc:	f7ff ff70 	bl	8006dc0 <HAL_RCC_GetPCLK1Freq>
 8006ee0:	6862      	ldr	r2, [r4, #4]
 8006ee2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006ee6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006eea:	0093      	lsls	r3, r2, #2
 8006eec:	fbb0 f8f3 	udiv	r8, r0, r3
 8006ef0:	f7ff ff66 	bl	8006dc0 <HAL_RCC_GetPCLK1Freq>
 8006ef4:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006ef8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006efc:	008b      	lsls	r3, r1, #2
 8006efe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006f02:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f06:	fba7 1303 	umull	r1, r3, r7, r3
 8006f0a:	095b      	lsrs	r3, r3, #5
 8006f0c:	fb09 8313 	mls	r3, r9, r3, r8
 8006f10:	011b      	lsls	r3, r3, #4
 8006f12:	3332      	adds	r3, #50	; 0x32
 8006f14:	fba7 1303 	umull	r1, r3, r7, r3
 8006f18:	f3c3 1343 	ubfx	r3, r3, #5, #4
 8006f1c:	4333      	orrs	r3, r6
 8006f1e:	442b      	add	r3, r5
 8006f20:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f22:	6913      	ldr	r3, [r2, #16]
 8006f24:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8006f28:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f2a:	6953      	ldr	r3, [r2, #20]
 8006f2c:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8006f30:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8006f32:	68d3      	ldr	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f34:	2500      	movs	r5, #0
  huart->gState= HAL_UART_STATE_READY;
 8006f36:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8006f38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006f3c:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8006f3e:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f40:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8006f42:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8006f46:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8006f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	f000 809f 	beq.w	8007092 <HAL_UART_Init+0x28e>
 8006f54:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	f000 809a 	beq.w	8007092 <HAL_UART_Init+0x28e>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8006f5e:	f7ff ff2f 	bl	8006dc0 <HAL_RCC_GetPCLK1Freq>
 8006f62:	4f6c      	ldr	r7, [pc, #432]	; (8007114 <HAL_UART_Init+0x310>)
 8006f64:	6863      	ldr	r3, [r4, #4]
 8006f66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006f6a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006f6e:	005b      	lsls	r3, r3, #1
 8006f70:	fbb0 f3f3 	udiv	r3, r0, r3
 8006f74:	fba7 2303 	umull	r2, r3, r7, r3
 8006f78:	095b      	lsrs	r3, r3, #5
 8006f7a:	011e      	lsls	r6, r3, #4
 8006f7c:	f7ff ff20 	bl	8006dc0 <HAL_RCC_GetPCLK1Freq>
 8006f80:	6865      	ldr	r5, [r4, #4]
 8006f82:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006f86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006f8a:	006d      	lsls	r5, r5, #1
 8006f8c:	fbb0 f5f5 	udiv	r5, r0, r5
 8006f90:	f7ff ff16 	bl	8006dc0 <HAL_RCC_GetPCLK1Freq>
 8006f94:	6863      	ldr	r3, [r4, #4]
 8006f96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006f9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fa4:	fba7 2303 	umull	r2, r3, r7, r3
 8006fa8:	095b      	lsrs	r3, r3, #5
 8006faa:	f04f 0964 	mov.w	r9, #100	; 0x64
 8006fae:	fb09 5313 	mls	r3, r9, r3, r5
 8006fb2:	00db      	lsls	r3, r3, #3
 8006fb4:	3332      	adds	r3, #50	; 0x32
 8006fb6:	fba7 2303 	umull	r2, r3, r7, r3
 8006fba:	091b      	lsrs	r3, r3, #4
 8006fbc:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 8006fc0:	f7ff fefe 	bl	8006dc0 <HAL_RCC_GetPCLK1Freq>
 8006fc4:	6862      	ldr	r2, [r4, #4]
 8006fc6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006fca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006fce:	0053      	lsls	r3, r2, #1
 8006fd0:	fbb0 f8f3 	udiv	r8, r0, r3
 8006fd4:	f7ff fef4 	bl	8006dc0 <HAL_RCC_GetPCLK1Freq>
 8006fd8:	e9d4 2100 	ldrd	r2, r1, [r4]
 8006fdc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006fe0:	004b      	lsls	r3, r1, #1
 8006fe2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8006fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8006fea:	fba7 1303 	umull	r1, r3, r7, r3
 8006fee:	095b      	lsrs	r3, r3, #5
 8006ff0:	fb09 8313 	mls	r3, r9, r3, r8
 8006ff4:	00db      	lsls	r3, r3, #3
 8006ff6:	3332      	adds	r3, #50	; 0x32
 8006ff8:	fba7 1303 	umull	r1, r3, r7, r3
 8006ffc:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8007000:	4433      	add	r3, r6
 8007002:	442b      	add	r3, r5
 8007004:	6093      	str	r3, [r2, #8]
 8007006:	e78c      	b.n	8006f22 <HAL_UART_Init+0x11e>
    huart->Lock = HAL_UNLOCKED;
 8007008:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800700c:	f7ff fef8 	bl	8006e00 <HAL_UART_MspInit>
 8007010:	e705      	b.n	8006e1e <HAL_UART_Init+0x1a>
    return HAL_ERROR;
 8007012:	2001      	movs	r0, #1
}
 8007014:	4770      	bx	lr
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007016:	f7ff fee3 	bl	8006de0 <HAL_RCC_GetPCLK2Freq>
 800701a:	4f3e      	ldr	r7, [pc, #248]	; (8007114 <HAL_UART_Init+0x310>)
 800701c:	6863      	ldr	r3, [r4, #4]
 800701e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007022:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007026:	009b      	lsls	r3, r3, #2
 8007028:	fbb0 f3f3 	udiv	r3, r0, r3
 800702c:	fba7 2303 	umull	r2, r3, r7, r3
 8007030:	095b      	lsrs	r3, r3, #5
 8007032:	011d      	lsls	r5, r3, #4
 8007034:	f7ff fed4 	bl	8006de0 <HAL_RCC_GetPCLK2Freq>
 8007038:	6866      	ldr	r6, [r4, #4]
 800703a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800703e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007042:	00b6      	lsls	r6, r6, #2
 8007044:	fbb0 f6f6 	udiv	r6, r0, r6
 8007048:	f7ff feca 	bl	8006de0 <HAL_RCC_GetPCLK2Freq>
 800704c:	6863      	ldr	r3, [r4, #4]
 800704e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007052:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007056:	009b      	lsls	r3, r3, #2
 8007058:	fbb0 f3f3 	udiv	r3, r0, r3
 800705c:	fba7 2303 	umull	r2, r3, r7, r3
 8007060:	f04f 0964 	mov.w	r9, #100	; 0x64
 8007064:	095b      	lsrs	r3, r3, #5
 8007066:	fb09 6313 	mls	r3, r9, r3, r6
 800706a:	011b      	lsls	r3, r3, #4
 800706c:	3332      	adds	r3, #50	; 0x32
 800706e:	fba7 2303 	umull	r2, r3, r7, r3
 8007072:	095b      	lsrs	r3, r3, #5
 8007074:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8007078:	f7ff feb2 	bl	8006de0 <HAL_RCC_GetPCLK2Freq>
 800707c:	6862      	ldr	r2, [r4, #4]
 800707e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007082:	0093      	lsls	r3, r2, #2
 8007084:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007088:	fbb0 f8f3 	udiv	r8, r0, r3
 800708c:	f7ff fea8 	bl	8006de0 <HAL_RCC_GetPCLK2Freq>
 8007090:	e730      	b.n	8006ef4 <HAL_UART_Init+0xf0>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007092:	f7ff fea5 	bl	8006de0 <HAL_RCC_GetPCLK2Freq>
 8007096:	4f1f      	ldr	r7, [pc, #124]	; (8007114 <HAL_UART_Init+0x310>)
 8007098:	6863      	ldr	r3, [r4, #4]
 800709a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800709e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80070a2:	005b      	lsls	r3, r3, #1
 80070a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80070a8:	fba7 2303 	umull	r2, r3, r7, r3
 80070ac:	095b      	lsrs	r3, r3, #5
 80070ae:	011e      	lsls	r6, r3, #4
 80070b0:	f7ff fe96 	bl	8006de0 <HAL_RCC_GetPCLK2Freq>
 80070b4:	6865      	ldr	r5, [r4, #4]
 80070b6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80070ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80070be:	006d      	lsls	r5, r5, #1
 80070c0:	fbb0 f5f5 	udiv	r5, r0, r5
 80070c4:	f7ff fe8c 	bl	8006de0 <HAL_RCC_GetPCLK2Freq>
 80070c8:	6863      	ldr	r3, [r4, #4]
 80070ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80070ce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80070d2:	005b      	lsls	r3, r3, #1
 80070d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80070d8:	fba7 2303 	umull	r2, r3, r7, r3
 80070dc:	f04f 0964 	mov.w	r9, #100	; 0x64
 80070e0:	095b      	lsrs	r3, r3, #5
 80070e2:	fb09 5313 	mls	r3, r9, r3, r5
 80070e6:	00db      	lsls	r3, r3, #3
 80070e8:	3332      	adds	r3, #50	; 0x32
 80070ea:	fba7 2303 	umull	r2, r3, r7, r3
 80070ee:	091b      	lsrs	r3, r3, #4
 80070f0:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 80070f4:	f7ff fe74 	bl	8006de0 <HAL_RCC_GetPCLK2Freq>
 80070f8:	6862      	ldr	r2, [r4, #4]
 80070fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80070fe:	0053      	lsls	r3, r2, #1
 8007100:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007104:	fbb0 f8f3 	udiv	r8, r0, r3
 8007108:	f7ff fe6a 	bl	8006de0 <HAL_RCC_GetPCLK2Freq>
 800710c:	e764      	b.n	8006fd8 <HAL_UART_Init+0x1d4>
 800710e:	bf00      	nop
 8007110:	40011000 	.word	0x40011000
 8007114:	51eb851f 	.word	0x51eb851f

08007118 <HAL_UART_Transmit>:
{
 8007118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800711a:	460e      	mov	r6, r1
  if(huart->gState == HAL_UART_STATE_READY) 
 800711c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8007120:	2920      	cmp	r1, #32
{
 8007122:	b083      	sub	sp, #12
  if(huart->gState == HAL_UART_STATE_READY) 
 8007124:	d12d      	bne.n	8007182 <HAL_UART_Transmit+0x6a>
    if((pData == NULL ) || (Size == 0)) 
 8007126:	2e00      	cmp	r6, #0
 8007128:	d02e      	beq.n	8007188 <HAL_UART_Transmit+0x70>
 800712a:	9201      	str	r2, [sp, #4]
 800712c:	b362      	cbz	r2, 8007188 <HAL_UART_Transmit+0x70>
 800712e:	461f      	mov	r7, r3
    __HAL_LOCK(huart);
 8007130:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8007134:	2b01      	cmp	r3, #1
 8007136:	4604      	mov	r4, r0
 8007138:	d023      	beq.n	8007182 <HAL_UART_Transmit+0x6a>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800713a:	2300      	movs	r3, #0
 800713c:	63c3      	str	r3, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 800713e:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007140:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 8007142:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007146:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 800714a:	f7fe fd3d 	bl	8005bc8 <HAL_GetTick>
    huart->TxXferSize = Size;
 800714e:	9a01      	ldr	r2, [sp, #4]
 8007150:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8007152:	84e2      	strh	r2, [r4, #38]	; 0x26
 8007154:	6822      	ldr	r2, [r4, #0]
    tickstart = HAL_GetTick();
 8007156:	4605      	mov	r5, r0
    while(huart->TxXferCount > 0U)
 8007158:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800715a:	b29b      	uxth	r3, r3
 800715c:	2b00      	cmp	r3, #0
 800715e:	d039      	beq.n	80071d4 <HAL_UART_Transmit+0xbc>
      huart->TxXferCount--;
 8007160:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007162:	68a1      	ldr	r1, [r4, #8]
      huart->TxXferCount--;
 8007164:	3801      	subs	r0, #1
 8007166:	b280      	uxth	r0, r0
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007168:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      huart->TxXferCount--;
 800716c:	84e0      	strh	r0, [r4, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 800716e:	d019      	beq.n	80071a4 <HAL_UART_Transmit+0x8c>
 8007170:	1c78      	adds	r0, r7, #1
 8007172:	d13b      	bne.n	80071ec <HAL_UART_Transmit+0xd4>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 8007174:	6810      	ldr	r0, [r2, #0]
 8007176:	0601      	lsls	r1, r0, #24
 8007178:	d5fc      	bpl.n	8007174 <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800717a:	7833      	ldrb	r3, [r6, #0]
 800717c:	6053      	str	r3, [r2, #4]
 800717e:	3601      	adds	r6, #1
 8007180:	e7ea      	b.n	8007158 <HAL_UART_Transmit+0x40>
    return HAL_BUSY;
 8007182:	2002      	movs	r0, #2
}
 8007184:	b003      	add	sp, #12
 8007186:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8007188:	2001      	movs	r0, #1
}
 800718a:	b003      	add	sp, #12
 800718c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 800718e:	6813      	ldr	r3, [r2, #0]
 8007190:	061b      	lsls	r3, r3, #24
 8007192:	d40c      	bmi.n	80071ae <HAL_UART_Transmit+0x96>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8007194:	2f00      	cmp	r7, #0
 8007196:	d033      	beq.n	8007200 <HAL_UART_Transmit+0xe8>
 8007198:	f7fe fd16 	bl	8005bc8 <HAL_GetTick>
 800719c:	1b40      	subs	r0, r0, r5
 800719e:	4287      	cmp	r7, r0
 80071a0:	6822      	ldr	r2, [r4, #0]
 80071a2:	d32d      	bcc.n	8007200 <HAL_UART_Transmit+0xe8>
 80071a4:	1c78      	adds	r0, r7, #1
 80071a6:	d1f2      	bne.n	800718e <HAL_UART_Transmit+0x76>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80071a8:	6810      	ldr	r0, [r2, #0]
 80071aa:	0601      	lsls	r1, r0, #24
 80071ac:	d5fc      	bpl.n	80071a8 <HAL_UART_Transmit+0x90>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80071ae:	8833      	ldrh	r3, [r6, #0]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80071b0:	6921      	ldr	r1, [r4, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80071b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80071b6:	6053      	str	r3, [r2, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 80071b8:	2900      	cmp	r1, #0
 80071ba:	d1e0      	bne.n	800717e <HAL_UART_Transmit+0x66>
          pData +=2U;
 80071bc:	3602      	adds	r6, #2
 80071be:	e7cb      	b.n	8007158 <HAL_UART_Transmit+0x40>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80071c0:	6813      	ldr	r3, [r2, #0]
 80071c2:	065b      	lsls	r3, r3, #25
 80071c4:	d40b      	bmi.n	80071de <HAL_UART_Transmit+0xc6>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80071c6:	b1df      	cbz	r7, 8007200 <HAL_UART_Transmit+0xe8>
 80071c8:	f7fe fcfe 	bl	8005bc8 <HAL_GetTick>
 80071cc:	1b40      	subs	r0, r0, r5
 80071ce:	4287      	cmp	r7, r0
 80071d0:	6822      	ldr	r2, [r4, #0]
 80071d2:	d315      	bcc.n	8007200 <HAL_UART_Transmit+0xe8>
 80071d4:	1c78      	adds	r0, r7, #1
 80071d6:	d1f3      	bne.n	80071c0 <HAL_UART_Transmit+0xa8>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80071d8:	6813      	ldr	r3, [r2, #0]
 80071da:	0659      	lsls	r1, r3, #25
 80071dc:	d5fc      	bpl.n	80071d8 <HAL_UART_Transmit+0xc0>
      huart->gState = HAL_UART_STATE_READY;
 80071de:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 80071e0:	2000      	movs	r0, #0
      huart->gState = HAL_UART_STATE_READY;
 80071e2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 80071e6:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 80071ea:	e7cb      	b.n	8007184 <HAL_UART_Transmit+0x6c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) 
 80071ec:	6813      	ldr	r3, [r2, #0]
 80071ee:	061b      	lsls	r3, r3, #24
 80071f0:	d4c3      	bmi.n	800717a <HAL_UART_Transmit+0x62>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80071f2:	b12f      	cbz	r7, 8007200 <HAL_UART_Transmit+0xe8>
 80071f4:	f7fe fce8 	bl	8005bc8 <HAL_GetTick>
 80071f8:	1b40      	subs	r0, r0, r5
 80071fa:	4287      	cmp	r7, r0
 80071fc:	6822      	ldr	r2, [r4, #0]
 80071fe:	d2b7      	bcs.n	8007170 <HAL_UART_Transmit+0x58>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007200:	68d3      	ldr	r3, [r2, #12]
 8007202:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007206:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007208:	6953      	ldr	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 800720a:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800720c:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8007210:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 8007212:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007214:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8007216:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
        __HAL_UNLOCK(huart);
 800721a:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 800721e:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8007222:	b003      	add	sp, #12
 8007224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007226:	bf00      	nop

08007228 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8007228:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007260 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800722c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800722e:	e003      	b.n	8007238 <LoopCopyDataInit>

08007230 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007230:	4b0c      	ldr	r3, [pc, #48]	; (8007264 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007232:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007234:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007236:	3104      	adds	r1, #4

08007238 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007238:	480b      	ldr	r0, [pc, #44]	; (8007268 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800723a:	4b0c      	ldr	r3, [pc, #48]	; (800726c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800723c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800723e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007240:	d3f6      	bcc.n	8007230 <CopyDataInit>
  ldr  r2, =_sbss
 8007242:	4a0b      	ldr	r2, [pc, #44]	; (8007270 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007244:	e002      	b.n	800724c <LoopFillZerobss>

08007246 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007246:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007248:	f842 3b04 	str.w	r3, [r2], #4

0800724c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800724c:	4b09      	ldr	r3, [pc, #36]	; (8007274 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800724e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007250:	d3f9      	bcc.n	8007246 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007252:	f7fe fc47 	bl	8005ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007256:	f000 f941 	bl	80074dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800725a:	f000 f8a7 	bl	80073ac <main>
  bx  lr    
 800725e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8007260:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8007264:	08007e38 	.word	0x08007e38
  ldr  r0, =_sdata
 8007268:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800726c:	200002cc 	.word	0x200002cc
  ldr  r2, =_sbss
 8007270:	200002cc 	.word	0x200002cc
  ldr  r3, = _ebss
 8007274:	200006f4 	.word	0x200006f4

08007278 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007278:	e7fe      	b.n	8007278 <ADC_IRQHandler>
	...

0800727c <USARTConfig>:
 * @brief  Configure the USART
 * @param  None
 * @retval None
 */
void USARTConfig( void )
{
 800727c:	b570      	push	{r4, r5, r6, lr}
 800727e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/

  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8007280:	4b25      	ldr	r3, [pc, #148]	; (8007318 <USARTConfig+0x9c>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8007282:	4826      	ldr	r0, [pc, #152]	; (800731c <USARTConfig+0xa0>)
          - Word Length = 8 Bits
          - Stop Bit = One Stop bit
          - Parity = None
          - BaudRate = 'Usart_BaudRate' baud
          - Hardware flow control disabled (RTS and CTS signals) */
  UartHandle.Instance        = USARTx;
 8007284:	4c26      	ldr	r4, [pc, #152]	; (8007320 <USARTConfig+0xa4>)
  USARTx_TX_GPIO_CLK_ENABLE();
 8007286:	2500      	movs	r5, #0
 8007288:	9500      	str	r5, [sp, #0]
 800728a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800728c:	f042 0201 	orr.w	r2, r2, #1
 8007290:	631a      	str	r2, [r3, #48]	; 0x30
 8007292:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007294:	f002 0201 	and.w	r2, r2, #1
 8007298:	9200      	str	r2, [sp, #0]
 800729a:	9a00      	ldr	r2, [sp, #0]
  USARTx_RX_GPIO_CLK_ENABLE();
 800729c:	9501      	str	r5, [sp, #4]
 800729e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072a0:	f042 0201 	orr.w	r2, r2, #1
 80072a4:	631a      	str	r2, [r3, #48]	; 0x30
 80072a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072a8:	f002 0201 	and.w	r2, r2, #1
 80072ac:	9201      	str	r2, [sp, #4]
 80072ae:	9a01      	ldr	r2, [sp, #4]
  USARTx_CLK_ENABLE();
 80072b0:	9502      	str	r5, [sp, #8]
 80072b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072b4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80072b8:	641a      	str	r2, [r3, #64]	; 0x40
 80072ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80072bc:	9505      	str	r5, [sp, #20]
  USARTx_CLK_ENABLE();
 80072be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072c2:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80072c4:	2304      	movs	r3, #4
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80072c6:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 80072c8:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80072ca:	2607      	movs	r6, #7
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80072cc:	2302      	movs	r3, #2
  USARTx_CLK_ENABLE();
 80072ce:	9a02      	ldr	r2, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80072d0:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_HIGH;
 80072d2:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80072d4:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80072d6:	f7fe fcfd 	bl	8005cd4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = USARTx_RX_PIN;
 80072da:	2308      	movs	r3, #8
  HAL_GPIO_Init( USARTx_RX_GPIO_PORT, &GPIO_InitStruct );
 80072dc:	a903      	add	r1, sp, #12
 80072de:	480f      	ldr	r0, [pc, #60]	; (800731c <USARTConfig+0xa0>)
  GPIO_InitStruct.Pin       = USARTx_RX_PIN;
 80072e0:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80072e2:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init( USARTx_RX_GPIO_PORT, &GPIO_InitStruct );
 80072e4:	f7fe fcf6 	bl	8005cd4 <HAL_GPIO_Init>
  UartHandle.Instance        = USARTx;
 80072e8:	490e      	ldr	r1, [pc, #56]	; (8007324 <USARTConfig+0xa8>)
  UartHandle.Init.BaudRate   = Usart_BaudRate;
  UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80072ea:	60a5      	str	r5, [r4, #8]
  UartHandle.Init.BaudRate   = Usart_BaudRate;
 80072ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  UartHandle.Init.StopBits   = UART_STOPBITS_1;
  UartHandle.Init.Parity     = UART_PARITY_NONE;
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80072f0:	230c      	movs	r3, #12

  if ( HAL_UART_Init( &UartHandle ) != HAL_OK )
 80072f2:	4620      	mov	r0, r4
  UartHandle.Init.Parity     = UART_PARITY_NONE;
 80072f4:	e9c4 5503 	strd	r5, r5, [r4, #12]
  UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80072f8:	61a5      	str	r5, [r4, #24]
  UartHandle.Init.BaudRate   = Usart_BaudRate;
 80072fa:	e9c4 1200 	strd	r1, r2, [r4]
  UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80072fe:	6163      	str	r3, [r4, #20]
  if ( HAL_UART_Init( &UartHandle ) != HAL_OK )
 8007300:	f7ff fd80 	bl	8006e04 <HAL_UART_Init>
 8007304:	b100      	cbz	r0, 8007308 <USARTConfig+0x8c>
 8007306:	e7fe      	b.n	8007306 <USARTConfig+0x8a>
  {
    while( 1 );
  }

  UartHandle.pRxBuffPtr = ( uint8_t * )UART_RxBuffer;
 8007308:	4a07      	ldr	r2, [pc, #28]	; (8007328 <USARTConfig+0xac>)
  UartHandle.RxXferSize = UART_BufferSize;
  UartHandle.ErrorCode  = HAL_UART_ERROR_NONE;
 800730a:	63e0      	str	r0, [r4, #60]	; 0x3c
  UartHandle.RxXferSize = UART_BufferSize;
 800730c:	f44f 7380 	mov.w	r3, #256	; 0x100
  UartHandle.pRxBuffPtr = ( uint8_t * )UART_RxBuffer;
 8007310:	62a2      	str	r2, [r4, #40]	; 0x28
  UartHandle.RxXferSize = UART_BufferSize;
 8007312:	85a3      	strh	r3, [r4, #44]	; 0x2c
}
 8007314:	b008      	add	sp, #32
 8007316:	bd70      	pop	{r4, r5, r6, pc}
 8007318:	40023800 	.word	0x40023800
 800731c:	40020000 	.word	0x40020000
 8007320:	200004b0 	.word	0x200004b0
 8007324:	40004400 	.word	0x40004400
 8007328:	200004f0 	.word	0x200004f0

0800732c <SystemClock_Config>:
 * @brief  System Clock Configuration
 * @param  None
 * @retval None
 */
void SystemClock_Config(void)
{
 800732c:	b570      	push	{r4, r5, r6, lr}
 800732e:	b094      	sub	sp, #80	; 0x50
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __PWR_CLK_ENABLE();
 8007330:	2400      	movs	r4, #0
 8007332:	4b1c      	ldr	r3, [pc, #112]	; (80073a4 <SystemClock_Config+0x78>)
 8007334:	9401      	str	r4, [sp, #4]
 8007336:	6c19      	ldr	r1, [r3, #64]	; 0x40

  /* The voltage scaling allows optimizing the power consumption when the device is
  clocked below the maximum system frequency, to update the voltage scaling value
  regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8007338:	4a1b      	ldr	r2, [pc, #108]	; (80073a8 <SystemClock_Config+0x7c>)
  __PWR_CLK_ENABLE();
 800733a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800733e:	6419      	str	r1, [r3, #64]	; 0x40
 8007340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007346:	9301      	str	r3, [sp, #4]
 8007348:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800734a:	9402      	str	r4, [sp, #8]
 800734c:	6813      	ldr	r3, [r2, #0]
 800734e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007352:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007356:	6013      	str	r3, [r2, #0]
 8007358:	6813      	ldr	r3, [r2, #0]
  /* Enable HSE Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 16;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800735a:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800735c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007360:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007362:	2201      	movs	r2, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007364:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8007366:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8007368:	2104      	movs	r1, #4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800736a:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800736c:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800736e:	f44f 76a8 	mov.w	r6, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007372:	2207      	movs	r2, #7
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8007374:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8007376:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLM = 16;
 8007378:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800737a:	e9cd 6111 	strd	r6, r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800737e:	9213      	str	r2, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007380:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007382:	950e      	str	r5, [sp, #56]	; 0x38
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8007384:	f7ff fa92 	bl	80068ac <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
    clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8007388:	220f      	movs	r2, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800738a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 800738e:	4629      	mov	r1, r5
 8007390:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007392:	e9cd 5404 	strd	r5, r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007396:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8007398:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800739a:	9306      	str	r3, [sp, #24]
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 800739c:	f7ff fc76 	bl	8006c8c <HAL_RCC_ClockConfig>
}
 80073a0:	b014      	add	sp, #80	; 0x50
 80073a2:	bd70      	pop	{r4, r5, r6, pc}
 80073a4:	40023800 	.word	0x40023800
 80073a8:	40007000 	.word	0x40007000

080073ac <main>:
 *         - the user can also view data from various on-board MEMS sensors as well like Accelerometer, Gyroscope, and Magnetometer.
 * @param  None
 * @retval Integer
 */
int main( void )
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b086      	sub	sp, #24
  - Configure the Flash prefetch, instruction and Data caches
  - Configure the Systick to generate an interrupt each 1 msec
  - Set NVIC Group Priority to 4
  - Global MSP (MCU Support Package) initialization
  */
  HAL_Init();
 80073b0:	f7fe fbe4 	bl	8005b7c <HAL_Init>
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);

  /* Initialize UART */
  USARTConfig();

  BSP_ACCELERO_Init( LSM6DS0_X_0, &LSM6DS0_X_0_handle );
 80073b4:	4c2d      	ldr	r4, [pc, #180]	; (800746c <main+0xc0>)
    	      acceleration.AXIS_X = 0;
    	      acceleration.AXIS_Y = 0;
    	      acceleration.AXIS_Z = 0;
    	    }

    	    snprintf( dataOut, MAX_BUF_SIZE, "%d,%d,%d\r\n", (int)acceleration.AXIS_X,
 80073b6:	4f2e      	ldr	r7, [pc, #184]	; (8007470 <main+0xc4>)
 80073b8:	4d2e      	ldr	r5, [pc, #184]	; (8007474 <main+0xc8>)
    	             (int)acceleration.AXIS_Y, (int)acceleration.AXIS_Z);

    	    HAL_UART_Transmit( &UartHandle, ( uint8_t * )dataOut, strlen( dataOut ), 5000 );
 80073ba:	4e2f      	ldr	r6, [pc, #188]	; (8007478 <main+0xcc>)
  SystemClock_Config();
 80073bc:	f7ff ffb6 	bl	800732c <SystemClock_Config>
  BSP_LED_Init( LED2 );
 80073c0:	2000      	movs	r0, #0
 80073c2:	f7fe f86f 	bl	80054a4 <BSP_LED_Init>
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 80073c6:	2101      	movs	r1, #1
 80073c8:	2000      	movs	r0, #0
 80073ca:	f7fe f893 	bl	80054f4 <BSP_PB_Init>
  USARTConfig();
 80073ce:	f7ff ff55 	bl	800727c <USARTConfig>
  BSP_ACCELERO_Init( LSM6DS0_X_0, &LSM6DS0_X_0_handle );
 80073d2:	4621      	mov	r1, r4
 80073d4:	2000      	movs	r0, #0
 80073d6:	f7fe fa79 	bl	80058cc <BSP_ACCELERO_Init>
  if(BSP_ACCELERO_Init( LSM6DS3_X_0, &LSM6DS3_X_0_handle ) == COMPONENT_ERROR)
 80073da:	1d21      	adds	r1, r4, #4
 80073dc:	2001      	movs	r0, #1
 80073de:	f7fe fa75 	bl	80058cc <BSP_ACCELERO_Init>
 80073e2:	2801      	cmp	r0, #1
    no_X_LSM6DS3_DIL24 = 1;
 80073e4:	bf08      	it	eq
 80073e6:	7220      	strbeq	r0, [r4, #8]
 80073e8:	e00b      	b.n	8007402 <main+0x56>
    	  BSP_ACCELERO_Get_Instance( LSM6DS0_X_0_handle, &id );
 80073ea:	6820      	ldr	r0, [r4, #0]
 80073ec:	f7fe fb60 	bl	8005ab0 <BSP_ACCELERO_Get_Instance>
    	  BSP_ACCELERO_IsInitialized( LSM6DS0_X_0_handle, &status );
 80073f0:	f10d 010b 	add.w	r1, sp, #11
 80073f4:	6820      	ldr	r0, [r4, #0]
 80073f6:	f7fe fb53 	bl	8005aa0 <BSP_ACCELERO_IsInitialized>
    	  if ( status == 1 )
 80073fa:	f89d 300b 	ldrb.w	r3, [sp, #11]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d00d      	beq.n	800741e <main+0x72>
	  BSP_ACCELERO_Sensor_Enable( LSM6DS0_X_0_handle );
 8007402:	6820      	ldr	r0, [r4, #0]
 8007404:	f7fe fb3c 	bl	8005a80 <BSP_ACCELERO_Sensor_Enable>
	  if(!no_X_LSM6DS3_DIL24)
 8007408:	7a23      	ldrb	r3, [r4, #8]
    	  BSP_ACCELERO_Get_Instance( LSM6DS0_X_0_handle, &id );
 800740a:	f10d 010a 	add.w	r1, sp, #10
	  if(!no_X_LSM6DS3_DIL24)
 800740e:	2b00      	cmp	r3, #0
 8007410:	d1eb      	bne.n	80073ea <main+0x3e>
	    BSP_ACCELERO_Sensor_Enable( LSM6DS3_X_0_handle );
 8007412:	6860      	ldr	r0, [r4, #4]
 8007414:	f7fe fb34 	bl	8005a80 <BSP_ACCELERO_Sensor_Enable>
    	  BSP_ACCELERO_Get_Instance( LSM6DS0_X_0_handle, &id );
 8007418:	f10d 010a 	add.w	r1, sp, #10
 800741c:	e7e5      	b.n	80073ea <main+0x3e>
    	    if ( BSP_ACCELERO_Get_Axes( LSM6DS0_X_0_handle, &acceleration ) == COMPONENT_ERROR )
 800741e:	a903      	add	r1, sp, #12
 8007420:	6820      	ldr	r0, [r4, #0]
 8007422:	f7fe fb4d 	bl	8005ac0 <BSP_ACCELERO_Get_Axes>
 8007426:	2801      	cmp	r0, #1
 8007428:	d019      	beq.n	800745e <main+0xb2>
 800742a:	e9dd 3003 	ldrd	r3, r0, [sp, #12]
 800742e:	9a05      	ldr	r2, [sp, #20]
    	    snprintf( dataOut, MAX_BUF_SIZE, "%d,%d,%d\r\n", (int)acceleration.AXIS_X,
 8007430:	e9cd 0200 	strd	r0, r2, [sp]
 8007434:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007438:	463a      	mov	r2, r7
 800743a:	4628      	mov	r0, r5
 800743c:	f000 f872 	bl	8007524 <sniprintf>
    	    HAL_UART_Transmit( &UartHandle, ( uint8_t * )dataOut, strlen( dataOut ), 5000 );
 8007440:	4628      	mov	r0, r5
 8007442:	f7f8 fecd 	bl	80001e0 <strlen>
 8007446:	f241 3388 	movw	r3, #5000	; 0x1388
 800744a:	b282      	uxth	r2, r0
 800744c:	4629      	mov	r1, r5
 800744e:	4630      	mov	r0, r6
 8007450:	f7ff fe62 	bl	8007118 <HAL_UART_Transmit>
      //Accelero_Sensor_Handler( LSM6DS0_X_0_handle );

      HAL_Delay( 1000 );
 8007454:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007458:	f7fe fbbc 	bl	8005bd4 <HAL_Delay>
 800745c:	e7d1      	b.n	8007402 <main+0x56>
    	      acceleration.AXIS_X = 0;
 800745e:	2300      	movs	r3, #0
    	      acceleration.AXIS_Z = 0;
 8007460:	461a      	mov	r2, r3
    	      acceleration.AXIS_Y = 0;
 8007462:	e9cd 3303 	strd	r3, r3, [sp, #12]
    	      acceleration.AXIS_Z = 0;
 8007466:	9305      	str	r3, [sp, #20]
 8007468:	4618      	mov	r0, r3
 800746a:	e7e1      	b.n	8007430 <main+0x84>
 800746c:	20000380 	.word	0x20000380
 8007470:	08007d88 	.word	0x08007d88
 8007474:	2000038c 	.word	0x2000038c
 8007478:	200004b0 	.word	0x200004b0

0800747c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop

08007480 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8007480:	e7fe      	b.n	8007480 <HardFault_Handler>
 8007482:	bf00      	nop

08007484 <DebugMon_Handler>:
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop

08007488 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8007488:	f7fe bb92 	b.w	8005bb0 <HAL_IncTick>

0800748c <EXTI15_10_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler( void )
{
  HAL_GPIO_EXTI_IRQHandler(KEY_BUTTON_PIN);
 800748c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007490:	f7fe bd06 	b.w	8005ea0 <HAL_GPIO_EXTI_IRQHandler>

08007494 <_sbrk>:
{
  extern char end asm("end");
  static char *heap_end;
  char *prev_heap_end;

  if (heap_end == 0)
 8007494:	4a0c      	ldr	r2, [pc, #48]	; (80074c8 <_sbrk+0x34>)
{
 8007496:	b508      	push	{r3, lr}
  if (heap_end == 0)
 8007498:	6813      	ldr	r3, [r2, #0]
 800749a:	b133      	cbz	r3, 80074aa <_sbrk+0x16>
    heap_end = &end;

  prev_heap_end = heap_end;
  if (heap_end + incr > stack_ptr)
 800749c:	4418      	add	r0, r3
 800749e:	4669      	mov	r1, sp
 80074a0:	4288      	cmp	r0, r1
 80074a2:	d808      	bhi.n	80074b6 <_sbrk+0x22>
//    abort();
    errno = ENOMEM;
    return (caddr_t) - 1;
  }

  heap_end += incr;
 80074a4:	6010      	str	r0, [r2, #0]

  return (caddr_t) prev_heap_end;
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	bd08      	pop	{r3, pc}
    heap_end = &end;
 80074aa:	4b08      	ldr	r3, [pc, #32]	; (80074cc <_sbrk+0x38>)
 80074ac:	6013      	str	r3, [r2, #0]
  if (heap_end + incr > stack_ptr)
 80074ae:	4418      	add	r0, r3
 80074b0:	4669      	mov	r1, sp
 80074b2:	4288      	cmp	r0, r1
 80074b4:	d9f6      	bls.n	80074a4 <_sbrk+0x10>
    errno = ENOMEM;
 80074b6:	f000 f80b 	bl	80074d0 <__errno>
 80074ba:	230c      	movs	r3, #12
 80074bc:	6003      	str	r3, [r0, #0]
    return (caddr_t) - 1;
 80074be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	bd08      	pop	{r3, pc}
 80074c6:	bf00      	nop
 80074c8:	20000494 	.word	0x20000494
 80074cc:	200006f4 	.word	0x200006f4

080074d0 <__errno>:
 80074d0:	4b01      	ldr	r3, [pc, #4]	; (80074d8 <__errno+0x8>)
 80074d2:	6818      	ldr	r0, [r3, #0]
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	20000268 	.word	0x20000268

080074dc <__libc_init_array>:
 80074dc:	b570      	push	{r4, r5, r6, lr}
 80074de:	4e0d      	ldr	r6, [pc, #52]	; (8007514 <__libc_init_array+0x38>)
 80074e0:	4c0d      	ldr	r4, [pc, #52]	; (8007518 <__libc_init_array+0x3c>)
 80074e2:	1ba4      	subs	r4, r4, r6
 80074e4:	10a4      	asrs	r4, r4, #2
 80074e6:	2500      	movs	r5, #0
 80074e8:	42a5      	cmp	r5, r4
 80074ea:	d109      	bne.n	8007500 <__libc_init_array+0x24>
 80074ec:	4e0b      	ldr	r6, [pc, #44]	; (800751c <__libc_init_array+0x40>)
 80074ee:	4c0c      	ldr	r4, [pc, #48]	; (8007520 <__libc_init_array+0x44>)
 80074f0:	f000 fc32 	bl	8007d58 <_init>
 80074f4:	1ba4      	subs	r4, r4, r6
 80074f6:	10a4      	asrs	r4, r4, #2
 80074f8:	2500      	movs	r5, #0
 80074fa:	42a5      	cmp	r5, r4
 80074fc:	d105      	bne.n	800750a <__libc_init_array+0x2e>
 80074fe:	bd70      	pop	{r4, r5, r6, pc}
 8007500:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007504:	4798      	blx	r3
 8007506:	3501      	adds	r5, #1
 8007508:	e7ee      	b.n	80074e8 <__libc_init_array+0xc>
 800750a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800750e:	4798      	blx	r3
 8007510:	3501      	adds	r5, #1
 8007512:	e7f2      	b.n	80074fa <__libc_init_array+0x1e>
 8007514:	08007e30 	.word	0x08007e30
 8007518:	08007e30 	.word	0x08007e30
 800751c:	08007e30 	.word	0x08007e30
 8007520:	08007e34 	.word	0x08007e34

08007524 <sniprintf>:
 8007524:	b40c      	push	{r2, r3}
 8007526:	b530      	push	{r4, r5, lr}
 8007528:	4b17      	ldr	r3, [pc, #92]	; (8007588 <sniprintf+0x64>)
 800752a:	1e0c      	subs	r4, r1, #0
 800752c:	b09d      	sub	sp, #116	; 0x74
 800752e:	681d      	ldr	r5, [r3, #0]
 8007530:	da08      	bge.n	8007544 <sniprintf+0x20>
 8007532:	238b      	movs	r3, #139	; 0x8b
 8007534:	602b      	str	r3, [r5, #0]
 8007536:	f04f 30ff 	mov.w	r0, #4294967295
 800753a:	b01d      	add	sp, #116	; 0x74
 800753c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007540:	b002      	add	sp, #8
 8007542:	4770      	bx	lr
 8007544:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007548:	f8ad 3014 	strh.w	r3, [sp, #20]
 800754c:	bf14      	ite	ne
 800754e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007552:	4623      	moveq	r3, r4
 8007554:	9304      	str	r3, [sp, #16]
 8007556:	9307      	str	r3, [sp, #28]
 8007558:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800755c:	9002      	str	r0, [sp, #8]
 800755e:	9006      	str	r0, [sp, #24]
 8007560:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007564:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007566:	ab21      	add	r3, sp, #132	; 0x84
 8007568:	a902      	add	r1, sp, #8
 800756a:	4628      	mov	r0, r5
 800756c:	9301      	str	r3, [sp, #4]
 800756e:	f000 f8c1 	bl	80076f4 <_svfiprintf_r>
 8007572:	1c43      	adds	r3, r0, #1
 8007574:	bfbc      	itt	lt
 8007576:	238b      	movlt	r3, #139	; 0x8b
 8007578:	602b      	strlt	r3, [r5, #0]
 800757a:	2c00      	cmp	r4, #0
 800757c:	d0dd      	beq.n	800753a <sniprintf+0x16>
 800757e:	9b02      	ldr	r3, [sp, #8]
 8007580:	2200      	movs	r2, #0
 8007582:	701a      	strb	r2, [r3, #0]
 8007584:	e7d9      	b.n	800753a <sniprintf+0x16>
 8007586:	bf00      	nop
 8007588:	20000268 	.word	0x20000268

0800758c <_malloc_r>:
 800758c:	b570      	push	{r4, r5, r6, lr}
 800758e:	1ccd      	adds	r5, r1, #3
 8007590:	f025 0503 	bic.w	r5, r5, #3
 8007594:	3508      	adds	r5, #8
 8007596:	2d0c      	cmp	r5, #12
 8007598:	bf38      	it	cc
 800759a:	250c      	movcc	r5, #12
 800759c:	2d00      	cmp	r5, #0
 800759e:	4606      	mov	r6, r0
 80075a0:	db01      	blt.n	80075a6 <_malloc_r+0x1a>
 80075a2:	42a9      	cmp	r1, r5
 80075a4:	d903      	bls.n	80075ae <_malloc_r+0x22>
 80075a6:	230c      	movs	r3, #12
 80075a8:	6033      	str	r3, [r6, #0]
 80075aa:	2000      	movs	r0, #0
 80075ac:	bd70      	pop	{r4, r5, r6, pc}
 80075ae:	f000 fb55 	bl	8007c5c <__malloc_lock>
 80075b2:	4a21      	ldr	r2, [pc, #132]	; (8007638 <_malloc_r+0xac>)
 80075b4:	6814      	ldr	r4, [r2, #0]
 80075b6:	4621      	mov	r1, r4
 80075b8:	b991      	cbnz	r1, 80075e0 <_malloc_r+0x54>
 80075ba:	4c20      	ldr	r4, [pc, #128]	; (800763c <_malloc_r+0xb0>)
 80075bc:	6823      	ldr	r3, [r4, #0]
 80075be:	b91b      	cbnz	r3, 80075c8 <_malloc_r+0x3c>
 80075c0:	4630      	mov	r0, r6
 80075c2:	f000 fb17 	bl	8007bf4 <_sbrk_r>
 80075c6:	6020      	str	r0, [r4, #0]
 80075c8:	4629      	mov	r1, r5
 80075ca:	4630      	mov	r0, r6
 80075cc:	f000 fb12 	bl	8007bf4 <_sbrk_r>
 80075d0:	1c43      	adds	r3, r0, #1
 80075d2:	d124      	bne.n	800761e <_malloc_r+0x92>
 80075d4:	230c      	movs	r3, #12
 80075d6:	6033      	str	r3, [r6, #0]
 80075d8:	4630      	mov	r0, r6
 80075da:	f000 fb40 	bl	8007c5e <__malloc_unlock>
 80075de:	e7e4      	b.n	80075aa <_malloc_r+0x1e>
 80075e0:	680b      	ldr	r3, [r1, #0]
 80075e2:	1b5b      	subs	r3, r3, r5
 80075e4:	d418      	bmi.n	8007618 <_malloc_r+0x8c>
 80075e6:	2b0b      	cmp	r3, #11
 80075e8:	d90f      	bls.n	800760a <_malloc_r+0x7e>
 80075ea:	600b      	str	r3, [r1, #0]
 80075ec:	50cd      	str	r5, [r1, r3]
 80075ee:	18cc      	adds	r4, r1, r3
 80075f0:	4630      	mov	r0, r6
 80075f2:	f000 fb34 	bl	8007c5e <__malloc_unlock>
 80075f6:	f104 000b 	add.w	r0, r4, #11
 80075fa:	1d23      	adds	r3, r4, #4
 80075fc:	f020 0007 	bic.w	r0, r0, #7
 8007600:	1ac3      	subs	r3, r0, r3
 8007602:	d0d3      	beq.n	80075ac <_malloc_r+0x20>
 8007604:	425a      	negs	r2, r3
 8007606:	50e2      	str	r2, [r4, r3]
 8007608:	e7d0      	b.n	80075ac <_malloc_r+0x20>
 800760a:	428c      	cmp	r4, r1
 800760c:	684b      	ldr	r3, [r1, #4]
 800760e:	bf16      	itet	ne
 8007610:	6063      	strne	r3, [r4, #4]
 8007612:	6013      	streq	r3, [r2, #0]
 8007614:	460c      	movne	r4, r1
 8007616:	e7eb      	b.n	80075f0 <_malloc_r+0x64>
 8007618:	460c      	mov	r4, r1
 800761a:	6849      	ldr	r1, [r1, #4]
 800761c:	e7cc      	b.n	80075b8 <_malloc_r+0x2c>
 800761e:	1cc4      	adds	r4, r0, #3
 8007620:	f024 0403 	bic.w	r4, r4, #3
 8007624:	42a0      	cmp	r0, r4
 8007626:	d005      	beq.n	8007634 <_malloc_r+0xa8>
 8007628:	1a21      	subs	r1, r4, r0
 800762a:	4630      	mov	r0, r6
 800762c:	f000 fae2 	bl	8007bf4 <_sbrk_r>
 8007630:	3001      	adds	r0, #1
 8007632:	d0cf      	beq.n	80075d4 <_malloc_r+0x48>
 8007634:	6025      	str	r5, [r4, #0]
 8007636:	e7db      	b.n	80075f0 <_malloc_r+0x64>
 8007638:	2000049c 	.word	0x2000049c
 800763c:	200004a0 	.word	0x200004a0

08007640 <__ssputs_r>:
 8007640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007644:	688e      	ldr	r6, [r1, #8]
 8007646:	429e      	cmp	r6, r3
 8007648:	4682      	mov	sl, r0
 800764a:	460c      	mov	r4, r1
 800764c:	4690      	mov	r8, r2
 800764e:	4699      	mov	r9, r3
 8007650:	d837      	bhi.n	80076c2 <__ssputs_r+0x82>
 8007652:	898a      	ldrh	r2, [r1, #12]
 8007654:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007658:	d031      	beq.n	80076be <__ssputs_r+0x7e>
 800765a:	6825      	ldr	r5, [r4, #0]
 800765c:	6909      	ldr	r1, [r1, #16]
 800765e:	1a6f      	subs	r7, r5, r1
 8007660:	6965      	ldr	r5, [r4, #20]
 8007662:	2302      	movs	r3, #2
 8007664:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007668:	fb95 f5f3 	sdiv	r5, r5, r3
 800766c:	f109 0301 	add.w	r3, r9, #1
 8007670:	443b      	add	r3, r7
 8007672:	429d      	cmp	r5, r3
 8007674:	bf38      	it	cc
 8007676:	461d      	movcc	r5, r3
 8007678:	0553      	lsls	r3, r2, #21
 800767a:	d530      	bpl.n	80076de <__ssputs_r+0x9e>
 800767c:	4629      	mov	r1, r5
 800767e:	f7ff ff85 	bl	800758c <_malloc_r>
 8007682:	4606      	mov	r6, r0
 8007684:	b950      	cbnz	r0, 800769c <__ssputs_r+0x5c>
 8007686:	230c      	movs	r3, #12
 8007688:	f8ca 3000 	str.w	r3, [sl]
 800768c:	89a3      	ldrh	r3, [r4, #12]
 800768e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007692:	81a3      	strh	r3, [r4, #12]
 8007694:	f04f 30ff 	mov.w	r0, #4294967295
 8007698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800769c:	463a      	mov	r2, r7
 800769e:	6921      	ldr	r1, [r4, #16]
 80076a0:	f000 fab8 	bl	8007c14 <memcpy>
 80076a4:	89a3      	ldrh	r3, [r4, #12]
 80076a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80076aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076ae:	81a3      	strh	r3, [r4, #12]
 80076b0:	6126      	str	r6, [r4, #16]
 80076b2:	6165      	str	r5, [r4, #20]
 80076b4:	443e      	add	r6, r7
 80076b6:	1bed      	subs	r5, r5, r7
 80076b8:	6026      	str	r6, [r4, #0]
 80076ba:	60a5      	str	r5, [r4, #8]
 80076bc:	464e      	mov	r6, r9
 80076be:	454e      	cmp	r6, r9
 80076c0:	d900      	bls.n	80076c4 <__ssputs_r+0x84>
 80076c2:	464e      	mov	r6, r9
 80076c4:	4632      	mov	r2, r6
 80076c6:	4641      	mov	r1, r8
 80076c8:	6820      	ldr	r0, [r4, #0]
 80076ca:	f000 faae 	bl	8007c2a <memmove>
 80076ce:	68a3      	ldr	r3, [r4, #8]
 80076d0:	1b9b      	subs	r3, r3, r6
 80076d2:	60a3      	str	r3, [r4, #8]
 80076d4:	6823      	ldr	r3, [r4, #0]
 80076d6:	441e      	add	r6, r3
 80076d8:	6026      	str	r6, [r4, #0]
 80076da:	2000      	movs	r0, #0
 80076dc:	e7dc      	b.n	8007698 <__ssputs_r+0x58>
 80076de:	462a      	mov	r2, r5
 80076e0:	f000 fb0c 	bl	8007cfc <_realloc_r>
 80076e4:	4606      	mov	r6, r0
 80076e6:	2800      	cmp	r0, #0
 80076e8:	d1e2      	bne.n	80076b0 <__ssputs_r+0x70>
 80076ea:	6921      	ldr	r1, [r4, #16]
 80076ec:	4650      	mov	r0, sl
 80076ee:	f000 fab7 	bl	8007c60 <_free_r>
 80076f2:	e7c8      	b.n	8007686 <__ssputs_r+0x46>

080076f4 <_svfiprintf_r>:
 80076f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f8:	461d      	mov	r5, r3
 80076fa:	898b      	ldrh	r3, [r1, #12]
 80076fc:	061f      	lsls	r7, r3, #24
 80076fe:	b09d      	sub	sp, #116	; 0x74
 8007700:	4680      	mov	r8, r0
 8007702:	460c      	mov	r4, r1
 8007704:	4616      	mov	r6, r2
 8007706:	d50f      	bpl.n	8007728 <_svfiprintf_r+0x34>
 8007708:	690b      	ldr	r3, [r1, #16]
 800770a:	b96b      	cbnz	r3, 8007728 <_svfiprintf_r+0x34>
 800770c:	2140      	movs	r1, #64	; 0x40
 800770e:	f7ff ff3d 	bl	800758c <_malloc_r>
 8007712:	6020      	str	r0, [r4, #0]
 8007714:	6120      	str	r0, [r4, #16]
 8007716:	b928      	cbnz	r0, 8007724 <_svfiprintf_r+0x30>
 8007718:	230c      	movs	r3, #12
 800771a:	f8c8 3000 	str.w	r3, [r8]
 800771e:	f04f 30ff 	mov.w	r0, #4294967295
 8007722:	e0c8      	b.n	80078b6 <_svfiprintf_r+0x1c2>
 8007724:	2340      	movs	r3, #64	; 0x40
 8007726:	6163      	str	r3, [r4, #20]
 8007728:	2300      	movs	r3, #0
 800772a:	9309      	str	r3, [sp, #36]	; 0x24
 800772c:	2320      	movs	r3, #32
 800772e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007732:	2330      	movs	r3, #48	; 0x30
 8007734:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007738:	9503      	str	r5, [sp, #12]
 800773a:	f04f 0b01 	mov.w	fp, #1
 800773e:	4637      	mov	r7, r6
 8007740:	463d      	mov	r5, r7
 8007742:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007746:	b10b      	cbz	r3, 800774c <_svfiprintf_r+0x58>
 8007748:	2b25      	cmp	r3, #37	; 0x25
 800774a:	d13e      	bne.n	80077ca <_svfiprintf_r+0xd6>
 800774c:	ebb7 0a06 	subs.w	sl, r7, r6
 8007750:	d00b      	beq.n	800776a <_svfiprintf_r+0x76>
 8007752:	4653      	mov	r3, sl
 8007754:	4632      	mov	r2, r6
 8007756:	4621      	mov	r1, r4
 8007758:	4640      	mov	r0, r8
 800775a:	f7ff ff71 	bl	8007640 <__ssputs_r>
 800775e:	3001      	adds	r0, #1
 8007760:	f000 80a4 	beq.w	80078ac <_svfiprintf_r+0x1b8>
 8007764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007766:	4453      	add	r3, sl
 8007768:	9309      	str	r3, [sp, #36]	; 0x24
 800776a:	783b      	ldrb	r3, [r7, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	f000 809d 	beq.w	80078ac <_svfiprintf_r+0x1b8>
 8007772:	2300      	movs	r3, #0
 8007774:	f04f 32ff 	mov.w	r2, #4294967295
 8007778:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800777c:	9304      	str	r3, [sp, #16]
 800777e:	9307      	str	r3, [sp, #28]
 8007780:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007784:	931a      	str	r3, [sp, #104]	; 0x68
 8007786:	462f      	mov	r7, r5
 8007788:	2205      	movs	r2, #5
 800778a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800778e:	4850      	ldr	r0, [pc, #320]	; (80078d0 <_svfiprintf_r+0x1dc>)
 8007790:	f7f8 fd2e 	bl	80001f0 <memchr>
 8007794:	9b04      	ldr	r3, [sp, #16]
 8007796:	b9d0      	cbnz	r0, 80077ce <_svfiprintf_r+0xda>
 8007798:	06d9      	lsls	r1, r3, #27
 800779a:	bf44      	itt	mi
 800779c:	2220      	movmi	r2, #32
 800779e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80077a2:	071a      	lsls	r2, r3, #28
 80077a4:	bf44      	itt	mi
 80077a6:	222b      	movmi	r2, #43	; 0x2b
 80077a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80077ac:	782a      	ldrb	r2, [r5, #0]
 80077ae:	2a2a      	cmp	r2, #42	; 0x2a
 80077b0:	d015      	beq.n	80077de <_svfiprintf_r+0xea>
 80077b2:	9a07      	ldr	r2, [sp, #28]
 80077b4:	462f      	mov	r7, r5
 80077b6:	2000      	movs	r0, #0
 80077b8:	250a      	movs	r5, #10
 80077ba:	4639      	mov	r1, r7
 80077bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077c0:	3b30      	subs	r3, #48	; 0x30
 80077c2:	2b09      	cmp	r3, #9
 80077c4:	d94d      	bls.n	8007862 <_svfiprintf_r+0x16e>
 80077c6:	b1b8      	cbz	r0, 80077f8 <_svfiprintf_r+0x104>
 80077c8:	e00f      	b.n	80077ea <_svfiprintf_r+0xf6>
 80077ca:	462f      	mov	r7, r5
 80077cc:	e7b8      	b.n	8007740 <_svfiprintf_r+0x4c>
 80077ce:	4a40      	ldr	r2, [pc, #256]	; (80078d0 <_svfiprintf_r+0x1dc>)
 80077d0:	1a80      	subs	r0, r0, r2
 80077d2:	fa0b f000 	lsl.w	r0, fp, r0
 80077d6:	4318      	orrs	r0, r3
 80077d8:	9004      	str	r0, [sp, #16]
 80077da:	463d      	mov	r5, r7
 80077dc:	e7d3      	b.n	8007786 <_svfiprintf_r+0x92>
 80077de:	9a03      	ldr	r2, [sp, #12]
 80077e0:	1d11      	adds	r1, r2, #4
 80077e2:	6812      	ldr	r2, [r2, #0]
 80077e4:	9103      	str	r1, [sp, #12]
 80077e6:	2a00      	cmp	r2, #0
 80077e8:	db01      	blt.n	80077ee <_svfiprintf_r+0xfa>
 80077ea:	9207      	str	r2, [sp, #28]
 80077ec:	e004      	b.n	80077f8 <_svfiprintf_r+0x104>
 80077ee:	4252      	negs	r2, r2
 80077f0:	f043 0302 	orr.w	r3, r3, #2
 80077f4:	9207      	str	r2, [sp, #28]
 80077f6:	9304      	str	r3, [sp, #16]
 80077f8:	783b      	ldrb	r3, [r7, #0]
 80077fa:	2b2e      	cmp	r3, #46	; 0x2e
 80077fc:	d10c      	bne.n	8007818 <_svfiprintf_r+0x124>
 80077fe:	787b      	ldrb	r3, [r7, #1]
 8007800:	2b2a      	cmp	r3, #42	; 0x2a
 8007802:	d133      	bne.n	800786c <_svfiprintf_r+0x178>
 8007804:	9b03      	ldr	r3, [sp, #12]
 8007806:	1d1a      	adds	r2, r3, #4
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	9203      	str	r2, [sp, #12]
 800780c:	2b00      	cmp	r3, #0
 800780e:	bfb8      	it	lt
 8007810:	f04f 33ff 	movlt.w	r3, #4294967295
 8007814:	3702      	adds	r7, #2
 8007816:	9305      	str	r3, [sp, #20]
 8007818:	4d2e      	ldr	r5, [pc, #184]	; (80078d4 <_svfiprintf_r+0x1e0>)
 800781a:	7839      	ldrb	r1, [r7, #0]
 800781c:	2203      	movs	r2, #3
 800781e:	4628      	mov	r0, r5
 8007820:	f7f8 fce6 	bl	80001f0 <memchr>
 8007824:	b138      	cbz	r0, 8007836 <_svfiprintf_r+0x142>
 8007826:	2340      	movs	r3, #64	; 0x40
 8007828:	1b40      	subs	r0, r0, r5
 800782a:	fa03 f000 	lsl.w	r0, r3, r0
 800782e:	9b04      	ldr	r3, [sp, #16]
 8007830:	4303      	orrs	r3, r0
 8007832:	3701      	adds	r7, #1
 8007834:	9304      	str	r3, [sp, #16]
 8007836:	7839      	ldrb	r1, [r7, #0]
 8007838:	4827      	ldr	r0, [pc, #156]	; (80078d8 <_svfiprintf_r+0x1e4>)
 800783a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800783e:	2206      	movs	r2, #6
 8007840:	1c7e      	adds	r6, r7, #1
 8007842:	f7f8 fcd5 	bl	80001f0 <memchr>
 8007846:	2800      	cmp	r0, #0
 8007848:	d038      	beq.n	80078bc <_svfiprintf_r+0x1c8>
 800784a:	4b24      	ldr	r3, [pc, #144]	; (80078dc <_svfiprintf_r+0x1e8>)
 800784c:	bb13      	cbnz	r3, 8007894 <_svfiprintf_r+0x1a0>
 800784e:	9b03      	ldr	r3, [sp, #12]
 8007850:	3307      	adds	r3, #7
 8007852:	f023 0307 	bic.w	r3, r3, #7
 8007856:	3308      	adds	r3, #8
 8007858:	9303      	str	r3, [sp, #12]
 800785a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800785c:	444b      	add	r3, r9
 800785e:	9309      	str	r3, [sp, #36]	; 0x24
 8007860:	e76d      	b.n	800773e <_svfiprintf_r+0x4a>
 8007862:	fb05 3202 	mla	r2, r5, r2, r3
 8007866:	2001      	movs	r0, #1
 8007868:	460f      	mov	r7, r1
 800786a:	e7a6      	b.n	80077ba <_svfiprintf_r+0xc6>
 800786c:	2300      	movs	r3, #0
 800786e:	3701      	adds	r7, #1
 8007870:	9305      	str	r3, [sp, #20]
 8007872:	4619      	mov	r1, r3
 8007874:	250a      	movs	r5, #10
 8007876:	4638      	mov	r0, r7
 8007878:	f810 2b01 	ldrb.w	r2, [r0], #1
 800787c:	3a30      	subs	r2, #48	; 0x30
 800787e:	2a09      	cmp	r2, #9
 8007880:	d903      	bls.n	800788a <_svfiprintf_r+0x196>
 8007882:	2b00      	cmp	r3, #0
 8007884:	d0c8      	beq.n	8007818 <_svfiprintf_r+0x124>
 8007886:	9105      	str	r1, [sp, #20]
 8007888:	e7c6      	b.n	8007818 <_svfiprintf_r+0x124>
 800788a:	fb05 2101 	mla	r1, r5, r1, r2
 800788e:	2301      	movs	r3, #1
 8007890:	4607      	mov	r7, r0
 8007892:	e7f0      	b.n	8007876 <_svfiprintf_r+0x182>
 8007894:	ab03      	add	r3, sp, #12
 8007896:	9300      	str	r3, [sp, #0]
 8007898:	4622      	mov	r2, r4
 800789a:	4b11      	ldr	r3, [pc, #68]	; (80078e0 <_svfiprintf_r+0x1ec>)
 800789c:	a904      	add	r1, sp, #16
 800789e:	4640      	mov	r0, r8
 80078a0:	f3af 8000 	nop.w
 80078a4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80078a8:	4681      	mov	r9, r0
 80078aa:	d1d6      	bne.n	800785a <_svfiprintf_r+0x166>
 80078ac:	89a3      	ldrh	r3, [r4, #12]
 80078ae:	065b      	lsls	r3, r3, #25
 80078b0:	f53f af35 	bmi.w	800771e <_svfiprintf_r+0x2a>
 80078b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078b6:	b01d      	add	sp, #116	; 0x74
 80078b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078bc:	ab03      	add	r3, sp, #12
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	4622      	mov	r2, r4
 80078c2:	4b07      	ldr	r3, [pc, #28]	; (80078e0 <_svfiprintf_r+0x1ec>)
 80078c4:	a904      	add	r1, sp, #16
 80078c6:	4640      	mov	r0, r8
 80078c8:	f000 f882 	bl	80079d0 <_printf_i>
 80078cc:	e7ea      	b.n	80078a4 <_svfiprintf_r+0x1b0>
 80078ce:	bf00      	nop
 80078d0:	08007df4 	.word	0x08007df4
 80078d4:	08007dfa 	.word	0x08007dfa
 80078d8:	08007dfe 	.word	0x08007dfe
 80078dc:	00000000 	.word	0x00000000
 80078e0:	08007641 	.word	0x08007641

080078e4 <_printf_common>:
 80078e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078e8:	4691      	mov	r9, r2
 80078ea:	461f      	mov	r7, r3
 80078ec:	688a      	ldr	r2, [r1, #8]
 80078ee:	690b      	ldr	r3, [r1, #16]
 80078f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078f4:	4293      	cmp	r3, r2
 80078f6:	bfb8      	it	lt
 80078f8:	4613      	movlt	r3, r2
 80078fa:	f8c9 3000 	str.w	r3, [r9]
 80078fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007902:	4606      	mov	r6, r0
 8007904:	460c      	mov	r4, r1
 8007906:	b112      	cbz	r2, 800790e <_printf_common+0x2a>
 8007908:	3301      	adds	r3, #1
 800790a:	f8c9 3000 	str.w	r3, [r9]
 800790e:	6823      	ldr	r3, [r4, #0]
 8007910:	0699      	lsls	r1, r3, #26
 8007912:	bf42      	ittt	mi
 8007914:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007918:	3302      	addmi	r3, #2
 800791a:	f8c9 3000 	strmi.w	r3, [r9]
 800791e:	6825      	ldr	r5, [r4, #0]
 8007920:	f015 0506 	ands.w	r5, r5, #6
 8007924:	d107      	bne.n	8007936 <_printf_common+0x52>
 8007926:	f104 0a19 	add.w	sl, r4, #25
 800792a:	68e3      	ldr	r3, [r4, #12]
 800792c:	f8d9 2000 	ldr.w	r2, [r9]
 8007930:	1a9b      	subs	r3, r3, r2
 8007932:	42ab      	cmp	r3, r5
 8007934:	dc28      	bgt.n	8007988 <_printf_common+0xa4>
 8007936:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800793a:	6822      	ldr	r2, [r4, #0]
 800793c:	3300      	adds	r3, #0
 800793e:	bf18      	it	ne
 8007940:	2301      	movne	r3, #1
 8007942:	0692      	lsls	r2, r2, #26
 8007944:	d42d      	bmi.n	80079a2 <_printf_common+0xbe>
 8007946:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800794a:	4639      	mov	r1, r7
 800794c:	4630      	mov	r0, r6
 800794e:	47c0      	blx	r8
 8007950:	3001      	adds	r0, #1
 8007952:	d020      	beq.n	8007996 <_printf_common+0xb2>
 8007954:	6823      	ldr	r3, [r4, #0]
 8007956:	68e5      	ldr	r5, [r4, #12]
 8007958:	f8d9 2000 	ldr.w	r2, [r9]
 800795c:	f003 0306 	and.w	r3, r3, #6
 8007960:	2b04      	cmp	r3, #4
 8007962:	bf08      	it	eq
 8007964:	1aad      	subeq	r5, r5, r2
 8007966:	68a3      	ldr	r3, [r4, #8]
 8007968:	6922      	ldr	r2, [r4, #16]
 800796a:	bf0c      	ite	eq
 800796c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007970:	2500      	movne	r5, #0
 8007972:	4293      	cmp	r3, r2
 8007974:	bfc4      	itt	gt
 8007976:	1a9b      	subgt	r3, r3, r2
 8007978:	18ed      	addgt	r5, r5, r3
 800797a:	f04f 0900 	mov.w	r9, #0
 800797e:	341a      	adds	r4, #26
 8007980:	454d      	cmp	r5, r9
 8007982:	d11a      	bne.n	80079ba <_printf_common+0xd6>
 8007984:	2000      	movs	r0, #0
 8007986:	e008      	b.n	800799a <_printf_common+0xb6>
 8007988:	2301      	movs	r3, #1
 800798a:	4652      	mov	r2, sl
 800798c:	4639      	mov	r1, r7
 800798e:	4630      	mov	r0, r6
 8007990:	47c0      	blx	r8
 8007992:	3001      	adds	r0, #1
 8007994:	d103      	bne.n	800799e <_printf_common+0xba>
 8007996:	f04f 30ff 	mov.w	r0, #4294967295
 800799a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800799e:	3501      	adds	r5, #1
 80079a0:	e7c3      	b.n	800792a <_printf_common+0x46>
 80079a2:	18e1      	adds	r1, r4, r3
 80079a4:	1c5a      	adds	r2, r3, #1
 80079a6:	2030      	movs	r0, #48	; 0x30
 80079a8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80079ac:	4422      	add	r2, r4
 80079ae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80079b2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80079b6:	3302      	adds	r3, #2
 80079b8:	e7c5      	b.n	8007946 <_printf_common+0x62>
 80079ba:	2301      	movs	r3, #1
 80079bc:	4622      	mov	r2, r4
 80079be:	4639      	mov	r1, r7
 80079c0:	4630      	mov	r0, r6
 80079c2:	47c0      	blx	r8
 80079c4:	3001      	adds	r0, #1
 80079c6:	d0e6      	beq.n	8007996 <_printf_common+0xb2>
 80079c8:	f109 0901 	add.w	r9, r9, #1
 80079cc:	e7d8      	b.n	8007980 <_printf_common+0x9c>
	...

080079d0 <_printf_i>:
 80079d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80079d4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80079d8:	460c      	mov	r4, r1
 80079da:	7e09      	ldrb	r1, [r1, #24]
 80079dc:	b085      	sub	sp, #20
 80079de:	296e      	cmp	r1, #110	; 0x6e
 80079e0:	4617      	mov	r7, r2
 80079e2:	4606      	mov	r6, r0
 80079e4:	4698      	mov	r8, r3
 80079e6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079e8:	f000 80b3 	beq.w	8007b52 <_printf_i+0x182>
 80079ec:	d822      	bhi.n	8007a34 <_printf_i+0x64>
 80079ee:	2963      	cmp	r1, #99	; 0x63
 80079f0:	d036      	beq.n	8007a60 <_printf_i+0x90>
 80079f2:	d80a      	bhi.n	8007a0a <_printf_i+0x3a>
 80079f4:	2900      	cmp	r1, #0
 80079f6:	f000 80b9 	beq.w	8007b6c <_printf_i+0x19c>
 80079fa:	2958      	cmp	r1, #88	; 0x58
 80079fc:	f000 8083 	beq.w	8007b06 <_printf_i+0x136>
 8007a00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a04:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007a08:	e032      	b.n	8007a70 <_printf_i+0xa0>
 8007a0a:	2964      	cmp	r1, #100	; 0x64
 8007a0c:	d001      	beq.n	8007a12 <_printf_i+0x42>
 8007a0e:	2969      	cmp	r1, #105	; 0x69
 8007a10:	d1f6      	bne.n	8007a00 <_printf_i+0x30>
 8007a12:	6820      	ldr	r0, [r4, #0]
 8007a14:	6813      	ldr	r3, [r2, #0]
 8007a16:	0605      	lsls	r5, r0, #24
 8007a18:	f103 0104 	add.w	r1, r3, #4
 8007a1c:	d52a      	bpl.n	8007a74 <_printf_i+0xa4>
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	6011      	str	r1, [r2, #0]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	da03      	bge.n	8007a2e <_printf_i+0x5e>
 8007a26:	222d      	movs	r2, #45	; 0x2d
 8007a28:	425b      	negs	r3, r3
 8007a2a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007a2e:	486f      	ldr	r0, [pc, #444]	; (8007bec <_printf_i+0x21c>)
 8007a30:	220a      	movs	r2, #10
 8007a32:	e039      	b.n	8007aa8 <_printf_i+0xd8>
 8007a34:	2973      	cmp	r1, #115	; 0x73
 8007a36:	f000 809d 	beq.w	8007b74 <_printf_i+0x1a4>
 8007a3a:	d808      	bhi.n	8007a4e <_printf_i+0x7e>
 8007a3c:	296f      	cmp	r1, #111	; 0x6f
 8007a3e:	d020      	beq.n	8007a82 <_printf_i+0xb2>
 8007a40:	2970      	cmp	r1, #112	; 0x70
 8007a42:	d1dd      	bne.n	8007a00 <_printf_i+0x30>
 8007a44:	6823      	ldr	r3, [r4, #0]
 8007a46:	f043 0320 	orr.w	r3, r3, #32
 8007a4a:	6023      	str	r3, [r4, #0]
 8007a4c:	e003      	b.n	8007a56 <_printf_i+0x86>
 8007a4e:	2975      	cmp	r1, #117	; 0x75
 8007a50:	d017      	beq.n	8007a82 <_printf_i+0xb2>
 8007a52:	2978      	cmp	r1, #120	; 0x78
 8007a54:	d1d4      	bne.n	8007a00 <_printf_i+0x30>
 8007a56:	2378      	movs	r3, #120	; 0x78
 8007a58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a5c:	4864      	ldr	r0, [pc, #400]	; (8007bf0 <_printf_i+0x220>)
 8007a5e:	e055      	b.n	8007b0c <_printf_i+0x13c>
 8007a60:	6813      	ldr	r3, [r2, #0]
 8007a62:	1d19      	adds	r1, r3, #4
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	6011      	str	r1, [r2, #0]
 8007a68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a70:	2301      	movs	r3, #1
 8007a72:	e08c      	b.n	8007b8e <_printf_i+0x1be>
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	6011      	str	r1, [r2, #0]
 8007a78:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a7c:	bf18      	it	ne
 8007a7e:	b21b      	sxthne	r3, r3
 8007a80:	e7cf      	b.n	8007a22 <_printf_i+0x52>
 8007a82:	6813      	ldr	r3, [r2, #0]
 8007a84:	6825      	ldr	r5, [r4, #0]
 8007a86:	1d18      	adds	r0, r3, #4
 8007a88:	6010      	str	r0, [r2, #0]
 8007a8a:	0628      	lsls	r0, r5, #24
 8007a8c:	d501      	bpl.n	8007a92 <_printf_i+0xc2>
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	e002      	b.n	8007a98 <_printf_i+0xc8>
 8007a92:	0668      	lsls	r0, r5, #25
 8007a94:	d5fb      	bpl.n	8007a8e <_printf_i+0xbe>
 8007a96:	881b      	ldrh	r3, [r3, #0]
 8007a98:	4854      	ldr	r0, [pc, #336]	; (8007bec <_printf_i+0x21c>)
 8007a9a:	296f      	cmp	r1, #111	; 0x6f
 8007a9c:	bf14      	ite	ne
 8007a9e:	220a      	movne	r2, #10
 8007aa0:	2208      	moveq	r2, #8
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007aa8:	6865      	ldr	r5, [r4, #4]
 8007aaa:	60a5      	str	r5, [r4, #8]
 8007aac:	2d00      	cmp	r5, #0
 8007aae:	f2c0 8095 	blt.w	8007bdc <_printf_i+0x20c>
 8007ab2:	6821      	ldr	r1, [r4, #0]
 8007ab4:	f021 0104 	bic.w	r1, r1, #4
 8007ab8:	6021      	str	r1, [r4, #0]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d13d      	bne.n	8007b3a <_printf_i+0x16a>
 8007abe:	2d00      	cmp	r5, #0
 8007ac0:	f040 808e 	bne.w	8007be0 <_printf_i+0x210>
 8007ac4:	4665      	mov	r5, ip
 8007ac6:	2a08      	cmp	r2, #8
 8007ac8:	d10b      	bne.n	8007ae2 <_printf_i+0x112>
 8007aca:	6823      	ldr	r3, [r4, #0]
 8007acc:	07db      	lsls	r3, r3, #31
 8007ace:	d508      	bpl.n	8007ae2 <_printf_i+0x112>
 8007ad0:	6923      	ldr	r3, [r4, #16]
 8007ad2:	6862      	ldr	r2, [r4, #4]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	bfde      	ittt	le
 8007ad8:	2330      	movle	r3, #48	; 0x30
 8007ada:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ade:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ae2:	ebac 0305 	sub.w	r3, ip, r5
 8007ae6:	6123      	str	r3, [r4, #16]
 8007ae8:	f8cd 8000 	str.w	r8, [sp]
 8007aec:	463b      	mov	r3, r7
 8007aee:	aa03      	add	r2, sp, #12
 8007af0:	4621      	mov	r1, r4
 8007af2:	4630      	mov	r0, r6
 8007af4:	f7ff fef6 	bl	80078e4 <_printf_common>
 8007af8:	3001      	adds	r0, #1
 8007afa:	d14d      	bne.n	8007b98 <_printf_i+0x1c8>
 8007afc:	f04f 30ff 	mov.w	r0, #4294967295
 8007b00:	b005      	add	sp, #20
 8007b02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007b06:	4839      	ldr	r0, [pc, #228]	; (8007bec <_printf_i+0x21c>)
 8007b08:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007b0c:	6813      	ldr	r3, [r2, #0]
 8007b0e:	6821      	ldr	r1, [r4, #0]
 8007b10:	1d1d      	adds	r5, r3, #4
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	6015      	str	r5, [r2, #0]
 8007b16:	060a      	lsls	r2, r1, #24
 8007b18:	d50b      	bpl.n	8007b32 <_printf_i+0x162>
 8007b1a:	07ca      	lsls	r2, r1, #31
 8007b1c:	bf44      	itt	mi
 8007b1e:	f041 0120 	orrmi.w	r1, r1, #32
 8007b22:	6021      	strmi	r1, [r4, #0]
 8007b24:	b91b      	cbnz	r3, 8007b2e <_printf_i+0x15e>
 8007b26:	6822      	ldr	r2, [r4, #0]
 8007b28:	f022 0220 	bic.w	r2, r2, #32
 8007b2c:	6022      	str	r2, [r4, #0]
 8007b2e:	2210      	movs	r2, #16
 8007b30:	e7b7      	b.n	8007aa2 <_printf_i+0xd2>
 8007b32:	064d      	lsls	r5, r1, #25
 8007b34:	bf48      	it	mi
 8007b36:	b29b      	uxthmi	r3, r3
 8007b38:	e7ef      	b.n	8007b1a <_printf_i+0x14a>
 8007b3a:	4665      	mov	r5, ip
 8007b3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007b40:	fb02 3311 	mls	r3, r2, r1, r3
 8007b44:	5cc3      	ldrb	r3, [r0, r3]
 8007b46:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007b4a:	460b      	mov	r3, r1
 8007b4c:	2900      	cmp	r1, #0
 8007b4e:	d1f5      	bne.n	8007b3c <_printf_i+0x16c>
 8007b50:	e7b9      	b.n	8007ac6 <_printf_i+0xf6>
 8007b52:	6813      	ldr	r3, [r2, #0]
 8007b54:	6825      	ldr	r5, [r4, #0]
 8007b56:	6961      	ldr	r1, [r4, #20]
 8007b58:	1d18      	adds	r0, r3, #4
 8007b5a:	6010      	str	r0, [r2, #0]
 8007b5c:	0628      	lsls	r0, r5, #24
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	d501      	bpl.n	8007b66 <_printf_i+0x196>
 8007b62:	6019      	str	r1, [r3, #0]
 8007b64:	e002      	b.n	8007b6c <_printf_i+0x19c>
 8007b66:	066a      	lsls	r2, r5, #25
 8007b68:	d5fb      	bpl.n	8007b62 <_printf_i+0x192>
 8007b6a:	8019      	strh	r1, [r3, #0]
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	6123      	str	r3, [r4, #16]
 8007b70:	4665      	mov	r5, ip
 8007b72:	e7b9      	b.n	8007ae8 <_printf_i+0x118>
 8007b74:	6813      	ldr	r3, [r2, #0]
 8007b76:	1d19      	adds	r1, r3, #4
 8007b78:	6011      	str	r1, [r2, #0]
 8007b7a:	681d      	ldr	r5, [r3, #0]
 8007b7c:	6862      	ldr	r2, [r4, #4]
 8007b7e:	2100      	movs	r1, #0
 8007b80:	4628      	mov	r0, r5
 8007b82:	f7f8 fb35 	bl	80001f0 <memchr>
 8007b86:	b108      	cbz	r0, 8007b8c <_printf_i+0x1bc>
 8007b88:	1b40      	subs	r0, r0, r5
 8007b8a:	6060      	str	r0, [r4, #4]
 8007b8c:	6863      	ldr	r3, [r4, #4]
 8007b8e:	6123      	str	r3, [r4, #16]
 8007b90:	2300      	movs	r3, #0
 8007b92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b96:	e7a7      	b.n	8007ae8 <_printf_i+0x118>
 8007b98:	6923      	ldr	r3, [r4, #16]
 8007b9a:	462a      	mov	r2, r5
 8007b9c:	4639      	mov	r1, r7
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	47c0      	blx	r8
 8007ba2:	3001      	adds	r0, #1
 8007ba4:	d0aa      	beq.n	8007afc <_printf_i+0x12c>
 8007ba6:	6823      	ldr	r3, [r4, #0]
 8007ba8:	079b      	lsls	r3, r3, #30
 8007baa:	d413      	bmi.n	8007bd4 <_printf_i+0x204>
 8007bac:	68e0      	ldr	r0, [r4, #12]
 8007bae:	9b03      	ldr	r3, [sp, #12]
 8007bb0:	4298      	cmp	r0, r3
 8007bb2:	bfb8      	it	lt
 8007bb4:	4618      	movlt	r0, r3
 8007bb6:	e7a3      	b.n	8007b00 <_printf_i+0x130>
 8007bb8:	2301      	movs	r3, #1
 8007bba:	464a      	mov	r2, r9
 8007bbc:	4639      	mov	r1, r7
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	47c0      	blx	r8
 8007bc2:	3001      	adds	r0, #1
 8007bc4:	d09a      	beq.n	8007afc <_printf_i+0x12c>
 8007bc6:	3501      	adds	r5, #1
 8007bc8:	68e3      	ldr	r3, [r4, #12]
 8007bca:	9a03      	ldr	r2, [sp, #12]
 8007bcc:	1a9b      	subs	r3, r3, r2
 8007bce:	42ab      	cmp	r3, r5
 8007bd0:	dcf2      	bgt.n	8007bb8 <_printf_i+0x1e8>
 8007bd2:	e7eb      	b.n	8007bac <_printf_i+0x1dc>
 8007bd4:	2500      	movs	r5, #0
 8007bd6:	f104 0919 	add.w	r9, r4, #25
 8007bda:	e7f5      	b.n	8007bc8 <_printf_i+0x1f8>
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d1ac      	bne.n	8007b3a <_printf_i+0x16a>
 8007be0:	7803      	ldrb	r3, [r0, #0]
 8007be2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007be6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007bea:	e76c      	b.n	8007ac6 <_printf_i+0xf6>
 8007bec:	08007e05 	.word	0x08007e05
 8007bf0:	08007e16 	.word	0x08007e16

08007bf4 <_sbrk_r>:
 8007bf4:	b538      	push	{r3, r4, r5, lr}
 8007bf6:	4c06      	ldr	r4, [pc, #24]	; (8007c10 <_sbrk_r+0x1c>)
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	4605      	mov	r5, r0
 8007bfc:	4608      	mov	r0, r1
 8007bfe:	6023      	str	r3, [r4, #0]
 8007c00:	f7ff fc48 	bl	8007494 <_sbrk>
 8007c04:	1c43      	adds	r3, r0, #1
 8007c06:	d102      	bne.n	8007c0e <_sbrk_r+0x1a>
 8007c08:	6823      	ldr	r3, [r4, #0]
 8007c0a:	b103      	cbz	r3, 8007c0e <_sbrk_r+0x1a>
 8007c0c:	602b      	str	r3, [r5, #0]
 8007c0e:	bd38      	pop	{r3, r4, r5, pc}
 8007c10:	200006f0 	.word	0x200006f0

08007c14 <memcpy>:
 8007c14:	b510      	push	{r4, lr}
 8007c16:	1e43      	subs	r3, r0, #1
 8007c18:	440a      	add	r2, r1
 8007c1a:	4291      	cmp	r1, r2
 8007c1c:	d100      	bne.n	8007c20 <memcpy+0xc>
 8007c1e:	bd10      	pop	{r4, pc}
 8007c20:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c24:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c28:	e7f7      	b.n	8007c1a <memcpy+0x6>

08007c2a <memmove>:
 8007c2a:	4288      	cmp	r0, r1
 8007c2c:	b510      	push	{r4, lr}
 8007c2e:	eb01 0302 	add.w	r3, r1, r2
 8007c32:	d807      	bhi.n	8007c44 <memmove+0x1a>
 8007c34:	1e42      	subs	r2, r0, #1
 8007c36:	4299      	cmp	r1, r3
 8007c38:	d00a      	beq.n	8007c50 <memmove+0x26>
 8007c3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c3e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007c42:	e7f8      	b.n	8007c36 <memmove+0xc>
 8007c44:	4283      	cmp	r3, r0
 8007c46:	d9f5      	bls.n	8007c34 <memmove+0xa>
 8007c48:	1881      	adds	r1, r0, r2
 8007c4a:	1ad2      	subs	r2, r2, r3
 8007c4c:	42d3      	cmn	r3, r2
 8007c4e:	d100      	bne.n	8007c52 <memmove+0x28>
 8007c50:	bd10      	pop	{r4, pc}
 8007c52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c56:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007c5a:	e7f7      	b.n	8007c4c <memmove+0x22>

08007c5c <__malloc_lock>:
 8007c5c:	4770      	bx	lr

08007c5e <__malloc_unlock>:
 8007c5e:	4770      	bx	lr

08007c60 <_free_r>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	4605      	mov	r5, r0
 8007c64:	2900      	cmp	r1, #0
 8007c66:	d045      	beq.n	8007cf4 <_free_r+0x94>
 8007c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c6c:	1f0c      	subs	r4, r1, #4
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	bfb8      	it	lt
 8007c72:	18e4      	addlt	r4, r4, r3
 8007c74:	f7ff fff2 	bl	8007c5c <__malloc_lock>
 8007c78:	4a1f      	ldr	r2, [pc, #124]	; (8007cf8 <_free_r+0x98>)
 8007c7a:	6813      	ldr	r3, [r2, #0]
 8007c7c:	4610      	mov	r0, r2
 8007c7e:	b933      	cbnz	r3, 8007c8e <_free_r+0x2e>
 8007c80:	6063      	str	r3, [r4, #4]
 8007c82:	6014      	str	r4, [r2, #0]
 8007c84:	4628      	mov	r0, r5
 8007c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c8a:	f7ff bfe8 	b.w	8007c5e <__malloc_unlock>
 8007c8e:	42a3      	cmp	r3, r4
 8007c90:	d90c      	bls.n	8007cac <_free_r+0x4c>
 8007c92:	6821      	ldr	r1, [r4, #0]
 8007c94:	1862      	adds	r2, r4, r1
 8007c96:	4293      	cmp	r3, r2
 8007c98:	bf04      	itt	eq
 8007c9a:	681a      	ldreq	r2, [r3, #0]
 8007c9c:	685b      	ldreq	r3, [r3, #4]
 8007c9e:	6063      	str	r3, [r4, #4]
 8007ca0:	bf04      	itt	eq
 8007ca2:	1852      	addeq	r2, r2, r1
 8007ca4:	6022      	streq	r2, [r4, #0]
 8007ca6:	6004      	str	r4, [r0, #0]
 8007ca8:	e7ec      	b.n	8007c84 <_free_r+0x24>
 8007caa:	4613      	mov	r3, r2
 8007cac:	685a      	ldr	r2, [r3, #4]
 8007cae:	b10a      	cbz	r2, 8007cb4 <_free_r+0x54>
 8007cb0:	42a2      	cmp	r2, r4
 8007cb2:	d9fa      	bls.n	8007caa <_free_r+0x4a>
 8007cb4:	6819      	ldr	r1, [r3, #0]
 8007cb6:	1858      	adds	r0, r3, r1
 8007cb8:	42a0      	cmp	r0, r4
 8007cba:	d10b      	bne.n	8007cd4 <_free_r+0x74>
 8007cbc:	6820      	ldr	r0, [r4, #0]
 8007cbe:	4401      	add	r1, r0
 8007cc0:	1858      	adds	r0, r3, r1
 8007cc2:	4282      	cmp	r2, r0
 8007cc4:	6019      	str	r1, [r3, #0]
 8007cc6:	d1dd      	bne.n	8007c84 <_free_r+0x24>
 8007cc8:	6810      	ldr	r0, [r2, #0]
 8007cca:	6852      	ldr	r2, [r2, #4]
 8007ccc:	605a      	str	r2, [r3, #4]
 8007cce:	4401      	add	r1, r0
 8007cd0:	6019      	str	r1, [r3, #0]
 8007cd2:	e7d7      	b.n	8007c84 <_free_r+0x24>
 8007cd4:	d902      	bls.n	8007cdc <_free_r+0x7c>
 8007cd6:	230c      	movs	r3, #12
 8007cd8:	602b      	str	r3, [r5, #0]
 8007cda:	e7d3      	b.n	8007c84 <_free_r+0x24>
 8007cdc:	6820      	ldr	r0, [r4, #0]
 8007cde:	1821      	adds	r1, r4, r0
 8007ce0:	428a      	cmp	r2, r1
 8007ce2:	bf04      	itt	eq
 8007ce4:	6811      	ldreq	r1, [r2, #0]
 8007ce6:	6852      	ldreq	r2, [r2, #4]
 8007ce8:	6062      	str	r2, [r4, #4]
 8007cea:	bf04      	itt	eq
 8007cec:	1809      	addeq	r1, r1, r0
 8007cee:	6021      	streq	r1, [r4, #0]
 8007cf0:	605c      	str	r4, [r3, #4]
 8007cf2:	e7c7      	b.n	8007c84 <_free_r+0x24>
 8007cf4:	bd38      	pop	{r3, r4, r5, pc}
 8007cf6:	bf00      	nop
 8007cf8:	2000049c 	.word	0x2000049c

08007cfc <_realloc_r>:
 8007cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cfe:	4607      	mov	r7, r0
 8007d00:	4614      	mov	r4, r2
 8007d02:	460e      	mov	r6, r1
 8007d04:	b921      	cbnz	r1, 8007d10 <_realloc_r+0x14>
 8007d06:	4611      	mov	r1, r2
 8007d08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007d0c:	f7ff bc3e 	b.w	800758c <_malloc_r>
 8007d10:	b922      	cbnz	r2, 8007d1c <_realloc_r+0x20>
 8007d12:	f7ff ffa5 	bl	8007c60 <_free_r>
 8007d16:	4625      	mov	r5, r4
 8007d18:	4628      	mov	r0, r5
 8007d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d1c:	f000 f814 	bl	8007d48 <_malloc_usable_size_r>
 8007d20:	42a0      	cmp	r0, r4
 8007d22:	d20f      	bcs.n	8007d44 <_realloc_r+0x48>
 8007d24:	4621      	mov	r1, r4
 8007d26:	4638      	mov	r0, r7
 8007d28:	f7ff fc30 	bl	800758c <_malloc_r>
 8007d2c:	4605      	mov	r5, r0
 8007d2e:	2800      	cmp	r0, #0
 8007d30:	d0f2      	beq.n	8007d18 <_realloc_r+0x1c>
 8007d32:	4631      	mov	r1, r6
 8007d34:	4622      	mov	r2, r4
 8007d36:	f7ff ff6d 	bl	8007c14 <memcpy>
 8007d3a:	4631      	mov	r1, r6
 8007d3c:	4638      	mov	r0, r7
 8007d3e:	f7ff ff8f 	bl	8007c60 <_free_r>
 8007d42:	e7e9      	b.n	8007d18 <_realloc_r+0x1c>
 8007d44:	4635      	mov	r5, r6
 8007d46:	e7e7      	b.n	8007d18 <_realloc_r+0x1c>

08007d48 <_malloc_usable_size_r>:
 8007d48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d4c:	1f18      	subs	r0, r3, #4
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	bfbc      	itt	lt
 8007d52:	580b      	ldrlt	r3, [r1, r0]
 8007d54:	18c0      	addlt	r0, r0, r3
 8007d56:	4770      	bx	lr

08007d58 <_init>:
 8007d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5a:	bf00      	nop
 8007d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d5e:	bc08      	pop	{r3}
 8007d60:	469e      	mov	lr, r3
 8007d62:	4770      	bx	lr

08007d64 <_fini>:
 8007d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d66:	bf00      	nop
 8007d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d6a:	bc08      	pop	{r3}
 8007d6c:	469e      	mov	lr, r3
 8007d6e:	4770      	bx	lr
